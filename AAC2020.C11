//:ABOUT_THIS_PROJECT:=======================================://

    //: PREVIOUS_LIBRARY: A2_JC.JS ------------------------- ://
    //: CURRENT__LIBRARY: AAC2020                            ://
    //:                                                      ://
    //: Re-write of A2JC ( R:\G\A2_JC ) into C only code.    ://
    //: A2_JC:DEMO[ file:///R:/G/A2_JC/AA2.HTM         ]     ://
    //: A2_JC:ANIM[ https://imgur.com/XiNdLvT          ]     ://
    //: A2_JC:GITH[ github.com/HeavyMetalCookies/A2_JC ]     ://
    //: ---------------------------------------------------- ://

//:=======================================:ABOUT_THIS_PROJECT://
//:DEBUG_CONFIGURATION:======================================://

    #define AAC2020_INCLUDE_GINAWIN ( 1 )

//:==========================================================://
//:NON_DEBUG_CONFIGURATION:==================================://

    #define AAC2020_IS_MULTI_THREADED ( 0 )

    #define AAC2020_LAUNCH_COLOR_PICKER_ON_STARTUP ( 1 )

//:==================================:NON_DEBUG_CONFIGURATION://
//:INCLUDE_DIRECTIVES:=======================================://

    #include "DEP/lodepng.h"  /** https://lodev.org/lodepng/ **/
    #include "DEP/lodepng.c"  /** https://lodev.org/lodepng/ **/

    #include "DEP/PEB2020/PEB2020.H" /* PEB2020_LoadLibraryA  */
    #include "DEP/PEB2020/PEB2020.H" /* PEB2020_GetProcAddress*/

    //:INCLUDE_DIRECTIVES:STANDARD_LIBRARIES:----------------://

        #include <stdio.h>  /**  printf(...) **/
        #include <stdint.h> /**  uintptr_t   **/

    //:----------------:INCLUDE_DIRECTIVES:STANDARD_LIBRARIES://

//:=======================================:INCLUDE_DIRECTIVES://
//:DATA:DATA_BEFORE_FUNCTIONS:===============================://

    #if( AAC2020_INCLUDE_GINAWIN >= 1 )
    #include "LIB/GINAWIN.D._" //:Graphics_Init_And_Window
    #endif

    #include "LIB/DUI.D._"     //:AAC2020_DUI_*_Dialog_UI_Data

    #include "LIB/GRA.D._"     //:AAC2020_GRA_*_Graphics_Data

//:===============================:DATA:DATA_BEFORE_FUNCTIONS://
//:FUNC:FUNCTIONS_AFTER_DATA:================================://

    
    #if( AAC2020_INCLUDE_GINAWIN >= 1 )
    #include "LIB/GINAWIN.F._" //:Graphics_Init_And_Window
    #endif

    #include "LIB/DUI.F._"     //:AAC2020_DUI_*_Dialog_UI_Funcs

    #include "LIB/GRA.F._"     //:AAC2020_GRA_*_Graphics_Funcs

//:================================:FUNC:FUNCTIONS_AFTER_DATA://
//:CLASS:CLASSES_AFTER_FUNCTIONS_AND_DATA:===================://

    //:TRY TO AVOID CLASSES UNLESS ABSOLUTELY NECESSARY.
    //:Pretty sure they are NEVER necessary.
    //:KEEP THIS SECTION EMPTY. DATE[ 2020_10_27 ]

//:===================:CLASS:CLASSES_AFTER_FUNCTIONS_AND_DATA://
//:PUBLIC:PUBLIC_FUNCTIONS_BELOW_DATA_FUNCS_AND_CLASSES:=====://

    //+------------------------------------------------------+//
    //|    Public interface is LAST so that we don't         |//
    //|    accidentially use these files as forward          |//
    //|    declarations. We want a strict ordering of        |//
    //|    functions and data that avoids the need for       |//
    //|    forward declarations.                             |//
    //+------------------------------------------------------+//
    
    #if( AAC2020_INCLUDE_GINAWIN >= 1 )
    #include "LIB/GINAWIN.P._"
    #endif

//:=====:PUBLIC:PUBLIC_FUNCTIONS_BELOW_DATA_FUNCS_AND_CLASSES://
//:MAIN_ENTRY_POINT.DATA:====================================://

    //:This section also known as [global/filescope] variables:

    /** Always store as RGBA. Do not store other formats     **/
    /** in game code. Normalization of data keeps things     **/
    /** simple.                                              **/
    unsigned long AAC2020_last_picked_color_hex=( 0x808080FF );

//:====================================:MAIN_ENTRY_POINT.DATA://
//:MAIN_ENTRY_POINT.TEST_SAVE_PNG_FILE:======================://
    int
    AAC2020_TestSaveFile_PNG()
    {

        /**  Try saving a 512x512 png image using the        **/
        /**  color picker value to set color of all pixels.  **/

        unsigned char pix_arr[512*512*4]; //:AKA[ image ]
        unsigned int  pix_wid=( 512 );
        unsigned int  pix_hig=( 512 );

        //:Extract RGBA:
        #define U32 uint32_t /** unsigned long **/
        #define HEX AAC2020_last_picked_color_hex

            U32 R = (HEX >> 24) & 0xFF;
            U32 G = (HEX >> 16) & 0xFF;
            U32 B = (HEX >>  8) & 0xFF;
            U32 A = (HEX >>  0) & 0xFF;
     
        #undef  HEX
        #undef  U32

        //:Make all alpha 100%:
        for( int i = 0 ; i < (512*512) ; i++ ){
            int pixel_base_address=( i * 4 );
            int r = pixel_base_address + 0;
            int g = pixel_base_address + 1;
            int b = pixel_base_address + 2;
            int a = pixel_base_address + 3;
            pix_arr[ r ]=(    R  );
            pix_arr[ g ]=(    G  );
            pix_arr[ b ]=(    B  );
            pix_arr[ a ]=(    A  );
        };;

        unsigned int result=( 
            lodepng_encode32_file( 
                "FILE.PNG" 
            ,   pix_arr  //:AKA[ image ]
            ,   pix_wid 
            ,   pix_hig
            )
        );;

        return( result );
    }
//:MAIN_ENTRY_POINT.LAUNCH_COLOR_PICKER:=====================://
#define PICKCOLOR_BWO  AAC2020_DUI_AskUserToPickColor_BWO
    int
    AAC2020_MAYBEE_LaunchColorPickerOnStartup(){

    
        //:##################################################://
        #if( AAC2020_LAUNCH_COLOR_PICKER_ON_STARTUP >= 1 ) 
        #define G(a,b,c) a##_##b##_##c
            printf("[Ask_User_To_Pick_Color]");
            
            //:  //: Doing it this way will be impossible
            //:  //: to easily GREP search for.
            //:  unsigned long hex =(
            //:      G(AAC2020_DUI
            //:      , AskUserToPickColor
            //:      , BEFORE_MAIN_WINDOW_OPENS
            //:      )()
            //:  );;

            unsigned long hex=PICKCOLOR_BWO( );

            //:Window's color picker uses BGR (no alpha).
            //:We need to get it into RGBA format.
            AAC2020_last_picked_color_hex=(  0
            |
                ( ( hex >>  0  ) & 0xFF ) << 24 //:RED
            |
                ( ( hex >>  8  ) & 0xFF ) << 16 //:GREEN
            |
                ( ( hex >> 16  ) & 0xFF ) <<  8 //:BLUE
            |
                ( ( 0xFF /** ALPHA **/ )) <<  0 //:ALPHA
            );;

            AAC2020_DUI_MessageBoxForHexValue(
                "[!YOU_ABSOLUTE_LEGEND!]" 
            ,    AAC2020_last_picked_color_hex
            );;
        #undef G
        #endif //:###########################################://
        //:##################################################://

        return( 0 );
    }
#undef PICKCOLOR_BWO
//:=====================:MAIN_ENTRY_POINT.LAUNCH_COLOR_PICKER://
//:MAIN_ENTRY_POINT.TASKS:===================================://


    int
    AAC2020_AFTER__WINDOW_OPENS_TASKS()
    {

        return( 0 );
    }

    int
    AAC2020_BEFORE_WINDOW_OPENS_TASKS()
    {
        AAC2020_DUI_ErrorCheckSizeOfTypes_WINDOWS_10_64BIT();
        AAC2020_MAYBEE_LaunchColorPickerOnStartup();
        AAC2020_TestSaveFile_PNG();
        return( 0 );
    }


//:===================================:MAIN_ENTRY_POINT.TASKS://
//:MAIN_ENTRY_POINT.FUNC.GAME_LOOP:==========================://
    int 
    AAC2020_GameLoop()
    { //:FUNCTION_BODY




        //:TODO: Game update stuff.



        return( 0 );
    } //:FUNCTION_BODY
//:==========================:MAIN_ENTRY_POINT.FUNC.GAME_LOOP://
//:MAIN_ENTRY_POINT.FUNC:====================================://

    int 
    main( void )
    {
        
        //:MAIN_SECTION:001:=================================://
        //:##################################################://
        #if( AAC2020_INCLUDE_GINAWIN <= 0 ) //:##############://

            AAC2020_BEFORE_WINDOW_OPENS_TASKS();
            AAC2020_AFTER__WINDOW_OPENS_TASKS();

        #endif //:###########################################://
        #if( AAC2020_INCLUDE_GINAWIN >= 1 ) //:##############://

            AAC2020_BEFORE_WINDOW_OPENS_TASKS();

        #endif //:###########################################://
        //:##################################################://
        //:=================================:MAIN_SECTION:001://
        //:MAIN_SECTION:002:=================================://
        //:( AAC2020_INCLUDE_GINAWIN >= 1 ):#################://
        #if( AAC2020_INCLUDE_GINAWIN >= 1 ) //:##############://
        #if( AAC2020_INCLUDE_GINAWIN >= 1 ) //:##############://

            AAC2020_GINAWIN.X   = 22  ;
            AAC2020_GINAWIN.Y   = 22  ;
            AAC2020_GINAWIN.WID = 1024;
            AAC2020_GINAWIN.HIG = 512 ;

            AAC2020_GINAWIN_Init( 
                #if(       AAC2020_IS_MULTI_THREADED >= 1 )
                     AAC2020_GINAWIN__MULTI_THREADED
                #endif
                #if(       AAC2020_IS_MULTI_THREADED <= 0 )
                     AAC2020_GINAWIN_SINGLE_THREADED
                #endif
            );;


            if( AAC2020_IS_MULTI_THREADED >= 1 ){

                aac2020_ginawin_WaitHereUntilWindowExists();

            };;

        #endif //:- - - - - - - - - - - - - - - - - - - - - -://
        #if( AAC2020_INCLUDE_GINAWIN >= 1 )  //:- - - - - - -://

            
            AAC2020_AFTER__WINDOW_OPENS_TASKS();
           
            if( AAC2020_GINAWIN.type_of_threading 
            ==  AAC2020_GINAWIN__MULTI_THREADED
            ){

                

                AAC2020_GINAWIN_Wait();

            }else
            if( AAC2020_GINAWIN.type_of_threading 
            ==  AAC2020_GINAWIN_SINGLE_THREADED
            ){

                while( AAC2020_GINAWIN_IsWindowStillOpen() ){

                    AAC2020_GameLoop();

                    /** AAC2020_GINAWIN_LoopTick(); **/
                        AAC2020_GINAWIN_WindowTick(
                            AAC2020_GINAWIN_SINGLE_THREADED
                        );;
                
                        #if( AAC2020_GINAWIN_BUGHUNT_001 >= 1 )
                    
                            static int counter=( 0 );
                            counter++;
                            if( counter % ( 512*512 ) == 0 ){
                                printf("YOLO\n");
                            };;
                    
                        #endif
                };;
            };;
        #endif //:###########################################://
        #endif //:###########################################://
        //:#################:( AAC2020_INCLUDE_GINAWIN >= 1 )://
        //:=================================:MAIN_SECTION:002://
    }

//:====================================:MAIN_ENTRY_POINT.FUNC://