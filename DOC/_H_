//:[_H_]: Hashtag Comments. For ANYTHING! ================== ://
/** ******************************************************** ***
    NEWEST_COMMENTS_ALWAYS_GO_TO_THE_TOP_OF_THIS_FILE
    SO_WE_HAVE_A_RECORD_OF_WHAT_WAS_DONE_IN_WHAT_ORDER

    //#   VIDEO COMMENT TIMESTAMP EXAMPLE   #//
    //( @VID_IID@[ 0045 ]TIME[ 5H33M0S    ] )//  
    //( @VID_URL@[ TODO_YOUTUBE_VIDEO_URL ] )//
    //[   VIDEO COMMENT TIMESTAMP EXAMPLE   ]//
*** ******************************************************** ***

#_I_WAS_WRONG_ABOUT_29_AND_30_##################################

    @VID_IID[ 0251 ]TIME[ 09:08:23 ]EXPLAINED

    ## SKIP: 29. AAC2020_UILISTS_Put_ButMai <-- Need GPU Getter
    ## SKIP: 30. AAC2020_UILISTS_Put_ButExt <-- Need GPU Getter

        WRONG: AAC2020_FRAGCOM_Get_ButMai
        WRONG: AAC2020_FRAGCOM_Get_ButExt

        WRONG: AAC2020_UILISTS_Get_ButMai
        WRONG: AAC2020_UILISTS_Get_ButExt

        WRONG: AAC2020_UISHARE_Get_ButMai
        WRONG: AAC2020_UISHARE_Get_ButExt

    ## TODO: AAC2020_UISHARE_Get_but_pix

    ## TODO: Create a sub library for outlawing certain
    ##       function names.
    ##       EXAMPLE:
    ##       #define AAC2020_FRAGCOM_Get_ButMai "DONT_USE_THIS"
    ##
    ##       1234567
    ##       TOUTLAW <-- Token_OUTLAW 
    ##                   Token==[ variable | function | define ]
    ##

##################################_I_WAS_WRONG_ABOUT_29_AND_30_#
#_TAUDEPO_GET_BUT_FOR_FRAG_SHADERS_#############################

    LIKE[ AAC2020_TAUDEPO_Get ]BUT_FOR_FRAGMENT_SHADER_CODE

    CTRL_F_HELP:
    ------------------------------------------------------------
    taudepo-get-for-fragment-shaders
    taudepo_get_for_fragment_shaders

    taudepo-for-frags
    taudepo-for-frags
    
    taudepo-frags
    taudepo_frags
    
    taudepo-frag
    taudepo_frag
    ------------------------------------------------------------

    SEE[ aac2020_taufrag_pix_dex ]
    SEE[ aac2020_taufrag_Get_U32 ]

#############################_TAUDEPO_GET_BUT_FOR_FRAG_SHADERS_#
#_BACKUP_OR_RESTORE_PIXNAME_MEMORY_#############################

    CTRL_F_HELP:
    ------------------------------------------------------------
    #_BACKUP_AND_RESTORE_# #_RESTORE_AND_BACKUP_#
    #_BACKUP_OR_RESTORE_#  #_RESTORE_OR_BACKUP_#

    #_BACKUP_PIXNAME_# #_RESTORE_PIXNAME_#
    #_BACKUP_TAUDEPO_# #_RESTORE_TAUDEPO_#
    #_BACKUP_PAINT5D_# #_RESTORE_PAINT5D_#

    backup-pixname | backup_pixname 
    backup-taudepo | backup_taudepo 
    backup-paint5d | backup_paint5d 
                                     
    restore-pixname | restore_pixname  
    restore-taudepo | restore_taudepo  
    restore-paint5d | restore_paint5d  

    backup-and-restore | restore-and-backup
    backup_and_restore | restore_and_backup

    backup-or-restore | restore-or-backup
    backup_or_restore | restore_or_backup
    ------------------------------------------------------------

    USE: PIXBACK ( To backup PIXNAME 512x512 memory blocks )

        TAUDEPO:
            AAC2020_PIXBACK_Backup_taudepo( &(nil_u08) )
            AAC2020_PIXBACK_Restore_taudepo(&(nil_u08) )

        PAINT5D:
            AAC2020_PIXBACK_Backup_paint5d( &(nil_u08) )
            AAC2020_PIXBACK_Restore_paint5d(&(nil_u08) )

#############################_BACKUP_OR_RESTORE_PIXNAME_MEMORY_#
#_HOW_TO_GET_MOUSE_COORD_IN_FRAGSHADER_CODE_####################

    CTRL_F_HELP:
    ------------------------------------------------------------
    how-to-get-mouse-in-fragshader-code
    how_to_get_mouse_in_fragshader_code
    how-to-get-mouse
    how_to_get_mouse
    get-mouse
    get_mouse
    mouse-get
    mouse_get
    get-imouse
    get_imouse
    imouse_get
    imouse-get
    ------------------------------------------------------------

    #_GET_MOUSE_COORD_#:GPU_SIDE:

         USE[ FRAGCOM_GET_mou_glo ]
        FILE[ FRAGCOM.FRA._       ]

    #_GET_MOUSE_COORD_#:CPU_SIDE:

        [TODO]: Document this next time you are looking
                for it and end up here.

        ADD_CODE_TO[ AAC2020_POLYOGL_Get_iMouse_X ]
        ADD_CODE_TO[ AAC2020_POLYOGL_Get_iMouse_Y ]


####################_HOW_TO_GET_MOUSE_COORD_IN_FRAGSHADER_CODE_#
#_UICLICK_PAPER_TRAIL_##########################################

    UICLICK paper trail.
    Basically writing code that will never execute to 
    help us find our way around the code when we
    look in places that.... the code IS NOT but places
    that we are likely to look for it.

    //: This is __NOT__ where we want to call    ://
    //: code from. But put in here to make it    ://
    //: easier to find the code we want to find. ://

##########################################_UICLICK_PAPER_TRAIL_#
#_PHYSICALLY_FLAT_##############################################
#_MENTALLY_NESTED_##############################################

    YOU_MEAN[ @_PHYSICALLY_FLAT_@ | @_MENTALLY_NESTED_@ ]

##############################################_PHYSICALLY_FLAT_#
##############################################_MENTALLY_NESTED_#
@_PHYSICALLY_FLAT_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    I want my code to have a physically flat structure in
    the source. 

    Do not write "self documenting code" that forces you
    to make the code physically nested just because
    some aspects are "@_MENTALLY_NESTED_@"

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_PHYSICALLY_FLAT_@
@_MENTALLY_NESTED_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    Just because the code structure is FLAT does not mean
    that some concepts have a "mental" tree associated with
    them.

    For example: LIBCHAN source code is 100% linear/flat.
                 But it represents a solution to a 
                 depedency graph.

    Just because the mental conception of the code is
    BRANCHING/NESTED/TREE does not mean the code needs
    to be that way. 

    In fact, making the code 100% reflect our mental
    models could impose un-necessary structure that
    makes the code harder to work with.

    @VID_IID[ 0204 ]TIME[ 00:40:00 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_MENTALLY_NESTED_@
@_FROM_FUTURE_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_FROM_FUTURE_@ : Means the sub-library somehow has
                      knowledge of future items in the 
                      LIBCHAN.

                      This violates our "Layered On Approach"

                      But sometimes a consolidated index of
                      certain things. For example
                      : "All editors current and future"
                      is very useful to working with and
                      understanding the code.

                      @VID_IID[ 0204 ]TIME[ 00:22:22 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_FROM_FUTURE_@
#_FROM_FUTURE_##################################################

    YOU_MEAN[ @_FROM_FUTURE_@ ]
    
##################################################_FROM_FUTURE_#
#_LAYERED_SYSTEMS_2021_03_######################################

    @VID_IID[ 0204 ]TIME[ 00:19:23 ]

    The design of this code base is such that when we create
    a new sub-library it should always be OKAY to tack it
    on to the VERY END (last element) of the LIBCHAN.

    Sometimes this means we have systems that need to know
    about future systems... Which breaks our layered on 
    design.... But it is better than requiring that a
    certain system always be LAST.
    
    Because if we require a certain system to be last,
    then we cannot gaurantee tacking onto the end of the
    libchan will always work without fail.

    TL;DR 
        Always allow tacking to end of LIBCHAN for new systems.

######################################_LAYERED_SYSTEMS_2021_03_#
@_XY_TO_INDEX_FORMULA_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    Means we are using the standar "xy to index" formula
    that takes XY location and convert it to 1D index based
    on scanline order. (right to left) then (top to bottom)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_XY_TO_INDEX_FORMULA_@
#_UILISTS_ORIGINAL_THOUGHTS_####################################

    @VID_IID[ 0203 ]TIME[ 02:22:42 ]
    SEE[ DOC/TRASH/010._ ]

####################################_UILISTS_ORIGINAL_THOUGHTS_#
#_TAUNAME_NOT_FOR_REMAPPING_####################################

    [ AAC2020_TAUNAME_edivars ] not to be used as a
    "symbolic constant" to allow flexibility in code.

    [ AAC2020_TAUNAME_edivars ] to be used as a formalization
    of the meaning of [ TAU_015 ].

    In other words, this is always true:

        assert( AAC2020_TAUNAME_edivars == TAU_015 == 15 )

    @VID_IID[ 0203 ]TIME[ 00:28:00 ]

####################################_TAUNAME_NOT_FOR_REMAPPING_#
#_TAUNAME_NOT_TO_BE_USED_FOR_FLEXIBILITY_#######################
#TAUNAME_NOT_TO_BE_USED_FOR_FLEXIBILITY#########################

    SUMMARY:
        CORRECT:
        [AAC2020_TAUNAME_edivars] is an ALIAS for [TAU_015]

        WARNING:
        [AAC2020_TAUNAME_edivars] is NOT A WAY TO FLEXIBLY    
        RE_LOCATE MEMORY BY CHANGING IT'S UNDERLYING VALUE!
        @VID_IID[ 0203 ]TIME[ 00:22:26 ]
        DATE[ 00:24:00 ]

    //|@VID_IID[ 0203 ]TIME[ 00:12:00 ]                 |//
    //+# YES: USE FOR ASSERTS                           +//
    //+# YES: USE FOR HIGH LEVEL UNDERSTANDING          +//
    //[#  NO: NOT TO BE USED TO FLEXIBLY CHANGE MEMORY #]//
     
    //[ WRONG !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!        ]//
    //- AAC2020_TAUDEPO_Put(                            -//
    //-     AAC2020_TAUNAME_edivars //:<-- @_NOT4FLEX_@ -//
    //- ,   AAC2020_TAUDEPO.PAINT5D                     -//
    //- ,   AAC2020_TAUDEPO.P5D_VP1                     -//
    //- ,   x_0,x_1,y_0,y_1                             -//
    //- );;                                             -//
    //| CORRECT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!        |//
    //+ assert( AAC2020_TAUDEPO_TAU_015                 +//
    //+      == AAC2020_TAUNAME_edivars );;             +//
    //+ AAC2020_TAUDEPO_Put(                            +//
    //+     AAC2020_TAUDEPO_TAU_015 //:<-- @_NOTABS_@   +//
    //+ ,   AAC2020_TAUDEPO.PAINT5D                     +//
    //+ ,   AAC2020_TAUDEPO.P5D_VP1                     +//
    //+ ,   x_0,x_1,y_0,y_1                             +//
    //+ );;                                             +//

#######################_TAUNAME_NOT_TO_BE_USED_FOR_FLEXIBILITY_#
#########################TAUNAME_NOT_TO_BE_USED_FOR_FLEXIBILITY#
#TAUNAME_ORIGINAL_THOUGHTS######################################
#_TAUNAME_ORIGINAL_THOUGHTS_####################################

    @VID_IID[ 0203 ]TIME[ 00:08:42 ]
    Be careful, don't "over contanerize" your code.
    But also don't make "spaghetti code"

    //:Ask yourself a serious question...
    //:"What is the purpose of a struct?"
    //:Do you need a struct to organize ideas? NO.
    //:Do you need a struct to pass around groups of data? YES.
    //:Let's use TAUNAME as a centralized way to formalize
    //:how certain data is used. But we don't need to go so
    //:far as making as struct. We don't even have to use
    //:TAUNAME variables in the code. It's just a self
    //:documenting piece of code that gives me a high level
    //:view of how different sections of TAUDEPO memory are
    //:used at the highest level.
    //:DATE[ 2021_03_21 ]


    //:Comes after TAUDEPO and allows us to give
    //:more meaningful names to the TAU_### indexes.
    //:
    //:We dont want more than one way to do something.
    //:So just use TAUNAME to do static asserts on other
    //:code to make sure you are using the correct "TAU"
    //:in your code. Don't use "TAUNAME" to make code
    //:"more flexible" and be able to move around blocks
    //:of variables to different locations.

######################################TAUNAME_ORIGINAL_THOUGHTS#
####################################_TAUNAME_ORIGINAL_THOUGHTS_#
#_UI_BOTTON_THOUGHTS_###########################################

    The only thing the GPU needs is text to display 
    in the button. 4 pixels is enough for
    two different sets of 7 letters + null terminators.

        RGBARGBA
        STA_001 <--+
                    \___ 8 pixels total
                    /
        STA_002 <--+
        RGBARGBA

        +-----+
        |     |
        +-----+
        |     |
        +-----+

        Shared UI Buttons
        +---+ 
        |   | 
        +---+ 
        |   | 
        +---+ 
        |   | 
        +---+ 

    32x32 == 128x128 characters

    2 pixels == 8 character bytes.
    2 pixels == 7 letters + null terminator

    2 :  pixels for button text
    30: pixels for button state

    SIMPLIFY!
    4 PIXELS :
        2 pixels unclick    ( RGBARGBA )
        2 pixels mouse down ( RGBARGBA )

###########################################_UI_BOTTON_THOUGHTS_#
#_ABOUT_E_S_MACROS_#############################################

        //:#_ABOUT_E_S_MACROS_#://                 //| # |//
                                                   //| # |//
        #define            E_S_private( e_m ) #e_m //| # |//
        #define E_S( e_m ) E_S_private( e_m )      //| # |//
                                                   //| # |//
        @VID_IID[ 0183 ]TIME[ 02:24:32 ]

        INSTEAD___OF:  ERR(     "SOME_ERROR_MESSAGE_STRING"  );
        WE_CAN_WRITE:  ERR( E_S( SOME_ERROR_MESSAGE_STRING ) );

#############################################_ABOUT_E_S_MACROS_#
#_WHERE_TO_FIND_WINDOW_RESIZE_HOOKS_############################

    #_WHERE_TO_FIND_WINDOW_RESIZE_CALLBACKS_#
    #_WINDOW_RESIZE_CALLBACKS_#
    #WHERE_TO_FIND_WINDOW_RESIZE_CALLBACKS#
    #WINDOW_RESIZE_CALLBACKS#

    @VID_IID[ 0183 ]TIME[ 00:28:13 ]LOOKING_FOR_RESIZE_PROCS
    @VID_IID[ 0183 ]TIME[ 00:36:13 ]FOUND_LOCATIONS_I_WANTED

    LOCATIONS: 

        #[1,0,0]: AAC2020_CPUNIFO_LoopTick

        #[2,0,0]: aac2020_paint5d_LoopTick
        #[2,1,0]:   AAC2020_PAINT5D_IOU_ViewportRectangles
        #[2,1,1]:        AAC2020_PAINT5D_PUT_rec_inc_ALL

############################_WHERE_TO_FIND_WINDOW_RESIZE_HOOKS_#
@MIN_CEL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@MAX_CEL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_MIN_CEL_@ : TOP_LEF cell of[ cell_selection_rectangle ].
    @_MAX_CEL_@ : BOT_RIG cell of[ cell_selection_rectangle ].

    EXAMPLE: @VID_IID[ 0182 ]TIME[ 04:34:14 ]
    ------------------------------------------------------------
        UIRECTS.D._ creates a pixel selection rectangle by
                    specifiying #DIA_VAR_CEL# cells.

        UIRECTS.F._ Calls[ AAC2020_TAUDUMP_SubSection ]
                    to paste UIRECT's hard coded asset
                    into a subsection of taudepo memory.

        Goal: Encode font glyphs into a portion of the
              free space in[ AAC2020_PIXNAME_taudepo_cpu_pix ]
    ------------------------------------------------------------


@_S_FMT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@_S_TYP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_SRC_FMT / @SRC_FMT: SOURCE_FORMAT
    @_SRC_TYP / @SRC_TYP: SOURCE_TYPE

    @VID_IID[ 0182 ]TIME[ 02:44:14 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_S_FMT@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_S_TYP@
@_ScanLineOrder_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    Probably means a doubly nested loop where
    "Y" axis is the outer loop and "X" axis is the
    inner loop.

    This might seem like a pattern breaker because we usually
    want to write "x" then "y" for consistency.
    But in this case we want the result of the innermost
    scope to traverse the pixels in scanline order.

    (Left to right, then top to bottom)

    @VID_IID[ 0182 ]TIME[ 02:02:30 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_ScanLineOrder_@
@PAT_BRK@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_PAT_BRK_@: Shorthand for[ @_PATTERN_BREAKER_@ ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PAT_BRK@
@_PATTERN_BREAKER_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@PATTERN_BREAKER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_PATTERN_BREAKER_@ :
        Code that breaks the regularity of the structure.
        And... It sucks... But the real world is messy
        sometimes.

        This is an attempt to put a bandaid on the
        situation by making note of it.

        @VID_IID[ 0182 ]TIME[ 02:25:00 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_PATTERN_BREAKER_@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PATTERN_BREAKER@

@_DONT_YOU_FUCKING_DARE_REFACTOR_THIS_@@@@@@@@@@@@@@@@@@@@@@@@@@

    @DONT_YOU_FUCKING_DARE_REFACTOR_THIS:

        AKA: I know what I am doing and have reasons for
             why I wrote the code the way I wrote it.

             Long parameter lists are a good thing.
             Putting all the params into an object
             makes the code LESS readable.

             READABLE: I can print off the code on paper
                       and literally read it.

                       If I need intellisense to understand
                       it... Then it's NOT READABLE.
                       @VID_IID[ 0182 ]TIME[ 00:55:42 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@_DONT_YOU_FUCKING_DARE_REFACTOR_THIS_@
@_DONT_U_FUCKING_DARE_REFACTOR_THIS_@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    SHORTHAND_FOR: @_DONT_YOU_FUCKING_DARE_REFACTOR_THIS_@

@@@@@@@@@@@@@@@@@@@@@#@@@@@@_DONT_U_FUCKING_DARE_REFACTOR_THIS_@
@_INTENTIONAL_DATA_CLUMP_CODE_SMELL_@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @INTENTIONAL_DATA_CLUMP:

        Means the parameter list is intentionally using
        a large number of parameters that are always
        passed together in exactly that order.

        DON_T FUCKING REFACTOR IT!

        The idea:

            1. Reduce abstraction
            
            2. Make the code __MORE__ readable.

            ( Using intellisense to have to peek into an )
            ( object passed to a function is __NOT__     )
            ( readable code. Readable means I can print  )
            ( it out on paper and literally read it.     )

@@@@@@@@@@@@@@@@@@@@@@@@@@@@_INTENTIONAL_DATA_CLUMP_CODE_SMELL_@
#_CPU_PIX_MIS_SPELLINGS_########################################

    @VID_IID[ 0181 ]TIME[ 04:42:52 ]

    WRONG[   AAC2020_PIXNAME_cpu_pix_TAUDEPO ]
    WRONG[   AAC2020_PIXNAME_cpu_pix_PAINT5D ]
    WRONG[   AAC2020_PIXNAME_cpu_pix_TODO_02 ]
    WRONG[   AAC2020_PIXNAME_cpu_pix_TODO_03 ]

    CORRECT[ AAC2020_PIXNAME_taudepo_cpu_pix ]
    CORRECT[ AAC2020_PIXNAME_paint5d_cpu_pix ]
    CORRECT[ AAC2020_PIXNAME_todo_02_cpu_pix ]
    CORRECT[ AAC2020_PIXNAME_todo_03_cpu_pix ]

########################################_CPU_PIX_MIS_SPELLINGS_#
@STATIC_MEMORY@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@DYNAMI_MEMORY@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_STATIC_MEMORY_@ : TAU texture memory that should not
                        be changed after it has been set.
                        For example the glyph font used by
                        UIRECTS system.
    
    @DYNAMIC_MEMORY@  :
    @_DYNAMIC_MEMORY_@:
    @_DYNAMI_MEMORY_@ : TAU texture memory that is dynamic and
                        changes often during [editing|gameplay].
                        Should use commands:

                        AAC2020_TAUDEPO_Put( ....... )
                        AAC2020_TAUDEPO_Get( ....... )
                        AAC2020_TAUSYNC_Run( WET_RUN )
                        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@STATIC_MEMORY@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DYNAMI_MEMORY@
#__TOP_LEVEL_CELLS_#############################################
#_DEX_TAU_RES_##################################################

    @VID_IID[ 0181 ]TIME[ 03:23:32 ]UIR_SECTION_RESERVED

    We have a lot of un-used sectors in the TAUDEPO memory.
    Lets try to use the top-level cell zero(0)to store
    UIRECT font glyphs.

    Also thinking....

        +-----------+ +-----------+
        | STATIC_MEM| | DYNA__MEM |
        V           V V           V 
        +- - - - - -+ +- - - - - -+
        | UIR . --- | | --- . --- |
        | 000 . 001 | | 002 . 003 |
        +- - - - - -+ +- - - - - -+
        | --- . --- | | --- . --- |
        | 004 . 005 | | 006 . 007 |  <<<<<< _TOP_LEVEL_CELLS_
        +- - - - - -+ +- - - - - -+
        | --- . --- | | --- . --- |
        | 008 . 009 | | 010 . 011 |
        +- - - - - -+ +- - - - - -+
        | --- . --- | | --- . TAU |
        | 012 . 013 | | 014 . 015 |
        +- - - - - -+ +-----+-----+
        
        #_DEX_TAU_RESERVATIONS_##  000 : UIR : UIRECTS
        #_DEX_TAU_RESERVED_######  001 : --- : un_used
        #_DEX_TAU_RES_###########  002 : --- : un_used
        +-----+-----+-----+-----+  003 : --- : un_used
        | UIR | --- | --- | --- |  004 : --- : un_used
        | 000 | 001 | 002 | 003 |  005 : --- : un_used
        +-----+-----+-----+-----+  006 : --- : un_used
        | --- | --- | --- | --- |  007 : --- : un_used
        | 004 | 005 | 006 | 007 |  008 : --- : un_used
        +-----+-----+-----+-----+  009 : --- : un_used
        | --- | --- | --- | --- |  010 : --- : un_used
        | 008 | 009 | 010 | 011 |  011 : --- : un_used
        +-----+-----+-----+-----+  012 : --- : un_used
        | --- | --- | --- | TAU |  013 : --- : un_used
        | 012 | 013 | 014 | 015 |  014 : --- : un_used
        +-----+-----+-----+-----+  015 : TAU : TAUDEPO

##################################################_DEX_TAU_RES_#
##############################################_TOP_LEVEL_CELLS_#
#_DOUBLE_SQUARE_BRACKET_MACROS_#################################

    @VID_IID[ 0177 ]TIME[ 02:55:13 ]
    When we decide a macro SHOULD NOT be used, we surround
    it in double square brackets to intentionally cause
    compiler error if the macro value is referenced.

    Usually we do something like:

        #define MY_MACRO "DONT_USE_THIS_MACRO"

    But we can't use that strategy in fragment shader code
    because fragment shader code must be wrapped in a
    string and the double quote characters will destroy
    my preprocessing steps. (I use AWK command in bash
    script to wrap fragment code into shader strings. )
    ------------------------------------------------------------

        #define TAU   [[taudepo]]  
        #define P5D   [[paint5d]] 

        #define TAU   [[ 0 ]]       
        #define P5D   [[ 1 ]] 

    ------------------------------------------------------------

#################################_DOUBLE_SQUARE_BRACKET_MACROS_#
#_EXT_COM_2020_03_13_315PM_#####################################

    EXTRACTED_IN_THIS_VIDEO: VID_IID[ 0177 ]TIME[ 01:08:32 ]

    ------------------------------------------------------------

    /** FUNC[  TexelFetch_U32XY ]      **/ //[ x ]//
    /** ADDED[ DATE[ 2021_02_22 ]     ]**/ //[ x ]//
    /** VID_IID[ 0151 ]TIME[ 01:14:32 ]**/ //[ x ]//

    ------------------------------------------------------------

#####################################_EXT_COM_2020_03_13_315PM_#
#_EXTRACTED_COMMENT_2021_03_13_313PM_###########################
#_EXT_COM_2021_03_13_313PM_#####################################
    
    EXTRACTED_IN_THIS_VIDEO: VID_IID[ 0177 ]TIME[ 01:07:05 ]
    ------------------------------------------------------------

    @VID_IID[ 0086 ]TIME[ 01:29:10 ]   //[ x ]//
    Bit shifting code copied directly  //[ x ]//
    from                               //[ x ]//
    aac2020_paint5d_UTC_BitPack_Get 's //[ x ]//
    bitshift code because we are       //[ x ]//
    really good at fucking up          //[ x ]//
    trivial bit shifting code.         //[ x ]//
                                       //[ x ]//
    @VID_IID[ 0092 ]TIME[ 00:32:23 ]   //[ x ]//
    Code relocated to here because we  //[ x ]//
    mistakenly thought native GLSL     //[ x ]//
    texelFetch returned a unit32 but   //[ x ]//
    actually                           //[ x ]//
    returns a [ uvec4 / UV4 ]          //[ x ]//

    ------------------------------------------------------------

#####################################_EXT_COM_2021_03_13_313PM_#
###########################_EXTRACTED_COMMENT_2021_03_13_313PM_#
#_PAINT5D_BLENDING_NOTES_#######################################

    @VID_IID[ 0170 ]TIME[ 01:42:50 ]

    Josh likes to work from DARK TO LIGHT... So make something
    that works with that.

    BOTTOM_LAYER:  Dark Base Colors
    MID____LAYER:  Darken  Via Multiply
    TOP____LAYER:  Lighten Via Addition


#######################################_PAINT5D_BLENDING_NOTES_#
@__DO_SET__@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @DOSET@ @DO_SET@ @DoSet@
    @_DO_SET_@

    The opposite of "UnSetting" something.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@__DO_SET__@
#WHERE_IS_THE_DRAG_CODE#########################################

    Control+F help:

        WHERE_IS_THE_CLICK_AND_DRAG_CODE
        CLICK_AND_DRAG_CODE

#########################################WHERE_IS_THE_DRAG_CODE#
#MY_MIND########################################################

    #_MY_MIND_# : Literally My Brain.
                  But... Not literally changing it.
                  Metophorically "changing my mind" means
                  that we have "overturned" our previous
                  decision based on new thought processes.

    @VID_IID[ 0163 ]TIME[ 04:03:04 ]

########################################################MY_MIND#
#_ZOOM_DRAG_CLICK_CONTROL_F_HELP_2021_02_01_####################

    @VID_IID[ 0162 ]TIME[ 00:30:42 ]
    Things that don't exist and what I was probably 
    looking for. We want to make the code base easy
    to[ search around / look around ] because we 
    will inevitably forget what is all in this
    massive code base.

    SEARCHED[ ZOOMFUN ]YOU_PROBABLY_WANT[ ZOOMCOM ]
    SEARCHED[ DRAGFUN ]YOU_PROBABLY_WANT[ DRAGCOM ]
    SEARCHED[ CLIKFUN ]YOU_PROBABLY_WANT[ CLICKOM ]
    SEARCHED[ CLICFUN ]YOU_PROBABLY_WANT[ CLICKOM ]

####################_ZOOM_DRAG_CLICK_CONTROL_F_HELP_2021_02_01_#
#_WE_MIGHT_NOT_NEED_THESE_2021_03_01_###########################

    ZOOMCOM : Zoom  common helper functions.
    DRAGCOM : Drag  common helper functions.
    CLICKOM : Click common helper functions.

    TO BE USED BY:
        
        1. EDITCAM <-- editor camera style functions.
        2. GAMECAM <-- game   camera style functions.

        +--------------+
        |   ZOOMCOM    |        1:  ZOOMCOM     1:  DRAGCOM
        |   DRAGCOM    |        2:  DRAGCOM     2:  CLICKOM
        |   CLICKOM    |        3:  CLICKOM     3:  ZOOMCOM
        +------^^------+        4:  EDITCAM     4:  GAMECAM
               ^^               5:  GAMECAM     5:  EDITCAM
           +---^^----+
           | EDITCAM |          @VID_IID[ 0162]T[ 00:27:23 ]
           | GAMECAM |          LIBCHAN order is one of many
           +---------+          possible dependency graph
                                solutions.

###########################_WE_MIGHT_NOT_NEED_THESE_2021_03_01_#
#_TRASH_COMMENT_EDITCAM_2021_02_27_#############################

    cam_exp : Camera Size In Pixels specified using an 
              exponent. Same math as[ til_exp ].(TileExponent)
              EXAMPLE: (cam_exp==4)==>( 2^4 )==>( 16 )

    pixstep : PIXel_STEP:
              Amount to shrink of squash camera width and
              height by. Measured in pixels.
              EXAMPLE: (pixstep==2) ==> Push Or Pull Each
                       edge of camera by ONE(1) pixel.

              EXAMPLE: (pixstep==1) ==> INVALID!!! Because
                        camera must be [pushed|pulled] on
                        appossing edges at same time and
                       (pixstep==1) implies a 0.5 [push|pull]
                        on each edge of camera rectangle.

    Tables below are extrapolated 
    from[ AAC2020_EDITCAM_tab_zom_san ]

#############################_TRASH_COMMENT_EDITCAM_2021_02_27_#
@_CALLBACKS_ARE_EVIL_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0151 ]TIME[ 03:23:23 ]

    @CALLBACKS_ARE_EVIL@:

        EVIL REASON #1:

            Callbacks can make it so you accidentially
            execute code on the wrong thread.

        EVIL REASON #2:

            Callbacks make the code hard to READ.
            (1 more layer of indirection minimum)

        EVIL REASON #3:

            Callbacks make the code hard to DEBUG.

        EVIL REASON #4:

            Callbacks add lots of extra code:

            1. Will need a function pointer typedef
               for the callback function.

            2. Will need a "WireUpCallback" function.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_CALLBACKS_ARE_EVIL_@
#TOP_LEFT_PIXEL_OF_2X2_CLUSTER##################################
    
    @VID_IID[ 00:59:00 ]

    Every variable on taudepo texture is stored in a 2x2
    cluster of 4 pixels. When trying to get ONE XY coordinate
    representing this cluster, we get the coord of the
    TOP_LEF (top-left) pixel. Because graphical origin.

##################################TOP_LEFT_PIXEL_OF_2X2_CLUSTER#
@_SHOULD_NOT_BE_NEGATIVE_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @SHOULD_NOT_BE_NEGATIVE:

        Means same thing as @NEVER_NEGATIVE
        but emphasizes the idea that it "CAN" be negative
        but for PROPER/CORRECT code it SHOULD_NOT be
        negative.

        @VID_IID[ 0151 ]TIME[ 00:53:50 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_SHOULD_NOT_BE_NEGATIVE_@
@POSSIBLE_PROBLEM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_POSSIBLE_PROBLEM_@:
        It __MIGHT__ be a problem. But not necessarily.
        More understanding of code would let you know
        for sure.

        @VID_IID[ 0151 ]TIME[ 00:27:23 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@POSSIBLE_PROBLEM@
#_PONG_HALLWAY_2021_############################################

    @VID_IID[ 0140 ]TIME[ 01:18:32 ]
    Explaining range mapping using
    fake-3d pong example.

    +----------------------+
    |\                    /|
    | \                  / |
    |  \________________/  |
    |  |\              /|  |
    |  | \            / |  |
    |  |  \__________/  |  |
    |  |  |__________|  |  |
    |  |  /          \  |  |
    |  | /            \ |  |
    |  |/______________\|  |
    |  /                \  |
    | /                  \ |
    |/                    \|
    +----------------------+

############################################_PONG_HALLWAY_2021_#
@_PAIRED_COMMENT_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@PAIRED_COMMENT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_PAIRED_COMMENT_@    :
    @_PAR_COM_@ @PAR_COM@ :
    @_PARCOM_@   @PARCOM@ :
    
        A comment that is supposed to be paired with
        another comment in another block of code somewhere.
        This OTHER block of code may be in a seperate file
        or it may be in the same file.

        But the point is that.... There is ANOTHER
        block of code somewhere and you really need to
        look at that other block of code to fully
        understand the comment you are looking at.

        @VID_IID[ 0136 ]TIME[ 00:56:42 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_PAIRED_COMMENT_@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PAIRED_COMMENT@ 
#_FUCK_THIS_REMAPPING_FORMULA_REMOVED_##########################

        /** ******************************************** ***
            1. Convert s_x to local within [ s[x|y][0|1] ]
            2. Apply correct scalefactor to make local
            to SOURCE a local to DEST.
            3. Re-add the orgin we took away to make
            local to the DEST block.
            
            DST / SRC == SCALE_FACTOR
            DST       == SCALE_FACTOR * SRC
            ( SCALE_FACTOR == [ f_x , f_y ] )
            
            sx0              dx0  
            sy0              dy0  
            +---------+      +---------+
            |(REC_SRC)|      |(REC_DST)|
            |   s_x >>>>>>>>>>>> d_x   |
            |   s_y   |      |   d_y   |
            +---------+      +---------+
                    sx1              dx1
                    sy1              dy1

                        [s_x,s_y]
                           |||          
            REC_SRC: [ 0 ][ 1 ][ 2 ]       
            REC_DST: [ 0 ][ 1 ][ 2 ]   [ 3 ]  [ 4 ][ 5 ][ 6 ]
                      SX0       SX1     |||             [DX1]
                      SY0       SY1  [d_x,d_y]          [DY1]
                      |||
                      DX0
                      DY0

    
            @VID_IID[ 0135 ]TIME[ 06:46:00 ]FILLING_OUT_FORMULA

                Offset yeids off by 1, but if we
                remove the[ +1.0 ]we get exactly 2 
                instead of 2.333

                f_x =( (  6  -  0  + 1.0) / (  2  -  0 + 1.0) );
                f_y =( (  6  -  0  + 1.0) / (  2  -  0 + 1.0) );

                f_x =( 2.333 );
                f_y =( 2.333 );

            @VID_IID[ 0135 ]TIME[ 06:54:23 ]FILLING_OUT_FORMULA
            
                d_x = floor(  0 + ((  1  -  0 ) * 2.333 ));
                d_y = floor(  0 + ((  1  -  0 ) * 2.333 ));

        *** ******************************************** **/
        //: F32 f_x; /**Scale Factor SRC-to-DST x-axis **/
        //: F32 f_y; /**Scale Factor SRC-to-DST y-axis **/

        #define O_O ( 1.0 ) //:WAS_WRONG@VID_IID[ 0134 ] ://
        #define Z_Z ( 0.0 ) //:NO_OFFSET@VID_IID[ 0135 ] ://
                            //:         TIME[ 07:00:00 ] ://
                            //:         TIME[ 07:08:23 ] ://
        
        //:ORIGINAL ATTEMPT WITH ORIGINAL DIAGRAM:
        f_x =( ( DX1 - DX0 + O_O) / ( SX1 - SX0 + O_O) );
        f_y =( ( DY1 - DY0 + O_O) / ( SY1 - SY0 + O_O) );
        d_x = MAK_I32( DX0 + (( S_X - SX0 ) * f_x ) );
        d_y = MAK_I32( DY0 + (( S_Y - SY0 ) * f_y ) );

        #undef  Z_Z
        #undef  O_O

##########################_FUCK_THIS_REMAPPING_FORMULA_REMOVED_#
@SQUARE_RECTANGLE_PROBLEM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    #_SQUARE_RECTANGLE_PROBLEM_#  << WRONG___TAG
    #SQUARE_RECTANGLE_PROBLEM#    << WRONG___TAG

    @_SQUARE_RECTANGLE_PROBLEM_@  << CORRECT_TAG
    @SQUARE_RECTANGLE_PROBLEM@    << CORRECT_TAG

        A square is a always a rectangle. But a rectangle
        may or may not be a square.

        I tend to use this comparison a lot, so making a
        hashtag for this analogy.

        Uncertain if this comment tag fits more under
        "@" or "#" so put it under both.

        Hmm... makes more sense as a "@" because it
        can apply to a varied array of comments not
        just a specific extracted comment.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SQUARE_RECTANGLE_PROBLEM@
@DATA_LOADING@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_DATA_LOADING_@ :
        Like @_TILE_LOADING_@ but more generic.
        @_TILE_LOADING_@  __IS__ @_DATA_LOADING_@

        BUT...

        @_DATA_LOADING_@  may or may not be @_TILE_LOADING_@

        EXAMPLE_OF[ @SQUARE_RECTANGLE_PROBLEM@ ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DATA_LOADING@
@TILE_LOADING@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_TILE_LOADING_@ :
        A section of code responsible for loading the
        data for a tile set of some sort. Using this tag
        so I can easily find things in the future hopefully.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TILE_LOADING@
@NOT_IMP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@_NOT_IMP_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0128 ]TIME[ 07:45:13 ]

    @_NOT_IMP_@ : NOT_IMPLEMENTED
        
        For when I intentionally don't implement something
        but I want to stub in the function for 
        [ completeness / symmetry ] in the code.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NOT_IMP@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_NOT_IMP_@
@OUT_PAR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@_OUT_PAR_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_OUT_PAR_: Shorthand For[ @_OUT_PARAM_@ ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OUT_PAR@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_OUT_PAR_@
@OUT_PARAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@_OUT_PARAM_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@_OUTPUT_PARAM_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@OUTPUT_PARAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0128 ]TIME[ 07:22:00 ]

    @_OUT_PARAM_@:

        Means the actual argument or formal_parmater
        is used as an output param. Meaning if you look
        at the function prototype the param declaration
        probably looks something like:

            U08*   *BYREF_output_array_param
            I32    *BYREF_output_array_length_param

            ETC.
    
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OUT_PARAM@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_OUT_PARAM_@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_OUTPUT_PARAM_@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OUTPUT_PARAM@ 
#_PHEXDUM_RETURN_INSTEAD_OF_EXIT_###############################
#__PHEXDUM_RETURN_NOT_EXIT_#####################################

    @VID_IID[ 0128 ]TIME[ 01:27:42 ]
    Comment offboarded to _H_ file on DATE[ 2021_02_08 ]

    /** ************************************ **/
    /** Really we could just exit. But that  **/
    /** to me implies a fatal error rather   **/
    /** than an error that should be         **/
    /** gracefully recovered from.           **/
    /** ************************************ **/

######################################_PHEXDUM_RETURN_NOT_EXIT_#
###############################_PHEXDUM_RETURN_INSTEAD_OF_EXIT_#
@_WONT_DO_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @WONT_DO: Like a "TODO" but means that you intend
              to NEVER_DO ( never write ) the code.

    The fastest code is the code you don't write.
    @VID_IID[ 0128 ]TIME[ 00:25:13 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_WONT_DO_@
@NOP_NOL_PNG@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    NOP_NOL_PNG : NO_OOP: Because: NO Load PNG library.
    @VID_IID[ 0123 ]TIME[ 01:57:06 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NOP_NOL_PNG@
#_OLD_MASTER_MEMORY_DIAGRAM_####################################

    @VID_IID[ 0121 ]TIME[ 02:02:20 ]
    Copied from[ A2_JC ]Project.
    mam_mem would be "taudepo" memory in AAC2020

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
    //|                         |<- QUARKMAP -->|    |//
    //|                         +-------+-------+    |//
    //|   |<-- mam_mem -->|   / |       |       |    |//
    //|   +---+---+---+---+  /  |       |       |    |//
    //|   | 0 | 1 | 2 | 3 | /   |       |       |    |//
    //|   +---+---+---+---+     |       |       |    |//
    //|   | 4 | 5 | 6 | 7 |     |-------+-------|    |//
    //|   +---+---+---+---+     |       |   |   |    |//
    //|   | 8 | 9 | A | B | \   |       |___|___|    |//
    //|   +---+---+---+---+  \  |       |   |_|_|    |//
    //|   | C | D | E | F |   \ +_______+___|_|_|    |//
    //|   +---+---+---+---+     |<- 512-x-512 ->|    |//
    //|                                              |//
    //|   QUARKMAP in focus is in cell index 7.      |//
    //|   QUARKMAP in focus is at dex_mec == 7.      |//
    //|   dex_hot =( 7 + 1 );                        |//
    //|   xos_512 =( 3     );                        |//
    //|   yos_512 =( 1     );          [DIA_GET_MEC] |//
    //|______________________________________________|//

####################################_OLD_MASTER_MEMORY_DIAGRAM_#
#_BITPACKED_INTO_EXE_TEST_AUSET_PLAN_###########################

    @VID_IID[ 0119 ]TIME[ 00:02:50 ]
    We want to:

    CREATION:
        1. Load a full color PNG file into UTILITY.
        2. Convert PNG pixels to PURE BLACK
           or PURE WHITE with FULL ALPHA.
           ( So that alpha chunk can be discarded)
        3. Re-save processed PNG file to DISK.
        4. Open PNG file we just saved for
           BINARY READ. (Do not open with)
           ( lodePNG)
        5. Create U32 hex code dump that can
           be pasted into c99 code.
        6. Save that hex dump to file.

    VERIFY:
        1. Load a hex dump .TXT file.
        2. Covnert TXT to BYTES
        3. Interpret bytes as PNG file.
        4. Save PNG file to disk.

----------------------------------------------------------------

    @VID_IID[ 0119 ]TIME[ 00:02:10 ]
    THIS IS CLOSE TO WHAT YOU WANT BUT NOT QUITE.

    TODO: Create a comman line utility that uses lodePNG
          to convert a 256x256 bitmap into hexcodes
          we can embed into C source code.

If we use a 256*256 pure black and white bitmap
to encode 3 different layered designs in a quarkmap
like structure we will need:

65,536 BITS   ( 256 * 256 == 65,536 )

65536 / 32 bits per UINT32 hex code ==> 2,048 hex codes

( 409 == 2,048 / 5 )
409 lines like this to create a default auset tile
design to encode into the engine.
0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF  
0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF  
0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF  
0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF  
0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF  
0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF , 0xFFFFFFFF  

----------------------------------------------------------------

###########################_BITPACKED_INTO_EXE_TEST_AUSET_PLAN_#
@_REFERENCES_ARE_NEVER_NULL_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0117 ]TIME[ 02:00:00 ] 

    When emulating a C++ "pass by reference" the
    reference pointer can never be null. Because a
    reference can.
    
        1. Never be null.
        2. Never be re-assigned.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_REFERENCES_ARE_NEVER_NULL_@
#_404_SHADER_NOT_FOUND_#########################################

    /** 404: Shader Not Found. Don't take seriously.     **/
    /**      Any negative number will do.                **/

#########################################_404_SHADER_NOT_FOUND_#
#_FRAGBED_CODE_SHOULD___NOT___USE_CALLBACKS_####################

    //:AKA[ AAC2020_ReadKeySimple ]
    /** ************************************************ ***
    @VID_IID[ 0066 ]TIME[ 0H 6M 6S ]!!!!!!!!!!!!!!!!!!!!!!!!
    UPDATE[ 2020_12_28 ]
    DO NOT USE CALLBACKS FOR THIS. DO NOT WIRE UP 
    AS A CALLBACK!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    
    Default ( ONLY ) keyboard callback for FRAGBED    
    USEAGE:                                           
        AAC2020_GINAWIN_SimpleKeyHandler_SetCallback(  
        &( AAC2020_FRAGBED_KeyInn_Simple ) );;  
    *** ************************************************ **/

####################_FRAGBED_CODE_SHOULD___NOT___USE_CALLBACKS_#
#_PRIVATE_FRAGBED_FUNC_REQUIRES_VALID_INPUT_####################

    /** ******************************************** ***  
    @VID_IID[ 0066 ]TIME[ 0H 55M 59S ]                
                                                    
    PRIVATE version of AAC2020_FRAGBED_KeyInn_Simple  
    This version assumes[ chr_key ]is a valid         
    key to load a sub-system shader.                  
                                                    
    At this time it means an ascii value              
    between '0' and '9'                               
    *** ******************************************** **/ 

####################_PRIVATE_FRAGBED_FUNC_REQUIRES_VALID_INPUT_#
#_FRAGBED_INVALID_NUMBER_KEY_###################################
    
    /////////////////////////////////////////////
    @VID_IID[ 0117 ]TIME[ 01:30:30 ]
    Large comments extracted from this block of
    code in FRAGBED.F._ file.
    /////////////////////////////////////////////

    assert( 48 == '0' );
    assert( 57 == '9' );
    if( 0
    ||  chr_key < '0'
    ||  chr_key > '9'   
    ){
        /** is_valid_num_key == FALSE **/
    
        /** ******************************************** ***
            @VID_IID[ 0066 ]TIME[ 01H 12M 47S ] 
    
            EXPECTS_VALID_SUB_SYSTEM_KEY_2020 :
    
            Private Version Of Keyboard Handler Always 
            Expects that the key it is given is a valid
            key to change the current sub-system
            shader in focus.
        *** ******************************************** **/
    
        FUCK_YOU("[EXPECTS_VALID_SUB_SYSTEM_KEY_2020]");
    
        /** ******************************************** **/
    };;

###################################_FRAGBED_INVALID_NUMBER_KEY_#
#_INIT_NONE_HOW_################################################

    @VID_IID[ 0114 ]TIME[ 01:34:50 ]

    SEE_ALSO[ INIT_NONE_EXPLAINED ]

    AAC2020_SomeSubSystemNameSpace_InitNone

    Exists so we can keep a roll call of all sub-systems
    when "booting them up" (initializing them) in order.

    Some sub-systems do NOT have init code, so we give them
    an "_InitNone(...)" function to help maintain
    consistency in the code and to keep these subsystems
    part of the "roll call".

################################################_INIT_NONE_HOW_#
#_INIT_NONE_EXPLAINED_##########################################
#INIT_NONE_EXPLAINED############################################

    /** ************************************************ **/
    /** @VID_IID[ 0114 ]TIME[ 01:29:13 ]      ...........**/
    /** InitNone is the implementation of     ...........**/
    /** the saying                            ...........**/
    /** "Raise Your Hand If You Are NOT here" ...........**/
    /** ************************************************ **/

##########################################_INIT_NONE_EXPLAINED_# 
############################################INIT_NONE_EXPLAINED# 
#_UNRELIABLE_KILL_SWITCH_#######################################

    ////////////////////////////////////////////////////////////

    @VID_IID[ 0112 ]TIME[ 00:42:23 ]
    
    A hackish way to shut off tests but make sure they still
    run every once and a while randomly. 

    PRO: Protects us from test rot a little bit.
    CON: We could accidentially cause random stuttering in
         people's final games if we forget to shut this
         behavior off when engine is ready to release.

    ////////////////////////////////////////////////////////////

    Removed FROM: PAINT5D.D._

    /** @VID_IID[ 0084 ]TIME[ 00:39:12 ] ................... **/
    /** Usually turns off unit tests, but not 100% of time.  **/
    /** This is to avoid code rot while still saving time    **/
    /** When we have long running unit tests.                **/
    U08 AAC2020_PAINT5D_unreliable_utc_kill_switch=( 1 );

    Removed FROM: PAINT5D.F._

        //:Run_Unit_Test_If_Never_Ran_Before:----------------://
        #define KIL AAC2020_PAINT5D_unreliable_utc_kill_switch
        #define E_U extern U32

            if( aac2020_paint5d_unit_test_ran_or_running <= 0 ){
                aac2020_paint5d_unit_test_ran_or_running =( 1 );
                aac2020_paint5d_unit_test_is_running_now =( 1 );

                if( KIL >= 1 ){

                    srand(time(NULL)); 
                    I16 rnd_i16 = rand(); //: 0 to 0x7fff
                    if( rnd_i16 < ( 0x7fff / 50 ) ){

                        /** 0x7fff / 20 : Means: 1 in 20 **/

                        E_U AAC2020_PAINT5D_UnitTest( U32  );
                            AAC2020_PAINT5D_UnitTest( 0x00 );
                    };;
                }else{
                    if( 1 == 1 ){

                        E_U AAC2020_PAINT5D_UnitTest( U32  );
                            AAC2020_PAINT5D_UnitTest( 0x00 );
                    };;
                };;

                aac2020_paint5d_unit_test_is_running_now =( 0 );
            };;

        #undef KIL
        #undef E_U
        //:----------------:Run_Unit_Test_If_Never_Ran_Before://


#UNIT_TEST_MANAGER##############################################
#_UNIT_TEST_MANAGER_############################################

    UNIT_TEST_MANAGER: KILTEST

        The only unit test management we have is a subsystem
        like "SILENCE" called "KILTEST" that is used to shut
        off certain unit tests.

        0 == Test Is Off.
        1 == First nesting depth of tests gauranteed.
        2 == Heavy Tests That Have Additional Gauring
             around them will also run.

        0 == NO TESTS
        1 == LIGHT TESTING
        2 == HEAVY TESTING

##############################################UNIT_TEST_MANAGER#
#############################################_UNIT_TEST_MANAGER#
#_HIDLIST_AND_HIDEXEC_##########################################

    THIS_COMMENT_APPLIES_TO_BOTH[ HIDLIST ]AND[ HIDEXEC ]
    A proposed name for a system.
    We went with a name that reflected 
    the interal code rather than the 
    use case.

    HIDLIST: Mean Hidden List. 
    HIDEXEC: Mean Hidden List. 

    HIDLIST ====> IKEYLIS
    HIDEXEC ====> IKEYCMD

    IASCIIL ====> IKEYLIS
    IASCIIC ====> IKEYCMD

    ISACIIL : TYPO_OF[ IASCIIL ]( Input ascii LIST      )
    ISACIIC : TYPO_OF[ IASCIIC ]( Input ascii COMMANDER )


##########################################_HIDLIST_AND_HIDEXEC_#
@_PAIRED_CODE_GENERATE_B16_YEAR_2021_@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0109 ]TIME[ 00:10:42 ]

    We use this exact block of code in both of our
    loops in the test code to make sure that the
    generated values are generated EXACTLY the same
    way in the[ PUT ]loop part of the test as they
    are in the[ GET ]loop part of the test.

    The goal is to PUT everything and then GET everything.
    Doing so in a batched instead of interlaced order
    can help us detect UN-INTENTIONAL memory stomping.

    //:@_PAIRED_CODE_GENERATE_B16_YEAR_2021_@://
    if(0 == meg){ b16=((inc)%(0xFFFF+1)); };
    if(1 == meg){ b16=  BIG[ inc % 40 ] ; };
    if(2 == meg){ b16=  LIT[ inc % 40 ] ; };
    //:@_PAIRED_CODE_GENERATE_B16_YEAR_2021_@://

@@@@@@@@@@@@@@@@@@@@@@@@@@@_PAIRED_CODE_GENERATE_B16_YEAR_2021_@
@COMBO_BREAKER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @COMBO_BREAKER: One of these things is not like the other.

    @VID_IID[ 05:17:50 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@COMBO_BREAKER@
@NEVER_NEGATIVE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@_NEVER_NEGATIVE_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @NEVER_NEGATIVE:
        Means the number value SHOULD_NOT be
        negative. However, it is ALLOWED to be ZERO.

        For example, a pixel coordinate.

        SHOULD_NOT , rather than CAN_NOT because sometimes
        I used signed integers to easily detect underflow.

        @VID_IID[ 0106 ]TIME[ 01:22:15 ]
        @VID_IID[ 0151 ]TIME[ 00:51:00 ]UPDATED

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_NEVER_NEGATIVE_@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NEVER_NEGATIVE@
#_ORDERS_OF_MAGNITUDE_FROM_PROTO_TO_FINAL_######################

    #ORDERS_OF_MAGNITUDE#

    @VID_IID[ 0104 ]TIME[ 00:49:00 ]
    DATE[ 2021_01_23 ]

    Final product seems to take 2 orders of magnitude more
    than the initial prototype in terms of time investment.
    At least for the way I write code.

        Conservatively: 412 hours, 412/2 == 206
        206 times longer than my 2 hour prototype. 
        2 orders of magnitude greater.

        Liberally:      824 hours, 824/2 == 412

######################_ORDERS_OF_MAGNITUDE_FROM_PROTO_TO_FINAL_#
#_TEST_5_IS_TRANSPOSITION_PRECURSOR_############################
    
    @VID_IID[ 0099 ]TIME[ 04:26:20 ]
    Comment extracted on DATE[ 2021_01_20 ]

        /** @VID_IID[ 0099 ]TIME[ 02:17:20 ] *************** **/
        /**                                                  **/
        /** Test 5 is a precursor to detecting transposition **/
        /** of columns error. Because the center column is   **/
        /** different, no TRANSPOSITION error will           **/
        /** be detected, because if we iterate through the   **/
        /** columns in the WRONG ORDER, the index of the     **/
        /** CENTER COLUMN is not changed. Regardless of      **/
        /** which way we step through the column indexes,    **/
        /** the center column index is ALWAYS == 1           **/
        /**                                                  **/
        /**                     CEN                          **/
        /** FORWARDS:   |  0  |  1  |  2  |                  **/
        /** BACKWARDS:  |  2  |  1  |  0  |                  **/
        /**                     CEN                          **/
        /**                                                  **/
        /** ************************************************ **/
        //:INPUTS_FOR_TEST[ 05 ]:
            ,   B_11,B_00,B_11  //:<--- tile exponent #0 
            ,   B_11,B_00,B_11  //:<--- tile exponent #1 
            ,   B_11,B_00,B_11  //:<--- tile exponent #2 
            ,   B_11,B_00,B_11  //:<--- tile exponent #3 
            ,   B_11,B_00,B_11  //:<--- tile exponent #4
            ,   B_11,B_00,B_11  //:<--- tile exponent #5 
            ,   B_11,B_00,B_11  //:<--- tile exponent #6 
            ,   B_11,B_00,B_11  //:<--- tile exponent #7
            //: |   |    |   |
            //: l_00,l_01,l_02 <-- 3 layers.

############################_TEST_5_IS_TRANSPOSITION_PRECURSOR_#
#_USUALLY_ONE_TEST_TABLE_DATE_2021_01_20_#######################

    ************************************************************
    @VID_IID[ 0099 ]TIME[ 03:24:30 ]
    Comment extracted into _H_ file at this time
    On DATE[ 2021_01_20 ]
    ************************************************************

        /** ************************************* **/
        /** @VID_IID[ 0097 ]TIME[ 06:21:30 ]      **/
        /** Usually we have one test table with   **/
        /** inputs and expected outputs in the    **/
        /** same row. These tests have a LOT      **/
        /** of inputs though. So have two tables. **/
        /** One for inputs and one for expected   **/
        /** outputs.                              **/
        /** ************************************* **/

    ************************************************************

#######################_USUALLY_ONE_TEST_TABLE_DATE_2021_01_20_#
#_P5D_UNIT_TEST_COMMENT_2021_01_20_655PM_#######################


    @VID_IID[ 0099 ]TIME[ 04:22:23 ]
    Extracted Comment And The Code It With.


        //:DEFINE_OR_UNDEF_BINARY_CONSTANTS:-----------------://
        /** ************************************************ ***
        @VID_IID[ 0098 ]TIME[ 02:27:00 ]
        C99 does not have binary constant notation, so we
        will have to hard code some defines for the
        expected output valuess to make this code more
        managable.
        *** ************************************************ **/

            #define B_00 ( 0 )
            #define B_01 ( 1 )
            #define B_10 ( 2 )
            #define B_11 ( 3 )

            #define B____00_00_00_00____00_00_00_00_____B 0x0000
            #define B____01_01_01_01____01_01_01_01_____B 0x5555
            #define B____00_00_00_00____00_00_00_11_____B (  3 )
            #define B____11_00_11_00____11_00_11_00_____B 0xCCCC
            #define B____11_00_11_00____11_00_11_01_____B 0xCCCD
            #define B____11_11_11_11____11_11_11_11_____B 0xFFFF
    
        //:-----------------:DEFINE_OR_UNDEF_BINARY_CONSTANTS://

#######################_P5D_UNIT_TEST_COMMENT_2021_01_20_655PM_#
#_WHY_TILE_EXP_DOESNT_CHANGE_TEST_OUTPUTS_######################
#_WHY_t_e_DOESNT_CHANGE_TEST_OUTPUTS_###########################


    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 0 ]
    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 1 ]
    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 2 ]
    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 3 ]
    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 4 ]
    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 5 ]
    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 6 ]
    GET_TILE_OVER_CURRENT_PIXEL_OF_TILE_SIZE[ t_e == 7 ]

    As long as [ loc_t_x , loc_t_y ]
    is at [ 0,0 ] for all of our tests,
    the til_exp value will not affect
    the outcome because the origin is the
    same no matter what ( til_exp / t_e )
    value you plug into
    [  AAC2020_P5D1OGL_painpix_CTO_cuvipix ].   
    ( SEE DIAGRAM BELOW )

    |<------------- 3 ------------->|
    |<----- 2 ----->|               |
    |<- 1 ->|       |               |
    | 0 |   |       |               |
    @---+---+-------+---------------+
    |ABC|   |       |               |
    +---+   |       |               |
    |       |       |               |
    +-------+       |               |
    |               |               |
    |               |               |
    |               |               |
    +---------------+               |
    |                               |
    |                               |
    |                               |
    |                               |
    |                               |
    |                               |
    |                               |
    +-------------------------------+

    If [ t_x , t_y ] == [ 1,1 ]
    Then the ( til_exp / t_e ) value
    WILL change the outcome.
    @VID_IID[ 0098 ]TIME[ 05:04:51 ]

    ( 0 == t_e ) ==> @A
    ( 1 == t_e ) ==> @B
    ( 2 == t_e ) ==> @C
    ( 3 == t_e ) ==> @D

    |<------------- 3 ------------->|
    |<----- 2 ----->|               |
    |<- 1 ->|       |               |
    | 0 |   |       |               |
    +---+---+-------+---------------+...........
    |   |   |       |               |
    +---@---+       |               |
    |   | A |       |               |
    +---+---@-------+               |
    |       | \     |               |
    |       |   B   |               |
    |       |       |               |
    +---------------@---------------+
    |               | \             |
    |               |   \           |
    |               |     \         |
    |               |       C       |  D: Not pictured
    |               |               |     Not enough room
    |               |               |     to draw that.
    |               |               |
    +---------------+---------------+
    .
    .
    .                         

###########################_WHY_t_e_DOESNT_CHANGE_TEST_OUTPUTS_#
######################_WHY_TILE_EXP_DOESNT_CHANGE_TEST_OUTPUTS_#
#_CANVAS_USER_VIEW_#############################################
#CANVAS_USER_VIEW###############################################

    #CANVAS_USER_VIEW: (CUV):
   (AKA: #WHAT_THE_ARTIST_SEES# in PAINT5D.D._ )

        @VID_IID[ 0098 ]TIME[ 00:11:11 ]
        TODAYS_DATE[ 2021_01_19 ]

        This is similiar to a glviewport view or a client
        viewport view. However the dimensions of this view
        do NOT change depending on the viewport size.

        It is a static mapping of what 
        [ pixels / tiles ] the USER
        (Josh) will see in the viewport. 
        And is similiar in nature to
        #PIXEL_DATA_PARTITIONS#.

        The difference between:
        #PIXEL_DATA_PARTITIONS#
        AND
        #CANVAS_USER_VIEW#

        Is one is partitioning the GPU DATA.
        The other is partitioning the allocation
        of fragment coords in a non-adjustable way.
        (respectively: #PIXEL_DATA_PARTITIONS# )
        (         and ,#CANVAS_USER_VIEW#      )


###############################################CANVAS_USER_VIEW#
#############################################_CANVAS_USER_VIEW_#
#_SCANLINE_ORDER_MEANS_Y_IS_THE_OUTER_LOOP_#####################

    If you want to loop over X and Y coordinates in
    traditional scanline order 
    ( Left To Right, then TOP to Bottom )
    You need your Y for-loop as the OUTER loop.

    Example:

    for( p_y = 0 ; p_y <= ( 512-1 ) ; p_y ++ ){
    for( p_x = 0 ; p_x <= ( 512-1 ) ; p_x ++ ){

    };;};;

#####################_SCANLINE_ORDER_MEANS_Y_IS_THE_OUTER_LOOP_#
#_DEFAULT_NUMBER_OF_LINES_IN_TERMINAL_##########################
#_DEFAULT_TERMINAL_HEIGHT_######################################

    2 lines is not enough.
    4 lines isn't much. But it's just enough to work I think.

    4 lines is 64 pixels high.
        ( 4 lines, each glyph for text is 16x16 )
        ( 16 * 4 == 64 )

    @VID_IID[ 0084 ]TIME[ 03:12:10 ]

######################################_DEFAULT_TERMINAL_HEIGHT_#
##########################_DEFAULT_NUMBER_OF_LINES_IN_TERMINAL_#
#_TERMINAL_GLYPH_FONT_SIZE_#####################################

    #TERMINAL_GLYPH_SIZE:
    #TERMINAL_FONT_SIZE:
    #TERMINAL_GLYPH_FONT_SIZE:

        16x16 pixels. 
    
        8x8 is too small to put 1 pixel thick
        boxes around capital letters.
        16x16 is large enough. It is the next power of 2 up.

        @VID_IID[ 0084 ]TIME[ 03:09:10 ]

#####################################_TERMINAL_GLYPH_FONT_SIZE_#
#_GET_SIZE_OF_VIEWPORT_#########################################

    GET_SIZE_OF_VIEWPORT:

    @VID_IID[ 0084 ]TIME[ 02:56:30 ]
    
    The GL viewport should always be
    Snapped to these values:
    P5D_VPC (viewport canvas) may be a subsection of
    this rectangle. VPC is just where we put the
    main rendering of the P5D system. But other areas
    of opengl viewport might want to render a console
    instead of the tileset being rendered.

    AAC2020_GINAWIN_GetClient_WID()
    AAC2020_GINAWIN_GetClient_HIG()

#########################################_GET_SIZE_OF_VIEWPORT_#
#_WHY_IS_0_THE_BACK_MOST_LAYER_#################################

    WHY_IS_0_THE_BACK_MOST_LAYER:

        0 is the backmost layer because if we ever add
        more layers those layers stack on top of whatever
        we already had. So we don't want the meaning of
        "layer 0" to ever change if that ever happens.

        EXAMPLE:

        Some systems may have different max layer values,
        and thus to keep layer 0 having a consistent meaning,
        it must be the BACKMOST layer and 
        ___NOT___ frontmost layer.

        @VID_IID[ 0084 ]TIME[ 02:46:30 ]

#################################_WHY_IS_0_THE_BACK_MOST_LAYER_#
@IOU@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    
    @IOU : Initialize_Or_Update

           For functions that are both used in initializer
           code as well as for just updating or setting
           some values OUTSIDE of initialization as well.

           SEE[ PAINT5D.F._ ]
           @VID_IID[ 0084 ]TIME[ 02:33:20 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IOU@
#IDEA_RANDOM_UNIT_TESTS_BUT_NEVER_OFF###########################

    Unit tests never turn off, but can be set to randomly
    run when you startup the code. And this happens
    infrequently.

    Infrequently running tests are better than just
    shutting them off all together.

    And we still save time from long running test code
    that is starting to slow down our development process.

    @VID_IID[ 0083 ]TIME[ 08:42:00 ]

###########################IDEA_RANDOM_UNIT_TESTS_BUT_NEVER_OFF#
@SAMEV@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @SAMEV: Shorthand for: @SAME_VARIABLE@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SAMEV@
@TYPED_NIL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@TYPED_NULL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    TYPED_NULL / TYPED_NIL:

        Better than "NIL" or "NULL"

            NULL / NIL == ((void*)0)

        Typed Nil Values:

            NIL integer: ((int*)0)
            NIL char   : ((char*)0)
            NIL U32    : ((U32*)0)

            ETC.
    
        @VID_IID[ 0083 ]TIME[ 08:07:33 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TYPED_NULL@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TYPED_NIL@
@REFS_CANNOT_BE_NULL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@REFS_NEVER_NULL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    References can never be null. References don't actually
    exist in C. That is a C++ thing. Everything is pass by
    value in C. Even pointer are passed by value. If you want
    a reference, you pass a pointer to whatever you want
    to be the reference and then make sure 2 things happen:

        1. The reference can never be null.
        2. The reference can never be re-assigned.

        @VID_IID[ 0083 ]TIME[ 07:02:30 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REFS_CANNOT_BE_NULL@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REFS_NEVER_NULL@ 
@KFR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @KFR: Kept For Reference.
          A piece of code that COULD BE DELETED without
          changing functionality, but is kept for reference
          so we understand the evolution of the code better.

        Locations To See In Action:

            1:  SEE[ PAINT5D.F._ ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@KFR@
@DIV_B4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @DIV_B4: Means: "Divisible By Four"
             The variable that is tagged with this is
             to always be divisible by four.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DIV_B4@
@P5D_AUS_BITS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @P5D_AUS_BITS  :
    
        Means: Paint5D Auset Bits.
        Tag exists in diagram in PAINT5D.D._

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P5D_AUS_BITS@
#_SKIP_CONFIG_PIXELS_P5D_PUTGET_################################

    @VID_IID[ 00H 50M 30S ]Summary 1st draft finished.

    The idea of our PUT_GET test in PAINT5D is to do
    a back and forth conversion of EVERY SINGLE PIXEL
    by scanning over the entire bitmap and starting the
    back and forth conversion process from the XY location
    of the current pixel of the bitmap.

    This is a dea simple way to ensure 100% coverage.

    We can ensure our conversion test ALWAYS works because
    we tested it with every possible value.

################################_SKIP_CONFIG_PIXELS_P5D_PUTGET_#
#skipped_configuration_pixels###################################

    ************************************************************
    @VID_IID[ 0079 ]TIME[ 00H 36M 05S ] 
    #skipped_configuration_pixels#      
    ************************************************************
    ************************************************************
    @VID_IID[ 0079 ]TIME[ 00H 42M 32S ]
    Done writing first draft of this rant.
    ************************************************************

    Look at diagram: #DIA_P5D_MAIN#
    In File:          PAINT5D.D._

    The bottom-right most pixel of each
    [mipmap/quarkmap] like structure
    is a single pixel and CANNOT hold
    the 3 layers required.

    So, rather than just NOT USE this pixel, we will encode
    a preset value into that single pixel.

    We only have one pixel, so we need to make the most
    out of it. The best way is to use the FULL uint32
    pixel value to encode a preset that is then hardcoded
    into the paint5D system. 

    My artist ( Josh (year 2021) ) can then tell me what
    kind of preset pallets they want to experiment with.

    The maximum value of 2 to the power of 32 is
    pretty big.... 4 billion and change.

    That is plenty of room to hard code all the presets 
    I'll ever want. One such preset number should probably
    be an indirection saying "There is a settings file 
    being used rather than a hard coded preset."

    Maintaining hard coded presets is the downside to this
    system. But it is simple and leverages the data in that
    single pixel to it's maximum possible extent.

###################################skipped_configuration_pixels#
#_CTF_VS_CTS_###################################################

        CTS: Current_Test_Section       
        CTF: Current_Test_Function     

        USED IN:
            paint5d:
            aac2020_paint5d_CTF
            aac2020_paint5d_CTS

###################################################_CTF_VS_CTS_#
#_DO_NOT_SUPPORT_TILE_EXPONENT_8_IN_PAINT5D_####################

    Removed Code From: aac2020_paint5d_painpix_CTO_glocpix

            if( 8 == til_exp ){

                /** @VID_IID[ 0078 ]TIME[ 2H 6M 55S ] ****** **/
                /** Not sure why I was thinking to do this * **/
                /** but it is full of edge cases and the math**/
                /** breaks down. Halt if you get til_exp==8  **/
                /** and remove it's use from test code.      **/
                /** This means when iterating over all pixels**/
                /** we need to SKIP the bottom-left-most     **/
                /** pixel in our [p_x,p_y] global loop.      **/
                ERR("[DONT_SUPPORT_TIL_EXP_8!!!!!]");

                /** @VID_IID[ 0078 ]TIME[ 02H 02M 59S ] **** **/
                /** I have no clue if my math will work out  **/
                /** to get correct answer with til_exp == 8  **/
                /** but the answer should always be          **/
                /** [ 511 , 511 ] because it should get      **/
                /** the bottom right most pixel used         **/
                /** for configuration data. 8 is not         **/
                /** technically a valid exponent...          **/
                /** So not sure why I am trying to shim      **/
                /** in support for it.                       **/
                /** **************************************** **/
                if( 0
                ||  (   ((U16)( i16_gtx )) != ( 512 - 1 )   )
                ||  (   ((U16)( i16_gty )) != ( 512 - 1 )   )
                ){
                    printf("[i16_gtx]:%d\n" , i16_gtx );
                    printf("[i16_gty]:%d\n" , i16_gty );
                    ERR("[til_exp_8_has_only_one_location]");
                };;

            };;
#_DO_NOT_SUPPORT_TILE_EXPONENT_8_IN_PAINT5D_####################
#AAC2020_CRASH_ON_NIAVE_CODE####################################

    AAC2020_CRASH_ON_NIAVE_CODE :

        Meant to mark code where I wrote the function in
        a Niave way that is not performant.
        In other words, unecessarily slow code.

        Come back to these pieces of code later when
        optimizing and see if you can fix them and make
        them faster.

        @VID_IID[ 0078 ]TIME[ 00H 59M 15S ]

####################################AAC2020_CRASH_ON_NIAVE_CODE#
#PAT_BREAKER####################################################

    Shorthand for #PATTERN_BREAKER#

####################################################PAT_BREAKER#
#_WHY_IS_P5D_GET_BS_INLINED_HERE_###############################

    @VID_IID[ 0077 ]TIME[ 1H 40M 5S ]

    AAC2020_PAINT5D_Get_BrushState 's
    code body only exists as a section of inlined
    source code within the unit test:

        aac2020_paint5d_UTC_Put_BrushState

    BECAUSE: aac2020_paint5d_UTC_Put_BrushState
             itself is a helper function to help run
             a unit test.

    I don't want a helper function for my helper fuction
    that I then have to write a unit test for.

    The backwards reasoning chain needs to be
    nipped in the bud NOW before it gets out of control.

    I don't want UNIT TEST CODE FOR MY UNIT TEST CODE.

###############################_WHY_IS_P5D_GET_BS_INLINED_HERE_#
#_WHAT_DOES_B_X_B_Y_MEAN_IN_PAINT5D_############################

    B_X and B_Y mean: Brush-x coordinate 
                      Brusy-y coordinate

    The actual data for these variables is stored here:

        AAC2020_TAUDEPO_SUB_PAINT5D_VAR_B_X
        AAC2020_TAUDEPO_SUB_PAINT5D_VAR_B_Y

        SEE FILE[ TAUDEPO.D._ ]

    This is where Josh's mouse cursor is over.

############################_WHAT_DOES_B_X_B_Y_MEAN_IN_PAINT5D_#
#_WHAT_DOES_VP1_MEAN_IN_PAINT5D_################################

    @VID_IID[ 0076 ]TIME[ 2H 40M 00S ]
    
    [ VP1 / P5D_VP1 ]:Viewport_One(1): 
                    Offscreen/Source 
                    TileMapDataBitmap Viewport 
    
    VP1 basically means: "Camera Viewport"
    This is the camera variables controlled
    by JOSH when he is editing tiles in
    Paint5D editor.

################################_WHAT_DOES_VP1_MEAN_IN_PAINT5D_#
#_WEIRD_UNIT_TEST_VAR_NAMES_O_A_################################

    @VID_IID[ 0076 ]TIME[ 2H 39M 10S ]
    
    weird_names_because: 
    We kept confusing
    
        "Input And Output"
    With "Expected And Actual"
    
    And tangling our mental understanding
    between the pairs of words.

################################_WEIRD_UNIT_TEST_VAR_NAMES_O_A_#
#_WHY_ARE_CAMERA_BOUNDS_127_BY_127_HERE_########################

    127 was a mistake.
    See corrected commentary:

    HASHTAG_COMMENT[ #_WHY_ARE_CAMERA_BOUNDS_255_BY_255_HERE_# ]
    
    WRITTEN_ON[ DATE[ 2021_01_05 ] ]

########################_WHY_ARE_CAMERA_BOUNDS_127_BY_127_HERE_#
#_WHERE_IS_THE_CAMERA_MOVING_OVER_##############################
#_WHY_ARE_CAMERA_BOUNDS_255_BY_255_HERE_########################
#_P5D_BOUNDING_#################################################

    @VID_IID[ 01H 31M 22S ]

    PART_OF_DIAGRAM[ #DIA_P5D_MAIN#        ]
    SEEN_IN_FILE[  AAC2020\LIB\PAINT5D.D._ ]
    |<-- 128 -->|           
    +--=--+--=--+--=--+--=--+  DIAGRAM_TO_LEFT_COULD_BE:
    |           |           |  1. TOP_LEF: SUB_TILE 
    | @til_lay  | @til_lay  |  2. TOP_RIG: SUB_TILE
    +     0     +     1     +  3. BOT_LEF: SUB_TILE
    |     @til_qua === 0    |  4. BOT_RIG: SUB_TILE
    |           |           |  @VID_IID[ 0076 ]TIME[1H 33M 40S]
    +--=--+--=--+--=--+--=--+
    |           |  0  |  1  |
    | @til_lay  |     |     |
    +     2     +-----+--+--+
    |           |  2  |__|__|
    |           |     |__|..|
    +--=--+--=--+--=--+--=--+   @VID_IID[ 01H 47M 10S ]
    |           |               Correction: Bounds are
    |           +-----------+   actually ( 128 + 128 - 1 )
    |                       |   (__NOT__ 128-1 )
    |<-------- 128 -------->|
    |<===================== | ===== 256 =============>|
    |                       |                         |
    +-----------|-----------+ +-----------|-----------+
    |                       | |                       |
    |                       | |                       |
    -                       - -                       -
    |                       | |                       |
    |                       | |                       |
    +  @_TOP_LEF_subtile_@  + +  @_TOP_LEF_subtile_@  +
    |                       | |                       |
    |                       | |                       |
    -                       - -                       -
    |                       | |                       |
    |                       | |                       |
    +-----------|-----------+ +-----------|-----------+
    +-----------|-----------+ +-----------|-----------+
    |                       | |                       |
    |                       | |                       |
    -                       - -                       -
    |                       | |                       |
    |                       | |                       |
    +  @_TOP_LEF_subtile_@  + +  @_TOP_LEF_subtile_@  +
    |                       | |                       |
    |                       | |                       |
    -                       - -                       -
    |                       | |                       |
    |                       | |                       |
    +-----------|-----------+ +-----------|-----------+
    |                                                 |
    |<------------- CLIENT_AREA_WIDTH   ------------->|
    |<-------------         OR          ------------->|
    |<------------- VP1 Width In Pixels ------------->|

    The SMALLEST TILE is a collection of 128x128 tiles.
    Thus the camera when zoomed out to the maximum outward
    zoom should be 128x128 units in size.
    (These units are in DATAPIXELS. )
    (SEE: #_WHAT_ARE_DATAPIXELS_#   )

#################################################_P5D_BOUNDING_#
########################_WHY_ARE_CAMERA_BOUNDS_255_BY_255_HERE_#
##############################_WHERE_IS_THE_CAMERA_MOVING_OVER_#
#_WHAT_ARE_DATAPIXELS_##########################################

    #WHAT_ARE_DATAPIXELS#

        @VID_IID[ 0076 ]TIME[ 1H 23M 45S ]

        Datapixels are pixels on a texture or bitmap data
        array that encode some other type of information.

        Though the data is packed into a pixel. The pixel
        bits actually dont mean "RGBA". They could for example
        mean... "mouse-x and mouse-y"
        
        Or they could mean:

        "The value of a tile" <-- very often used.

##########################################_WHAT_ARE_DATAPIXELS_#
@_IDENTICAL_VALUES_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @IDENTICAL_VALUES:
    
    @VID_IID[ 0075 ]TIME[ 01H 44M 32S ]

        Means two ___VALUES___ are IDENTICAL.

        Does ___NOT___ mean "same memory address"
        Does ___NOT___ means "the same variables"

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_IDENTICAL_VALUES_@
@PERM_DATA@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    
    @VID_IID[ 0075 ]TIME[ 0H 29M 01S ]

    @PERM_DATA@:
        Permanent Data in our system.
        As apposed to temporary backup data that will
        be malloced and then freed.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PERM_DATA@
@REF_TO_POINTER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@REF_TO_A_POINTER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0075 ]TIME[ 00H 12M 11S ] 

    SEE[ @REFERENCE_TO_A_POINTER@ ]
    SEE[ @REF_TO_PTR@ ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REF_TO_A_POINTER@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REF_TO_POINTER@
@CHECK_TRAP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @CHECK_TRAP:
        Assert a value is NOT EQUAL to a @TRAP_VALUE
        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@CHECK_TRAP@
@REBASE_LOCAL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @REBASE_LOCAL:

    @VID_IID[ 00H 48M 56S ]

        You start with a global variable and each time
        you widdle it down you have a new coordinate that
        is LOCAL to some type of sub-partition in some data.

        When I mean "REBASE_LOCAL" I mean we are taking
        another chip away at the remainder value, making
        it smaller, and LOCAL to a smaller sub partition.

        SUMMARY:
            Get a new SMALLER local value from a previous
            local or global accumulator value.

    EVEN_MORE_EXPLANATION:-------------------------------------:

        If we look at diagram [ #DIA_P5D_MAIN# ]
        In: PAINT5D.D._ we could start with a global
        variable called "global_x , global_y" and 
        assign it to a "remainder_x , remainder_y" variable.
    
        If we chip away at it by figuring out which 256 block
        it is in and then subtracting the block index
        times 256, we will have @REBASE_LOCALED@ to
        a new xy remainder value that is local to
        the [ @til_qua ] instead of local to the
        entire 512x512 bitmap.

    :-------------------------------------:EVEN_MORE_EXPLANATION

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REBASE_LOCAL@
@_STACK_ADDRESS_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@STACK_ADDRESS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @STACK_ADDRESS:

        An array who's values tells us what quadrant to
        drill into at a given nesting depth. It is a way
        to compactly store the location within a quadtree
        or a quadtree like structure.

        For Example:
        
    //:   0   1   2   <<-- Nesting Levels ( NLEV[ # ] )
        [ 3 , 1 , 2 ] <<-- Quadrants      ( QUAD[ # ] )

           +---------------+---------------+
           |               |               | 
           |               |               |
           |   QUAD[ 0 ]   |   QUAD[ 1 ]   |
           |   NLEV[ 0 ]   |   NLEV[ 0 ]   |
           |               |               |
           |               |               |
           |               |               |
           +---------------+-------+---+---+ <--+
           |               |       |   |   |    |
           |               +       +---+---+    +--[ 1 ]
           |   QUAD[ 2 ]   |       | 2 |   |    |   
           |   NLEV[ 0 ]   +-------+---+---+ <--+
           |               |       |       |
           |               |       |       |
           |               |       |       |
           +---------------+-------+-------+
                           ^               ^
                           |               |
                           +-------+-------+
                                   |
                             QUAD[ 3 ] 
                             NLEV[ 0 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@STACK_ADDRESS@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_STACK_ADDRESS_@
@BACK_AND_FORTH_CONVERSION_TEST@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @BACK_AND_FORTH_CONVERSION_TEST:

    @VID_IID[ 0071 ]TIME[ 03H 38M 40S ]

        Is an easy way to check the validity of a conversion
        function by piping the output of one conversion
        function into the inverse conversion function.

        Example:
            func A_to_B( A )  //: Returns B
        
            func B_to_A( B )  //: Returns A

            A_1 = ( 5 );
            A_2 ; /** Not Set Yet **/

            A_2=( B_to_A( A_to_B( A_1 ) ) );

            if( A_1 != A_2 ){ FATAL_ERROR_FAILED_TEST(); };

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BACK_AND_FORTH_CONVERSION_TEST@
@NOOP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @NOOP : Means "NO OPeration"

            Typically we use this to subvert compiler 
            warnings about having unused variables.

            @VID_IID[ 0071 ]TIME[ 03H 30M 40S ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NOOP@
@DEP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @DEP: Shorthand for @DEPENDS_ON[ some_function ]

    @VID_IID[ 0071 ]TIME[ 00H 14M 18S ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DEP@
@TRAP_VALUES@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@_TRAP_VALUES_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    Plural form of @TRAP_VALUE.

    @VID_IID[ 0069 ]TIME[ 0H 25M 35S ]
    A trap value is an intentionally bogus value that we
    hope to NOTICE when debugging our code. Usually I use
    it to catch when I accidentially forget to initialize
    a variable.
    
    It is called a "TRAP VALUE" because we are setting
    traps for ourselves. But if things go wrong because
    we get in our OWN TRAP, it is easier to fix than if
    we just get WRONG RESULTS in our code with no clues
    left for us as to what we did wrong.

    @VID_IID[ 0077 ]TIME[ 00H 13M 35S ]
    @TRAP_VAL@ : Shorthands Of "@TRAP_VALUE" to save space.
    @TRP_VAL@  : Shorthands Of "@TRAP_VALUE" to save space.
    @TRA_VAL@  : Shorthands Of "@TRAP_VALUE" to save space.
    @TRAP@     : Shorthands Of "@TRAP_VALUE" to save space.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TRAP_VALUES@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_TRAP_VALUES_@
@SAME_VAR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @_SAME_VAR_@

        Means that the two variables you are asserting for
        equality are actually the EXACT SAME VARIABLE.
        Quite literally. One is probably a macro and the
        other is not and you are trying to make sure they
        are such.

    @SAME_VAR_SAME_ADDR@
    @_SAME_VAR_SAME_ADDR_@

        If they are indeed the exact same variable, then
        they should have the exact same location in memory.

        @VID_IID[ 0068 ]TIME[ 2H 59M 17S ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SAME_VAR@
@Conceptual_Members@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0068 ]TIME[ 1H 56M 45S ]

    @Conceptual_Members:

        Means the variables can be seen as belonging to
        a conceptual "struct" or "type". But there is no
        such formal "struct" or "type" in the code.

        For example:

        var first_name = "John"
        var last_name  = "Madison"

        Conceptually, these could belong to a 
        "full_name" struct. [ first_name ]and[ last_name ]
        are "conceputal_members" of a "full_name" struct
        that doesn't actually exist.

        In other words, a conceptual member is a member
        of an "IMPLIED" object.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Conceptual_Members@
@widdling_pixel_coordinate@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @widdling_pixel_coordinate@:

        Means I am taking a large coordinate value and
        "widdling it down" over successive calculations
        until NOTHING IS LEFT to derive various
        LOCAL COORDINATES that the original
        GLOBAL coordinate represents.
    
        In other words, we "widdle down" a global input
        coordinate to get all of the local variables
        that together can identify that global coordinate.

        SEE[  rem_i_x -&- rem_i_y                 ]
        FUNC[ aac2020_paint5d_glocpix_CTO_painpix ]
        FILE[ R:\G\AAC2020\LIB\PAINT5D.F._        ]
        @VID_IID[ 0068 ]TIME[ 1H 18M 43S          ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@widdling_pixel_coordinate@
#_WHY_PAINT5D_GET_PARAM_ORDER_##################################

    /** @VID_IID[ 0066 ]TIME[ 08H 14M 15S ] ***** **/
    /** #_WHY_PAINT5D_GET_PARAM_ORDER_# **/
    AAC2020_PAINT5D_Get(
        til_exp   /** TileExponent (TileSizeEnum) **/
    ,   til_lay   /** TileLayer ................. **/
    ,   loc_t_x   /** Local Tile X Coordinate     **/
    ,   loc_t_y   /** Local Tile Y Coordinate     **/
    ,&( val_cur ) /** [ val_cur / til_val ]       **/
    );;

##################################_WHY_PAINT5D_GET_PARAM_ORDER_#
@HARD_CODED@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @HARD_CODED@ :

        Means that some values in the code are hard coded.
        And we might want to find places where we hard
        coded things, so lets make notes of it when
        we [ can / remember ] .

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@HARD_CODED@
#_MORE_NAMES_MORE_PROBLEMS_#####################################

    @VID_IID[ 0066 ]TIME[ 05H 36M 47S ]
    #_MORE_NAMES_MORE_PROBLEMS_#:::::::

        I am refering to not fractionating your
        global variable namespace. In other words,
        ALL OF THE VARIABLE NAMES USED IN ALL OF YOUR CODE.

        The more variables names, the harder it is to 
        see the connections in the code.

        If it stands for the EXACT SAME THING
        then it should have the EXACT SAME NAME.

#####################################_MORE_NAMES_MORE_PROBLEMS_#
#_TILE_EXPONENT_AFFECTS_CAMERA_POSITION_########################
#_TILE_SIZE_AFFECTS_CAMERA_POSITION_############################

    @VID_IID[ 0066 ]TIME[ 03H 59M 25S ]   
    @VID_IID[ 0066 ]TIME[ 04H 00M 50S ]

    Say you are at tile location [ 5,5 ] and then
    you decide to switch to the LARGEST TILE EXPONENT.
       
    This tile is SO LARGE that it takes up the entire
    [ tile map / level map ]. Because of this, there is
    only ONE POSSIBLE COORDINATE for this mega large tile.

    It is [ 0 , 0 ].

    Thus, when you switch to the largest tile exponent,
    your brush location needs to switch from
    [ 5,5 ] to [ 0,0 ].
    
############################_TILE_SIZE_AFFECTS_CAMERA_POSITION_# 
########################_TILE_EXPONENT_AFFECTS_CAMERA_POSITION_#
#_VAR_ENUMS_SHOULD_COUNT_UP_WITH_NO_GAPS_#######################

    @VID_IID[ 0066 ]TIME[ 03H 29M 19S ]

    COMMENT_EXTRACTED_FROM[ TAUDEPO.D._ ]

    For simplicity, just order all of the enumerations
    sequentially without any gaps between them. As long
    as the numbers are between [ 0 -to- 255 ] inclusive,
    and DO NOT OVERLAP, we are fine.

    But might as well do everything sequentially to avoid
    the potential of accidential mistakes.

#######################_VAR_ENUMS_SHOULD_COUNT_UP_WITH_NO_GAPS_#
#_VARS_ARE_CLUSTERS_OF_FOUR_PIXEL_##############################
#_VARS_ARE_CLUSTERS_OF_4_PIXELS_################################

    UPDATE[ DATE[         2020_12_28  ]
    @VID_IID[ 0066 ]TIME[ 03H 18M 08S ] 

    Though 4 pixels DO store one variable (128bits max).
    We are geometrically laying out the pixels on a bitmap,
    and thus the last 2 pixels are not sequential in terms
    of memory address as you must offset by the stride of
    the bitmap to get to the last 2 pixels.

    ALSO... If we look at...
    1. DIAGRAM IN: TAUDEPO.D._
    2. DIAGRAM IN: TAUDIRT.D._

    We can see that the @VAR for the variable cell
    index. (SEE: #DIA_VAR_CEL# ) Is in the range
    of 0 to 255. As denoted by the usages of the variables:
    
        1. VAR_255          <-- Different Levels Of Terse
        2. DEX_VAR_255      <-- Different Levels Of Terse
        3. DEX_VAR_000_255  <-- Different Levels Of Terse
        5. VAR              <-- Different Levels Of Terse

################################_VARS_ARE_CLUSTERS_OF_4_PIXELS_#
##############################_VARS_ARE_CLUSTERS_OF_FOUR_PIXEL_#
#_VP1_IS_WHAT_USER_THINKS_OF_AS_CAMERA_#########################

    @VID_IID[ 0066 ]TIME[ 03H 02M 26S ]

    ------------------------------------------------------------
    Decided we should call these "p5d_vp1_***"
    instead of "p5d_cam_***" because that gives us
    more information about what the actual data 
    means.
    ------------------------------------------------------------

    ,.p5d_cam_lef = 'J' //: CAMERA_CONTROL : LEFT  
    ,.p5d_cam_rig = 'L' //: CAMERA_CONTROL : RIGHT 
    ,.p5d_cam_upp = 'I' //: CAMERA_CONTROL : UPP   
    ,.p5d_cam_dow = 'K' //: CAMERA_CONTROL : DOWN  
                        
    ,.p5d_cam_z_o = 'R' //: CAMERA_CONTROL : ZOOM  
    ,.p5d_cam_z_i = 'V' //: CAMERA_CONTROL : ZOOM  

#########################_VP1_IS_WHAT_USER_THINKS_OF_AS_CAMERA_#
@IMPLICIT_INTERFACE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   @IMPLICIT_INTERFACE[ KeyInn ]:

        A keyboard handler function that takes a 
        ascii character (A-Z) or (0-9) and does
        something with it. Returns an I32. (Signed 32bit int)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IMPLICIT_INTERFACE@
@DITTO_Y_AXIS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    If you see this, it means the math is exactly the same
    as the previous block, but the math is for the Y-axis
    instead of the X axis.

    When you see this comment, the Y-axis block may be
    LACKING commentary because that commentary only exists
    in the X-block to avoid excess clutter.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DITTO_Y_AXIS@
#_INV_ZOOMFIX_##################################################

        @VID_IID[ 0065 ]TIME[ 1H 8M 55S ]

        If we zoom in too far the rectangle inverts
        on itself and the lower and upper bounds
        swap places.

        ( x_0 (lower ) ends up greater than x_1(upper ) )

        /** ************************************ ***    
        u == "unknown" . Solve for the uknown.
        ( x_0_i32 - u )         == ( x_1_i32 + u )
        x_0_i32 - x_1_i32       == u + u
        x_0_i32 - x_1_i32       == 2 * u
        ( x_0_i32 - x_1_i32 ) / 2 == u
        *** ************************************ **/

##################################################_INV_ZOOMFIX_#
@DELTA_1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 0065 ]TIME[ 0H 23M 06S ]

    @DELTA_1@: In TAUTYPE.F._
               Means the delta of two values is exactly 1.



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DELTA_1@
#_ZOOM_CORRECTION_PULL_IN_MATH_#################################
#_OVERGROW_PULL_FIX_############################################

    @VID_IID[ 0065 ]TIME[ 0H 13M 18S ]

    If the zoom rectangle is TOO LARGE ( over 512x512 )
    this is how we pull it back in to be small enough.
    (Either 512x512 for even sized rectangle and )
    (       511x511 for an odd sized rectangle   )

    /** ******************************** ***
    ((x_1_i32-u) - (x_0_i32+u) + 1)== 512
     (x_1_i32-u) - (x_0_i32+u)     == 511
      x_1_i32-u  -  x_0_i32-u      == 511
      x_1_i32    -  x_0_i32 - 511  == +u  +u
      x_1_i32    -  x_0_i32 - 511  ==( u * 2 )
     (x_1_i32    -  x_0_i32 - 511)/2 =  u
    
        Distribute the negative one!
        (4-1) -(5 -1) == -1
        4-1  - 5 -1  == -3
        4-1  - 5 +1  == -1
    *** ******************************** **/

    DITTO FOR Y AXIS.

############################################_OVERGROW_PULL_FIX_#
#################################_ZOOM_CORRECTION_PULL_IN_MATH_#
#_PULL_MORE_IF_U_IS_FRACTION_###################################

    @VID_IID[ 0065 ]TIME[ 0H 4M 27S ]
    DATE[ 2020_12_28 ]

    If u value is fractional, we need to
    round UP that value and pull the rectangle
    in to be a 511 instead of 512.
    Basically, if rectangle started out odd,
    there is no way to correct it back to 
    exactly 512.

###################################_PULL_MORE_IF_U_IS_FRACTION_#
#_REMOVED_GAURD_CODE_2020_12_26_################################

        if( 1
            &&  ( wid - zom_u32 ) >=   1 //: #_NEG_FOR_ALL_# ://
            &&  ( hig - zom_u32 ) >=   1 //: #_NEG_FOR_ALL_# ://
            &&  ( wid - zom_u32 ) <= 512 //: #_NEG_FOR_ALL_# ://
            &&  ( hig - zom_u32 ) <= 512 //: #_NEG_FOR_ALL_# ://
        ){

            removed gaurd code on: 2020_12_26
            @VID_IID[ 0063 ]TIME[ 04H 23M 53S ]

        };;

################################_REMOVED_GAURD_CODE_2020_12_26_#
#_CAL_VALUES_WERE_BAD_IDEA_IN_TAUTYPE_TESTS_####################
#_HORRIBLE_IDEA_REMOVED_2020_12_26_#############################

    //: @VID_IID[ 01H 52M 14S ]                          ://
    //: Like "exp_***" values, but calculated in our     ://
    //: loop. Use to cross check against hard coded      ://
    //: expected values in our test table.               ://
    I32 cal_x_0;                                         
    I32 cal_x_1;
    I32 cal_y_0;
    I32 cal_y_1;

    ------------------------------------------------------------

    /** @VID_IID[ 0063 ]TIME[ 01H 51M 06S ]      **/
    /** calculated expected outputs to cross     **/
    /** check against hard coded expected outputs**/
    
    cal_x_0 = ((I32)act_x_0) + ((I32)tra_i_x) ;
    cal_x_1 = ((I32)act_x_1) + ((I32)tra_i_x) ;
    cal_y_0 = ((I32)act_y_0) + ((I32)tra_i_y) ;
    cal_y_1 = ((I32)act_y_1) + ((I32)tra_i_y) ;
    
    /** @VID_IID[ 0063 ]TIME[ 2H 01M 59S ]       **/ 
    /** Our calculated expected values were not  **/
    /** accounting for clamping within the bounds**/
    
    /** MIN CAP **/
    if( cal_x_0 <=   0 ){ cal_x_0 =   0; };
    if( cal_x_1 <=   0 ){ cal_x_1 =   0; };
    if( cal_y_0 <=   0 ){ cal_y_0 =   0; };
    if( cal_y_1 <=   0 ){ cal_y_1 =   0; };
    
    /** MAX CAP == ( 512 - 1 == 511 ) **/
    if( cal_x_0 >= 511 ){ cal_x_0 = 511; };
    if( cal_x_1 >= 511 ){ cal_x_1 = 511; };
    if( cal_y_0 >= 511 ){ cal_y_0 = 511; };
    if( cal_y_1 >= 511 ){ cal_y_1 = 511; };


    //:PASTED_HERE_ON[ 2020_12_26 ]                      ://
    //:PASTED_VIDEO[ @VID_IID[ 0063 ]TIME[ 2M 27M 15S ]  ://
    if( 0    /** expected(exp) == actual(act) **/
    || cal_x_0 != (I32)act_x_0 //: exp == act ://
    || cal_x_1 != (I32)act_x_1 //: exp == act ://
    || cal_y_0 != (I32)act_y_0 //: exp == act ://
    || cal_y_1 != (I32)act_y_1 //: exp == act ://
    ){
        printf( "[test_index(t_i)]:%d\n" , t_i );
    
        printf( "[cal_x_0:V:act_x_0]:(%d)(%d)\n"
                , cal_x_0 , act_x_0 );;
        printf( "[cal_x_1:V:act_x_1]:(%d)(%d)\n"
                , cal_x_1 , act_x_1 );;
    
        printf( "[cal_y_0:V:act_y_0]:(%d)(%d)\n"
                , cal_y_0 , act_y_0 );;
        printf( "[cal_y_1:V:act_y_1]:(%d)(%d)\n"
                , cal_y_1 , act_y_1 );;
    
        ERR("[CALC_VALUES_NO_MATCH_TEST_TABLE]");
    };;

####################_CAL_VALUES_WERE_BAD_IDEA_IN_TAUTYPE_TESTS_#
#############################_HORRIBLE_IDEA_REMOVED_2020_12_26_#
@REFERENCE_TO_A_POINTER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@REF_TO_PTR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @REFERENCE_TO_A_POINTER@:
    @REF_TO_PTR@:

        Just means we are passing a pointer by reference.
        But C does not have C++ "by reference" parameters.
        So we just use a double pointer and make sure:

            1. The pointer can NEVER be null.
            2. The pointer can NEVER be re-assigned.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REF_TO_PTR@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REFERENCE_TO_A_POINTER@
@REFS_N_NIL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @REFS_N_NIL@: REFS Never NIL

        References are just pointers that:

            1. Can NEVER be [ NIL / NULL ]
            2. Can NEVER be re-assigned.

            We can mimick C++ "pass by reference"
            by using double-pointers.

            Usually such double pointer will be named:

            BYREF_whatever
            BYREF_whatever_pointer_we_are_pointing_to

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REFS_N_NIL@
@BYREF@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @BYREF@:
        When you see this, it means you should think of
        the argument in the function as something being
        "passed in by reference".

        C does not have references like C++.

        But references are basically just pointers
        that are not allowed to be de-referenced.

        Well... That's not quite right...

        They are pointers that cannot be re-assigned
        to a new memory address.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BYREF@
#_NEG_FOR_ALL_##################################################

    _NEG_FOR_ALL_: All calculations on all lines use the
                   NEGATIVE sign.

    EXAMPLE:
        AAC2020_TAUTYPE_rec_inc_ZoomPull's section:
        gaurd_from_zooming_in_or_out_too_much
    
        Needs to be all negatives to correctly do it's
        bounds checking. @VID_IID[ 0060 ]TIME[ 1H 32M 25S ]

##################################################_NEG_FOR_ALL_#
#_TAKEN_FROM_SDF_013_###########################################

            //:#FIND_POINT_ON_SCREEN_PLANE#
            /** ************************************ ***
            Could possibly use these as slice planes.
            But for now using these to navigate our
            voxel map bounds.

            [ A ]Is_Directly_Above[ E ]On_Z_Axis
            [ B ]Is_Directly_Above[ F ]On_Z_Axis
            [ C ]Is_Directly_Above[ G ]On_Z_Axis
            [ D ]Is_Directly_Above[ H ]On_Z_Axis
            
                        (In World/Frag Coords)
                            [0,0,0] 
                                \
                A_B              \
            A----|------B  A -->  +=======+  <-- B
            |    |      |        /.       .\
            | rwC_001   |       / .       . \
            |    |      |      /  .       .  \
            C----|------D  C->+===============+<-D
                C_D           [   ._....._.   ]
                              [  /         \  ]
                              [ .           . ]
                              [/             \]
                              +===============+<-H

                              +===============+  
                              [\             /]
                              [ .           . ]
                              [  \_......._/  ]
                E_F           [   .       .   ]
            E----|------F  G->+===============+<-H
            |    |      |      \  .       .  /
            | rwC_002   |       \ .       . /
            |    |      |        \.       ./
            G----|------H  E -->  +=======+  <-- F
                G_H          
                            
            *** ************************************ **/
###########################################_TAKEN_FROM_SDF_013_#
#_SDF_PATENT_SHADER_PLANK_UNITS_################################

    EXTRACTED_FROM[ R:/G/SDF2020/SDF_019._ ]

    //:KEY:--------------------------------------------------://
    VARS:

        rfp : reset_flag_pixel
        rfb : reset_flag__byte (Alpha channel of rfp)
        fcc : frag_Centered_coord
        f_c : frag_coord (Discreet_Integer_Pixel_Value)
        csC : cross_section_COLOR
        csL : cross_section_LOCAL. RANGE[ 0 - 15 ]
        csF : cross_section_FIRST_FLOOR_OF_GIVEN_COLOR
        csG : csG==csF. Use csF. csG == cs:GlobalFloorIndex
        csI : cross_section_INDEX ( USE: csL )
        csX : cross_section CELL_64_64 location, X-axis
        csY : cross_section CELL_64_64 lcoation, Y-axis
        coX : Crosssection_Origin:X (left pixel of csX)
        coY : Crosssection_Origin:Y (top  pixel of cxY)
        p_x : ACTUAL pixel:x location on texture.
        p_y : ACTUAL pixel:y location on texture.
        p_z : NO SUCH FUCKING THING. 2D Texture.
        c4d : Color_4_Dimensional. ( vec4 type )
        byt : BYTe (0-255 value, a U32 (uint32))
        v_i : Voxel 1D Index specifying voxel [X,Y,Z]
        v_d : No such thing. DO_NOT_USE_FOR[ v_i ]
        v_x : Voxel_X( von[0].x /|/ von_000.x )
        v_y : Voxel_Y( von[0].y /|/ von_000.y )
        v_z : Voxel_Z( von[0].z /|/ von_000.y )
        c4x : NOT_USED_AMBIGUOUS_COULD_IDENTIFY[ csX | cqX ]
        c4y : NOT_USED_AMBIGUOUS_COULD_IDENTIFY[ csY | cqY ]
        cqX : RGBA Cell Quadrant X ( 0 or 1 )
        cqY : RGBA Cell Quadrant Y ( 0 or 1 )
        t_x : Tile_X : ONLY_FOR_2D_Data! (Not Voxels)
        t_y : Tile_Y : ONLY_FOR_2D_Data! (Not Voxels)
        t_z : NO_SUCH_THING( Tiles Are Now Only 2D  )
        v3d : Voxel_location_3D ( ivec3( v_x , v_y , v_z ) )
        cmX : Chopped_Misslesilo_X (512x512 [cqX,cqY] org)
        cmY : Chopped_Misslesilo_Y (512x512 [cqX,cqY] org)
        msX : You_Probably_Mean[ cmX ]FIX_IT!
        msY : You_Probably_Mean[ cmY ]FIX_IT!


        v_i_512 : v_i , abstracting data as 512x512 bitmap.
        p_x_512 : p_x , abstracting data as 512x512 bitmap.
        p_y_512 : p_y , abstracting data as 512x512 bitmap.
        p_x_256 : p_x , ACTUAL  location on 256x256 bitmap.
        p_y_256 : p_y , ACTUAL  location on 256x256 bitmap.
        pxy_256 : DONT_USE. USE[ xyc_256 ]
        xyc_256 : ivec3( p_x , p_y , csC )

        tib: TIle__Byte (Tiles  are 2D)
        vob: VOxel_Byte (Voxels are 2D)
      
    TOKENS:

        D01: Diagram # 1

    FUNCS:
       
        v_i_512_CTO_vob : GET_VOB ,use: DEX
            v3d_CTO_vob : GET_VOB ,use: ivec3( v_x,v_y,v_z )

    NOT_ACTUALLY_FUNCTIONS:

        GET_vob_USE_dex ---> USE[ v_i_512_CTO_vob ]
        GET_vob_USE_v3d ---> USE[     v3d_CTO_vob ]
        VOB_XYZ -----------> USE[     v3d_CTO_vob ]
        VOB_DEX -----------> USE[ v_i_512_CTO_vob ]

    SHORTHAND_PHRASES:

        GET_TIB : GET TIle__BYTE ( Tile  Value 0 - 255 )
        GET_VOB : GET VOxel_BYTE ( Voxel Value 0 - 255 )
     
    AVOID:

        fpc: Looks too much like "percent something..."
             Use "fcc" instead.

        z64 : Active Layer Of Voxel Map in 2D view.
              USE[ v_z ](Voxel_Z)

        c6x : Cell 64 X: X voxel cell in 2D crossSectionView
              USE[ v_x ](Voxel_X)

        c6y : Cell 64 Y: Y voxel cell in 2D crossSectionView
              USE[ v_y ](Voxel_Y)

    @SIXTEEN_FLOORS_OF_EACH_COLOR@
        Think of a skyscraper where the bottom
        16 floors are RED, next 16 floors green,
        next 16 floors BLUE, last 16 floors ALPHA.

        AND... @EACH_FLOOR_IS_64_BY_64@

    //:--------------------------------------------------:KEY://

/** ******************************************************** ***

    #PIXEL_255_ALPHA############################################

        Bottom Left Corner Pixel [255,255] ALPHA BITS:

        MSB: 1  :  Data Initilialized Bit
             1  :  2D or 3D view of tilemap?
                :  0 : 2D view
                :  1 : 3D view
        
             1  : ---+
             1  :    |
             1  :    +-- What layer are we on?
             1  :    +-- Number in range:[0 - 63]
             1  :    |   (When 2D view is selected)
        LSB  1  : ---+

    ############################################PIXEL_127_ALPHA#
    #TILE_DATA_LAYOUT###########################################

        ( 512 x 512 ) === ( 64 x 64 x 64 )

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          +--- Tip Of Missle Silo.                    
          |    High values mean we are DEEPER into    
          V    the data.                              
    ====+---+===================================================
        | R |  <-- csC == 0  (  0 <= v_z  <= 15 )   
        +---+
        | G |  <-- csC == 1  ( 16 <= v_z  <= 31 )      
        +---+  
        | B |  <-- csC == 2  ( 32 <= v_z  <= 47 )    
        +---+
        | A |  <-- csC == 3  ( 48 <= v_z  <= 63 )   
        +---+

        @---+ @---+  @ == [ cmX , cmY ]
        | R | | G |
        +---+ +---+     cm === "Chopped_Missilesilo"
        @---+ @---+     Imagine we pre-fabricate
        | B | | A |     the colored floors of missle
        +---+ +---+     silo in factory and lay it out
        |         /     in a 512x512 field.
        |        /
        |       |                          ( CRO_SEC )
        |       |                          ( 64 x 64 )
        |<-512->|         |<-256->|             |
    --- +---+---+ ------- +-------+      +-+-+-+V+
     |  | R | G |         |       |      |_|_|_|_|
    D01 +---+---+         |   G   | -->  |_|_|_|_|
     |  | B | A | \       |       |      |_|_|_|_|
    --- +-^-+---+  \_____ +-------+      +_|_|_|_+
          |                           ___|       |
         cqX == 0                    /           |
         cqY == 1                   /            |
         csC == 2                  /             |
                                  /              |
                                 |<- 256 pixel ->|
    @16_64X64_FLOORS_ON_4X4_GRID@+---+---+---+---+ ---
                    |           /| 0 | 1 | 2 | 3 |  |
                    +----------> +---+---+---+---+  |
                             /   | 4 | 5 | 6 | 7 |  |
        [+][coX,coY]+---------->[+]--+---+---+---+  4
           [csL== 8]|      /     | 8 | 9 |10 |11 | cell
    +---------------------+      +---+---+---+---+  |
    |                            |12 |13 |14 |15 |  |
    +   +----------------------- +---+---+-^-+---+ ---
    |   |                                  |
    |   |                              CELL_64_64  
    |   |                              csL === 14
    |   |                              csY ===  3
    |   |                              csX ===  2
    |   |   +---+
    |   |   | R | CRO_SEC(S):  0 -to- 15 (16 total)
    |   |   +---+ 
    |   |   
    |   +-- +---+
    |       | G | CRO_SEC(S): 16 -to- 31 (16 total)
    +---+-- +---+
            
            +---+
            | B | CRO_SEC(S):32 -to- 47 (16 total)
            +---+
            
            +---+
            | A | CRO_SEC(S): 48 -to- 64 (16 total)
            +---+

    ###########################################TILE_DATA_LAYOUT#
    #WHY_VOB_DEX################################################

        Because we need to somehow encode [X,Y,Z]
        value of voxel location as a single integer
        that we can pass around in our 
        stack addresses ( sta_add ).

    ################################################WHY_VOB_DEX#
    #EXTRA_MAPS:################################################

        Once we are ACTUALLY using a 512-x-512 texture
        we will have 3 extra maps worth of data.

        I think we could do it like this:

        MAP_001: Original Voxel Map
        MAP_002: Lighting       Map
        MAP_003: Sprites or other moving entities.
        MAP_004: Elemental Things. Fire, Water, ETC.

    #################################################EXTRA_MAPS#
    #FRACTAL_AUTO_TILING_NESTING################################
        ._.
        |_| 1x1                (VON_005 /|/ sta_con[5])  
         |
        .V._._.
        |_|_|_|
        |_|_|_| 3x3            (VON_004 /|/ sta_con[4])
        |_|_|_| 
         \   /
          \ /
        ._.V._._._._._.
        |_|_|_| |_|_|_|
        |_|_|_| |_|_|_|
        |_|_|_| |_|_|_|
        |_ _ _   _ _ _| 7x7    (VON_003 /|/ sta_con[3])
        |_|_|_| |_|_|_| ( 7x7 of PREVIOUS )
        |_|_|_| |_|_|_| ( NOT: 7x7 pixels )
        |_|_|_|_|_|_|_|   
         \           /
          \         /
           \       /  Each cell in the 
            \     /   15x15 (VON_002) below 
             \   /    is a 7x7 (VON_003)
              \ /
        ._._ _ V._._._._._._._._._._._.
        |_|_|_|_|_|_|_| |_|_|_| |_|_|_|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_ _ _   _ _ _| |_ _ _   _ _ _|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_|_|_|_|_|_|_| |_|_|_|_|_|_|_|
        |_ _ _ _ _ _ _   _ _ _ _ _ _ _|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_ _ _   _ _ _| |_ _ _   _ _ _|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_|_|_| |_|_|_| |_|_|_| |_|_|_|
        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|
        15x15: (VON_002 /|/ sta_con[2])
        
        +----+   +----+
        | 31 | X | 31 | 31x31  (VON_001 /|/ sta_con[1])
        +----+   +----+
        
        +----+   +----+
        | 63 | X | 63 | 63x63  (VON_000 /|/ sta_con[0])
        +----+   +----+
    
        We stop marching into sub-divided space when
        we hit VON_005. The size of VON_005 is one
        pixel. (1 frag coord).
        
        V5R (  1 ) //:   VON_005 Relative Span       ://////////
        V4R (  3 ) //:   VON_004 Relative Span       ://////////
        V3R (  7 ) //:   VON_003 Relative Span       ://////////
        V2R ( 15 ) //:   VON_002 Relative Span       ://////////
        V1R ( 31 ) //:   VON_001 Relative Span       ://////////
        V0R ( 63 ) //:   VON_000 Relative Span       ://////////
        
        //:Absolute_Spans::::::::::::::::::::::::::::://////////
        //:---------------------------------:123456::://////////
        //:                                 :      ::://////////
        V5A (  1                        ) //:     1::://////////
        V4A (  1 * 3                    ) //:     3::://////////
        V3A (  1 * 3 * 7                ) //:    21::://////////
        V2A (  1 * 3 * 7 * 15           ) //:   315::://////////
        V1A (  1 * 3 * 7 * 15 * 31      ) //:  9765::://////////
        V0A (  1 * 3 * 7 * 15 * 31 * 63 ) //:615195::://////////
        //:                                 :      ::://////////
        //:---------------------------------:123456::://////////
        //:WIKIPEDIA:                              ::://////////
        All integers with 7 or fewer decimal digits::://////////
        [...]can be converted exactly into an IEEE ::://////////
        754 single-precision floating-point value. ::://////////
        //:---------------------------------:123456::://////////
        
        Lets encode it as this in the .IMAGE code:
        
        I32 V_R[6] =I32[6](  1 , 3 , 7 , 15, 31, 63 );
        I32 V_A[6] =I32[6]( 
            (  1 * 3 * 7 * 15 * 31 * 63 ) //:V0A
        ,   (  1 * 3 * 7 * 15 * 31      ) //:V1A
        ,   (  1 * 3 * 7 * 15           ) //:V2A
        ,   (  1 * 3 * 7                ) //:V3A
        ,   (  1 * 3                    ) //:V4A
        ,   (  1                        ) //:V5A
        );;
        
        Because we want to keep everything ABSOLUTE
        rather than [local/relative], there is probably
        no need for V_R[6]. Grid collision divides by
        V_A[6] to figure out where you are in space.
        
    ################################FRACTAL_AUTO_TILING_NESTING#
    #QUADRANT_XY_BIT_SHIFT_SANITY_CHECK#########################

        Sanity Check For: 
        csC = (cqY << 1 ) | ( cqX << 0 );

        +---+---+
        | 0 | 1 |
        +---+---+
        | 2 | 3 |
        +---+---+

        0 : x==0 , y==0 ,  bin:00  dec:00
        1 : x==1 , y==0 ,  bin:01  dec:01
        2 : x==0 , y==1 ,  bin:10  dec:02
        3 : x==1 , y==1 ,  bin:11  dec:03

    #########################QUADRANT_XY_BIT_SHIFT_SANITY_CHECK#
               
*** ******************************************************** **/


################################_SDF_PATENT_SHADER_PLANK_UNITS_#
#_WHY_NO_INSTANCES_IN_GPUDATA_##################################

    UPDATE_DATE[2020_12_25]: ***********************************

        GPUDATA now serves as a TEMPORARY container for 
        passing information about sub-system texture 
        memory.
    
        All of the data LIVES in file scope variables.

        Because: FLAT IS BETTER THAN NESTED.

        Specifically in:

        PIXNAME.D._

            This also gives us a high level summary of all of
            the important 512x512 system data allocations
            in the entire game engine within one file.

    ***********************************: UPDATE_DATE[2020_12_25]

    EXTRACTED_FROM[ DOC/WHY_NO_INSTANCE_IN_GPUDATA.TXT ]

    WHY_NO_INSTANCES_IN_GPUDATA: (WRITTEN_BEFORE[ 2020_12_25 ])
    -------------------------------------------------------- 
    I will NOT have instances of AAC2020_GPUDATA             
    in [ this / GPUDATA.D._ / GPUDATA.H._ ] file.            
                                                             
    This is because RIGHT NOW I want a texture for           
    graphics, and much later I know I'll be adding           
    another texture for ENEMY_POSITIONS or something         
    non-graphical in nature.                                 
                                                             
    Comming BACK to this GPUDATA library to add              
    something of that much significance would                
    be a violation of my layered design.                     
    -------------------------------------------------------- 

##################################_WHY_NO_INSTANCES_IN_GPUDATA_#
#_WHY_GPUDATA_PAINT5D_##########################################

    UPDATE[ 2020_12_25 ]: **************************************

        After working with "AAC2020_GPUDATA_PAINT5D"
        I have decided this namespace pattern breaker
        is a pain in the ass and have re-named it to
        "AAC2020_PAINT5D".

    **************************************: UPDATE[ 2020_12_25 ]

    EXTRACTED_FROM[ DOC/WHY_GPU_DATA_PAINT5D.TXT ]

    WHY_GPUDATA_PAINT5D:

        AAC2020_GPUDATA_PAINT5D: 
        
            Memory For a 5 Dimensional
            MS-PAINT program. I was thinking about 
            calling it "AAC2020_GPUDATA_GENERIC" because
            I wanted a chunk of memory I wasn't sure what
            to do with I could start to work with.
        
            HOWEVER!
        
            I want to avoid being ABSTRACT whenever 
            possible to make the project easier to follow.
        
            So the first instance of AAC2020_GPUDATA
            in our project will be:
        
                VAR:   AAC2020_GPUDATA_PAINT5D_dat
                FILE:  AAC2020_GPUDATA_PAINT5D.D._

            ----------------------------------------------------

            The end goal is a GAME. However, whenever possible,
            compiling up to a non-terminal point in our
            LIBCHAN (library_chain) should yeild a usable 
            product.

            Therefore, when we compile up to:

##########################################_WHY_GPUDATA_PAINT5D_#
#_WHY_GPU_DATA_#################################################

    EXTRACTED_FROM[ DOC/WHY_GPUDATA.TXT ]

    This was NOT named GRADATA (graphics data)
            because from past experience I know that 
            some of the data on the GPU will be used for
            rendering while other data on the GPU may be
            used for things like storing the current 
            position of enemies.
    
            GPUDATA will keep a local CPU cache of the
            arrays of data it pushes to the GPU. Being
            careful to always keep both sets of data
            in sync (the same).
    
            The reason for this is that querying GPU values
            for CPU tasks will use up on bandwidth AND be
            relatively slow.

#################################################_WHY_GPU_DATA_#
#_WHY_FRAGBED_DEFAULT_COPY_#####################################

    EXTRACTED_FROM[ DOC/WHY_FRAGBED_DEFAULT_COPY.TXT ]

    WHY_FRAGBED_DEFAULT_COPY:

        We copy all of the default shaders hard coded
        into the .EXE's memory (.text segment) so that
        all of our shader pointers are FREEABLE pointers.

        This [consistency/regularity/normalization] makes
        the code simpler. But it also means a bigger memory
        footprint.

#####################################_WHY_FRAGBED_DEFAULT_COPY_#
#_WHY_COG_IN_DIAGRAM_###########################################

    EXTRACTED_FROM[ DOC/WHY_COG_IN_DIAGRAM.TXT ]

    WHY_COG_IN_DIAGRAM:

    COG.H is in our diagram because previous experience
    has told me that setting up OpenCL <==> OpenGL 
    interop is NOT a trivial task.

    If we decide to add OpenCL or Vulkan to the project,
    the COG.H library will be stubbed into this position.

    However, Since it might also be doing OpenGL <==> Vulkan
    or Vulkan <==> OpenCL interop, we need a different name.

           123_123
    Maybe: GINTLAY (Graphics_INTerop_LAYer)
           1234567

###########################################_WHY_COG_IN_DIAGRAM_#
#_PREVIOUS_PROJECT_#############################################

    EXTRACTED_FROM[ DOC/PREVIOUS_PROJECT.TXT ]

    RANT:(BEGIN)

    I write so much code that I sometimes lose track of things
    written a long time ago. Brain research on memorization
    says that forming linked lists in your head can help
    remember things. This makes sense. Because memory is
    just associations. And if you have an orphaned WIKIPEDIA
    article (metaphore) in your head, there is no way to get
    there. You need both memory AND a mechanism for retrieval.

    RANT:( END ) 


    Comment below extracted from AAC2020.C11 .

    //: PREVIOUS_LIBRARY: A2_JC.JS ------------------------- ://
    //: CURRENT__LIBRARY: AAC2020                            ://
    //:                                                      ://
    //: Re-write of A2JC ( R:\G\A2_JC ) into C only code.    ://
    //: A2_JC:DEMO[ file:///R:/G/A2_JC/AA2.HTM         ]     ://
    //: A2_JC:ANIM[ https://imgur.com/XiNdLvT          ]     ://
    //: A2_JC:GITH[ github.com/HeavyMetalCookies/A2_JC ]     ://
    //: ---------------------------------------------------- ://

#############################################_PREVIOUS_PROJECT_#
#_LIBRARY_CHAIN_################################################

    EXTRACTED_FROM[ DOC/LIBRARY_CHAIN.TXT ]

    ******************************************************** ***
                                                             
    Goal: Project composed of a chain of libraries (LIBCHAN)    
        that we can split at ANY POINT to do a binary search  
        on the project.                                       
                                                             
    Why:                                                     
            1.  DEBUGGING:                                   
                For those really hard to debug moments       
                when you've introduced undefined behavior.   
                                                             
            2.  UNDERSTANDING:                                  
                I think the reason my boss had such a better    
                understanding of the code base at "IDB" was     
                because he was around to BUILD it. By keeping   
                a [ layered / chained ] approach, the goal is   
                for a newcomer to this code to know exactly how 
                the project was built. Understanding the        
                [ journey / path ] taken to build up this code  
                to where it is now is vital to an expert level  
                understanding of the code.                      
    Rules:                                                      
                                                            
        1. Build up project in small DOTADIW pieces.        
        2. LOWER LIBRARIES CANNOT REFERENCE HIGHER LIBS     
                                                            
        DOTADIW: Do One Thing And Do It Well                
                                                            
    ******************************************************** **/

################################################_LIBRARY_CHAIN_#
#_DATA_THEN_FUNCTIONS_##########################################

    EXTRACTED_FROM[ DOC/DATA_THEN_FUNCTIONS.TXT ]

    DATA_THEN_FUNCTIONS

        Everything is either data or functions.
        
        Why:(BEG)
        |
        |   Take a dependency problem where classes
        |   "A" and "B" both reference each other in their
        |   implementations:
        |   
        |       The_Problem: -------------------------------- ::
        | 
        |           #include MY_CLASS_A.C
        |           #include MY_CLASS_B.C
        | 
        |       :: -------------------------------- :The_Problem
        |   
        |   ABOVE won't compile without forward declarations.
        |   I am not a fan of this trickery.
        | 
        |       My_Fix: ------------------------------------- ::
        | 
        |       //:DATA BEFORE FUNCTIONS:
        | 
        |           #include MY_CLASS_A.D._
        |           #include MY_CLASS_B.D._
        | 
        | 
        |       //:FUNCTIONS AFTER DATA:
        | 
        |           #include MY_CLASS_A.F._
        |           #include MY_CLASS_B.F._
        |           
        |       :: ------------------------------------- :My_Fix
        Why:(END)

##########################################_DATA_THEN_FUNCTIONS_#
##_DOCUMENTATION_DOT_TXT_2020_12_25_############################

    EXTRACTED_FROM[ DOC/DOCUMENTATION.TXT ]

    ******************************************************** 
                                                             
    This file ( DOCUMENTATION.TXT ) only exists because I    
    figured someone new to the project would probably        
    start here. Actual documentation in files listed below.  
                                                             
    ******************************************************** 
    ******************************************************** 
                                                             
    SUMMARY  (S): FILE[ DOC/_S_ ]                            
    FUNCTION (S): FILE[ DOC/_F_ ]                            
    DATA     (S): FILE[ DOC/_D_ ] 
    HASHTAG  (S): FILE[ DOC/_H_ ] ( #WHATEVER# , @WHATEVER@ )
    
    ********************************************************  
    ********************************************************  
    #WHATEVER#  Cut comments out from source code and replace
                with hastag summary. #HASHTAG_COMMENT#
                
    @WHATEVER@  Will be found in HASHTAG DOCUMENTATION (_H_)
                Do not split into a "at" _A_ file because
                sometimes HASHTAG _H_ documentation includes
                diagrams where we need to use "@" to 
                succinctly point out variable.
                
                Example:
                
                @EOV@              
                   \
                    +---+---+  EOV: Example Origin Variable
                    |   |   |
                    +---+---+
                    |   |   |
                    +---+---+
    
    ********************************************************  

#############################_DOCUMENTATION_DOT_TXT_2020_12_25_#
#_GAKU_DESIGN_NOTES_TXT_########################################

    EXTRACTED_FROM[ DOC/DESIGN_NOTES.TXT ]

    From: GAKU.H

    We want a dependency something conceptually like this:
    ( A Bindings layer for OpenGL and others, then a )
    ( COG layer that creates interops between different )
    ( graphics libraries. )

    //|¯¯|¯¯|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|¯¯|¯¯|//
    //|  |  |                                |  |  |//
    /* //|--|// */#include "../COG/COG.H"  //|--|  |// 
    //|  |  |                                |  |  |//
    //|  |  |      GLEB_SWIN  <--Gets Win32  |  |  |//
    //|  |  |         ||         Window      |  |  |//
    //|  |  |         ||                     |  |  |//
    //|  |  Gets      ||               Gets  |  |  |//
    //|  |OpenGL --> GLEB     CLEB <-- OpenCL|  |  |//
    //|  Context         \   /         Context  |  |//
    //|  |  |             \ /                |  |  |//
    //|  |  |             COG <===== CO:CO_mpute|  |//
    //|  |  |                         G:G_raphics  |//
    //|  |  |              |            Gets GLCL  |//
    //|  |  |              |            Context |  |//
    //|  |  |    +---+---GA_KU---+---+       |  |  |//
    //|  |  |    |                   |       |  |  |//
    //|  |  |    |GA: OpenGL Code    |       |  |  |//
    //|  |  |    |                   |       |  |  |//
    //|  |  |    |KU: OpenCL Code    |       |  |  |//
    //|  |  |    |                   |       |  |  |//
    //|  |  |    |GAKU: Coordination |       |  |  |//
    //|  |  |    |      GA<==>KU code|       |  |  |//
    //|  |  |    |                   |       |  |  |//
    //|  |  |    |GAKUSHARE:         |       |  |  |//
    //|  |  |    |Implementation of  |       |  |  |//
    //|  |  |    |GA<==KU            |       |  |  |//
    //|  |  |    |coordination code. |       |  |  |//
    //|  |  |    |                   |       |  |  |//
    //|  |  |    |GAKU/GAKU_ is only |       |  |  |//
    //|  |  |    |PUBLIC namespace   |       |  |  |//
    //|  |  |    |to be used by      |       |  |  |//
    //|  |  |    |other libraries    |       |  |  |//
    //|  |  |    |down the chain.    |       |  |  |//
    //|  |  |    +-------------------+       |  |  |//
    //|  |--|                                |--|  |//
    //|  |  |                                |  |  |//
    //|__|__|________________________________|__|__|//

    Commit Messages:

        WHITESPACE_CRASH:
            Blanks lines with WHITESPACE characters 
            cause file reading to crash. Specifically
            OPEN_GL_SEARCH_PATHS.TXT

########################################_GAKU_DESIGN_NOTES_TXT_#
@TREE_LEVEL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @TREE_LEVEL@: 

        Identifies that the code you are looking at
        is somehow part of a nesting level of a
        quad tree or quad tree like data-structure.

        @VID_IID[ 0057 ]TIME[ 7H 54M 10S ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TREE_LEVEL@
@GRASPING_AT_STRAWS_WITH_TEST_CODE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @GRASPING_AT_STRAWS_WITH_TEST_CODE@ :

    Seems that "grasping at straws" with bugs found by
    unit test code is a common theme in our life. So
    when you see this annotation in code it means we
    added that code because we have no clue what is
    going on and we are just trying "random" things
    all over the place to hopefully find the
    source of some type of problem.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@GRASPING_AT_STRAWS_WITH_TEST_CODE@
#DONT_GET_STUCK_IN_AN_OOP_TRAP##################################

    @VID_IID[ 5H 25M 24S ] <<- when I wrote the below
    @VID_IID[ 5H 30M 51S ] <<- after I explained it.
    @VID_IID[ 5H 33M 46S ] <<- okay. Really stopping stream now.

    When doing the code for: AAC2020_TAUTYPE_rec_inc...
    We do ____NOT____ want a struct type for the[ rec_inc ].

    REASONS:
        1. More code.
           1.A: Deserialize Into A rectangle.
           1.B: Manipulate Rectangle
           1.C: Re-serialize rectangle into bitmap bytes.

        2. Who is the canonical copy? The data in the bitmap?
           Or the rectangle we extracted from the bitmap.

    By just saying "Hey, a rectangle object exists in "
    "this location on the bitmap data". We can directly
    manipulate it in place. 1 step. Rather than 3.

##################################DONT_GET_STUCK_IN_AN_OOP_TRAP#
#STUPIDCODE_REPLACED_WITH_1_EQUALS_1############################

    THIS CODE:

        if( 
        &&  t2.i_x >= r2->x_1 //:last_x_of_inclusive_range
        &&  t2.i_y >= r2->y_1 //:last_y_of_inclusive_range
        ){
        
            ....whatever_code_bla_bla_bla....
        };;

    Replaced With This Code:

        if( 1 == 1 ){
        
            ....whatever_code_bla_bla_bla....
        };;

    IN: TAUSYNC.F._ 
    IN: FUNCTION[ aac2020_tausync_Run(...) ]

    @VID_IID[ 0054 ]TIME[ 7H 37M 35S ]

############################STUPIDCODE_REPLACED_WITH_1_EQUALS_1#
@STFU_GCC@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @STFU_GCC: Shut_The_Fuck_Up:GCC 
              (GCC:Gnu_Compiler_Collection)

                The code annoted with this is done so in 
                order to quelch a compiler warning of 
                some sort.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@STFU_GCC@
#_RESET_HISTOGRAM_##############################################
#_ZERO_OUT_HISTOGRAM_###########################################

    @VID_IID[ 0053 ]TIME[ 7H 36M 51S ]

    To help with writing unit tests for TAUSYNC.F._
    we need summary variables to give us a high level
    overview of what was done when we last called the
    SYNC command. ( aac2020_tausync_Run() )

    NAMELY:

        1: aac2020_tausync_num_dirty_pix_pushed

           Stored as a file scope variable.

        2: num_dirty_sectors_pushed_to_gpu

           Returned as I32 from function.

##############################################_RESET_HISTOGRAM_#
###########################################_ZERO_OUT_HISTOGRAM_#
#V_IS_ZERO_TO_ZERO_FOR_THIS_TEST################################

    /** #V_IS_ZERO_TO_ZERO_FOR_THIS_TEST# **/
    /** @VID_IID[ 0053 ]TIME[ 7H 4M 50S ] **/

    The "V" (Variable Index) Must only be ONE loop iteration
    for these nested loops. Because we only want to set
    ONE DIRTY PIXEL per 32x32 block.

    Because, we are trying to get the number of dirty 
    blocks to match the number of dirty pixels in
    this test.

################################V_IS_ZERO_TO_ZERO_FOR_THIS_TEST#
@N_P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @N_P : aac2020_tausync_num_dirty_pix_pushed
           [N]umber_of_[P]ixels
    
            SEE[ TAUSYNC.D._ ]
 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N_P@
@p1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@p2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@p3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@p4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_IID[ 4H 17M 1S ]

    @p1 : Pixel 1 of 4 of TAU variable.
    @p2 : Pixel 2 of 4 of TAU variable.
    @p3 : Pixel 3 of 4 of TAU variable.
    @p4 : Pixel 4 of 4 of TAU variable.

        Each variable that we want to store on the GPU
        is packed into a Uint32 RGBA texture.

        Each variable gets a cluster of 4 pixels.

        Meaning we can store up to a 128bit unsigned
        integer if needed.

        Also, we decided on 4 pixels because we commonly
        need to encode RECTANGLES that have exactly
        4 - 32bit unsigned integers defining them.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@p1@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@p2@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@p3@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@p4@
@VID_IID[ 0053 ]TIME[ 2H 9M 56 ]@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    AzarlakTwitch: It's flexible in the sense
    that metal is flexible; It can be bent in
    any way you like,but it takes a lot of
    effort,and you really don't want to keep
    bending it back and forth,or everything's
    gonna break ;)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@VID_IID[ 0053 ]TIME[ 2H 9M 56 ]@
#FPT############################################################

    #FPT# : FOLDER NAME: [F]ake[P]roject[T]ree
                          F_ake_P_roject_T_ree
                          Fake_Project_Tree

############################################################FPT#
#N_IS_A_NON_STANDARD_FILE_EXTENSION#############################
#G_IS_A_NON_STANDARD_FILE_EXTENSION#############################

    .N._ : Files are NOTES files. 

    However the only filetypes that are standard are:

        .D._: DATA
        .F._: FUNCTIONS

    We can invent lots of other extensions, but that will
    inevitably spiral out of control and make our code
    far too granular.

    So, do not expect the user of code base to have to
    remember anything except ".D._" and ".F._".

#############################N_IS_A_NON_STANDARD_FILE_EXTENSION#
#############################G_IS_A_NON_STANDARD_FILE_EXTENSION#
@NEG_OOB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@POS_OOB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@OOB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @OOB: Out Of Bounds 1D INDEX or 2D [X|Y] COORDINATE.
    
        Typically an INDEX value within some type of
        tilemap or pixel array structure that is either
        less than ZERO (NEG_OOB) or >= the [WID|HIG]
        of the [ tilemap / bitmap ] data.

        @NEG_OOB: Negative Out Of Bounds Index
        @POS_OOB: Positive Out Of Bounds Index

        @OOB_NEG: SEE[ @NEG_OOB ]
        @OOB_POS: SEE[ @POS_OOB ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOB@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NEG_OOB@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@POS_OOB@
@4X4_C@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@16X16_C@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @4X4_C   : Denotes 4x4 Cells. EXAMPLE: TAUDIRT.D._
    @16X16_C : Denotes 4x4 Cells. EXAMPLE: TAUDIRT.D._

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@4X4_C@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@16X16_C@
@TEMP_STACK_VARS_FOR_SCOPE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    VID_IID[ 0051 ]TIME[ 4H 41M 50S ]

    These variables must have been created inbetween
    some scope operators within the body of a function.

    EXAMPLE:

        int main( void ){

                { //:extra scope

                    int i_ll_die_if_i_leave_my_scope;

                } //:extra scope

            //: i_ll_die_if_i_leave_my_scope 
            //: DOES NOT EXIST HERE.
    
        };

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TEMP_STACK_VARS_FOR_SCOPE@
#IID_0051_3H_45#################################################

    ************************************************************
    This code was stripped out of the source at the timestamp
    of 3 hours and 45 minutes. VID_IID[ 0051 ].
    ************************************************************

        #if( AAC2020_TAUDIRT_BUG_001 >= 1 ) //:##://
        LOG( "[BEFORE:........................]",0);
        P_R( "[BEFORE:rec_032]:" , &REC_032 );
        P_R( "[BEFORE:prv_032]:" , &prv_032 );
        
        printf( "REC_032.x_0 = MIN( %d , %d )\n",
                prv_032.x_0 , x_C );;
        printf( "REC_032.x_1 = MAX( %d , %d )\n",
                prv_032.x_1 , x_C );;
        
        printf( "REC_032.y_0 = MIN( %d , %d )\n",
                prv_032.y_0 , y_C );;
        printf( "REC_032.y_1 = MAX( %d , %d )\n",
        prv_032.y_1 , y_C );;
        
        LOG( "[........................:BEFORE]",0);
        #endif //:###############################://



        #if( AAC2020_TAUDIRT_BUG_001 >= 1 ) //:##://
        LOG( "[AFTER_:........................]",0);
        P_R( "[AFTER_:rec_032]:" , &REC_032 );
        P_R( "[AFTER_:prv_032]:" , &prv_032 );
        LOG( "[........................:AFTER_]",0);
        #endif //:###############################://

#################################################IID_0051_3H_45#
@MRK_TWICE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    VID_IID[ 0051 ]TIME[ 1H 50M 51S ]

    @MRK_TWICE : Using a command that should be idempotent
                 is FAILING when used twice in a row with
                 the same [parameters/arguments].

                 @MRK_TWICE denotes attempt to address the
                 issue. Once issue is FIXED, we will still
                 KEEP the @MRK_TWICE annotation in the code
                 to remind ourselves of what we fixed.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@MRK_TWICE@
#SHBCE##########################################################

    #SHBCE#: Should_Have_Been_Caught_Earlier

        The error you are experiencing should have been
        caught earlier. Good thing you programmed a 
        redundancy just in case.

##########################################################SHBCE#
@too_granular@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @too_granular: Means that the code is commented out because
                   it is literally too granular. And whatever
                   operation you are performing needs to be
                   done at a coarser level.

    EXAMPLES:
    ------------------------------------------------------------
    1: TAUSYNC.F._ :: aac2020_tausync_Run
    
        We shouldn't push individual 2x2 clusters of pixels
        in a texture push. We should push the entire dirty
        region that exists on the 32x32 cluster of pixels
        within one of the #DIA_VAR_CEL# partitions.
        ( #DIA_VAR_CEL# : SEE: TAUDEPO.D._ )
                
    ------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@too_granular@
@u_x@@u_y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @u_x: Upper_Left_Pixel_X (EXAMPLE: SEE: TAUSYNC.F._ )
    @u_y: Upper_Left_Pixel_Y (EXAMPLE: SEE: TAUSYNC.F._ )

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@u_x@@u_y@
@2x2_VAR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @2x2_VAR@: Referring to a 2x2 cluster of pixels
               stored on "taudepo" memory allocation
               that is used to encode 
               [variable/uniform] in GPU texture memory.

               SEE[ @2x2_VAR@ ]ON_DIAGRAM[ #DIA_VAR_CEL# ]
               CURRENTLY_IN[ TAUDEPO.D._ ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2x2_VAR@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DEEPEST_DEEP@
@DEEPEST_DEEP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    GENERALLY:
        Means we have drilled down as deep as we can into
        a tree structure. May also be notated so you realize
        why some type of pattern has broken down in this
        section of code.

    ************************************************************
    RELATED_TO: TAUDEPO.D._ 
                TAUDIRT.D._     
                TAUSYNC.F._

    The pattern breaks down a bit once you get to the
    terminal DEPTH.

    Conceptually, [ r3 == c_4 ] at the deepest depth.

    Because we don't need to overlay FLAGS on top of
    a datastructure to be dived into at this bottomed-out
    level.
    ************************************************************
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DEEPEST_DEEP@
@VID_URL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID_URL@
        Denotes the VIDEO URL of code base commentary.
        Looking up this video with the timestamp
        associated with it_1 can find a video of me
        when I wrote the comment itself explaining it_2
        in more detail than the written comments in the
        code may be [ doing / able-to ].

        it_1 : VIDEO URL or the video on youtube itself.
        it_2 : The code
        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@VID_URL@
@VID_IID@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @VID@ : Use @VID_IID@ to make easy to search for all in
            a single go. ( a single search query )

    @IID@ : Use @VID_IID@ to make easy to search for all in
            a single go. ( a single search query )

    EXAMPLE_USE:
    //( @VID_IID@[ 0045 ]TIME[ 5H33M0S    ] )//  
    //( @VID_URL@[ TODO_YOUTUBE_VIDEO_URL ] )//

    VID_IID is the integer id of the video recording you
            were doing when you wrote the code comment
            in question. 
    
            No one has time to watch all of this stuff,
            but providing video timestamps can help people
            watch pertinent parts of video to explain
            what we were up to when we wrote that code.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@VID_IID@
#_BTS_BEATS_TOM_################################################

    ****************************************
    @5 hours , 18 minutes , & 11 seconds.
    OF_VIDEO: IID: 0045 (DATE: 2020_12_16 )
    ****************************************

    BTS: BACKUP ==> TEST ==> RESTORE

    BTS is better than TOM.

    TOM: ( Tests On Mockdata )

    BTS:
        PRO: Reflects real world situation closer.
        PRO: More confidence tests are correct.
        CON: Could alter game state if not careful
             to backup and restore data.

    TOM:
        PRO: Wont alter game state through side effects.
        CON: Tests are further from the reality of situation.
        CON: Must WRITE the mock object code.
        CON: Must FIGURE OUT how to properly use the mocks.

################################################_BTS_BEATS_TOM_#
@DANGER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @DANGER_1@ : Mark point of "malloc" and "free"

    @DANGER_2@ : Mark point of "malloc" and "free"

    Mallocing memory is a dangerous thing. If we do it
    we should be careful to make sure the malloc and free
    calls are ballanced. Good way to do this is to tag
    the allocation and de-allocation of variable with
    some type of unique name within file as a hackish
    visual check.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DANGER@
#_DIRTY_SECTOR_ASK_IS_A_BIT_MUCH_BUT_HELPFUL_###################

    aac2020_taudirt_DirtySectorAsk

    Is a bit complex. And we've computed a lot of this stuff
    before. 

    BUT... It is being used in a TEST function. So these
    re-computations can serve as a redundancy to check our
    math.


###################_DIRTY_SECTOR_ASK_IS_A_BIT_MUCH_BUT_HELPFUL_#
@TRAP_VALUE@@_TRAP_VALUE_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    A trap value is typically a BOGUS initialization value
    that is intentionally [ wrong / invalid ]. If we FORGET
    to overwrite the trap value before using the value,
    a fatal error is usually triggered.

    The idea here is to help us catch problems quickly by
    intentionally setting invalid state where we can.

    Essentially we are setting "TRAP"(S) for ourselves
    in the code to make the code more "FAIL FAST" than
    it would otherwise be.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TRAP_VALUE@@_TRAP_VALUE_@
@_DONT_ABUSE_THE_STACK_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    It's definitely easier and less error prone to avoid
    malloc. However in some cases we need to malloc memory
    to avoid abusing the stack.

    Stack space is limited and we shouldn't put large
    memory allocations on it.
    
    The limit for stack seems to be around...

    100 bytes per stack frame....

    So... Lets say any array more than 32 bytes should
    be malloced.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_DONT_ABUSE_THE_STACK_@
@_NO_POINTERS_IN_THIS_SECTION_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    It is intentional that none of the members in any of    
    the data within this code section do NOT use pointers.
    Usage of pointers here would wreck what we are working
    towards.

    Specifically, AAC2020_TAUDIRT_UnitTest needs to
    backup[ AAC2020_TAUDIRT_DIR_ANY ] before the test is ran
    and if the object containes pointers we cannot easily
    do a deep copy.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_NO_POINTERS_IN_THIS_SECTION_@
#BAK_NUM_WHATEVER###############################################

        I am tired of trying to figure out names.         
        Just call them "bak_###" for "backup # whatever"  

###############################################BAK_NUM_WHATEVER#
#TAUDEPO_DATA_BACKUP_OR_RESTORE#################################

    /** ************************************************ **/
    /** We should copy over TAUDEPO's buffer before we   **/
    /** run our test so we can restore it when finished. **/
    /** Since we run our tests on game bootup, this      **/
    /** step is probably NOT NECESSARY, but just in case **/
    /** we should do this as a good habit.               **/
    /** ************************************************ **/

#################################TAUDEPO_DATA_BACKUP_OR_RESTORE#
@NON_INDENTED_LOOP_LEVELS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    My column space is limited and even when it isn't much
    of the time I can seem the patterns a lot better when
    I keep all levels of multiple nested loops at the
    same indentation level. WRITTEN_ON_DATE[ 2020_12_16 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NON_INDENTED_LOOP_LEVELS@
@NES_LEV@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @NES_LEV@ : shorthand for "Nesting Level"
                of a tree structure. Nesting level 0
                being top level, having not drilled down
                into the tree.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NES_LEV@
@PRIVATE_NAMESPACE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    lowercase namespaces means that a function is "private".
    I use "private" loosely to mean
    "You better know what the fuck you are doing"
    "with this function call"

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PRIVATE_NAMESPACE@
@one1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@two2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@NONE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @one1@ : If you see a #define like this, there is probably
             a diagramatic explanation of what @one1@
             represents.

    @two2@ : DITTO above.
    @NONE@ : DITTO above.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@one1@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@two2@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NONE@
#_DONT_ADD_THE_DEEPEST_2X2_#####################################

    ************************************************************
    In[ TAUSYNC.F._ ]We DONT want to find the upper-left
    origin of individual 2x2 pixel clusters. Because we don't
    want to PUSH individual 2x2 pixel chunks at a time.

    We want to step one level out and take the entire
    range of dirty 2x2 pixels within #DIA_VAR_CEL# (@cel_128@)

    We should be pushing a rectangular region in the
    size ranges (min -&- max) of [ 1x1 -and- 32x32 ].

    ** * * * * * * * * * * * * ****** * * * * * * * * * * * * **

    Code as it was in TAUSYNC.F._ at the time of writing this.
    (Found In Function[ aac2020_tausync_Run ] )

    ************************************************************

                //:upper_left:OF:DIA_VAR_CELL:---------------://
                //:              DIA_VAR_CELL ~=~ @cel_128@
                    u_x =( 0

                            //:@cel_512@(s) are 128x128 pixels
                     +      ( t0.i_x * 128 ) 

                            //:@cel_128@(s) are  32x32  pixels
                     +      ( t1.i_x *  32 )

                            //[ #_DONT_ADD_THE_DEEPEST_2X2_# ]//
                            //:@cel_032@(s) are   2x2   pixels
                //:  +      ( t2.i_x *   2 )

                    );;
                    u_y =( 0

                            //:@cel_512@(s) are 128x128 pixels
                     +      ( t0.i_y * 128 ) 

                            //:@cel_128@(s) are  32x32  pixels
                     +      ( t1.i_y *  32 )

                            //[ #_DONT_ADD_THE_DEEPEST_2X2_# ]//
                            //:@cel_032@(s) are   2x2   pixels
                //:  +      ( t2.i_y *   2 )
                    );;

                //:---------------:upper_left:OF:DIA_VAR_CELL://

#####################################_DONT_ADD_THE_DEEPEST_2X2_#
@just_push_it@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @just_push_it@ : Talking about a texture push my friend.
                     DATE[ 2020_12_15 ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@just_push_it@
@LEVEL_A( l_A )@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@LEVEL_B( l_B )@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@LEVEL_C( l_C )@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    SEE_DIAGRAM_IN[ LIB/TAUDEPO.D._ ]

    [ l_A , l_B , l_C ] are shorthand notation for
    the different nesting levels of our dirty rectangle
    marking regions.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@LEVEL_A( l_A )@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@LEVEL_B( l_B )@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@LEVEL_C( l_C )@
@INTERN_BOTTOM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @INTERN_BOTTOM@ 
        Means the "externed" variable at the top of the
        file is declared "~interned~" at the bottom of
        the same file.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@INTERN_BOTTOM@
#_FIRST_TAUDIRT_ATTEMPT_WAS_WRONG_##############################

    VID_IID[ 0053 ]TIME[ 0H 04M 58S ]
    Got rid of the comment 
    "#_FIRST_TAUDIRT_ATTEMPT_WAS_WRONG_#"
    today because it was clutter.

    ************************************************************
    These calculations for TAUDIRTY are WRONG!
    But they have the right line of thinking.
    Kept here for reference as I fix my mistakes.

    When I mean "wrong" I don't mean "typo". I mean the
    underlying logic has a huge flaw. We need a nested
    data structure to have a proper "quad-tree".

    ( Really a hexakaideca-ish tree )

    ************************************************************

    :DATA:-----------------------------------------------------:

    Is ANYTHING at all dirty?  

    U08 AAC2020_TAUDIRT_DIR_ANY =( 0 );

    Grouped Block Dirty Flags 

    U08 AAC2020_TAUDIRT_DIR_512 =( 0 );
    U08 AAC2020_TAUDIRT_DIR_128 =( 0 );
    U08 AAC2020_TAUDIRT_DIR_032 =( 0 );
    
    Individual Cell Dirty Flags 

    U08 AAC2020_TAUDIRT_CEL_512[ 16] ={ 0 }; //: 4 x  4 cells.
    U08 AAC2020_TAUDIRT_CEL_128[ 16] ={ 0 }; //: 4 x  4 cells.
    U08 AAC2020_TAUDIRT_CEL_032[256] ={ 0 }; //:16 x 16 cells.
    
    Rectangular Region Of Dirty Cells Optimization.  
    ( REC === AAC2020_TAUDIRT_rec_inc )

    REC AAC2020_TAUDIRT_REC_512 = { 0 };
    REC AAC2020_TAUDIRT_REC_128 = { 0 };
    REC AAC2020_TAUDIRT_REC_032 = { 0 };

    :-----------------------------------------------------:DATA:

        //:DIRTY_SECTOR_MANAGEMENT:--------------------------://
        #define DIR_ANY AAC2020_TAUDIRT_DIR_ANY       //: 01 ://
        //:     DIR_512 AAC2020_TAUDIRT_DIR_512       //: 02 ://
        //:     DIR_128 AAC2020_TAUDIRT_DIR_128       //: 03 ://
        //:     DIR_032 AAC2020_TAUDIRT_DIR_032       //: 04 ://
                                                      //: -- ://
        #define CEL_512 AAC2020_TAUDIRT_CEL_512       //: 05 ://
        #define CEL_128 AAC2020_TAUDIRT_CEL_128       //: 06 ://
        #define CEL_032 AAC2020_TAUDIRT_CEL_032       //: 07 ://
                                                      //: -- ://
        #define REC_512 AAC2020_TAUDIRT_REC_512       //: 08 ://
        #define REC_128 AAC2020_TAUDIRT_REC_128       //: 09 ://  
        #define REC_032 AAC2020_TAUDIRT_REC_032       //: 10 ://
                                                      //: -- ://
        #define TAU_015 DEX_TAU_000_015               //: 11 ://
        #define SUB_015 DEX_SUB_000_015               //: 12 ://
        #define VAR_255 DEX_VAR_000_255               //: 13 ://

            //:Get_Dirty_Cell_XY_Tiles:----------------------://

                /** 512x512 pixels, 004x004 (016) cells **/

                x_A  =  CEL_512       %  16 ;
                y_A  = (CEL_512 - x_A)/  16 ;

                /** 128x128 pixels, 004x004 (016) cells. **/

                x_B  =  CEL_128       %  16 ;
                y_B  = (CEL_128 - x_B)/  16 ;

                /** 032x032 pixels, 016x016 (256) cells **/

                x_C  =  CEL_032       % 256 ;
                y_C  = (CEL_032 - x_C)/ 256 ;

            //:----------------------:Get_Dirty_Cell_XY_Tiles://
            //:Expand_Dirty_Rect_Selections:-----------------://
            #define MIN AAC2020_TAUDIRT_Min           //: 01 ://
            #define MAX AAC2020_TAUDIRT_Max           //: 02 ://

                /** >= 1 : REC is @VALID, use MIN+MAX   **/
                /** <= 0 : REC is @@JUNK, re-initialize **/

            //: #DIA_TAU_CEL# (BELOW) ://

                ;;;;;;if( CEL_512[ TAU_015 ] >= 1  ){ //: @VALID

                    REC_512.x_0 = MIN( REC_512.x_0 , x_A );
                    REC_512.x_1 = MAX( REC_512.x_1 , x_A );

                    REC_512.y_0 = MIN( REC_512.y_0 , y_A );
                    REC_512.y_1 = MAX( REC_512.y_1 , y_A );

                }else if( CEL_512[ TAU_015 ] <= 0 ){ //:  @@JUNK

                    REC_512.x_0 =    (               x_A );
                    REC_512.x_1 =    (               x_A );
                                                 
                    REC_512.y_0 =    (               y_A );
                    REC_512.y_1 =    (               y_A );

                }else{ aac2020_taudepo_Halt("[WTF:CEL_512]"); };

            //: #DIA_SUB_CEL# (BELOW) ://

                ;;;;;;if( CEL_128[ SUB_015 ] >= 1  ){ //: @VALID

                    REC_128.x_0 = MIN( REC_128.x_0 , x_B );
                    REC_128.x_1 = MAX( REC_128.x_1 , x_B );

                    REC_128.y_0 = MIN( REC_128.y_0 , y_B );
                    REC_128.y_1 = MAX( REC_128.y_1 , y_B );

                }else if( CEL_128[ SUB_015 ] <= 0 ){ //:  @@JUNK

                    REC_128.x_0 =    (               x_B );
                    REC_128.x_1 =    (               x_B );
                                                 
                    REC_128.y_0 =    (               y_B );
                    REC_128.y_1 =    (               y_B );

                }else{ aac2020_taudepo_Halt("[WTF:CEL_128]"); };

            //: #DIA_VAR_CEL# (BELOW) ://

                ;;;;;;if( CEL_032[ VAR_255 ] >= 1  ){ //: @VALID

                    REC_032.x_0 = MIN( REC_032.x_0 , x_C );
                    REC_032.x_1 = MAX( REC_032.x_1 , x_C );

                    REC_032.y_0 = MIN( REC_032.y_0 , y_C );
                    REC_032.y_1 = MAX( REC_032.y_1 , y_C );

                }else if( CEL_032[ VAR_255 ] <= 0 ){ //:  @@JUNK

                    REC_032.x_0 =    (               x_C );
                    REC_032.x_1 =    (               x_C );
                                                 
                    REC_032.y_0 =    (               y_C );
                    REC_032.y_1 =    (               y_C );

                }else{ aac2020_taudepo_Halt("[WTF:CEL_032]"); };

            #undef  MIN                               //: 01 ://
            #undef  MAX                               //: 02 ://
            //:-----------------:Expand_Dirty_Rect_Selections://
            //:Mark_Individual_Cells_As_Dirty:---------------://

                DIR_ANY =( 1 );
                CEL_512[ TAU_015 ]=( 1 );
                CEL_128[ SUB_015 ]=( 1 );
                CEL_032[ VAR_255 ]=( 1 );

            //:---------------:Mark_Individual_Cells_As_Dirty://

        #undef  DIR_ANY AAC2020_TAUDIRT_DIR_ANY       //: 01 ://
        //:     DIR_512 AAC2020_TAUDIRT_DIR_512       //: 02 ://
        //:     DIR_128 AAC2020_TAUDIRT_DIR_128       //: 03 ://
        //:     DIR_032 AAC2020_TAUDIRT_DIR_032       //: 04 ://
                                                      //: -- ://
        #undef  CEL_512 AAC2020_TAUDIRT_CEL_512       //: 05 ://
        #undef  CEL_128 AAC2020_TAUDIRT_CEL_128       //: 06 ://
        #undef  CEL_032 AAC2020_TAUDIRT_CEL_032       //: 07 ://
                                                      //: -- ://
        #undef  REC_512 AAC2020_TAUDIRT_REC_512       //: 08 ://
        #undef  REC_128 AAC2020_TAUDIRT_REC_128       //: 09 ://  
        #undef  REC_032 AAC2020_TAUDIRT_REC_032       //: 10 ://
                                                      //: -- ://
        #undef  TAU_015 DEX_TAU_000_015               //: 11 ://
        #undef  SUB_015 DEX_SUB_000_015               //: 12 ://
        #undef  VAR_255 DEX_VAR_000_255               //: 13 ://
        //:--------------------------:DIRTY_SECTOR_MANAGEMENT://

##############################_FIRST_TAUDIRT_ATTEMPT_WAS_WRONG_#
#PAIRED_IDENTICAL_BLOCKS_OF_4_LINES#############################

    Same idea as #PAIRED_IDENTICAL_BLOCKS_OF_3_LINES#
    But 4 lines instead of 3.

#############################PAIRED_IDENTICAL_BLOCKS_OF_4_LINES#
#PAIRED_IDENTICAL_BLOCKS_OF_3_LINES#############################

    PAIRED_IDENTICAL_BLOCKS_OF_3_LINES:

        Marks a place in source code where an identical
        block of source code should exist.

        The identical blocks of code in question should
        be exactly 3 lines of code each. For a total
        of 6 lines. ( But only 3 unique lines )

        Doing this because writing a common helper function
        would be more code than just cut+paste and would add
        extra indirection which would make the code
        harder to understand.

#############################PAIRED_IDENTICAL_BLOCKS_OF_3_LINES#
@AFD@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @AFD@: Allow_Forward_Declaration:
    
        Typically my code is written WITHOUT forward 
        declarations to maintain strict ordering of
        functions.

        However, unit tests can become VERY FUCKING LONG.
        And I'd rather not have to scroll through all of
        that stuff to see the code I care about.

        Thus, unit tests will always be at bottom of file.

        Unit tests are typically called LAZILY by the
        initializer functions so that it is VERY DIFFICULT
        to shut off unit tests.

        This rigidity is by design to avoid "Code Rot"
        of the unit tests.

        Code Rot Scenario:
        1. Someone disables unit tests.
        2. 3 months pass.
        3. Someone enables unit tests.
        4. Unit test fail all over the place and
           no one has any fucking clue how to fix them
           because now errors have compounded in the program.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AFD@
#_ONLY_TAUDEPO_CAN_USE_TEX_LOT_ZERO_############################

    Originally I never wanted to use texture slot (tex_lot)
    zero for ANYTHING. But now I've decided that taudepo
    "CAN" and "MUST" use texture slot 0.

    All other sub-systems must use slots [ 1 -to- 9 ]
    inclusive.

############################_ONLY_TAUDEPO_CAN_USE_TEX_LOT_ZERO_#
#_CHANGED_MY_MIND_ON_TEX_LOT_ZERO_##############################
#_CHANGED_MY_MIND_ON_ZERO_######################################

    RELATED_TO_OLD_TAG: #_WE_NEVER_USE___ZERO_FOR___SAM_VAL_#

    CHANGED_MY_MIND_ON_DATE[ 2020_12_13 ]
    I decided to use texture slot zero for "taudepo".
    Because we need a common texture to share uniforms
    that are encoded into the texture itself.

        OLD_COMMENT_BELOW: ( Changed My Mind. Now using )
                           ( slot 0 for taudepo.        )
        *************************************************
            Texture Slot If Configured On CPU Side  
            And then uploaded to GPU. This is how   
            I know this value should never be <= 0  
            Because.. I DONT USE ZERO FOR THIS.   
        *************************************************

######################################_CHANGED_MY_MIND_ON_ZERO_#
##############################_CHANGED_MY_MIND_ON_TEX_LOT_ZERO_#
#LOOP_TICK######################################################
#LoopTick#######################################################

    #LOOP_TICK#: A  SomeFunction_LoopTick(...) is a function
                 that is meant to be called within the 
                 body of a loop.

                 TYPICALLY:

                    1. A game loop
                    2. A render loop

######################################################LOOP_TICK#
#######################################################LoopTick#
#DO_SWITCH######################################################

    #DO_SWITCH#: Using a do-while(0) loop to create 
                 switch-like structure that does not    
                 require compile time constants for
                 each case.

    EXAMPLE: ORIGINAL SWITCH STATEMENT: (2020_12_13)

            switch( chr_key ){
            case '1' :{ str = P_1; dex_fou = 1; };break;
            case '2' :{ str = P_2; dex_fou = 2; };break;
            case '3' :{ str = P_3; dex_fou = 3; };break;
            case '4' :{ str = P_4; dex_fou = 4; };break;
            case '5' :{ str = P_5; dex_fou = 5; };break;
            case '6' :{ str = P_6; dex_fou = 6; };break;
            case '7' :{ str = P_7; dex_fou = 7; };break;
            case '8' :{ str = P_8; dex_fou = 8; };break;
            case '9' :{ str = P_9; dex_fou = 9; };break;
            default:{ 
                INFO("[PICK_SHADER_USING_NUMBER_KEY]\n");
            };};;

    EXAMPLE: REFACTORED INTO DO_SWITCH (2020_12_13)

            ****************************************************
            Intead of compile time constants '1'  -to- '9'
            We are comparing against vars BED_001 -to- BED_009
            ****************************************************

            //:#DO_SWITCH#:==================================://
            #define KEY chr_key
            #define BIF if( dex_fou > 0 ){break;};
            do{
                if( KEY == BED_001 ){ str = P_1; dex_fou = 1; };
            BIF
                if( KEY == BED_002 ){ str = P_2; dex_fou = 2; };
            BIF
                if( KEY == BED_003 ){ str = P_3; dex_fou = 3; };
            BIF
                if( KEY == BED_004 ){ str = P_4; dex_fou = 4; };
            BIF
                if( KEY == BED_005 ){ str = P_5; dex_fou = 5; };
            BIF
                if( KEY == BED_006 ){ str = P_6; dex_fou = 6; };
            BIF
                if( KEY == BED_007 ){ str = P_7; dex_fou = 7; };
            BIF
                if( KEY == BED_008 ){ str = P_8; dex_fou = 8; };
            BIF
                if( KEY == BED_009 ){ str = P_9; dex_fou = 9; };
            BIF
            }while( 0 );
            #undef  KEY   /** chr_key , key pressed **/
            #undef  BIF   /** BIF:Break_If_Found    **/
            //:==================================:#DO_SWITCH#://

######################################################DO_SWITCH#
#_MINIMAL_MENTAL_INDIRECTION_###################################

    WRITTEN_ON_DATE[ 2020_12_13 ]

    Example: AAC2020_KEYBIND.FRAGBED

        These bindings add less mental indirection than
        they do physical indirection.

        bed_000 == '0'
        bed_001 == '1'
        bed_002 == '2'

        000 maps to 0
        001 maps to 1
        002 maps to 2

        ETC. We only have to remember the "bed_" prefix
        and the overall pattern. But we don't need to
        individually memorize the re-mapping for each
        variable since the pattern is consistent.

###################################_MINIMAL_MENTAL_INDIRECTION_#
#LAX_COMMA_HACK#################################################

    A variable who's only existance is to allow me to 
    put commas in front each variable in an initializer 
    list. See (AAC2020_KEYBIND) for example.

#################################################LAX_COMMA_HACK#
#_PAINT5D_KEY_BINDING_JUSTIFY_REASON_###########################


    ************************************************************
    We want the muscle memory to be intuitive.
    The HIGH keys go FORWARD.            (q,w,e,r,t,y,u,i,o,p)
    The LOW  keys go BACKWARDS.          (z,x,c,v,b,n,m)
    The MID  keys are not directional.   (a,s,d,f,g,h,j,k,l)

    EXCEPTION: E,S,D,F for (WASD-Like directional movement)

    ************************************************************

,   .PAINT5D.p5d_lef = 'S'
,   .PAINT5D.p5d_rig = 'F'
,   .PAINT5D.p5d_upp = 'E'
,   .PAINT5D.p5d_dow = 'D'

,   .PAINT5D.p5d_v_n = 'T' /**[V]alue(oftile)[N]ext **/
,   .PAINT5D.p5d_v_b = 'B' /**[V]alue(oftile)[B]ack **/

    //: G in the middle. Because is both + and - .
,   .PAINT5D.p5d_tog = 'G' /**Toggle Tile On Off. (SET/UNSET)**/

    //: TILE_SIZE:
    //: W: Feels like moving UP  . Which is progressive.
    //: X: Feels like moving DOWN. Which is backwards.
,   .PAINT5D.p5d_e_n = 'W' /** tile size [E]xponent [N]ext **/
,   .PAINT5D.p5d_e_b = 'X' /** tile size [E]xponent [B]ack **/

    //: ZOOM_IN_OUT:
    //: R: Feels like moving UP  . Which is progressive.
    //: V: Feels like moving DOWN. Which is backwards.
,   .PAINT5D.p5d_z_o = 'R' /** Zoom OUT (Moving UP and over) **/
,   .PAINT5D.p5d_z_i = 'V' /** Zoom INN (Digging DOWN lower) **/

###########################_PAINT5D_KEY_BINDING_JUSTIFY_REASON_#
@ONLY4NOW@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @ONLY4NOW@ :
        Means you probably have some commented out variables
        that are NOT used yet, but you intend to use them
        later. The @ONLY4NOW@ is pointing at the only
        variable that has been left un-commented in the
        source code.

        SEE[ TAUDEPO.D._ ]ON[ 2020_12_12 ]TIME[ 640AM - 800AM ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ONLY4NOW@
#_LOCATIONS_MUST_BE_MODDABLE_BY_FOUR_###########################

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ************************************************************
    THIS IS NO LONGER TRUE!!!!
    SEE UPDATED COMMENTARY:
    #_VARS_ARE_CLUSTERS_OF_4_PIXELS_# 
    ************************************************************
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Each variable is stored as 4 pixels on the gpu texture.
    Thus each constant identifiying the variable location
    must be evenly divisible by 4.

###########################_LOCATIONS_MUST_BE_MODDABLE_BY_FOUR_#
###########################_LOCATIONS_MUST_BE_MODDABLE_BY_FOUR_#
@IAM_DIFFERENT_NOTICE_ME@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    Also known as a #PATTERN_BREAKER#

@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@IAM_DIFFERENT_NOTICE_ME@
#PAINT5D_OLD_LIBCHAN_NOTES######################################

        //: #PATTERN_BREAKER# ------------------------------ ://
        //: You might be expecting:                          ://
        //: 1: AAC2020_INCLUDE_GPUDATA_PAINT5D               ://
        //: 2: INCLUDE_GPUDATA_PAINT5D                       ://
        //: But using shorter namespacing for our            ://
        //: includes to avoid running over column limit.     ://
        //: ------------------------------------------------ ://
        #define AAC2020_INCLUDE_GPUDATA_PAINT5D "DO_NOT_USE"
        #define INCLUDE_GPUDATA_PAINT5D         "DO_NOT_USE"

        //:GPUDATA_PAINT5D: -------------------------------- ://
        //:        Graphical Data For a 5-Dimensional        ://
        //:        MS-PAINT 95 like program.                 ://
        //:                                                  ://
        //:        Dimensions:                               ://
        //:        1. Tile X                                 ://
        //:        2. Tile Y                                 ://
        //:        3. Tile Size                              ://
        //:        4. Tile Layer                             ://
        //:        5. Tile Color                             ://
        //:   NOT: "LIB/PAINT5D.D._" << #PATTERN_BREAKER     ://

######################################PAINT5D_OLD_LIBCHAN_NOTES#
#TAUDEPO_SIGNATURE_SKETCHING####################################

    This is how I want to use the TAUDEPO system:

    THIS! A bit clunky. But easy to figure out where
    everything is comming from.

        ********************************************************
        AAC2020_TAUDEPO_Put( 
            AAC2020_TAUDEPO.TAU_015 //:DEX_TAU
        ,   AAC2020_TAUDEPO.PAINT5D //:DEX_SUB
        ,   AAC2020_TAUDEPO.P5D_VP1 //:DEX_VAR
        ,   x0,x1,y0,y1
        );;
        ********************************************************

    Maybe NOT with #defines for everything? 

        #define PUT AAC2020_TAUDEPO_Put
        #define TAU AAC2020_TAUDEPO
            PUT(TAU.TAU_015 , TAU.PAINT5D, TAU.VIEWPORT1, 
                x0,x1,y0,y1 );
        #undef PUT
        #undef TAU

    CLOSER....

        #define TAU_PUT AAC2020_TAUDEPO_Put

            TAU_PUT( TAU_015 , PAINT5D, VIEWPORT1, x0,x1,y0,y1 )

        #undef TAU_PUT


    CLOSE_BUT_NOT_WHAT_I_DECIDED_ON:

        TAU_PUT_000( PAINT5D,VIEWPORT1,x0,x1,y0,y1 );
        TAU_PUT_015( PAINT5D,VIEWPORT1,x0,x1,y0,y1 );

        TAU_PUT( PAINT5D , VIEWPORT1 , x0 ,x1, y0, y1 )
        TAU_PUT( PAINT5D , ITIME     , it ,__, __, __ );

####################################TAUDEPO_SIGNATURE_SKETCHING#
@_VP0_@@_VP1_@@_VPC_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@VP0@@VP1@@VPC@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    :VIEWPORT_TYPES:-------------------------------------------:

@_VP0_@   VP0:Viewport_Zero(0): (Destination/Screen Viewport)
@_VP1_@   VP1:Viewport_One( 1): (Offscreen/Source/BitmapData)
@_VPC_@   VPC:Viewport_Canvas : (Or: Window/OpenGL)

    :-------------------------------------------:VIEWPORT_TYPES:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_VP0_@@_VP1_@@_VPC_@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@VP0@@VP1@@VPC@
#_UNIFORM_SIGNATURES_TRUMP_PARANOID_ERROR_CHECKS_###############
#_UNIFORMITY_OF_CODE_TRUMPS_PARANOID_ERROR_CHECKING_############
#_CONSISTENT_SIGNATURES_TRUMP_PARANOID_ERROR_CHECKS_############

    I was thinking about using the LATTER signature because
    it would help the compiler catch accidential mixing
    of wrong types.... 

    Lets not make the code less consistent just because
    we are paranoid.

    I08
    AAC2020_TAUDEPO_Put( 
        U08 DEX_TAU_000_015  <--- GOOD
    ,   U08 DEX_SUB_000_015  <--- GOOD
    ,   U08 DEX_VAR_000_255  <--- GOOD
        ....
    )

    I08
    AAC2020_TAUDEPO_Put( 
        U08 DEX_TAU_000_015  <--- BAD
    ,   U08 DEX_SUB_000_015  <--- BAD
    ,   I32 DEX_VAR_000_255  <--- BAD
        ....
    )
 
############_CONSISTENT_SIGNATURES_TRUMP_PARANOID_ERROR_CHECKS_#
############_UNIFORMITY_OF_CODE_TRUMPS_PARANOID_ERROR_CHECKING_#
###############_UNIFORM_SIGNATURES_TRUMP_PARANOID_ERROR_CHECKS_#
#_TAUDEPO_SHOULD_BE_DEFINES_####################################

    //: Example Value For: DEX_TAU_000_015

        #define AAC2020_TAUDEPO_TAU_000 ( 0 )  



    //: Example Value For: DEX_SUB_000_015

        #define AAC2020_TAUDEPO_SUB_PAINT5D ( 1 )



    //: Example value For: DEX_VAR_000_255

        #define AAC2020_TAUDEPO_VAR_vp0



####################################_TAUDEPO_SHOULD_BE_DEFINES_#
#_TAUDEPO_SHOULD_NOT_BE_A_LIBRARY_STRUCT_#######################

    ************************************************************
    We cannot INJECT the needed values into hard coded 
    shader source strings if we use anything besides
    defines ( #define ) for our TAUDEPO constants.
    ************************************************************

    struct AAC2020_TAUDEPO_PUBLIC_LIBRARY_STRUCT{

        //:DEX_TAU_000_015 : TAU [ SET / BLOCK ] Section
        //:DEX_SUB_000_015 : Sub System [Index/Enumeration/IID]
        //:DEX_VAR_000_255 : ( dex_var % 4 == 0 ) (Var Location)

    }AAC2020_TAUDEPO={

        /** These are NOT texture slots, we just use the **/
        /** numbers for the texture slots to facilitate  **/
        /** TIGHT COUPLING and SIMPLICITY.               **/

        //:DEX_TAU_000_015 : TAU [ SET / BLOCK ] Section
            .TAU_000 = 0
            .TAU_001 = 0
            .TAU_002 = 0
                 .........
       
        //:DEX_SUB_000_015 : Sub System [Index/Enumeration/IID]
            .TAUDEPO = AAC2020_PIXNAME_taudepo_tex_lot //: 0 ://
    ,       .PAINT5D = AAC2020_PIXNAME_paint5d_tex_lot //: 1 ://
    ,       .TODO_02 = AAC2020_PIXNAME_paint5d_tex_lot //: 2 ://
    ,       .TODO_03 = AAC2020_PIXNAME_paint5d_tex_lot //: 3 ://
     
    };

#######################_TAUDEPO_SHOULD_NOT_BE_A_LIBRARY_STRUCT_#
#_TAUDEPO_JUSTIFICATION_FOR_LIBRARY_STRUCT_#####################
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    I WAS WRONG ABOUT THIS. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    SEE[ #_TAUDEPO_SHOULD_NOT_BE_A_LIBRARY_STRUCT_# ]
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    *******************************************
    Shorthand access using a library struct is 
    much LESS convoluted than without.
    *******************************************
    ------------------------------------------------------------
    FUCK_THIS:

        #define T( name ) AAC2020_TAUDEPO_##name

            T(TAU_015) //: AAC2020_TAUDEPO_TAU_015

    USE__THIS:

        #define T AAC2020_TAUDEPO

            T.TAU_015  //: AAC2020_TAUDEPO.TAU_015

    ------------------------------------------------------------
######################_TAUDEPO_JUSTIFICATION_FOR_LIBRARY_STRUCT_

#_KEEP_TAUGET_VOID_TO_AVOID_CONFUSION_##########################

    If AAC2020_TAUDEPO_Get returns by both 
    output parameters (points to U32) and by a return 
    value, it is likely to be used improperly.

    Someone might think the return value is the value
    we are trying to get with the getter. And that isn't
    an INSANE assumption to make.

##########################_KEEP_TAUGET_VOID_TO_AVOID_CONFUSION_#
@TAU_PUT@@TAU_GET@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @TAU_PUT@ :Shorthand For AAC2020_TAUDEPO_Put

    @TAU_GET@ :Shorthand For AAC2020_TAUDEPO_Get

    AAC2020_TAU_Put : TYPO_OF[ AAC2020_TAUDEPO_Put ]
    AAC2020_TAU_Get : TYPO_OF[ AAC2020_TAUDEPO_Get ]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@TAU_PUT@@TAU_GET@
#FILL_PATTERN###################################################

    [ fill-pattern ]SEE[ AAC2020_PIXPUSH_TestPattern ]
    [ fill pattern ]SEE[ AAC2020_PIXPUSH_TestPattern ]

###################################################FILL_PATTERN#
@NEVER_SILENCE_ME@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    NEVER_SILENCE_ME: Means that we should not add any code
                      to silence messages from this function.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NEVER_SILENCE_ME@
#BRACKET_COMMENT_NOTATION_EXPLAINED#############################

    This is a bad choice....
    This is a [ bad / immoral ] choice.
    This is a [ bad / incorrect ] choice.

#############################BRACKET_COMMENT_NOTATION_EXPLAINED#
@DOUBLE_PRINT_FLUSH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @DOUBLE_PRINT_FLUSH@ :

    Before printing actual message content, we print
    a simple message first and flush console so that
    in advent of complex printf message causing a segfault,
    we still have some type of feedback to grab onto to
    find the location of where things went wrong.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DOUBLE_PRINT_FLUSH@
@GETTER@PUTTER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @GETTER@: Denote function is a GETTER function.
    @PUTTER@: Denote function is a PUTTER function.

    @SETTER@: DONT_FUCKING_DO_THIS.
              (Delta between Get & Set is only 1 letter. )
              (Delta between Get & Put is      2 letters. )

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@GETTER@PUTTER@
@VDAWEA@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    VDAWEA:values_dont_agree_with_each_other

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@VDAWEA@
#_GPUDATA_INPUT_OBJECT_IS_OUTPUT_OBJECT_########################

        AAC2020_PIXPUSH_sam_get <-- DONT USE.

        PIK: AAC2020_PIXPUSH_sam_loc( &gpudata ) <--[A]
        PIK: AAC2020_PIXPUSH_sam_val( &gpudata ) <--[B]

        [A]: Loads sampler location into: gpudata->sam_loc
        [B]: Loads sampler    value into: gpudata->sam_val

        BOTH ARE FAULT TOLERANT.
        (No look before you leap required)

########################_GPUDATA_INPUT_OBJECT_IS_OUTPUT_OBJECT_#
#DEFINITELY_FORGOT_TO_INIT_44044################################

    Sampler LOCATION (sam_loc) is inited to 44044
    in PIXNAME.D._ . This is an intentional TRAP value
    so that we can locate the source of the problem
    if sampler is flagged as not existing. ( sam_loc < 0 ).

    ( If not locate, at least remove PIXNAME filescope        )
    ( variable initialization from the list of possibilities. )

################################DEFINITELY_FORGOT_TO_INIT_44044#
#_WE_DONT_CONTROL_THE_SAMPLER_LOCATION_#########################

    sam_loc : CAN BE ZERO , we don't CONTROL this value.

    sam_val : MUST NOT BE ZERO.
              ( We control this value. And while OpenGL allows)
              ( us to sample from texture slot 0 (sam_val==0) )
              ( AAC2020 code base dis-allows this in the name )
              ( of avoiding error prone code.                 )

#########################_WE_DONT_CONTROL_THE_SAMPLER_LOCATION_#
#I_THINK_SHOULD_BE_ERROR_0338AM#################################

    #I_THINK_SHOULD_BE_ERROR_0338AM#:

    Because we look before we leap, we should always see
    that a texture sampler is flagged as existing inside
    the[ aac2020_PIXPUSH_PushSampler ]function.

    REMOVED_THIS_COMMENTARY_FROM:PIXPUSH.F._ :

        Do nothing. Just always re-fetch the        
        Uniform after uploading the texture data.   
        You just uploaded (512*512*4) bytes,        
        what is 4 more (uint32 sampler uniform) ?   
        
        DO_NOTHING_HERE  

#################################I_THINK_SHOULD_BE_ERROR_0338AM#
#_SAM_VAL_ZERO_NEVER_USED_IN_THIS_CODE_BASE_####################
#_WE_NEVER_USE___ZERO_FOR___SAM_VAL_############################

    In reference to this.... AGAIN!
    #_2ND_GUESSING_PIXPUSH_TEX_SAM_ERR_#    

    sam_val cannot be ZERO because WE DONT USE ZERO
    AS A TEXTURE SLOT IN THIS CODE BASE.

    Zero however IS a valid address in terms of
    open gl uniform locations. It is just not a valid
    address for this code base.

############################_WE_NEVER_USE___ZERO_FOR___SAM_VAL_#
####################_SAM_VAL_ZERO_NEVER_USED_IN_THIS_CODE_BASE_#
#_DEBUGGING_2020_12_11_NOTES_###################################

    I [ THINK ]....
        I may be confusing "sam_loc" with "sam_val"

        "sam_val" === "tex_lot"

        "sam_loc" === ADDRESS_OF[ pix_name ]IN_GLSL_SHADER
                (  You do not control this value and     )
                (  cannot expect it to be anything .     )
                (  VALID SETUP MEANS: sam_loc >= 0       )
                (  Unfortunately, zero is valid address  )

    CONSOLE_MESSAGES:
    ************************************************************
    [aac2020_paint5d_Info_dec]...
    [AAC2020_PAINT5D_init_call_count]:2

    [aac2020_paint5d_Okay]:
            [OH_FUCK...Code_Below_Was_Never_Ran_Before]

    [FATAL_ERROR:AAC2020_PIXPUSH]:[IMPROPER_SETUP:sam_loc]
    [ENTER_TO_EXIT]:
    ************************************************************

##################################_DEBUGGING_2020_12_11_NOTES_##
#_EDITOR_INIT_SPAM_GAURD_#######################################

    GOOD_SPAM_GAURD:-------------------------------------------:

        Because[ AAC2020_CEDITOR_nex_edi ]AND
               [ AAC2020_CEDITOR_dex_edi ]
        
            Are set at a more coarse higher-level managing
            scope. ( AAC2020_HandleInput ), this is less 
            prone to breakage.

            However, having state tightly coupled with
            a "HandleInput" function does seem a bit 
            [ wonky / bad / improper / ugly ] and we 
            might want to think about how to revisit this.

        if( AAC2020_CEDITOR_nex_edi 
        ==  AAC2020_CEDITOR_dex_edi
        ){
            O_K("[PAINT5D:Init_Already_Up_To_Date]");
        };;

    :-------------------------------------------:GOOD_SPAM_GAURD:
    BAD_SPAM_GAURD:--------------------------------------------:
    
        This spam gaurd is bad because it relies on 
        EVERY SINGLE EDITOR correctly setting the
       (AAC2020_CEDITOR_dex_ini) flag.

        Highly Error Prone.
        Also prone to re-breaking all the time
        as new systems are added.

        /** Editor Initialization Spam Gaurd **/
        if( AAC2020_CEDITOR_dex_ini ==
            AAC2020_CEDITOR_paint5d
        ){
            O_K("[PAINT5D:Init_Already_Up_To_Date]");
            return( 0x00 );
        };;

    :-------------------------------------------:BAD_SPAM_GAURD:

#######################################_EDITOR_INIT_SPAM_GAURD_#
#_DONT_DISABLE_VERTEX_ATTRIB_ARRAY_IN_GRAQUAD_##################

    //[ DON'T DO THIS.                                   ]//
    //[ Your triangle will vanish!                       ]//
    //- AAC2020_GLEBIND.glDisableVertexAttribArray(0);   -//
    //- fn(ErrChk)("[DisVerAttArr]");                    -//

##################_DONT_DISABLE_VERTEX_ATTRIB_ARRAY_IN_GRAQUAD_#
#_BASIC_UNIFORM_UPDATE_DOESNT_USE_CALLBACKS_####################

    EXTRACTED_FROM[ GRAQUAD.F._ ]ON_DATE[ 2020_12_11 ]

    ------------------------------------------------------------
    Originally this code called from the future using   
    a callback. But decided.                            
                                                        
    1: Calling from future violates LIBCHAN design.     
    2: Callbacks made the code harder to follow.        
    Avoid them when possible.                          
                                                       
    (Still a fan of using callback to create   )       
    (abstract classes, like my tilemap entities)       
    (that exist by rendering themselves as     )       
    (tiles on a tilemap using function pointers)       
    (to GetTile and SetTile functions.         )       
    ------------------------------------------------------------

    aac2020_graquad_ReLoadShaderUniforms_iMouse      (0x00);
    aac2020_graquad_ReLoadShaderUniforms_iTime       (0x00);
    aac2020_graquad_ReLoadShaderUniforms_iResolution (0x00);

####################_BASIC_UNIFORM_UPDATE_DOESNT_USE_CALLBACKS_#
@SAFETY_DOUBLE_FLUSH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @DOUBLE_FLUSH@
    @_DOUBLE_FLUSH_@

    In case printf parameters cause segfault, have a basic
    print and flush BEFORE your real call to printf.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SAFETY_DOUBLE_FLUSH@
#_SILENCEALL_NOTIMPLEMENTED_####################################
#_SILENCE_ALL_NOT_IMPLEMENTED_##################################

    ************************************************************
    I forgot to implement AAC2020_SILENCE.SILENCE
    while I was refactoring. I doubt I will ever want to
    use this, so just leave it unimplemented until a need
    arises for you to use it.

    WRITTEN_ON[ DATE[ 2020_12_11 ]
    ************************************************************
    
####################################_SILENCEALL_NOTIMPLEMENTED_#
##################################_SILENCE_ALL_NOT_IMPLEMENTED_#
#_WHAT_IS_AACMAIN_##############################################

    #WHAT_IS_AAC_MAIN# : What Is AACMAIN ?
    ------------------------------------------------------------

        AACMAIN is a ficticious namespace.
        It is the namespace of code without a namespace.

        AKA: MAIN code. The code that couples together 
             all of the LIBCHAN sub-library code and runs it.

        ADDED[ AAC2020_SILENCE.AACMAIN ]ON_DATE[ 2020_12_11 ]

        So I have a way to silence top-level code that is not
        part of any sub-library in the LIBCHAN.
    ------------------------------------------------------------
    @VID_IID[ 0112 ]TIME[ 00:15:28 ]
    UPDATE: AACMAIN code exist in:
            1. R:\G\AAC2020\LIB\MAIN\D._
            2. R:\G\AAC2020\LIB\MAIN\F._
            3. R:\G\AAC2020\LIB\MAIN\.....ANYTHING_IN_HERE.....
    ------------------------------------------------------------

##############################################_WHAT_IS_AACMAIN_#
#_OUTSIDE_OF_MY_PAY_GRADE_GRAQUAD_REMOVED_######################

    Legacy comment from a previous project.
    This comment is probably 100% useless now.
    COMMENTARY_WRITTEN[ 2020_12_11 ]

    //:#FUNCTION_EXECUTION_ORDER_MATTERS#://
    ga_MakeViewportTextureAndActivate( 1 );  << BOARDWIN's job
    ga_ConfigureTextureSampling_PORPIX( 1 ); << BOARDWIN's job
    ga_UploadTexturePixels_PORPIX( 1 );      << BOARDWIN's job
  
######################_OUTSIDE_OF_MY_PAY_GRADE_GRAQUAD_REMOVED_#
#KEEP_INIT_CHAIN_FLAT_NOT_NESTED################################
    
    Extracted_From[ GRAQUAD.F ]ON_DATE[ 2020_12_11 ]

            Commented out. + + + + + + + + + + + + + + + + + + +  
            COG_Init();    - - - - - - - - - - - - - - - - - - -  
            Initialize after other dependencies. But don't      
            Initialize dependencies inside here. That works,    
            but makes the logic a lot harder to follow.         
            It also could create a very large init chain        
            that unecessarily creates a very deeply             
            nested stack.                                       
            - - - - - - - - - - - - ---- - - - - - - - - - - - -  
            - - - - - - - - - - - - ---- - - - - - - - - - - - -  

################################KEEP_INIT_CHAIN_FLAT_NOT_NESTED#
#HALT_OR_STATUS_CODE_AND_FAULT_TOLERANT_SHADERS#################

        COMMENTARY: (DATE[ 2020_12_11 ])
        ********************************************************
        The hashtag in the extracted comment below cannot be
        found. Probably back when I was putting each comment
        in it's own file. (BAD IDEA ADMINISTRATIVELY)

        HALT_OR_STATUS_CODE (HOS)
        Is basically telling you should you HALT or return
        a status code if things go wrong. This enables you to
        wrap the function in a FAIL_FAST and FAULT_TOLERANT
        version.

        Fault tolerant version is needed if we are going
        to allow users of the game to modify the shader
        source code at will by editing shader source
        in the "MOD" folder.
        ********************************************************

        EXTRACTED_COMMENT: ( From: GRAQUAD.F._ ON:2020_12_11 )
        ********************************************************
        //: A4[ #FEATURE:FAULT_TOLERANT_USER_FRAG_SHADERS# ] ://
        //: If function fails, what should it do?            ://
        //: AAC2020_GRAQUAD_FAIL_FAST                        ://
        //: AAC2020_GRAQUAD_FAIL_CODE                        ://
        ********************************************************

#################HALT_OR_STATUS_CODE_AND_FAULT_TOLERANT_SHADERS#
#DLL_LOADING_WILL_FAIL_STOP_HERE################################

    EXTRACTED_FROM[ GLEBIND.F ]ON_DATE[ 2020_12_11 ]

            Without search paths, we will fail to load   
            the DLL. Best to stop here so the console    
            output's last message is the ROOT problem. 
  
            fflush(stdout);exit(666);

################################DLL_LOADING_WILL_FAIL_STOP_HERE#
#_DONT_GET_SO_MARCO_HEAVY_WITH_DEBUG_PRINTS_####################

    ************************************************************
    This code was a bad idea. 
    Refactoring_This[ AAC2020_GLEBIND_MM_DEBUGPRINT_01 ]
    Refactoring___To[ aac2020_glebind_Hunt ]
    ************************************************************

    #define AAC2020_GLEBIND_MV_DEBUGPRINT_01 0                       
    #if(AAC2020_GLEBIND_MV_DEBUGPRINT_01 <= 0)                       
                                                                     
        //: emp_mac_arg:empty_macro_arg ://                          
        #define AAC2020_GLEBIND_MM_DEBUGPRINT_01( emp_mac_arg )      
                                                                     
    #else                                                            
                                                                     
        void AAC2020_GLEBIND_MM_DEBUGPRINT_01( const char* m ){      
            printf("[AAC2020_GLEBIND:DP_01]:%s\n",m);                
            fflush(stdout);                                          
        }                                                            
                                                                     
    #endif   

####################_DONT_GET_SO_MARCO_HEAVY_WITH_DEBUG_PRINTS_#


#_DO_NOT_INIT_WINDOW_CODE_HERE_#################################
 
    //:POSSIBLE_SOURCE_OF_REFACTOR_PROBLEMS:=================://

        /** This might be okay. The vital piece is that a    **/
        /** window must exist before you are able to create  **/
        /** an openGL context. AAC2020_GINAWIN_Init(...)     **/
        /** will do this. However, calling it here goes      **/
        /** against the LIBCHAN (library chain) code         **/
        /** structure we are trying to make.                 **/
        /** -John Mark Isaac Madison DATE[ 2020_11_01 ]      **/

        //[ ************************************************ ]//
        //- AAC2020_GINAWIN_Init(); <------ Commented out.   -//
        //[ ************************************************ ]//

        printf("*********************************\n");
        printf(
        "[DEBUG_NOTE:Originally_GLEB_Inited_GLEB_SWIN_here]\n"
        );;
        printf("*********************************\n");

    //:=================:POSSIBLE_SOURCE_OF_REFACTOR_PROBLEMS://
    /** **************************************************** **/

#################################_DO_NOT_INIT_WINDOW_CODE_HERE_#
#POINTER_SATED_ASSERTS_NON_NULL_PTR#############################

    Used to make sure function pointer is NOT null.      
    Hopefully can swap out for macro in the future to    
    remove this overhead when in a release mode.         

#############################POINTER_SATED_ASSERTS_NON_NULL_PTR#
#GLEBIND_FORGOT_TO_INIT_ERROR_CHECK#############################

    Forgetting to INIT is a root error, so crash  
    here first before checking function pointer.  

#############################GLEBIND_FORGOT_TO_INIT_ERROR_CHECK#
@ECHOFUNC_EXTRAFLUSH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    Denotes an extra fflush(stdout) in an echo/print
    type function. Typically to help prevent not seeing
    any messages because the message string itself 
    in a worst case scenario could be responsible for
    a SEGFAULT.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ECHOFUNC_EXTRAFLUSH@
#INFO_MESSAGES_SD###############################################

    Section containing "INFO" message functions.
    But contains: _str & _dec overloaded varieties.

###############################################INFO_MESSAGES_SD#
#_DUI_PICKCOLOR_KEPT_FOR_REFERENCE_#############################

    /** This version of function adapts to if GINAWIN        **/
    /** Library exists or not. Think I will NOT use this     **/
    /** function but instead use                             **/
    /** AAC2020_DUI_AskUserToPickColor_BWO , but will keep   **/
    /** this code for reference.                             **/

    AAC2020_DUI_AskUserToPickColor <--TALKING ABOUT THIS

#############################_DUI_PICKCOLOR_KEPT_FOR_REFERENCE_#
#_PARENT_ALWAYS_DESKTOP_HERE_DUI_###############################

    //: Parent window always desktop window because      ://
    //: we are in the version of function to be called   ://
    //: before main window opens.                        ://

###############################_PARENT_ALWAYS_DESKTOP_HERE_DUI_#
#ABOUT_HEAP_FREE################################################

    Kernel32.dll                     
    Frees a memory block alloced     
    from a heap by the HeapAlloc     
    or HeapReAlloc function.     

################################################ABOUT_HEAP_FREE#
#_WHY_HW_COMMENTED_OUT_IN_CALL_BELOW_###########################

    /** DATE[ 2020_10_30 ] ********************************* **/
    /** GINAWIN is only meant for ONE window. So we should   **/
    /** make as many variables FILESCOPE as possible to avoid**/
    /** problems resulting from passing around variables.    **/
    /** HENCE: "Hw" commented out in the call below.         **/

    Msg = aac2020_ginawin_WindowLoop( /** Hw **/ );

###########################_WHY_HW_COMMENTED_OUT_IN_CALL_BELOW_#
@CALL_FROM_ANOTHER_THREAD@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    This function should be called from a different thread.
    
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@CALL_FROM_ANOTHER_THREAD@
#_WINTOP_IS_ANNOYING_###########################################
    
    Having "window always on top" is annoying as hell.
    Don't do that. If you don't like it, others will
    definitely hate it.

###########################################_WINTOP_IS_ANNOYING_#
#_SET_FLAG_AFTER_SETTING_DEVICE_CONTEXT_########################

    EXTRACTED_ON_DATE[ 2020_12_09 ]

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯MC|//
    //|PUT AFTER device context has been set,or your   MC|//
    //|device context fetching function waiting on     MC|//
    //|this flag to be set in this thread will end up  MC|//
    //|with a NULL device context. Speaking Of:        MC|//
    //|AAC2020_GINAWIN_GetWindowDeviceContext();       MC|//
    AAC2020_GINAWIN.window_created =( 1 );

########################_SET_FLAG_AFTER_SETTING_DEVICE_CONTEXT_#
@STP_VAR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    EXTRACTED_ON_DATE[ 2020_12_09 ]

    int ok=( 1 );
    /** ok: Single_Threaded_Promise_Variable( STP_VAR ) **/

    We use the "ok" variable to un-branch single threaded
    logic that would otherwise be heavily nested. So I think
    of the structure just like if I were using a promise
    in node.js or javascript.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@STP_VAR@
#_DONT_CALL_FUNCTION_POINTER_IN_SPINLOCK_#######################

        //: CANDO: (NOT: T-o-d-o ):
        //: Could call a function pointer here.
        //: BUT current plan is to ABANDON multi-threadin.
        //: BECAUSE: KEEP_IT_SIMPLE_STUPID.
        //: Like in DOOM, game logic is tied to frame rate
        //: because they KEEP_IT_SIMPLE_STUPID.

#######################_DONT_CALL_FUNCTION_POINTER_IN_SPINLOCK_#
#_DONT_LET_WINDOW_CODE_MAKE_OPENGL_CALLS_#######################

    ************************************************************
    Found this large comment in my window code above
    [ aac2020_ginawin_WindowLoop ]. I think we should
    NOT call GL calls from the window code. Because
    window code is platform specific and we want to
    avoid tight coupling so refactoring to another
    platform isn't too hard.

    BELOW_EXTRACTED_ON_DATE[ 2020_12_09 ]
    ************************************************************

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
    //| Since you are discussing threads here,     |//
    //| you are aware that GL commands can only    |//
    //| be issued from a thread that has an        |//
    //| active GL context,correct? And that a      |//
    //| context can only be active in 0 or 1       |//
    //| threads at a time. If you ever tried to    |//
    //| issue commands from a different thread     |//
    //| than the one that created your context,    |//
    //| and you do not understand this then        |//
    //| confusing run-time behvior would ensue;    |//
    //| multi-threading is fine in GL,but you      |//
    //| have to mind which threads have active     |//
    //| contexts.                                  |//
    //| stackoverflow.com/questions/21685932/      |//
    //|____________________________________________|//
    //# Might want to call update here by          #//
    //# adding a render update callback?           #//
    //# That would get it to fire during WM_PAINT  #//
    //# AND get it on same thread, alleviating     #//
    //# two possible problems.                     #//

#######################_DONT_LET_WINDOW_CODE_MAKE_OPENGL_CALLS_#
#_EXTRAFLUSH_INCASE_BADFMTSTR_##################################
    
    Extra fflush(stdout) between printf statements in case
    the 2nd printf statement using a format string variable
    has an invalid format that will cause a segfault.

##################################_EXTRAFLUSH_INCASE_BADFMTSTR_#
#_SETFOCUS_FAILS_IF_DIALOG_IS_OPEN_#############################

    EXTRACTED_DATE[ 2020_12_09 ]FROM[ GINAWIN.F._ ]

        //:NOTE: SetFocus: Will FAIL when other dialogs are
        //:                opened as children of the main
        //:                window. SetFocus probably should
        //:                NOT be used in our 
        //:               [ window_loop / window_tick ]

#############################_SETFOCUS_FAILS_IF_DIALOG_IS_OPEN_#
#_SETFOCUS_DOES_NOT_PUT_WINDOW_TOP_#############################

    EXTRACTED_DATE[ 2020_12_09 ]FROM[ GINAWIN.F._ ]

        //:NOTE: SetFocus: Is NOT responsible for window
        //:                always being on top. That is
        //:                0x00000008L /** WS_EX_TOPMOST **/ 
        //:                Used during window creation.

#############################_SETFOCUS_DOES_NOT_PUT_WINDOW_TOP_#
#_ALWAYS_SHOW_MESSAGE_ON_CRASH_#################################

    If we are crashing the program. Always show the
    todo message that caused the crash.

    Even if( AAC2020_SILENCE.TODOMAN >= 1 )

    Because... It would be a real pain in the ass to 
    terminate the program and not show a reason why.
    So do not allow that behavior.

#################################_ALWAYS_SHOW_MESSAGE_ON_CRASH_#
#_GINAWIN_DOLOOP_ISNOTTHE_FINALFIX_#############################

    Now we wait and see if that stops the crashing.
    I think it will because my guess is I was failing
    to empty ( drain ) the message queue and after 
    enough time of messages being built up, the
    program decides it is being unresponsive.

    Pressing CTLR+ALT+DEL
    makes the program repsonsive again because it
    [flushes/discards] the message queue.

    Allowing you to have to wait for the queue to overflow
    again before the program becomes unresponsive.

    Well fuck... I was wrong....

#############################_GINAWIN_DOLOOP_ISNOTTHE_FINALFIX_#
#__END_OF_GINAWIN_BUGHUNT_001__#################################

    //: END_OF_THE_BUG_HUNT!                             ://
    //: PROBLEM: You for some reason thought that        ://
    //: GetWinDC returned "handle_to_window"             ://
    //: when it does NOT. Type Error.                    ://

#################################__END_OF_GINAWIN_BUGHUNT_001__#
#_ginawin_assert_single_threaded_mode_##########################

    COMMENT:EXTRACTED: DATE[2020_12_09]FROM[GINAWIN.F._]
    
        This function is only for running GINAWIN
        in single threaded mode. The integer supplied
        to function is to help [remember/re-inforce]
        this face.
    
    CODE::::EXTRACTED: DATE[2020_12_09]FROM[GINAWIN.F._]
    
        //:#_ginawin_assert_single_threaded_mode_#:----------://
        #define H aac2020_ginawin_Halt
        
            if( aac2020_ginawin_single_threaded
            !=  AAC2020_GINAWIN_SINGLE_THREADED
            ){
                H("[SINGLE_THREADED_ONLY]");
            };;
            if( AAC2020_GINAWIN.type_of_threading
            !=  AAC2020_GINAWIN_SINGLE_THREADED  
            ){
                H("[INTENTIONS_PURE_BUT_ARE_MULTI_THREADING]" );
            };;
        
        #undef  H
        //:------------:_ginawin_assert_single_threaded_mode_://

##########################_ginawin_assert_single_threaded_mode_#
#_WM_PAINT_RECYCLED_2020_12_09_#################################

    ************************************************************
    Extraced from the WM_PAINT case of GINAWIN.F
    on DATE[ 2020_12_09 ]. All of what was extracted was
    already commented out. Pretty sure we DONT want to run
    any graphics code on WM_PAINT section... But... Do we
    need to do something in here specifically to keep
    the window responsive?
    ************************************************************

            //:[TODO]:Something to pace the updating
            //:of graphics.


            //+ DELETE THIS BLOCK +//
            //- //:I dont think this is needed:         -//
            //- //: You may use the same HDC in both    -//
            //- //: threads, but not at the same time.  -//
            //- //: SEE[ gl-hdc-thread-quote ]          -//
            //- if(AAC2020_GINAWIN.render_tick_function_has){ -//
            //-    AAC2020_GINAWIN.render_tick_function();    -//
            //- };;                                     -//

            //: This might be better done setting a flag
            //: than using a callback. In order to prevent
            //: drawing code from being invoked on the
            //: wrong thread.

            //: With that said, setting a flag:
        //: ENGETHER.THREADING.InterlockedIncrement64(
        //:     &( AAC2020_GINAWIN.THREAD_SAFE_FLAGS.
        //:        redraw_message_count )
        //: );;

            
            //+ This call needs to be made from    +//
            //+ the same thread as your OpenGL     +//
            //+ calls.                             +//
            //# DONT_HERE:AAC2020_GINAWIN_SwapBuffers(); #//

#################################_WM_PAINT_RECYCLED_2020_12_09_#
#_WM_CLOSE_VS_WM_DESTROY_#######################################

    SC[ WM_DESTROY_VS_WM_CLOSE ] *******************  
    WM_DESTROY: CANNOT BE STOPPED, must cleanup.      
    WM_CLOSE  : CAN CHOOSE TO IGNORE AND NOT CLOSE    
                stackoverflow.com/questions/3155782/  
    ************************************************  

#######################################_WM_CLOSE_VS_WM_DESTROY_#
@REFERENCE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    The commented out cod you see with @REFERENCE@ tag means
    it is commented out because it is used as reference.

    As apposed to commented out code because it used to
    be executed but you got rid of it.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@REFERENCE@
#_I_THINK_MUST_ALWAYS_CALL_DEFWINPROC_##########################

    REVISIT_NOTE[ 2020_12_09 ]

        I still have not fixed the bug with window code that
        causes it to become unresponsive. The bug that for
        some odd reason, pressing CTRL+F fixes.

        Even if you don't do ANYTHING with the task manager.

    EXTRACTED_DATE[ 2020_12_09 ]

        [GUESS]I THINK we must ALWAYS call the default window  
        procedure in order to fulfill some type of      
        contract with the operating system. Much like   
        how your parents would report you MISSING if    
        you didn't come home for 5 days, WINDOWS        
        will report your application as unresponsive    
        if your application does not report back        
        frequently enough.                              

##########################_I_THINK_MUST_ALWAYS_CALL_DEFWINPROC_#
#_ABOUT_F_MACROS_###############################################

    SEE[ #_ABOUT_F_MACROS_TOP_# ]

###############################################_ABOUT_F_MACROS_#
#_ABOUT_F_MACROS_BOT_###########################################

    SEE[ #_ABOUT_F_MACROS_TOP_# ]

###########################################_ABOUT_F_MACROS_BOT_#
#_ABOUT_F_MACROS_TOP_###########################################

    EXTRACTED_ON_DATE[ 2020_12_09 ]

    FMACROS.TOP : Declare Function Macros                    
                                                             
    REASON For This File:                                    
        Remove Visual Clutter From AAC2020.C11 's logic .    
                                                             
    More Info:                                               
        The LIBCHAN (librarychain) allows us to compile      
        the project up to different points, as we maintain   
        a strict ordering of our libraries.                  
                                                             
###########################################_ABOUT_F_MACROS_TOP_#
#_EDITOR_CENTRIC_###############################################

    This project is "EDITOR CENTRIC" meaning the game is
    first and foremost an "EDITOR" and the game runs on
    TOP of the editor.

    This is because:

    1. Having 1 [code/codes/sourcecode] for both EDITOR-&-GAME
       means less code to maintain.

    2. Having 1 [code/codes/sourcecode] for both EDITOR-&-GAME
       means what you see in the editor is what you will end
       up with in the game exactly.

    3. EDITOR -WITHOUT- GAME  : Fun art program.
       GAME   -WITHOUT- EDITOR: YOU HAVE NOTHING.

       A GAME IS NOTHING IF YOU CANNOT GET [DATA/ASSETS]
       INTO IT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

###############################################_EDITOR_CENTRIC_#
#_YOU_SPELL_CPUNIFO_WRONG_A_LOT_################################

    CPUINFO : WRONG!! You Mean: CPUNIFO

################################_YOU_SPELL_CPUNIFO_WRONG_A_LOT_#
#_BE_NICE_AVOID_MACRO_POLLUTION_OF_OTHERS_CODE_#################

        DONT_POLLUTE_OTHER_PEOPLES_CODE_WITH_MACROS:

        I could see how these might be useful to other       
        people using the library.... But lets stick with a   
        YAGNI (You_Arent_Going_To_Need_It) philosophy.       

#################_BE_NICE_AVOID_MACRO_POLLUTION_OF_OTHERS_CODE_#
#_WHAT_IS_THE_LIBRARY_CHAIN_####################################

        Library chain is used as a hackish way to debug       
        code by divide and conquer. Any                       
        AAC2020_MAC_LIBCHAN_CUR value between [ 0 -to- MAX ]  
        (inclusive range) should yeild a working              
        executable.                                           
                                                             
        This requires being a bit meticulous with your        
        dependencies. But you should understand your          
        dependencies well enough to pull this off anyhow.     
                                                             
        Dependency injection or dependency resolvers are for  
        people who are writing clusterfucks. We want to       
        actually have a clear idea of what our code is doing. 
                                                            
        John Mark Isaac Madison DATE[2020_11_01]              

    /////// AAC2020_MAC_LIBCHAN_CUR ( ? ) //:<-- Compile_To_Here

####################################_WHAT_IS_THE_LIBRARY_CHAIN_#
#NEGONE_IF_NOT_IN_SHADER########################################


    glGetUniformLocation :

    This function returns -1 if name does not
    correspond to an active uniform variable in
    program,if name starts with the reserved
    prefix "gl_",or if name is associated with
    an atomic counter or a named uniform block.

    https://www.khronos.org/registry/OpenGL-Refpages/
                        gl4/html/glGetUniformLocation.xhtml

########################################NEGONE_IF_NOT_IN_SHADER#
#GPUDATA_IS_NOW_A_TEMPORARY_CONTAINER###########################

    Data that I thought I was going to store in "GPUDATA"
    instances now lives in FILE_SCOPE variables in PIXNAME.

    We only pack vars from PIXNAME into GPUDATA 
    ________TEMPORARILY_______ when we need to use it
    with a function call.

###########################GPUDATA_IS_NOW_A_TEMPORARY_CONTAINER#
#_GENTEX_ONCE_ON_EXE_STARTUP_###################################

        QUESTION: ( 2020_12_08 or before)

            Should we always re-generate textures  
            When initializing? Is function         
            idempotent if we do it this way?     

        ANSWER: ( 2020_12_09 )

            NO! Do this only once because when you switch
            programs (1 shader program per editor ).
            The texture memory allocated is ____NOT____ deleted.

            AKA: All programs share same texture memory.

###################################_GENTEX_ONCE_ON_EXE_STARTUP_#
@SYN_VAR@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    SYN_VAR: Synonymous_Variables:

        Used to mark two variables that mean the 
        same exact thing in code. We try to avoid
        having two variables that mean the exact 
        same thing in our code because it disrupts
        the VISUAL PATTERNS of the source code.
        But sometimes it happens.

        Example: (FROM: aac2020_gpudata_IIA_UploadTexture )

        /**  #SYN_VAR[ cpu_pix ============ pix_arr ] **/
        U08*           pix_arr = gpudata -> cpu_pix; 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SYN_VAR@
#SYN_VAR########################################################

    SEE[ @SYN_VAR@ ]

########################################################SYN_VAR#
#KEEP_VOID_TO_AVOID_CONFUSION###################################

    DATE_WRITTEN[ 2020_12_09 ]

    Sometimes I like functions to return an unsigned integer
    that means NOTHING so I have the ability to give that
    returned integer a meaning in the future. However in
    some functions, returning a number can make things
    confusing to follow. 

    For example, AAC2020_GPUDATA_GetPixelOnCPU_RGBA
                 returns it's [ r,g,b,a ] via 
                 output parameter pointers to U08.

                 Giving this function a return value
                 can distract from that I believe.

###################################KEEP_VOID_TO_AVOID_CONFUSION#
#SIX_FIGURES_IS_ONLY############################################

    I wrote this when I was a bit distracted and wondering
    how much you would REALLY have to make in terms of
    gross profits to get to six figures after tax.
    These are the source code calculations removed from
    [ GPUDATA.F ]ON_DATE[ 2020_12_09 ]To reduce some of
    the clutter in there as we review the code.

                //:SIDE_TRACKED_BUT_FUCKYOU_ITS_MY_CODE:-----://

                //:How much is six figures? If you have 100% ://
                //:markup on your product. And after 10%     ://
                //:sales tax.                                ://
               
                /** G_Y: Gross profit per year. **/
                /** G_D: Gross profit per day . **/
                float K = ( 1000 );
                float G_Y = ( 100 * K );
                float G_D  = ( G_Y / 365 );

                /** B_T: Before 10% tax                      **/
                /** **************************************** **/
                /** 0.9 is your percent KEEP *************** **/
                /** G_D = B_T * 0.9;         *************** **/
                float B_T = ( G_D / 0.9 );
                /** **************************************** **/

                /** B_M: Before Markup of 200%               **/
                /** **************************************** **/
                float M_U = 2.0; //:markup percentage.
                float M_T = 1.0 / M_U; //:Markup tax.
                /** EXAMPLE: If you sell for 800% markup, **/
                /** That means 1/8th is expenses. So you  **/
                /** can think of that as a 1/8th tax.     **/
                float P_K = ( 1.0 - M_T );
                if( P_K <= 0 ){ ERR("[BadPercentKeep]"); };
                float B_M = ( B_T / P_K );
                /** **************************************** **/
                
                /** At given tax rate and markup rate. **/

                //: 608 / 2 * 0.9 * 365 == Close To 100K
                printf("[SIX_FIGURES_IS:B_M]%f\n",B_M);
                fflush(stdout);

                //:-----:SIDE_TRACKED_BUT_FUCKYOU_ITS_MY_CODE://

############################################SIX_FIGURES_IS_ONLY#
#_GPUDATA_MATH_FUNCTIONS_ARE_BARE_BASIC_ABSTRACTIONS_###########
#BASIC_2D_ARRAY_ABSTRACTIONS_ONLY###############################

    YES:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

        GPUDATA math functions should abstract the 512x512
        section of memory as a 512x512 bitmap. It should only
        handle basic abstractions like "index-to-xy" and
        "xy-to-index".
    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::YES
    NOT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        Something like:
        "xy+tilesize+tilelayer" --> to "PhysicalPixelLocation"
        Does NOT belong in GPUDATA but rather in PAINT5D.
       ( Or another sub editor with it's own abstraction of )
       ( what the[ cpu_pix ]of[ PIXNAME -or- GPUDATA ]mean. )

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!NOT

###############################BASIC_2D_ARRAY_ABSTRACTIONS_ONLY#
###########_GPUDATA_MATH_FUNCTIONS_ARE_BARE_BASIC_ABSTRACTIONS_#
#_GROUP_MATH_FUNCTIONS_WITH_THEIR_INVERSES_#####################

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    /** Centralizing these functions will help me avoid      **/
    /** making mistakes. They could be inlined. But lets     **/
    /** not do that right now, as it makes the code more     **/
    /** likely to break during compilation.                  **/
    /** https://www.geeksforgeeks.org/inline-function-in-c/  **/

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

#####################_GROUP_MATH_FUNCTIONS_WITH_THEIR_INVERSES_#
#DO_NOT_EXTRACT#################################################

    SEE[ #_DO_NOT_EXTRACT_# ]

#################################################DO_NOT_EXTRACT#
#_NEW_PROGRAMS_DONT_REMOVE_OLD_TEXTURES_########################

    https://www.khronos.org/opengl/wiki/Texture

    Texture objects are not directly associated 
    with or attached to program objects. Instead, 
    program samplers reference texture image unit 
    indices. Whatever textures are bound to those 
    image units at the time of rendering are used 
    by the program. So the first step is to set the 
    uniform value for the program samplers.

#########################_NEW_PROGRAMS_DONT_REMOVE_OLD_TEXTURES_
#_INI_SPAM_AND_RECURSION_GAURD_#################################

    Code that is [guarding/protecting] an initializer
    function from.

    1. being spammed (invoked rapidly in multiple succession)
    2. recursively being called.

    NOTE:
        This is not intended as a hackish solution to 
        make initializers idempotent by exiting early.

        Not intended to prevent 2x in a row execution.
        Just prevent QUICK successive calls.

        Though the naive method for this will typically
        prevent 2x in a row calls... DO NOT RELY ON THAT
        TO MAKE FUNCTION IDEMPOTENT.

#################################_INI_SPAM_AND_RECURSION_GAURD_#
@QUELCHNOTUSED@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    
    @QUELCHNOTUSED@ 
    @QUELCH_NOT_USED@
    @QUELCH_UNUSED@
    @QUELCHUNUSED@

        Denotes we are trying to quelch an un-used
        variable compiler error.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QUELCHNOTUSED@
@IDEMPOTENT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @IDEMPOTENT@

    Used to denote an function (typically initializer)
    that can be called multiple times in a row without
    breaking or causing unexpected behavior.

    If you marked something as @IDEMPOTENT@ and it is not,
    chances are the CODE IS WRONG not the COMMENT.

    @IDEMPOTENT@ is conveying design intent. It would be
    foolish to think that the comment is wrong and the
    code correct in this case.
        
    Fuck You "cleanCode®™"

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IDEMPOTENT@
#_sam_val_ALWAYS_EQUALS_tex_lot_################################
#_tex_lot_ALWAYS_EQUALS_sam_val_################################

    For simplicity sam_val == tex_lot.
    ( Specificially[ sam_val ]DEPENDS_ON[ tex_lot ] )

    A 1:1 mapping between the texture slot.....

    WAIT.... NOT FOR SIMPLICITY. For NECESSITY!!!!

    tex_lot: Where the texture is loaded.

    sam_val: Tell your sampler uniform to sample that texture
             by setting: (sam_val)==(tex_lot)

################################_sam_val_ALWAYS_EQUALS_tex_lot_#
################################_tex_lot_ALWAYS_EQUALS_sam_val_#
#_2ND_GUESSING_PIXPUSH_TEX_SAM_ERR_#############################
                                         
        Actually... This could happen because     
        AAC2020_GPUDATA_InitInstanceAll may have  
        been called when a shader that did NOT    
        have a texture sampler uniform in it's    
        source was [ in focus / loaded ]          
                                                  
        THIS CASE IS NOT AN ERROR **/             
                                                  
        Wait... it is an error but only if....    
        Only if... "tex_sam_HAS" is true.         

#############################_2ND_GUESSING_PIXPUSH_TEX_SAM_ERR_#
#TEX_IMAGE_2D_CORRECTION########################################

    SEARCHED_FOR[ texImage2D ]WHAT_YOU_WANT[ glTexImage2D ]

########################################TEX_IMAGE_2D_CORRECTION#
()calledby() :::::::::::::::::::::::::::::::::::::::::::::::::::

    Comment used to help track what calls what.
    Example:  bar()calleby()foo

::::::::::::::::::::::::::::::::::::::::::::::::::::()calledby()
()calls() ::::::::::::::::::::::::::::::::::::::::::::::::::::::

    Comment used to help track what calls what.
    Example:  foo()calls()bar

:::::::::::::::::::::::::::::::::::::::::::::::::::::::()calls()
#WHY_PIX_DEX_AND_COM_DEX########################################
#DEX_PIX#DEX_COM################################################

    #DEX_PIX# #dex_pix# -----------> pix_dex ( PIXel     inDEX )
    #DEX_COM# #dex_com# -----------> com_dex ( COMponent inDEX )

    Usually we go "general to specific"
    and thus "pix_dex" and "com_dex" are the proper
    variables. As "index (dex)" is a more general
    variable specifier than "pixel(pix)" or "component(com)"

    However: pix_dex is GRANDFATHERED in because it was first
             used in the context of:

             pix_wid
             pix_hig
             pix_arr
             pix_dex
                 |||
             com_dex
             
             Where "pix" is the generic aspect and
             "dex" is the more specific aspect.

             To avoid fractionating our variable namespaces
             (conceputal namespaces in our HEAD) we need to
             pick one [ permutation / ordering ] and    
             stick with it. To ease decision, it is whatever
             we use FIRST. Hence "GRANDFATHERED IN"

################################################DEX_PIX#DEX_COM#
########################################WHY_PIX_DEX_AND_COM_DEX#
@INIT_ALL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    @INIT_ALL@ : Added so when searching for AAC2020_GPUDATA
                 with "find in files" I can find the
                 instance of[ gpudata ]that I am looking for.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@INIT_ALL@
#_TODOS_CAN_BREAK_COLUMN_LIMIT_#################################

    "TODO" notes are allowed to break the 64 character
    source code column limit because.....
        
        1. It sticks out like a sore thumb (Its Noticable)
        2. It annoys the hell out of me

            Annoying things more likely to get my attention.
            Annoying things more likely to be silenced
            by getting them fixed.

        SAYING: The sqeaky wheel gets the grease.

#################################_TODOS_CAN_BREAK_COLUMN_LIMIT_#
#_CTRL_F_HELP_##################################################
#CTRL_F_HELP####################################################

    #_CTRL_F_HELP_#:
    
        A comment tag used to denote a comment that should
        NOT be extracted into this (_H_) file because
        it's mechanic is to help programmers find when
        they are looking for when they

        1. Find String In Files VIA editor
        2. GREP via command line

    UPDATE[ 2021_01_09 : 734PM ]
    VID_IID[ 0081 ]TIME[ 00:03:58 ]
        
        @CTRL_F_HELP@ <-- "@" for generic comments that are
                           more re-usable than "#"

####################################################CTRL_F_HELP#
##################################################_CTRL_F_HELP_#
#_SAM_PRECISION_BEFORE_SAM_VAR_#################################

    //: Must declare precision before            
    //: declaring any uniforms                   

    precision highp usampler2D; //:<<<<<<<<<< 1st

    uniform usampler2D paint5d; //:<<<<<<<<<< 2nd

#################################_SAM_PRECISION_BEFORE_SAM_VAR_#
#_KEEP_USAMPLER_HIGH_###########################################


    //: Pretty sure sampler precision must       :// 
    //: always be high. Otherwise we will corrupt:// 
    //: our bit-packing patterns that are stored :// 
    //: in each pixel.                           :// 
    ;//:- - - - - - - -:// 

###########################################_KEEP_USAMPLER_HIGH_#
#_WHY_CANT_I_SEE_PAINT5D_IN_MY_EXE_#############################

    If you don't see your PAINT5D GLSL code, remember that the       
    prescense (spelling?) of "SHADER_001_PAINT5D.FRAG" 
    will override the hard-coded default shader code
    embedded in the ".text" segment of your executable
    source code.

    Or more plainly:

    Instead of loading AAC2020_PAINT5D_DEFAULT_001 from EXE,
    we load "SHADER_001_PAINT5D.FRAG" from disk if it is
    present.

    This allows users of our game to make mods to game
    if they are [informed/knowledgeable] of GLSL code.

#############################_WHY_CANT_I_SEE_PAINT5D_IN_MY_EXE_#
#_PULL_GLSL_SHADER_DATA_FROM_FUTURE_############################

        Because ALL DATA is declared before      
        ALL FUNCTIONS, we can get away with      
        referencing a piece of data from the     
        future like this.   
                     
############################_PULL_GLSL_SHADER_DATA_FROM_FUTURE_#
#_GPU_DATA_IS_A_TEMPORARY_HELPER_OBJECT_ONLY_###################

    Flat is better than nested. But sometimes we need to
    pass around a bundle of arguments to a helper function.

    Don't make your data LIVE in a nested structure just
    because sometimes it needs to be passed around in
    a bundle.

    REASONS:
        1. Flat code easier to memorize.
        2. Packing into nested structure at locations
           where it is needed make the code readable 
           WITHOUT intellisense because you can see
           what members you are packing into the struct
           at the fuction call site.

###################_GPU_DATA_IS_A_TEMPORARY_HELPER_OBJECT_ONLY_#
#_DO_NOT_EXTRACT_COMMENT_#######################################
#_DO_NOT_EXTRACT_###############################################

    #_DO_NOT_EXTRACT_COMMENT_#:  ( Synonymous Hashtags )
    #_DO_NOT_EXTRACT_#        :  ( Synonymous Hashtags )

        Means the comment itself serves some type of
        [ mechanical / administrative ] purpose meerly
        by existing where it does.

        Most commonly this would be for:

        1. WARNING COMMENTS 
        2. CTRL_F_HELP Comments.
        
        The mechanics of both comments dictate that they
        will fail to serve their purpose if they are
        extraced into this (_H_) file.

###############################################_DO_NOT_EXTRACT_#
#######################################_DO_NOT_EXTRACT_COMMENT_#
#_SIMPLE_CODE_TRUMPS_OPTIMIZED_CODE_############################

    Prioritize SIMPLE over OPTIMIZED/PERFORMANT code.

    Optimizing can happen. But only in 2 cases.

    1. Performance loss makes project UN-Usable.
    2. Game is 100% finished and we are in POLISH stage.

############################_SIMPLE_CODE_TRUMPS_OPTIMIZED_CODE_#
#_GPUDATA_NOT_USED_YET_BUT_STILL_ALLOCATE_######################

    The names "todo_02" , "todo_03" etc are
    name of reserved memory slots that have not
    been assigned a purpose yet.

    Though not assigned a purpose yet, we should still
    allocate them.

    (Yes wasteful I know)

    Reason:
        When ready to use memory for something, all we need
        to do is a name refactor without changing any
        functionality.

        If there is a problem that can occure by reserving
        more than ONE block of GPUDATA, we will know
        RIGHT_FUCKING_NOW. Even though we only are going to
        use one of those blocks RIGHT_FUCKING_NOW.

        #_SIMPLE_CODE_TRUMPS_OPTIMIZED_CODE_#

######################_GPUDATA_NOT_USED_YET_BUT_STILL_ALLOCATE_#
#_BAD_IDEA_001_#################################################

    ------------------------------------------------------------
    Below was a bad idea. The correct way to handle this was
    to create error friendly wrapper functions so that we 
    can consolidate all the function calls needed to be
    made on a ONE LINE PER CALL basis.
    
    Reducing the density like this I think is a BAD IDEA.
    But originally did it because function calls were not
    error friendly. So we fixed that up a bit and
    make aac2020_gpudata wrapper functions for openGl
    binding library functions in AAC2020_GLEBIND.

        1:  aac2020_gpudata_glGetUniformLocation
        2:  aac2020_gpudata_glGetUniformiv      
    ------------------------------------------------------------

        //:GET_TEXTURE_SAMPLER:ALL:--------------------------://
        //:##################################################://
        //: MACROS: Functions: UPPERCASE                     ://
        //: MACROS: Constants: UPPERCASE                     ://
        //: MACROS: Variables: lowercase                     ://
        //:                                                  ://
        //: Dont be afraid of long functions. This is kinda  ://
        //: verbose and ugly and long... And very cut+paste. ://
        //: But also pretty easy to follow with only         ://
        //: 1 level of indirection.                          ://
        //: (We will see how easy to follow when we )        ://
        //: (come back to it in a month from now.   )        ://
        //: (DATE_WRITTEN: 2020_12_07               )        ://
        //:                                                  ://
        //:##################################################://
        #define N   ( 0 - 1 );                           //:1://
        #define P   (aac2020_graquad.data.POG_IID)       //:1://
        #define L   AAC2020_GLEBIND.glGetUniformLocation //:1://
        #define V   AAC2020_GLEBIND.glGetUniformiv       //:1://
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
    
            /** Sections by which texture sampler we are **/
            /** getting.                                 **/

            //:0101010101010101010101010101010101010101010101://
            #define s &(AAC2020_PIXNAME_paint5d[ 0 ] ) 
            #define h   AAC2020_PIXNAME_paint5d_tex_sam_HAS     
            #define l   AAC2020_PIXNAME_paint5d_tex_sam.sam_loc                        
            #define v   AAC2020_PIXNAME_paint5d_tex_sam.sam_val                        
             
                l = L( P , s );  
                if(      l == N ){  /** DO_NOTHING **/   }
                else if( l >= 0 ){  V(P, l ,  &( v )  ); }
                else{ INI_ALL_ERR("[SAM_LOC_001:ERR]");  };;
                
                if( N == l ){ l = N ; v = N ; h =( 0 ); }
                else{         l = l ; v = v ; h =( 1 ); }
      
            #undef  s  //:-----------------------------------://
            #undef  h  //:-----------------------------------://
            #undef  l  //:-----------------------------------://              
            #undef  v  //:-----------------------------------://
            //:0101010101010101010101010101010101010101010101://
            //:0202020202020202020202020202020202020202020202://
            #define s &(AAC2020_PIXNAME_todo_02[ 0 ] ) 
            #define h   AAC2020_PIXNAME_todo_02_tex_sam_HAS     
            #define l   AAC2020_PIXNAME_todo_02_tex_sam.sam_loc                        
            #define v   AAC2020_PIXNAME_todo_02_tex_sam.sam_val                        
             
                l = L( P , s );  
                if(      l == N ){  /** DO_NOTHING **/   }
                else if( l >= 0 ){  V(P, l ,  &( v )  ); }
                else{ INI_ALL_ERR("[SAM_LOC_002:ERR]");  };;
                
                if( N == l ){ l = N ; v = N ; h =( 0 ); }
                else{         l = l ; v = v ; h =( 1 ); }
      
            #undef  s  //:-----------------------------------://
            #undef  h  //:-----------------------------------://
            #undef  l  //:-----------------------------------://              
            #undef  v  //:-----------------------------------://
            //:0202020202020202020202020202020202020202020202://
            //:0303030303030303030303030303030303030303030303://
            #define s &(AAC2020_PIXNAME_todo_03[ 0 ] ) 
            #define h   AAC2020_PIXNAME_todo_03_tex_sam_HAS     
            #define l   AAC2020_PIXNAME_todo_03_tex_sam.sam_loc                        
            #define v   AAC2020_PIXNAME_todo_03_tex_sam.sam_val                        
             
                l = L( P , s );  
                if(      l == N ){  /** DO_NOTHING **/   }
                else if( l >= 0 ){  V(P, l ,  &( v )  ); }
                else{ INI_ALL_ERR("[SAM_LOC_003:ERR]");  };;
                
                if( N == l ){ l = N ; v = N ; h =( 0 ); }
                else{         l = l ; v = v ; h =( 1 ); }
      
            #undef  s  //:-----------------------------------://
            #undef  h  //:-----------------------------------://
            #undef  l  //:-----------------------------------://              
            #undef  v  //:-----------------------------------://
            //:0303030303030303030303030303030303030303030303://

        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
        #undef  N //:Not Exist is Negative One           //:1://
        #undef  P //:Program Integer Id (POG_IID)        //:2://
        #undef  L //:Program Integer Id (POG_IID)        //:3://
        #undef  V //:Program Integer Id (POG_IID)        //:4://
        //:##################################################://
        //:--------------------------:GET_TEXTURE_SAMPLER:ALL://

#################################################_BAD_IDEA_001_#
#_ONE_EXIT_POINT_ALWAYS_########################################

    Functions should always have exactly one EXIT point
    as last line of function. A RETURN statement to be
    precise.

    Any function that does NOT obey this needs refactoring
    eventually.

    Multiple exit points are too error prone as I tend to
    miss them when reading code.

    The idea of "Get out of function as soon as possible"
    "before you screw stuff up" is a good idea though.
    To account for that philosophy, we should properly
    gaurd code blocks with an [ ok / o_k ] variable if
    their design typically WOULD best accomidate multiple
    return statements.

    WRITTEN_DATE[ 2020_12_07 ]

########################################_ONE_EXIT_POINT_ALWAYS_#
#_ALWAYS_WRAP_WITH_IDENTICAL_SIGNATURE_#########################

    It is TEMPTING to change the signature of wrapped functions
    to something NICER to use. However, doing that means
    it will be harder to interchangibly swapp the

        WRAPPED

    version with the

        UN-WRAPPED

    version of the function. I can see some benifit to that.

        BENIFITS:

            1. More flexibility.
            2. Dont have to THINK UP new signature format.

    So... WRAPER FUNCTION SHOULD HAVE IDENTICAL SIGNATURE
          TO THE FUNCTION IT IS WRAPPING.

#########################_ALWAYS_WRAP_WITH_IDENTICAL_SIGNATURE_#
#_ALWAYS_RELOAD_TEXSAM_AFTER_RELOADING_SHADER_##################

    Just because GPUDATA is initialized does NOT mean the
    texture sampler was successfully created. Texture sampler
    will only successfully exist if the texture sampler
    name is present in the currently loaded shader
    source code.

    Texture Sampler Names:
        AAC2020_PIXNAME_paint5d
        AAC2020_PIXNAME_todo_02  << Not_Yet_Assigned_As_Of_NOW
        AAC2020_PIXNAME_todo_03  << Not_Yet_Assigned_As_Of_NOW
        .... ETC

    Not_Yet_Assigned_As_Of_NOW: 2020_12_07

##################_ALWAYS_RELOAD_TEXSAM_AFTER_RELOADING_SHADER_#
#_PIXNAME_PATTERN_BREAKER_######################################

    EXTRACTED_FROM[ LIBCHAN.TOP._ ]ON_DATE[ 2020_12_06 ]

        //:--------------------------------------------------://
        //:#PATTERN_BREAKER# (slightly)                      ://
        //:                                                  ://
        //: A list of names of all of the gpu textures       ://
        //: defined by different GPUDATA instances.          ://
        //:                                                  ://
        //: We don't know what those names will be yet.      ://
        //: That is why this breaks project structure.       ://
        //:                                                  ://
        //: To mitigate the problem, these values will only  ://
        //: be used to ASSERT the correct values in future   ://
        //: libraries.                                       ://
        //:                                                  ://
        //:Q: Why are we breaking the LIBCHAN pattern here?  ://
        //:A: A consolidated list of all GPU textures        ://
        //:   is useful.                                     ://
        //:--------------------------------------------------://

######################################_PIXNAME_PATTERN_BREAKER_#
#_GPUDATA_IS_NOT_LIMITED_TO_GRAPHICS_###########################

    EXTRACTED_FROM[ LIBCHAN.TOP._ ]ON_DATE[ 2020_12_06 ]

        //:GPUDATA: GraphicsProcessingUnit_DATA
        //:        (NOT NECCESSARILY GRAPHICAL DATA)
        //:        (NOT NECCESSARILY GRAPHICAL INFORMATION)
        //:        GPUDATA tells me where the data is stored,
        //:        but not what the data represents.

###########################_GPUDATA_IS_NOT_LIMITED_TO_GRAPHICS_#
#TEMPCON########################################################

    #TEMPCON#: Tagging some variable as a "temporary container"

    For example: GPUDATA is a TEMPCON as of DATE[ 2020_12_06 ]

#########################################################TEMPCON#
#_FOR_SIMPLICITY_ALL_MEMORY_IS_512x512_#########################

    All memory for all systems is a 512x512 RGBA 
    UN-signed (NO NEGATIVES) integer texture.

    Art is about working with contraints. A block of marble
    with ZERO contraints is a block of marble. A statue is
    a block of marble with constraints put on it.

    Everything is nothing.

    111111111111111111111111111111111111111 <<<< NOTHING
    000000000000000000000000000000000000000 <<<< NOTHING
    010100101010111111000001111000001010101 <<<< SOMETHING

    This is why the void of nothingness is sometimes 
    refered to a "chaos" because the void of nothingness
    and complete chaos are the same exact thing.

#########################_FOR_SIMPLICITY_ALL_MEMORY_IS_512x512_#
#_PAINT5D_DATA_ERROR_CHECK_NOW_POINTLESS_#######################

    REMOVED, because now pointless. 
    REMOVED_DATE[ 2020_12_05 : 1134PM ]

            if( strcmp( 
                &(                 paint5d.pix_nam[ 0 ]  )
            ,   &( AAC2020_PIXNAME_paint5d[ 0 ]          )
            ) != 0 ){
                ERR("[paint5d:INIT_FAIL:ON:pix_nam]");
            };;
    
            if( AAC2020_PIXNAME_paint5d_tex_lot
                   !=   paint5d.g_pixel.tex_lot
            ){
                ERR("[paint5d:INIT_FAIL:ON:tex_lot]");
            };;

#######################_PAINT5D_DATA_ERROR_CHECK_NOW_POINTLESS_#
#_PAINT5D_DATA_IS_A_TEMPORARY_CONTAINER_NOW_####################
    
    ------------------------------------------------------------
    For the sake of keeping things as SIMPLE & FLAT as possible,
    "GPUDATA" is now a temporary container only. For when we
    need to pass the data to a helper function. Actual data
    for "GPUDATA" exists in "PIXNAME". 

    REASON:
        1. PIXNAME way is SIMPLE + FLAT
        2. GPUDATA way is easy to pass around but harder to
           follow and read the code.

        We want to avoid fractionating our variable space,
        so if we want the "best of both worlds" GPUDATA 
        must be a TEMPORARY object only.

    ------------------------------------------------------------

        /// SBE: [Set/Put]Before_Init ///

            paint5d.g_pixel.tex_lot   = 1         ; /// SBE ///

         //:paint5d.g_pixel.pix_nam   = "paint5d" ; /// SBE ///
            paint5d.pix_nam[ 0 ] = 'p' ;          ;
            paint5d.pix_nam[ 1 ] = 'a' ;          ;
            paint5d.pix_nam[ 2 ] = 'i' ;          ;
            paint5d.pix_nam[ 3 ] = 'n' ;          ;
            paint5d.pix_nam[ 4 ] = 't' ;          ;
            paint5d.pix_nam[ 5 ] = '5' ;          ;
            paint5d.pix_nam[ 6 ] = 'd' ;          ;
            paint5d.pix_nam[ 7 ] = '\0';          ;
                           
            //:#WHY_PAINT5D_ERRORS_2020_12_04#
            if( paint5d.cpu_pix[0]      != 0 ){ ERR("[E_1]");};                   
            if( paint5d.g_pixel.tex_han != 0 ){ ERR("[E_2]");};
            if( paint5d.g_pixel.sam_loc != 0 ){ ERR("[E_3]");};
            if( paint5d.g_pixel.sam_val != 0 ){ ERR("[E_4]");};

####################_PAINT5D_DATA_IS_A_TEMPORARY_CONTAINER_NOW_#
#_GPUDATA_FLAT_IS_BETTER_THAN_NESTED_###########################

    In retrospect, nesting things into a "g_pixel" member
    was a bad idea. The intent was to communicate the
    division between "data on the GPU" and "data on the CPU".

    (CPU==HOST   Side)
    (GPU==DEVICE Side)

    But the only purpose GPUDATA struct should have is a
    container to pass around a bundle of stuff.... Don't change
    code structure for the sake of self-documenting code.

        //:REMOVED_ON[ DATE[ 2020_12_05 ] ]

        //:Handle to GPU texture representing cpu_pix :::::::://
        struct AAC2020_GPUDATA_G_PIXEL{

            //: -------------------------------------------- ://
            //: activeTexture( tex_lot )                     ://
            //: bindTexture(   tex_han );                    ://
            //: Means:                                       ://
            //:     OPEN_GL_TEXTURES[ tex_lot ]=( tex_han ); ://
            //: -------------------------------------------- ://
            int
            tex_lot ;//:USE_WITH[ activeTexture ]   
            int
            tex_han ;//:USE_WITH[ bindTexture   ]   
            
            //: -------------------------------------------- ://
            //: Texture SAMPLER_UNIFORM Value ************** ://
            //: sam_loc: Memory ADDRESS of SAMPLER_UNIFORM   ://
            //: sam_val: ValueOf[ tex_lot ]stored at ADDRESS ://
            //: -------------------------------------------- ://
            int
            sam_loc ;//:USE_WITH[ uniform1i( sam_loc, sam_val )]
            int
            sam_val ;//:USE_WITH[ uniform1i( sam_loc, sam_val )]

        }g_pixel; /// AKA: gpu_pix / gpu_han ///

###########################_GPUDATA_FLAT_IS_BETTER_THAN_NESTED_#
#_GAME_WITHOUT_MUTEXES_#########################################

        //: Removed, lets try to make an entire game without ://
        //: having to use mutexes, semaphores, and fences.   ://

        //: ENGETHER.THREADING.InterlockedIncrement64(
        //:     &( AAC2020_GINAWIN.THREAD_SAFE_FLAGS.
        //:        resize_message_count )
        //: );;

        //: #define C_B AAC2020_GINAWIN.OPTIONAL_CALLBACKS
        //: if(C_B.resize_function_has){
        //:    C_B.resize_function();
        //: };;
        //: #undef  C_B

#########################################_GAME_WITHOUT_MUTEXES_#
#_FRAGBED_UNIFORM_FREEABLE_POINTERS_############################

    EXTRACTED_FROM[ FRAGBED.D._ ]ON_DATE[ 2020_12_15 ]

    DESIGN_NOTES:

    I originally thought "AAC2020_FRAGBED_loaded_##_ptr"(s)
    could point to either the default shaders
    ( "AAC2020_FRAGBED_DEFAULT_###" ) or to shader code
    on the hard disk.
    
    Problem:

    This would mean sometimes the pointer is FREEABLE
    (when it points to disk) and UN-FREEABLE when it points
    to a hard coded (in source code) FILE_SCOPE char array.

    Solution:

    FILE_SCOPE char arrays must be copied over to malloced 
    memory for consistency.


############################_FRAGBED_UNIFORM_FREEABLE_POINTERS_#
#_GRAQUAD_CAME_FROM_GLEB_SWIN_##################################

    Extracted_From[ GRAQUAD.F._ ]ON_DATE[ 2020_12_05 ]

    Refactor Note:
    GLEB_SWIN --> GINAWIN (Graphics_Init_And_WINdow)
    GLEB -------> GLEBIND (open_GL_Easy_BINDings   )

##################################_GRAQUAD_CAME_FROM_GLEB_SWIN_#
#_TWO_DEFAULT_SHADERS_ONLY_#####################################

    EXTRACTED_FROM[ GRAQUAD.D.FRAG ]ON_DATE[ 2020_12_05 ]

        GRAQUAD.D.FRAG._:                                        
        GRAQUAD.DATA.FRAGMENT_SHADERS:                           
                                                                 
        These are just the shaders with different messages in    
        them for the user. Do NOT put AAC2020_FRAGBED default    
        shaders here. I get that you want to consolidate shader  
        code, but those default shaders need to be placed        
        where you would logically look for them in the future.   
                                                                 
        Which is with AAC2020_FRAGBED                            

#####################################_TWO_DEFAULT_SHADERS_ONLY_#
#_UNIFORM_NAMING_CONVENTION_####################################

    Uniform names copies of SHADERTOY.COM uniform names. 

    That way:

        1. I don't have to think about what to call them.
        2. I can easily [cut+paste] [ to | from ] Shadertoy.com

####################################_UNIFORM_NAMING_CONVENTION_#
#_WHY_THESE_IMOUSE_NAMES_#######################################

        //: ------------------------------------------------ ://
        //: [x,y,z,w]                                        ://
        //:                                                  ://
        //: These will be backed into VEC4 when              ://
        //: loaded into iMouse uniform.                      ://
        //: Decided to label these as their actual values    ://
        //: in the GLSL code rather than their usage.        ://
        //:                                                  ://
        //: Reason: I might not correctly understand what    ://
        //:         these values SHOULD BE and I don't want  ://
        //:         to have variable names that lie in my    ://
        //:         code.                                    ://
        //: ------------------------------------------------ ://
        U32   AAC2020_CPUNIFO_iMouse_vec4_x =( 0 );
        U32   AAC2020_CPUNIFO_iMouse_vec4_y =( 0 );
        U32   AAC2020_CPUNIFO_iMouse_vec4_z =( 0 );
        U32   AAC2020_CPUNIFO_iMouse_vec4_w =( 0 );

#######################################_WHY_THESE_IMOUSE_NAMES_#
#_EXTRACTED_GLEBIND_CLUTTER_NOTES_##############################

    //:NOTES:================================================://


        PREDACESSOR: GLEB: openGL_Easy_Bindings
        CURRENT_LIB: AAC2020_GLEBIND (GL_Easy_BINDings)
        
        Prefixes:
        AAC2020_GLEBIND_   :Library namespace prefix.
        MV_     :Macro Variable / Value
        MM_     :Maybe A Macro (MV_ value will decide)
        
        Function Names:
        DEBUGPRINT_01: Print ONE(01) string.

    //:================================================:NOTES://
    //:INCLUDES:=============================================://
    //://////////////////////////////////////////////////////://   
    //# Before you judge, include gaurds exist.              #//   
    //://////////////////////////////////////////////////////://   
                                                        //:  ://
    //  #include <stdint.h> //:int32_t      ://         //:  ://
    //                      //:             ://         //:  ://
    //  #include <stdlib.h> //:malloc(....) ://         //:  ://
    //  #include <stdlib.h> //:free(......) ://         //:  ://
    //                      //:             ://         //:  ://
    //  #include <string.h> //: strcmp      ://         //:  ://
    //                      //:             ://         //:  ://
    //  #include <stdio.h>  //:printf(....) ://         //:  ://
    //  #include <stdio.h>  //:fprintf(...) ://         //:  ://
    //  #include <stdio.h>  //:fflush(....) ://         //:  ://
    //                      //:             ://         //:  ://
    //  #include <ctype.h>  //:isspace(...) ://         //:  ://
                                                        //:  ://
        //[ Using: PEB20202_LoadLibrary    - - - - - ]////:  ://
        //[ Using: PEB2020_GetProcAddress  - - - - - ]////:  ://
        //-  Windows.h for:        - - - - - - - - - -////:  ://
        //-  1. LoadLibrary        - - - - - - - - - -////:  ://
        //-  2. GetProcAddress     - - - - - - - - - -////:  ://
        //-  3. FreeLibrary        - - - - - - - - - -////:  ://
        //-  #include <Windows.h>  - - - - - - - - - -////:  ://
                                                        //:  ://
    //://////////////////////////////////////////////////////://   
    //# Before you judge, include gaurds exist.              #//   
    //://////////////////////////////////////////////////////://   
    //:=============================================:INCLUDES://
 
##############################_EXTRACTED_GLEBIND_CLUTTER_NOTES_#
#GLEBIND_THIS_ONE_IS_SPECIAL####################################

    This one is special.                 
    The wrapper function is called       
                                         
        AAC2020_GLEBIND_wglGetProcAddress    
                                         
    instead of                           
                                         
        wglGetProcAddress                
                                         
    to avoid conflicts with Windows.h. The
    "wglGetProcAddress" function does NOT work "out of
    the box" like "GetProcAddress".                    
                                       
    I am sure if I knew more about linkers I could fix
    this. But messing with linkers would destroy the
    point of this library being an
                                         
        "easy bindings"                      
                                         
    library. The whole point is to just include this
    file and get access to openGL functions.

#DOES_NOT_REQUIRE_GL_CONTEXT_TO_CALL############################

    Also does NOT need an openGL context           
    in order to fetch it.                                       
                   
############################DOES_NOT_REQUIRE_GL_CONTEXT_TO_CALL#                      
####################################GLEBIND_THIS_ONE_IS_SPECIAL#
#_IF_NO_GL_LIST_CREATE_ONE_#####################################

    If "OPEN_GL_SEARCH_PATHS.TXT" does not    
    exist, create it now and populate it      
    with some default values.                 
    #SEE_IF_FILE_EXISTS_THEN_USE#  
    stackoverflow.com/questions/230062        

#####################################_IF_NO_GL_LIST_CREATE_ONE_#
#_WHY_GLEBIND_TOUCHFILE_########################################

    TouchFile function did not exist in GLEB.H      
    Added to GLEBIND.F (GLEBIND_DOT_F) to make      
    program a bit more user friendly.               
                                                    
    GOAL: Program is a single .EXE file, no         
        supplimentary files need to be copied to    
        maintain a working executable.              
                                                    
    This function makes it so you don't have to     
    copy around OPEN_GL_SEARCH_PATHS.TXT            

########################################_WHY_GLEBIND_TOUCHFILE_#
##############################if_not_exist_add_default_contents#

    int if_not_exist_add_default_contents :

        If the file did not exist before we touched it,   
        should we initialize it's contents with some      
        default search paths for where we can expect      
        OpenGL32.dll to be?                               

#if_not_exist_add_default_contents##############################
#_WHY_CANT_I_SEE_MY_WINDOW_#####################################

    Trying to figure out why window does not show up:
    
    Possible fixes/problems:
    
    F01: You never initialise hdc with the result of 
        the BeginPaint call, so your painting will fail.  
        https://stackoverflow.com/questions/30551850

#####################################_WHY_CANT_I_SEE_MY_WINDOW_#
#_OLD_GINAWIN_DOCUMENTATION_####################################
    
    --------------------------------------------------------
    Documentation for GINAWIN that I think was left over
    from when I cut and pasted the code from previous 
    project. Not sure how relevant these comments below are.
    --------------------------------------------------------

    KEY/PREFIXES:
        aac2020_ginawin_:
        The namespace prefix for all functions
        that belong to this section of code.
    
        gleb: open_GL_Easy_Bindings
        
        swin:
        SWIN=="SILKWIN"==="THREADED_WINDOW"
        The idea is a "window made of silk" 
        because threads can be made of silk.
        I am thinking the window was woven
        by a spider's threads.
    
        pfn: Pointer_to_FuNction
             (Convention take from Vulkan)
    
    CONVENTIONS:
    
      1. Non-terminal objects of library
         structs are ALL_CAPITAL.
    
      2. Terminal objects of library struct are:
         A: CamelCaseIfFunction
         B: snake_case_if_variable
         C: OR: Written in convention of whatever
            I am trying to wrap that exists from
            some other library I don't own.
    
      3. Includes often are put near where
         they are needed, rather than all at
         the top of the file. Standard headers
         have include gaurds, so this shouldn't
         be a problem.
    
      4. Global Windows Functions Allowed:
         1. LoadLibraryA
         2. GetProcAddress
         Anything else should be wrapped in
         a library struct that tells us the
         .dll file of origin.
    
         Convoluted and rigid and a pain to
         port to another operating system?
    
         I'll worry about porting after I've made
         a million dollars off of something.
         Otherwise, not worth the hassel.

####################################_OLD_GINAWIN_DOCUMENTATION_#
#_CEDITOR_DESIGN_NOTES_2020_12_04_##############################

    CEDITOR: Current_EDITOR

    Currently the project is setup to use 9 different shaders.
    That each activate when the corresponding number key is
    pressed. For example, pressing "3" loads fragment shader
    #3 into our pipeline.

    Let's build upon this:

    NUMKEY 1 ===>  Active:FragShader_1 , dex_edi == 1
    NUMKEY 2 ===>  Active:FragShader_2 , dex_edi == 2
    NUMKEY 3 ===>  Active:FragShader_3 , dex_edi == 3
    NUMKEY 4 ===>  Active:FragShader_4 , dex_edi == 4
    NUMKEY 5 ===>  Active:FragShader_5 , dex_edi == 5
    NUMKEY 6 ===>  Active:FragShader_6 , dex_edi == 6
    NUMKEY 7 ===>  Active:FragShader_7 , dex_edi == 7
    NUMKEY 8 ===>  Active:FragShader_8 , dex_edi == 8
    NUMKEY 9 ===>  Active:FragShader_9 , dex_edi == 9
     
    When zero is pressed, no conceptual "sub editor"      
    is in focus. Maybe when that happens, the keyboard    
    will only respond to keys "0" - "9" because there is  
    no editor in focus to listen to what keys were
    pressed. ?
    NUMKEY 0 ===>  Active:FragShader_0 , dex_edi == 0

##############################_CEDITOR_DESIGN_NOTES_2020_12_04_#
#_LIKE_glo_eve_OBJECT_in_A2_JC_#################################

    Like: glo_eve object in R:\G\A2_JC.js  

          glo_eve == "global event"
          A generic [system/platform] agnostic event object.

          Thought "keyboard event" was too specific and
          "input event" also too specific because controls
          might be wired into an A.I.
 
#################################_LIKE_glo_eve_OBJECT_in_A2_JC_#
#_MARK_ALL_KEYS_AS_DIRTY_#######################################

        After you've consumed the keyboard events  
        mark all IKEYBOX data as dirty.  

        U32  AAC2020_IKEYBOX_dirty = ( 1 );

#######################################_MARK_ALL_KEYS_AS_DIRTY_#
#_KEEP_KEY_PRESSED_DEAD_SIMPLE_FOR_NOW_#########################

        Keep it dead simple for now.  
        This is the most recent NON controll key pressed.    
        This should be suitable for basic editors.  
        We can figure out something more complex    
        when we need responsive game controls.   

        char AAC2020_IKEYBOX_k_p = '_' ; //:k_p: Key_Pressed

#########################_KEEP_KEY_PRESSED_DEAD_SIMPLE_FOR_NOW_#
#_WHY_TEXTURE_SLOTS_IN_PIXNAME_#################################

    A bit weird, but let's keep the texture slot values   
    centralized here as well so that we can easily        
    verify that all texture slots are UNIQUE .            

#################################_WHY_TEXTURE_SLOTS_IN_PIXNAME_#
#KEYPAD_HASHTAGS################################################

    Keep those 1:1 relationships. 
    SEE[ #EDITOR_ONE_TO_ONE_RELATIONSHIPS# ]

    #KEYPAD_1# : Thing is associated with EDITOR#1, KEYPAD1
    #KEYPAD_2# : Thing is associated with EDITOR#2, KEYPAD1
    #KEYPAD_3# : Thing is associated with EDITOR#3, KEYPAD1
    #KEYPAD_4# : Thing is associated with EDITOR#4, KEYPAD1
    #KEYPAD_5# : Thing is associated with EDITOR#5, KEYPAD1
    #KEYPAD_6# : Thing is associated with EDITOR#6, KEYPAD1
    #KEYPAD_7# : Thing is associated with EDITOR#7, KEYPAD1
    #KEYPAD_8# : Thing is associated with EDITOR#8, KEYPAD1
    #KEYPAD_9# : Thing is associated with EDITOR#9, KEYPAD1

################################################KEYPAD_HASHTAGS#
#PATTERN_BREAKER_PIXNAME########################################

    ************************************************************
    REVISITED[ DATE[ 2020_12_09 ]:
    No longer a problem. We refactored:
    AAC2200_GPUDATA_PIXNAME ===> AAC2020_PIXNAME
    ************************************************************

    EXTRACTED_FROM[ PIXNAME.D._ ]ON_DATE[ 2020_12_04 : 0840PM ]
                                           
    #PATTERN_BREAKER#       
                                                            
    This somewhat breaks the spirit of our LIBCHAN          
    (library chain) pattern of adding things on as you      
    build up.                                               
                                                            
    The variables here will only be used for:               
        1. Human Reference                                  
        2. Asserts                                          
                                                            
    It will never be used as an assingnment like:           
                                                            
        ACC2020_GPUDATA_PAINT5D_dat.pix_nam=(               
        AAC2020_PIXNAME_paint5d ); <<<<<<< NO! NEVER!       
                                                            
    But will rather be used like so:                        
                                                            
        ACC2020_GPUDATA_PAINT5D_dat.pix_nam = "paint5d";    
        assert( AAC2020_PIXNAME_paint5d    == "paint5d" );  
                                                            
    Reason:                                                 
                                                            
        Make the code easy to follow with minimal           
        indirection, while still having the benifit of      
        a centralized area where all of the different       
        512 -x- 512 chunks of memory are defined.           
 
########################################PATTERN_BREAKER_PIXNAME#
#WHY_PAINT5D_ERRORS_2020_12_04##################################

    These errors could happen if                  
    1: You failed to zero initialize struct       
    2: You called initializer TWICE or MORE.     
    
    if( paint5d.cpu_pix[0]      != 0 ){ ERR("[E_1]");};                   
    if( paint5d.g_pixel.tex_han != 0 ){ ERR("[E_2]");};
    if( paint5d.g_pixel.sam_loc != 0 ){ ERR("[E_3]");};
    if( paint5d.g_pixel.sam_val != 0 ){ ERR("[E_4]");}; 

##################################WHY_PAINT5D_ERRORS_2020_12_04#
#PROJECT_IS_EDITOR_CENTRIC######################################

    As we build a game, we want the game play to just be
    an editor view where the user's controls do not allow
    for editing the level, but rather just moving and
    controlling the player.

    Level is still mutable by things like destructable
    geometry, but not by editing tools.

    Doing it this way means we only have ONE code base
    to maintain. (An editor code base) rather than a
    game engine and level editor code base.

######################################PROJECT_IS_EDITOR_CENTRIC#
#EDITOR_ONE_TO_ONE_RELATIONSHIPS################################

    Even if there is shared state or components,
    every editor should get unique copies of things
    to keep the relationships simple 1:1 relationships.

    If two editors need to share the same TILEBRUSH, we
    just copy over E1_TILEBRUSH to E2_TILEBRUSH when
    switch views from EDITOR #1 (E1) to EDITOR #2 (E2)

    THIS_IS_GOOD::::::::::::::::::::::::::::::::::::::::::::::::

    1 : 1 : 1 : 1 Relationship for each editor:

    E1_DATA : E1_RENDERCODE : E1_USERINPUT : E1_TILEBRUSH
    E2_DATA : E2_RENDERCODE : E2_USERINPUT : E2_TILEBRUSH
    E3_DATA : E3_RENDERCODE : E3_USERINPUT : E3_TILEBRUSH
    E4_DATA : E4_RENDERCODE : E4_USERINPUT : E4_TILEBRUSH

    ::::::::::::::::::::::::::::::::::::::::::::::::THIS_IS_GOOD
    THIS_IS_BAD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    E1_DATA   E1_RENDERCODE   E1_USERINPUT   E1_TILEBRUSH
     |                             |              |
     |                             |              |
    DATA                          UI           TILEBRUSH
     |                             |              |
     |                             |              |
    E2_DATA   E2_RENDERCODE   E2_USERINPUT   E2_TILEBRUSH
     |
     |
    DATA
     |
     |
    E3_DATA   E3_RENDERCODE   E3_USERINPUT   E3_TILEBRUSH


    E4_DATA   E4_RENDERCODE   E4_USERINPUT   E4_TILEBRUSH

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!THIS_IS_BAD

################################EDITOR_ONE_TO_ONE_RELATIONSHIPS#
#PATTERN_BREAKER################################################

    #PATTERN_BREAKER# is a warning to reader of code that
    something about this code breaks the [conventions/patterns]
    typically used in the code base.

################################################PATTERN_BREAKER#
#NAMESPACE_PATTERN_BREAKER_PAINT5D##############################
                                                    
    Full Namespace Is:  AAC2020_GPUDATA_PAINT5D              
    You may have been expecting AAC2020_PAINT5D   #TAG_P5D#  
                                                            
    Leave comment here so that people can easily find what   
    they are looking for when searching for AAC2020_PAINT5D  

##############################NAMESPACE_PATTERN_BREAKER_PAINT5D#
#ALL_DATA_IS_512X512_RGBA_UNSIGNED##############################

    EXTRACTED_FROM[ GPUDATA.D._ ]ON[ 2020_12_04 : 0549PM ]
     
    All data will be represented by 512 x 512   
    pixel bitmaps. Each pixel being stored as   
    a series of 4 bytes. 4 bytes being RGBA     
    respectively.                               
    
##############################ALL_DATA_IS_512X512_RGBA_UNSIGNED#
#ASSERT_SAM_VAL_EQUALS_TEX_LOT##################################

    EXTRACTED_FROM[ GPUDATA.D._ ]ON[ 2020_12_04 : 0547PM ]

    NOTE: assert( sam_val == tex_lot )
        I think that is how we connect the
        texture to the sampler.
        USE[ edit_a2jc ]ForSomeReference

##################################ASSERT_SAM_VAL_EQUALS_TEX_LOT#
#GPUDATA_ONE_TO_ONE_MAPPING_DESIGN_NOTE#########################

    EXTRACTED_FROM[ GPUDATA.D._ ]ON[ 2020_12_04 : 0546PM ]
    
    DESIGN NOTE:                                          
        1:1 mapping between everything.              
                                                     
        1: Array Of Pixels (cpu_pix)                 
        1: Name to identify everything (pix_nam)     
        1: Actual Texture (tex_han)                  
        1: Put in ONE spot only (tex_lot)            
        1: Texture Sampler (sam_loc )                
        1: Sample ONE texture (sam_val == tex_lot )  
    
#########################GPUDATA_ONE_TO_ONE_MAPPING_DESIGN_NOTE#
#HASHTAG_COMMENT################################################

    Example comment referenced in DOCUMENTATION.TXT.
    
################################################HASHTAG_COMMENT#
#OVERRIDE_DEFAULT_SHADER_001####################################

    NOTES_FOR[ DOC/_S_ ]-->[ GPUDATA_PAINT5D ]

    Let's not go backwards into previous code and edit
    the source for the default shader #1. Instead let's
    OVERRIDE the default shader in slot #1.
    (Associated/Activated with NumberKey #1)
    
    Details on where to find the default shader we need
    to override:
                                        
    SOURCE________FILE: FRAGBED_DEFAULT_SHADERS/FDS_001._ 
    VARIABLE______NAME: AAC2020_FRAGBED_DEFAULT_001       
    USER_EDITABLE_COPY: FRAGBED_001.FRAG                  

####################################OVERRIDE_DEFAULT_SHADER_001#
#EVERY_EDITOR_GETS_512x512_GPUDATA_CHUNK########################

    Let's keep it simple and keep all of our
    relationships 1:1.
    [ 1editor == 1memorychunk == 1GLSL_Renderer ]
    
    This will be wasteful at times. But human brain
    is limited in what it can keep track of. Computers
    are always getting faster.
    
    If you have a 2D & 3D view of the same data...
    Still use two seperate memory chunks and copy 
    the data over when switching views.
    
    It is ugly and wasteful, but dead simple.
    Worry about optimization after you already have
    a finished product and are rich.
    
########################EVERY_EDITOR_GETS_512x512_GPUDATA_CHUNK#
*** ******************************************************** ***

    NEWEST_COMMENTS_ALWAYS_GO_TO_THE_TOP_OF_THIS_FILE
    SO_WE_HAVE_A_RECORD_OF_WHAT_WAS_DONE_IN_WHAT_ORDER
    
*** ******************************************************** **/
//:[_H_]: Hashtag Comments. For ANYTHING! ================== ://