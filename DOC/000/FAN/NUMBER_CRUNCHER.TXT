
This answer key for test data was a pain
in my ass. It would be nice to automate
all of this mindless number crunching.

127 , 127    ---->    124 , 124        ( -3 )
255 , 127    ---->    252 , 124        ( -3 )
127 , 255    ---->    124 , 252        ( -3 )
255 , 255    ---->    252 , 252        ( -3 )
            
127 , 127    ---->    120 , 120        ( -7 )
255 , 127    ---->    248 , 120        ( -7 )
127 , 255    ---->    120 , 248        ( -7 )
255 , 255    ---->    248 , 248        ( -7 )
               
127 , 127    ---->    112 , 112        ( -15 )
255 , 127    ---->    240 , 112        ( -15 )
127 , 255    ---->    112 , 240        ( -15 )
255 , 255    ---->    240 , 240        ( -15 )
            
127 , 127    ---->     96 ,  96        ( -31 )
255 , 127    ---->    224 ,  96        ( -31 )
127 , 255    ---->     96 , 224        ( -31 )
255 , 255    ---->    224 , 224        ( -31 )
             
127 , 127    ---->     64 ,  64        ( -63 )
255 , 127    ---->    192 ,  64        ( -63 )
127 , 255    ---->     64 , 192        ( -63 )
255 , 255    ---->    192 , 192        ( -63 )
                                       
127 , 127    ---->      0 ,   0        ( -127 )
255 , 127    ---->    128 ,   0        ( -127 )
127 , 255    ---->      0 , 128        ( -127 )
255 , 255    ---->    128 , 128        ( -127 )











Keep this project for when you have viewers and
want to write something with them from start to 
finish.

Some type of C utility that takes a file with
tags on it like this and crunchs all of the math
for me so that I don't have to painstakingly use
a calculator for figuring out all of these values.

R:\G\AAC2020\LIB\P5D1OGL.F._
       
[VALUES]
    1 , 1
    1 , 1
    1 , 1
    1 , 1

[OPERATIONS]
    -1  , -1
    +1  , +1
    -1  , +1
    +1  , -1
       +7

Expected Output:
        //: -1  , -1
        0 , 0
        0 , 0
        0 , 0
        0 , 0

        //: +1  , +1
        2 , 2
        2 , 2
        2 , 2
        2 , 2

        //: -1  , +1
        0 , 2
        0 , 2
        0 , 2
        0 , 2

        //: +1  , -1
        2 , 0
        2 , 0
        2 , 0
        2 , 0

        //: +7
        8 , 8
        8 , 8
        8 , 8
        8 , 8


    