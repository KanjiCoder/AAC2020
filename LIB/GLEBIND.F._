
    int
    AAC2020_GLEBIND_TouchFile_OPEN_GL_SEARCH_PATHS(

        /** If the file did not exist before we touched it,  **/
        /** should we initialize it's contents with some     **/
        /** default search paths for where we can expect     **/
        /** OpenGL32.dll to be?                              **/
        int if_not_exist_add_default_contents
    )
    {
    //:======================================================://

        /** TouchFile function did not exist in GLEB.H       **/
        /** Added to GLEBIND.F (GLEBIND_DOT_F) to make       **/
        /** program a bit more user friendly.                **/
        /**                                                  **/
        /** GOAL: Program is a single .EXE file, no          **/
        /**      supplimentary files need to be copied to    **/
        /**      maintain a working executable.              **/
        /**                                                  **/
        /** This function makes it so you don't have to      **/
        /** copy around OPEN_GL_SEARCH_PATHS.TXT             **/

        assert( 0x0100 == 00400 );
        assert( 0x0080 == 00200 );
    
        //: If "OPEN_GL_SEARCH_PATHS.TXT" does not   ://
        //: exist, create it now and populate it     ://
        //: with some default values.                ://
        /** #SEE_IF_FILE_EXISTS_THEN_USE# ** ******* **/
        /** stackoverflow.com/questions/230062       **/
        int fd = open(
            "OPEN_GL_SEARCH_PATHS.TXT"
        , 
        0   //:FOUNDIN[ <mingw/gcc>/../include/fcntl.h ]
        |   0x0100 /** O_CREAT  : Create if not exist**/
        |   0x0001 /** O_WRONLY : NO_EXPLICIT_DOC    **/
        |   0x0400 /** O_EXCL   : Ensure create file **/
        ,
            0
            /** User has read permission **/
            |   0x0100  /** 00400 S_IRUSR , stat.h **/
    
            /** User has write permission **/
            |   0x0080  /** 00200 S_IWUSR , stat.h **/
        );;
    
        int ok =( 1 );
    
        if (fd < 0) {
            /* failure */
            if( errno == 17 /** EEXIST : errno.h **/ ){
    
                /* the file already existed */
                ok = 1 ;
            }else{
                /** unexpected error. **/
                ok = 0;
            };;
        }else{
            /* now you can use the file */
                ok = 1;

            if( if_not_exist_add_default_contents > 0 ){

                const char* buf =(
                //: "C:\Windows\System32\opengl32.dll"
                //: "C:/Windows/System32/opengl32.dll"
                    "C:\\Windows\\System32\\opengl32.dll"
                );;
                int nob=( strlen( buf ) + 0 );
                write( fd, buf, nob );
            };;
        };;
    
        //:REPORT_BACK_SUCCESS_OR_FAILURE:-------------------://
        #define P_F printf

            ;;;if( AAC2020_GLEBIND_no_news_is_good_news <= 0 ){

                if( 1 == ok ){ P_F("[File_Access_OK]\n"); };

            };;if(  0 == 0  ){

                if( 0 == ok ){ P_F("[File_Problem_s]\n"); };
            };;

        #undef P_F
        //:-------------------:REPORT_BACK_SUCCESS_OR_FAILURE://

        close( fd );

    return( 0 );
    //:======================================================://
    }


//:HFN:HELPER_FUNCTIONS:=====================================:////[ HFN ]//
                                                                //[ HFN ]//
#define AAC2020_GLEBIND_MV_DEBUGPRINT_01 0                      //[ HFN ]//
#if(AAC2020_GLEBIND_MV_DEBUGPRINT_01 <= 0)                      //[ HFN ]//
                                                                //[ HFN ]//
    //: emp_mac_arg:empty_macro_arg ://                         //[ HFN ]//
    #define AAC2020_GLEBIND_MM_DEBUGPRINT_01( emp_mac_arg )     //[ HFN ]//
                                                                //[ HFN ]//
#else                                                           //[ HFN ]//
                                                                //[ HFN ]//
    void AAC2020_GLEBIND_MM_DEBUGPRINT_01( const char* m ){     //[ HFN ]//
        printf("[AAC2020_GLEBIND:DP_01]:%s\n",m);               //[ HFN ]//
        fflush(stdout);                                         //[ HFN ]//
    }                                                           //[ HFN ]//
                                                                //[ HFN ]//
#endif                                                          //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
void                                                            //[ HFN ]//
AAC2020_GLEBIND_InfoPrint(                                      //[ HFN ]//
/**/const char* message_to_print                                //[ HFN ]//
){                                                              //[ HFN ]//
                                                                //[ HFN ]//
    /** Like AAC2020_GLEBIND_DebugPrint but NOT used for **/    //[ HFN ]//
    /** [trouble shooting/searching for] bugs.           **/    //[ HFN ]//
                                                                //[ HFN ]//
    if( AAC2020_GLEBIND_no_news_is_good_news <= 0 ){            //[ HFN ]//
                                                                //[ HFN ]//
        printf(                                                 //[ HFN ]//
        /**/"[AAC2020_GLEBIND_IP........]:%s\n"                 //[ HFN ]//
        ,   message_to_print                                    //[ HFN ]//
        );;                                                     //[ HFN ]//
        fflush(stdout);                                         //[ HFN ]//
                                                                //[ HFN ]//
    };;                                                         //[ HFN ]//
                                                                //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
void                                                            //[ HFN ]//
AAC2020_GLEBIND_InfoPrint_STR(                                  //[ HFN ]//
/**/const char* message_to_print                                //[ HFN ]//
,   const char* string_var_to_print                             //[ HFN ]//
){                                                              //[ HFN ]//
    if( AAC2020_GLEBIND_no_news_is_good_news <= 0 ){            //[ HFN ]//
                                                                //[ HFN ]//
        printf(                                                 //[ HFN ]//
        /**/"[AAC2020_GLEBIND_IP_STR.MSG]:%s\n"                 //[ HFN ]//
        ,   message_to_print                                    //[ HFN ]//
        );;                                                     //[ HFN ]//
        printf(                                                 //[ HFN ]//
        /**/"[AAC2020_GLEBIND_IP_STR.VAL]:%s\n"                 //[ HFN ]//
        ,   string_var_to_print                                 //[ HFN ]//
        );;                                                     //[ HFN ]//
                                                                //[ HFN ]//
        fflush(stdout);                                         //[ HFN ]//
                                                                //[ HFN ]//
    };;                                                         //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
void                                                            //[ HFN ]//
AAC2020_GLEBIND_InfoPrint_INT(                                  //[ HFN ]//
/**/const char* message_to_print                                //[ HFN ]//
,   int         value_to_print                                  //[ HFN ]//
){                                                              //[ HFN ]//
                                                                //[ HFN ]//
    if( AAC2020_GLEBIND_no_news_is_good_news <= 0 ){            //[ HFN ]//
                                                                //[ HFN ]//
        printf(                                                 //[ HFN ]//
        /**/"[AAC2020_GLEBIND_IP_INT.MSG]:%s\n"                 //[ HFN ]//
        ,   message_to_print                                    //[ HFN ]//
        );;                                                     //[ HFN ]//
        printf(                                                 //[ HFN ]//
        /**/"[AAC2020_GLEBIND_IP_STR.VAL]:%d\n"                 //[ HFN ]//
        ,   value_to_print                                      //[ HFN ]//
        );;                                                     //[ HFN ]//
                                                                //[ HFN ]//
        fflush(stdout);                                         //[ HFN ]//
                                                                //[ HFN ]//
    };;                                                         //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
void                                                            //[ HFN ]//
AAC2020_GLEBIND_Error(                                          //[ HFN ]//
/**/const char* whats_wrong_message //: Stringc ://             //[ HFN ]//
,   int   crash_the_program         //: Boolean ://             //[ HFN ]//
){                                                              //[ HFN ]//
                                                                //[ HFN ]//
    const char* BEG_error_section =(                            //[ HFN ]//
    //:          10        20   25 ://                          //[ HFN ]//
    //:::1234567890123456789012345 ://                          //[ HFN ]//
        "[BEG::AAC2020_GLEBIND(LIBRARY)ERROR]\n"                //[ HFN ]//
    );;                                                         //[ HFN ]//
    const char* END_error_section =(                            //[ HFN ]//
    //:          10        20   25 ://                          //[ HFN ]//
    //:::1234567890123456789012345 ://                          //[ HFN ]//
        "[END::AAC2020_GLEBIND(LIBRARY)ERROR]\n"                //[ HFN ]//
    );;                                                         //[ HFN ]//
                                                                //[ HFN ]//
    printf( BEG_error_section );                                //[ HFN ]//
    printf("\n\n");                                             //[ HFN ]//
                                                                //[ HFN ]//
    //:************************://                              //[ HFN ]//
    printf(whats_wrong_message);                                //[ HFN ]//
    //:************************://                              //[ HFN ]//
                                                                //[ HFN ]//
    printf("\n\n\n");                                           //[ HFN ]//
    printf(END_error_section);;                                 //[ HFN ]//
    fflush(stdout);                                             //[ HFN ]//
                                                                //[ HFN ]//
    if( crash_the_program ){                                    //[ HFN ]//
        exit(666);                                              //[ HFN ]//
    };;                                                         //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
/**!!!!WRONG_CASE!!!!**/ void AAC2020_GLEBIND_HALT( void ){     //[ HFN ]//
    printf( "[AAC2020_GLEBIND:2020_11_02:0654AM]\n");           //[ HFN ]//
    fflush(stdout);exit(666);                                   //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
void aac2020_glebind_Halt(                                      //[ HFN ]//
    const char* whats_wrong_message                             //[ HFN ]//
){                                                              //[ HFN ]//
    //:Let user know originated in aac2020_glebind_Halt, :::::////[ HFN ]//
    //:not "AAC2020_GLEBIND_Error".                      :::::////[ HFN ]//
    printf("[aac2020_glebind_Halt:JustCalled]\n");              //[ HFN ]//
                                                                //[ HFN ]//
    static int CRASH_THE_PROGRAM = 1;                           //[ HFN ]//
    AAC2020_GLEBIND_Error(                                      //[ HFN ]//
    /**/whats_wrong_message                                     //[ HFN ]//
    ,   CRASH_THE_PROGRAM                                       //[ HFN ]//
    );;                                                         //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]// 
                                                                //[ HFN ]//
/**!!!!WRONG_CASE!!!!**/void AAC2020_GLEBIND_OK( void ){        //[ HFN ]//
    printf(                                                     //[ HFN ]//
        "[WRONG_CASE:aac2020_glebind_OK:NOT:AAC2020_GLEBIND_OK]"//[ HFN ]//
        "[Its_A_Private_Function________]"                      //[ HFN ]//
    );;                                                         //[ HFN ]//
    fflush(stdout);exit(666);                                   //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
void                                                            //[ HFN ]//
aac2020_glebind_OK( const char* okay_message ){                 //[ HFN ]//
    printf(                                                     //[ HFN ]//
        "[aac2020_glebind_OK]:%s\n", okay_message               //[ HFN ]//
    );;                                                         //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - :////[ HFN ]//
                                                                //[ HFN ]//
void                                                            //[ HFN ]//
AAC2020_GLEBIND_FuncPointerSated(                               //[ HFN ]//
/**/const char* function_pointer_name                           //[ HFN ]//
,   AAC2020_GLEBIND_FUNC   function_pointer                     //[ HFN ]//
){                                                              //[ HFN ]//
                                                                //[ HFN ]//
    /**  Used to make sure function pointer is NOT null.     **///[ HFN ]//
    /**  Hopefully can swap out for macro in the future to   **///[ HFN ]//
    /**  remove this overhead when in a release mode.        **///[ HFN ]//
                                                                //[ HFN ]//
    if(NULL==function_pointer){                                 //[ HFN ]//
        printf("[AAC2020_GLEBIND:ForgotToInitLibrary?]\n");     //[ HFN ]//
        printf("[USE::AAC2020_GLEBIND_GetFuncsFromDLL]\n");     //[ HFN ]//
        printf(                                                 //[ HFN ]//
        /**/"[function_pointer_name]:%s\n"                      //[ HFN ]//
        ,     function_pointer_name                             //[ HFN ]//
        );;                                                     //[ HFN ]//
        fflush(stdout);exit(666);                               //[ HFN ]//
    };;                                                         //[ HFN ]//
}                                                               //[ HFN ]//
                                                                //[ HFN ]//
//:=====================================:HFN:HELPER_FUNCTIONS:////[ HFN ]//



//|BEG[CODE_TOLD_FAST_02]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//  //[CTF]//
//|02|02|02|02|02|02|02|02|02|02|02|02|02|02|02|//  //[CTF]//
                                                    //[CTF]//

                                                    //[CTF]//
int                                                 //[CTF]//
AAC2020_GLEBIND_OpenFileAndProcessLines(                       //[CTF]//
    const char* file_name //:path_to_file           //[CTF]//
,   AAC2020_GLEBIND_PFN_line_processor line_processor          //[CTF]//
){                                                  //[CTF]//
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(                          //[CTF]//
        "[BEG:AAC2020_GLEBIND_OpenFileAndProcessLines]"        //[CTF]//
    );;                                             //[CTF]//
                                                    //[CTF]//
    int num_non_empty_lines_found = 0;              //[CTF]//
    FILE* file_pointer = NULL;                      //[CTF]//
    file_pointer = fopen( file_name, "r" );         //[CTF]//
                                                    //[CTF]//
    //: SEE VIDEO #1 for comments:                  //[CTF]//
    #define JOHN_MARKS_MAX_LINE_2019_03_03 256      //[CTF]//
    char single_line[                               //[CTF]//
        JOHN_MARKS_MAX_LINE_2019_03_03              //[CTF]//
    ] = "\0";                                       //[CTF]//
    int max_line = JOHN_MARKS_MAX_LINE_2019_03_03;  //[CTF]//
    #undef  JOHN_MARKS_MAX_LINE_2019_03_03          //[CTF]//
                                                    //[CTF]//
    //: SEE VIDEO #1 for comments:                  //[CTF]//
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(                          //[CTF]//
        "[CheckForEmptyFilePointer]"                //[CTF]//
    );                                              //[CTF]//
    if(NULL==file_pointer){                         //[CTF]//
        AAC2020_GLEBIND_Error("[CheckFileNameSpelling]",0);    //[CTF]//
        return( 1 );                                //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    //: SEE VIDEO #1 for comments:                  //[CTF]//
    AAC2020_GLEBIND_MM_DEBUGPRINT_01("[fgets_loop]");          //[CTF]//
    while(fgets(                                    //[CTF]//
    /**/single_line  //: store_string_here          //[CTF]//
    ,   max_line     //: max_size_of_buffer         //[CTF]//
    ,   file_pointer //: read_chars_from_here       //[CTF]//
    )){                                             //[CTF]//

        #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:########://

            printf("[BUGHUNT_001:About_To:line_processor()]\n");
            fflush(stdout);

        #endif //:###########################################://

        num_non_empty_lines_found+=(                 
            line_processor( single_line )            
        );;     

        #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:########://

            printf("[BUGHUNT_001:Did_DoIt:line_processor()]\n");
            fflush(stdout);

        #endif //:###########################################://
                                     
    };;                                             //[CTF]//
                                                    //[CTF]//
    AAC2020_GLEBIND_MM_DEBUGPRINT_01("[WhatDidWeFind]");       //[CTF]//
    if(num_non_empty_lines_found<1){                //[CTF]//
        AAC2020_GLEBIND_InfoPrint(                             //[CTF]//
            "[WARNING:FileWasEmpty]"                //[CTF]//
        );;                                         //[CTF]//
        AAC2020_GLEBIND_InfoPrint_STR(                         //[CTF]//
        /**/"[EmptyFileName]"                       //[CTF]//
        ,   file_name                               //[CTF]//
        );;                                         //[CTF]//
        fflush(stdout);                             //[CTF]//
    }else{                                          //[CTF]//
        AAC2020_GLEBIND_InfoPrint(                             //[CTF]//
            "[ONE_OR_MORE_FOUND]"                   //[CTF]//
        );;                                         //[CTF]//
        AAC2020_GLEBIND_InfoPrint_INT(                         //[CTF]//
        /**/"[num_non_empty_lines_found]"           //[CTF]//
        ,   num_non_empty_lines_found               //[CTF]//
        );;                                         //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    //|========================================|//  //[CTF]//
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(                          //[CTF]//
        "[BEG:fclose(file_pointer)]"                //[CTF]//
    );;                                             //[CTF]//
    if(NULL==file_pointer){                         //[CTF]//
        aac2020_glebind_Halt("[FilePtrSomehowNull]");          //[CTF]//
    }else{                                          //[CTF]//
        AAC2020_GLEBIND_MM_DEBUGPRINT_01(                      //[CTF]//
            "[FilePointerOkay]"                     //[CTF]//
        );;                                         //[CTF]//
    };;                                             //[CTF]//
    fclose(file_pointer);                           //[CTF]//
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(                          //[CTF]//
        "[END:fclose(file_pointer)]"                //[CTF]//
    );;                                             //[CTF]//
    //|========================================|//  //[CTF]//
                                                    //[CTF]//
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(                          //[CTF]//
        "[END:AAC2020_GLEBIND_OpenFileAndProcessLines]"        //[CTF]//
    );;                                             //[CTF]//
    return( 0 );                                    //[CTF]//
                                                    //[CTF]//
} //:END[OpenFileAndProcessLines]                   //[CTF]//
//|02|02|02|02|02|02|02|02|02|02|02|02|02|02|02|//  //[CTF]//
//|END[CODE_TOLD_FAST_02]______________________|//  //[CTF]//
//|BEG[CODE_TOLD_FAST_03]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//  //[CTF]//
//|03|03|03|03|03|03|03|03|03|03|03|03|03|03|03|//  //[CTF]//
//:TCTH: Trim_Copy_To_Heap                          //[CTF]//
//:                                                 //[CTF]//

                                                    //[CTF]//
//:Trim a string on the stack by copying over       //[CTF]//
//:the non whitespace characters to space on        //[CTF]//
//:the heap.                                        //[CTF]//
char*                                               //[CTF]//
AAC2020_GLEBIND_TrimCopyToHeap(                                //[CTF]//
    //:Make sas constant(const) as contract that    //[CTF]//
    //:we will not be editing sas in this           //[CTF]//
    //:function.                                    //[CTF]//
    const char* sas //:string_on_stack              //[CTF]//
){                                                  //[CTF]//
                                                    //[CTF]//
    //|Step1: Mark INCLUSIVE bounds of string. |//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    //: Get pointers to first & last character ://  //[CTF]//
    //: of string. EXCLUDING null terminator,  ://  //[CTF]//
    //: but INCLUDING the whitespace.          ://  //[CTF]//
    int32_t i0 = 0  ; //:first_char_always_0        //[CTF]//
    int32_t i1 = 0-1; //:last_char_must_be_found    //[CTF]//
    while( sas[++i1] ){ };                          //[CTF]//
    //: |-1| _0  1  2  3  4  5  6  7  _8  <-DEX     //[CTF]//
    //: |OB|[  ][ ][C][A][K][E][ ][ ][\0]      ://  //[CTF]//
    //:      i0                       i1       ://  //[CTF]//
    //:                                        ://  //[CTF]//
    i1--; //:back off the null terminator.     ://  //[CTF]//
    //: |-1| _0  1  2  3  4  5  6  7  _8 <-DEX      //[CTF]//
    //: |OB|[  ][ ][C][A][K][E][ ][ ][\0]      ://  //[CTF]//
    //:      i0                       i1       ://  //[CTF]//
    //:----------------------------------------://  //[CTF]//
                                                    //[CTF]//
    //|Step2: Check for errors:                |//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    if( i1 < 0 ){                                   //[CTF]//
        //:This would happen if our char array      //[CTF]//
        //:was only one character, that character   //[CTF]//
        //:being a null terminator (\0) char.       //[CTF]//
        //:           [\0] <--Our Char Array        //[CTF]//
        //:            i0                           //[CTF]//
        //:       i1<--i1                           //[CTF]//
                                                    //[CTF]//
        //:I don't want to deal with this           //[CTF]//
        //:edge case or think about it. I am just   //[CTF]//
        //:not going to allow it.                   //[CTF]//
        fprintf(stderr,"[ERR:EMPTY_STRING]");       //[CTF]//
        fflush(stderr); exit(666);                  //[CTF]//
    };;                                             //[CTF]//
    //:----------------------------------------://  //[CTF]//
                                                    //[CTF]//
    //|Step3: Backup one to make life easier.  |//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    //: Back-up/reverse i0 and i1 by                //[CTF]//
    //: one spot in case they are currently         //[CTF]//
    //: resting on non-whitespace chars.            //[CTF]//
    //: This will make loop entry easier.           //[CTF]//
    //:                                             //[CTF]//
    //: [Ｘ] : Denotes possibility of a              //[CTF]//
    //:        non-whitespace character.            //[CTF]//
    //:                                             //[CTF]//
    //: |-1| _0  1  2  3  4  5  6   7  _8  <-DEX    //[CTF]//
    //: |OB|[  ][ ][C][A][K][E][ ][  ][\0]          //[CTF]//
    //: |OB|[ x][ ][C][A][K][E][ ][ x][\0]          //[CTF]//
    //:  ||  i0                    i1  ||           //[CTF]//
    //:  i0                            i1           //[CTF]//
       --i0;                           i1++;        //[CTF]//
    //:---------------------------------------://   //[CTF]//
                                                    //[CTF]//
    //|Step4: Scan inward till you hit a wall. |//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    //: Move i0 forward   until it hits a      ://  //[CTF]//
    //: non-whitespace character.              ://  //[CTF]//
    //: Move i1 backwards until it hits a      ://  //[CTF]//
    //: non whitespace character.              ://  //[CTF]//
    //:                                             //[CTF]//
    //: |-1| 0  1  2   3  4   5  6  7  _8  <-INDEX  //[CTF]//
    //: |OB|[ ][ ][C ][A][K][ E][ ][ ][\0]          //[CTF]//
    //:  i0 ------>i0        i1<-------i1           //[CTF]//
    int                                             //[CTF]//
    AAC2020_GLEBIND_Wrapper_isspace(                           //[CTF]//
        const char ascii_char                       //[CTF]//
    );;                                             //[CTF]//
    while( AAC2020_GLEBIND_Wrapper_isspace( sas[++i0] ) ){};   //[CTF]//
    while( AAC2020_GLEBIND_Wrapper_isspace( sas[--i1] ) ){};   //[CTF]//
    //:----------------------------------------://  //[CTF]//
                                                    //[CTF]//
    //|Step5: Get length of trimmed string.    |//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    //: |-1| 0  1  2   3  4   5  6  7  _8  <-INDEX  //[CTF]//
    //: |OB|[ ][ ][C ][A][K][ E][ ][ ][\0]          //[CTF]//
    //:            ||        ||                     //[CTF]//
    //:    abs_val(_2  minus _5 ) == 3              //[CTF]//
    //:                     3 + 1 == 4              //[CTF]//
    //:           Example str_len == 4              //[CTF]//
    //:                                             //[CTF]//
    //:Take delta of i0 and i1 to get               //[CTF]//
    //:length of trimmed string.                    //[CTF]//
    int32_t str_len = i1-i0+1; //:inclusive_range   //[CTF]//
    //:----------------------------------------://  //[CTF]//
                                                    //[CTF]//
    //|Step6: Allocate Memory, Create Markers. |//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    //!Allocate memory on heap. Need one       !//  //[CTF]//
    //!extra character for null terminator.    !//  //[CTF]//
    //!Then create inclusive markers for       !//  //[CTF]//
    //!start and end characters.               !//  //[CTF]//
    int32_t num_chr = str_len+1;                //  //[CTF]//
    char* out = malloc(sizeof(char)*num_chr);   //  //[CTF]//
    out[ str_len ] = 0; //:null terminate.      //  //[CTF]//
    int32_t d0,d1;                              //  //[CTF]//
    //|                       str_len          |//  //[CTF]//
    //|                         |              |//  //[CTF]//
    //|            0  1  2  3   4              |//  //[CTF]//
    //|           [ ][ ][ ][ ][\0]             |//  //[CTF]//
    //|            |        |                  |//  //[CTF]//
                  d0=0;    d1=str_len-1;     //://  //[CTF]//
    //:----------------------------------------://  //[CTF]//
                                                    //[CTF]//
    //|Step7: Loop from i0 to i1 and copy data.|//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    //|  0  1  2  3  4  5  6  7  8             |//  //[CTF]//
    //| [ ][ ][C][A][K][E][ ][ ][\0] <--(sas)  |//  //[CTF]//
    //|       //  |  |  \\                     |//  //[CTF]//
    //|      i0   |  |   i1   i = [i0 to i1]   |//  //[CTF]//
    //|      d0   |  |   d1   d = [d0 to d1]   |//  //[CTF]//
    //|       \\  |  |  //                     |//  //[CTF]//
    //|       [C][A][K][E][\0] <--------(out)  |//  //[CTF]//
    //|        0  1  2  3   4                  |//  //[CTF]//
    int32_t i = (i0 - 1); //: <-- EasyLoopEntry://  //[CTF]//
    int32_t d = (d0 - 1); //: <-- EasyLoopEntry://  //[CTF]//
    int32_t  loop_number = 0;                //://  //[CTF]//
    while( ++loop_number <= str_len ){       //://  //[CTF]//
        i++; //:Increment_Input                ://  //[CTF]//
        d++; //:Increment_Destination          ://  //[CTF]//
        out[ d ] = sas[ i ]; //:copy.          ://  //[CTF]//
    };;                                      //://  //[CTF]//
    //:----------------------------------------://  //[CTF]//
                                                    //[CTF]//
    //|Step8: Check error in program logic:    |//  //[CTF]//
    //:----------------------------------------://  //[CTF]//
    //:There are obviously more compact and    ://  //[CTF]//
    //:concise ways to write this function.    ://  //[CTF]//
    //:BUT... the redundant variables help:    ://  //[CTF]//
    //:1. Conceptualize problem easier.        ://  //[CTF]//
    //:2. Weave a web of relationships between ://  //[CTF]//
    //:   variables that helps error checking. ://  //[CTF]//
    if( i != i1 || d != d1 ){                //://  //[CTF]//
        fprintf(stderr,"[WeMessedUpOurLogic]\n");   //[CTF]//
        fprintf(stderr,"[i]:%d [i1]:%d\n",i,i1);    //[CTF]//
        fprintf(stderr,"[d]:%d [d1]:%d\n",d,d1);    //[CTF]//
        fflush(stderr);exit(666);            //://  //[CTF]//
    };;                                      //://  //[CTF]//
    //:----------------------------------------://  //[CTF]//
                                                    //[CTF]//
    return( out );                                  //[CTF]//
} //:END[ TrimCopyToHeap ]/////////////////////://  //[CTF]//
                                                    //[CTF]//
//|--------------------------------------------|//  //[CTF]//
//|Using isspace with char will cause undefined|//  //[CTF]//
//|behavior. So we create this wrapper:        |//  //[CTF]//
//|SOURCE:                                     |//  //[CTF]//
//[  stackoverflow.com/questions/28654792      ]//  //[CTF]//
//|QUOTE:                                      |//  //[CTF]//
//|"Passing values to character handling"      |//  //[CTF]//
//|"functions that cannot be represented"      |//  //[CTF]//
//|"as an unsigned char to character handling" |//  //[CTF]//
//|"functions is undefined behavior."          |//  //[CTF]//
//|SOURCE:                                     |//  //[CTF]//
//[  https://wiki.sei.cmu.edu/confluence       ]//  //[CTF]//
//[        /display/c/STR37-C.                 ]//  //[CTF]//
//[  +Arguments+to+character-handling+functions]//  //[CTF]//
//[  +must+be+representable+as+an+unsigned+char]//  //[CTF]//
//|--------------------------------------------|//  //[CTF]//
int AAC2020_GLEBIND_Wrapper_isspace(                           //[CTF]//
    const char ascii_char                           //[CTF]//
){                                                  //[CTF]//
    return( isspace( (unsigned char)ascii_char) );  //[CTF]//
} //:END[ Wrapper_isspace ]                         //[CTF]//
//|--------------------------------------------|//  //[CTF]//
//|03|03|03|03|03|03|03|03|03|03|03|03|03|03|03|//  //[CTF]//
//|END[CODE_TOLD_FAST_03]______________________|//  //[CTF]//
//|BEG[CODE_TOLD_FAST_05]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//  //[CTF]//
//|05|05|05|05|05|05|05|05|05|05|05|05|05|05|05|//  //[CTF]//
                                                    //[CTF]//
//:SL is for "String List"                          //[CTF]//
//:SLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSL://  //[CTF]//
                                                    //[CTF]//
char**                                              //[CTF]//
AAC2020_GLEBIND_StringListMalloc(                              //[CTF]//
    int num_strings //:num_strings_in_list          //[CTF]//
){                                                  //[CTF]//
    char**                                          //[CTF]//
    output_string_list =(malloc(                    //[CTF]//
        sizeof(char*) //:"char*" not "char"         //[CTF]//
        *                                           //[CTF]//
        num_strings                                 //[CTF]//
    ));;                                            //[CTF]//
                                                    //[CTF]//
    //:You could use calloc instead. But I like     //[CTF]//
    //:to stick to malloc and free so I don't       //[CTF]//
    //:have to CTRL+F for both "malloc" and         //[CTF]//
    //:"calloc" when I am looking around my code.   //[CTF]//
    for(int i = 0; i < num_strings; i++ ){          //[CTF]//
        output_string_list[i] = NULL;               //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    return( output_string_list );                   //[CTF]//
} //[[AAC2020_GLEBIND_StringListMalloc]]//                     //[CTF]//
//:Helpfull, but non optimal. Pre-populate          //[CTF]//
//:all of the strings.                              //[CTF]//
void                                                //[CTF]//
AAC2020_GLEBIND_StringListPopulate(                            //[CTF]//
/**/      char** string_list                        //[CTF]//
,   int          num_strings                        //[CTF]//
,   const char*  default_tex                        //[CTF]//
,   int          str_max_len                        //[CTF]//
){                                                  //[CTF]//
    if(                                             //[CTF]//
        NULL==string_list ||                        //[CTF]//
        0   >=num_strings ||                        //[CTF]//
        NULL==default_tex ||                        //[CTF]//
        0   >=str_max_len ||                        //[CTF]//
    0){                                             //[CTF]//
       printf("[StringListPopulate:BadInput]\n");   //[CTF]//
       fflush(stdout);exit(666);                    //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    int def_len = strlen( default_tex );            //[CTF]//
    if( def_len > str_max_len ){                    //[CTF]//
        printf("[DefaultTextWontFit]\n");           //[CTF]//
        fflush(stdout);exit(666);                   //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    //:TODO: StringListPopulateWithIndexLabel       //[CTF]//
    //:      Example: "DEFAULT_TEXT_04"             //[CTF]//
    char* cur = NULL;                               //[CTF]//
    int num_chr = str_max_len+1; //:+1 terminator   //[CTF]//
    for( int i = 0; i < num_strings; i++ ){         //[CTF]//
        cur = malloc(sizeof(char)*num_chr);         //[CTF]//
        cur[ num_chr-1 ] = 0; //:<-----To_Be_Safe   //[CTF]//
        //:                                 |       //[CTF]//
        //:                            TO_BE_SAFE   //[CTF]//
        //:          END_OF_STRING          |       //[CTF]//
        //:                 |               |       //[CTF]//
        //|[A][P][P][L][E][\0][_][_][_][_][\0] |//  //[CTF]//
        //#                    ?  ?  ?  ?      #//  //[CTF]//
        //| 0  1  2  3  4  05  6  7  8  9  10  |//  //[CTF]//
        //:Copy over default text:                  //[CTF]//
        for( int j = 0; j < def_len; j++ ){         //[CTF]//
            cur[j]=default_tex[j];                  //[CTF]//
        };;                                         //[CTF]//
        cur[ def_len ] = 0; //:END_OF_STRING        //[CTF]//
                                                    //[CTF]//
        //:Place current copy into list:            //[CTF]//
        string_list[i] = cur;                       //[CTF]//
    };;                                             //[CTF]//
} //[[AAC2020_GLEBIND_StringListPopulate]]//                   //[CTF]//
void                                                //[CTF]//
AAC2020_GLEBIND_StringListPrint(                               //[CTF]//
/**/char** string_list                              //[CTF]//
,   int    string_length                            //[CTF]//
){                                                  //[CTF]//
    printf("[BEG:StringListPrint]\n");              //[CTF]//
    for(int i = 0; i < string_length; i++){         //[CTF]//
        printf("#(%3d):(%s)\n", i,string_list[i]);  //[CTF]//
    };;                                             //[CTF]//
    printf("[END:StringListPrint]\n");              //[CTF]//
} //[[AAC2020_GLEBIND_StringListPrint]]//                      //[CTF]//
void                                                //[CTF]//
AAC2020_GLEBIND_StringListFree(                                //[CTF]//
/**/char**  *BYREF_string_list                      //[CTF]//
,   int            num_strings                      //[CTF]//
){                                                  //[CTF]//
    //:References should NEVER be null.             //[CTF]//
    if(NULL==BYREF_string_list){                    //[CTF]//
        printf("[StringListFree:Null_Ref]\n");      //[CTF]//
        fflush(stdout);exit(666);                   //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    //:Personal preference. An empty list is        //[CTF]//
    //:likely a mistake, so crash.                  //[CTF]//
    if( 0 >= num_strings ){                         //[CTF]//
        printf("[IDontAllowEmptyListsInCode]\n");   //[CTF]//
        fflush(stdout);exit(666);                   //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    //:De-reference to make easier to work with:    //[CTF]//
    char** string_list =(                           //[CTF]//
    *BYREF_string_list   );                         //[CTF]//
                                                    //[CTF]//
    //:Free each string in list.                    //[CTF]//
    char* cur_str; //:current_string.               //[CTF]//
    for( int i = 0; i < num_strings; i++ ){         //[CTF]//
        cur_str = string_list[i];                   //[CTF]//
        if(NULL==cur_str){                          //[CTF]//
            //:I expect the list to have been       //[CTF]//
            //:populated after allocated,           //[CTF]//
            //:otherwise, I assume a mistake        //[CTF]//
            //:was made.                            //[CTF]//
            printf(                                 //[CTF]//
            /**/"%s%s\n"                            //[CTF]//
            ,   "[StringListFree:ERR]"              //[CTF]//
            ,   "[NullEntryFoundInList]"            //[CTF]//
            );;fflush(stdout);exit(666);            //[CTF]//
        }else{                                      //[CTF]//
            free( cur_str );                        //[CTF]//
            cur_str = NULL;                         //[CTF]//
            string_list[i] = NULL;                  //[CTF]//
        };;                                         //[CTF]//
    };;                                             //[CTF]//
                                                    //[CTF]//
    //:Free list itself after children destroyed.   //[CTF]//
    //:Then, null out the pointer.                  //[CTF]//
    free( string_list );                            //[CTF]//
    (*BYREF_string_list) = NULL;                    //[CTF]//
                                                    //[CTF]//
} //[[AAC2020_GLEBIND_StringListFree]]//                       //[CTF]//
//:SLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSLSL://  //[CTF]//
                                                    //[CTF]//
//|05|05|05|05|05|05|05|05|05|05|05|05|05|05|05|//  //[CTF]//
//|END[CODE_TOLD_FAST_05]______________________|//  //[CTF]//



//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//
//:BEG[ Search_Path_Loading_Code ]:::::::::::::://
//:SPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSP://
//:                                            ://
//: Not sure how I feel about this code.       ://
//: It seems kind of spaghetti. You really     ://
//: need a version of                          ://
//:"AAC2020_GLEBIND_OpenFileAndProcessLines"              ://
//: that takes an                              ://
//:"early bail-out-of-loop" function that      ://
//:determines when to stop looping over file.  ://
//:That function would be the function trying  ://
//:to load the DLL.                            ://
//:                                            ://
//:RELATED TO THIS NOTE:                       ://
//:SEE SHORTCUT: SC[ todo-2019-03-04 ]         ://
//:                                            ://
//#¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯#//
//# JMIM_NOTE:DATE[2019_06_05]TIME[0711PM]     #//
//# Sometimes perfection is the enemy of       #//
//# progress. Dirty working code can be        #//
//# cleaned up later. Clean code that          #//
//# doesn't actually work is useless.          #//
//#____________________________________________#//
//:                                            ://
//:SPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSP://
//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

extern int          AAC2020_GLEBIND_next_search_path_index ;
extern int          AAC2020_GLEBIND_num_search_paths       ;
extern const char** AAC2020_GLEBIND_p_search_paths         ;
int  AAC2020_GLEBIND_IsLineFull(const char* single_line){
    if( strcmp(single_line,"\n"  ) != 0 &&
        strcmp(single_line,"\r\n") != 0 &&
        strcmp(single_line,"\0"  ) != 0 &&
    1){

        //:BUGFIX:non_blank_found:---------------------------://
        //:BUGFIX:There is the possibility of nothing
        //:       but white space characters. Treat that
        //:       as an empty line as well.
        //:- - - - - - - - - - - - - - - - - - - - - - - - - ://

            #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:####://
                printf("[BUGHUNT_001:FIX_SITE_HERE]\n");
                fflush(stdout);
            #endif //:#######################################://

            int non_blank_found=( 0 );
            int str_len = strlen( single_line );
            for( int i = 0; i < str_len; i++ ){
                if( 
                    single_line[i] == '\r' || //:caRRiage CR
                    single_line[i] == '\n' || //:Newline  LF
                    single_line[i] == '\0' || //:null_terminator
                    single_line[i] == '\t' || //:tab
                    single_line[i] == ' '  || //:space
                0){
                    //:blank_character
                }else{
                    non_blank_found++;
                };;
            };;

        //:---------------------------:BUGFIX:non_blank_found://

        if( non_blank_found <= 0 ){

            printf("[LINE_WAS_FULL_OF_WHITESPACE_CHARS]\n");
            fflush(stdout);
            return( 0 ); //:line is NOT full.

        }else{

            return 1;
        };;
    }else{
        if( AAC2020_GLEBIND_tell_me_about_empty_lines ){
            printf("[LINE_IS_EMPTY]\n");
        };;
        return 0; //:was "continue" in video#1
    };;
    return( 0-1); //:error
} //[[AAC2020_GLEBIND_IsLineFull]]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

void AAC2020_GLEBIND_SearchPathInit(){
    if(NULL != AAC2020_GLEBIND_p_search_paths){
        aac2020_glebind_Halt( "[DesignedOnlyToRunOnce]" );
    };;
    //:Next index to store search path at:
    //:If not zero, sign that function was ran 2X.
    if(0 != AAC2020_GLEBIND_next_search_path_index){
        aac2020_glebind_Halt( "[2019_06_05_6340PM]" );
    };;
    //:If not zero, sign that function was ran 2X.
    if(0 != AAC2020_GLEBIND_num_search_paths){
        aac2020_glebind_Halt( "[2019_06_05_0642PM]" );
    };;
   
} //[[AAC2020_GLEBIND_SearchPathInit]]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//:Implements: AAC2020_GLEBIND_PFN_line_processor
int AAC2020_GLEBIND_SearchPathCount(
    const char* single_line
){
    //:Only tally if line is NOT empty:
    if( AAC2020_GLEBIND_IsLineFull( single_line ) ){
        AAC2020_GLEBIND_num_search_paths++;
        return( 1 );
    };;
    return( 0 );
} //[[AAC2020_GLEBIND_SearchPathCount]]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//:Implements: AAC2020_GLEBIND_PFN_line_processor
int AAC2020_GLEBIND_SearchPathStore(
    const char* single_line
){

    if( ((void*)0) == single_line ){
        printf("[ERROR:single_line:NULL]\n");
        fflush(stdout);exit(666);
    };;
    
    //:DETERMINE_IF_LINE_IS_FULL:============================://
    #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH /**BUGHUNT_001 **/ >= 1) 
    printf("[IS_THE_LINE_FULL...]\n");fflush(stdout);
    #endif //:###############################################://

        //:Exit if line is empty:
        if( !AAC2020_GLEBIND_IsLineFull( single_line ) ){

            #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH  >= 1 ) 
            printf("[EXITING,line_is_empty]\n");fflush(stdout);
            #endif //:#######################################://

            return 0;
        };;

    #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH /**BUGHUNT_001 **/ >= 1) 
    printf("[THE_LINE_IS_FULL!]\n");fflush(stdout);
    #endif //:###############################################://
    //:============================:DETERMINE_IF_LINE_IS_FULL://
    
    AAC2020_GLEBIND_MM_DEBUGPRINT_01( 
        "[NonEmptyLine_Storing]"
    );;

    const char* str =(
        AAC2020_GLEBIND_TrimCopyToHeap( single_line )
    );;

    AAC2020_GLEBIND_MM_DEBUGPRINT_01(
        "[TheTrimmedString_dot_dot_dot]"
    );;

    AAC2020_GLEBIND_InfoPrint_STR( 
    /**/"[PATH]"
    ,   str
    );;
    
    //:si:"storage_index"
    int si = AAC2020_GLEBIND_next_search_path_index;
    AAC2020_GLEBIND_p_search_paths[ si ] = str;
    AAC2020_GLEBIND_next_search_path_index++;
    
    return( 1 );
} //[[AAC2020_GLEBIND_SearchPathStore]]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//:Get a list of search paths for finding
//:the OpenCL dll.
const char**
AAC2020_GLEBIND_GetSearchPathsFromFile(
    int   *BYREF_num_paths
){
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(
        "[BEG:AAC2020_GLEBIND_GetSearchPathsFromFile]"
    );;
    
    //:References can never be null:
    if(NULL==BYREF_num_paths){
        aac2020_glebind_Halt("[2019_06_05_0652PM]");
    };;

    //:In case we run AAC2020_GLEBIND_GetSearchPathsFromFile
    //:multiple times, use this INIT function:
    AAC2020_GLEBIND_SearchPathInit();
    
    //:Pass #1: Figure out memory allocation:
    AAC2020_GLEBIND_OpenFileAndProcessLines(
        AAC2020_GLEBIND_name_of_search_path_file
    ,   &AAC2020_GLEBIND_SearchPathCount
    );;

    #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:#://

        printf("[BUGHUNT_001:Lines_Processed]\n");
        fflush(stdout);

    #endif //:###############################################://
    
    AAC2020_GLEBIND_InfoPrint_INT(
    /**/"[NumSearchPaths]"
    ,   AAC2020_GLEBIND_num_search_paths
    );;
    #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:#://
    
        printf("[BUGHUNT_001:AAC2020_GLEBIND_num_search_paths]:%d\n"
                            ,AAC2020_GLEBIND_num_search_paths);;
        fflush(stdout);
    
    #endif //:###############################################://
    
    //:Set aside memory for pass #2:
    //:Gaurd if num search paths not positive
    //:since malloc(0) is implementation defined.
    if(AAC2020_GLEBIND_num_search_paths>0){
     
    //- AAC2020_GLEBIND_p_search_paths =(malloc(          -//
    //-     sizeof(char*) //:"char*" not "char"-//
    //-     *                                  -//
    //-     AAC2020_GLEBIND_num_search_paths              -//
    //- ));;                                   -//
    //+ Because the above memory allocation    +//
    //+ was wrong, I decided to create a util  +//
    //+ function for the allocation so I never +//
    //+ screw this up ever again.              +//
        { ///////////////////////////////+ --- +//
        char** str_lis=(               //+ --- +//
            AAC2020_GLEBIND_StringListMalloc(     //+ --- +//
                AAC2020_GLEBIND_num_search_paths  //+ --- +//
            )                          //+ --- +//
        );AAC2020_GLEBIND_p_search_paths=(        //+ --- +//
            (const char**)str_lis      //+ --- +//
        );;                            //+ --- +//
        } ///////////////////////////////+ --- +//
    //+----------------------------------------+//
        
    }else{
        AAC2020_GLEBIND_p_search_paths=NULL;
    };;

    //:2ND_FILE_SCAN_PASS:COLLECTION:------------------------://

        #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:########://
        
            printf("[BUGHUNT_001:ABOUT_TO_DO_2ND_FILE_SCAN]\n");
            fflush(stdout);
        
        #endif //:###########################################://
        
        //:Pass #2: Collect strings.
        AAC2020_GLEBIND_MM_DEBUGPRINT_01("[CollectStrings]");
        AAC2020_GLEBIND_OpenFileAndProcessLines(
            AAC2020_GLEBIND_name_of_search_path_file
        ,   &AAC2020_GLEBIND_SearchPathStore
        );;
        
        //:Set reference to num_search_paths:
        AAC2020_GLEBIND_MM_DEBUGPRINT_01(
            "[SetRefToNumSearchPaths]"
        );;
        (*BYREF_num_paths) = AAC2020_GLEBIND_num_search_paths;
        AAC2020_GLEBIND_MM_DEBUGPRINT_01(
            "[END:AAC2020_GLEBIND_GetSearchPathsFromFile]"
        );;

        #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:########://
        
            printf("[BUGHUNT_001:DONE_WITH_2ND_FILE_SCAN]\n");
            fflush(stdout);
        
        #endif //:###########################################://

    //:------------------------:2ND_FILE_SCAN_PASS:COLLECTION://

    return( AAC2020_GLEBIND_p_search_paths );
} //[[AAC2020_GLEBIND_GetSearchPathsFromFile]_____________]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//
//[SPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSP]//
//[END[ Search_Path_Loading_Code ]:::::::::::::]//
//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//
//[][][][][][][][][][][][][][][][][][][][][][][]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

void* /** HMODULE **/
AAC2020_GLEBIND_TryOpenDLL( void ){
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(
        "[BEG:AAC2020_GLEBIND_TryOpenDLL]"
    );;

    const char* dll_path   = NULL;
    void* /** HMODULE **/ open_gl_handle = NULL;

    //:GET_SEARCH_PATHS_FROM_FILE:---------------------------://

        AAC2020_GLEBIND_InfoPrint(
        "[ABOUT_TO_TRY:GET_SEARCH_PATHS_FROM_FILE]\n");;

        #if( AAC2020_GLEBIND_BUGHUNT_WHITE_SPACE_PATH >= 1 ) //:########://
            printf("[BUGHUNT:WHITE_SPACE_PATH:001]\n");
            fflush(stdout);
        #endif //:###########################################://

        int num_paths = 0;
        const char** dll_path_array=(
            AAC2020_GLEBIND_GetSearchPathsFromFile( &num_paths )
        );;
    
    //:---------------------------:GET_SEARCH_PATHS_FROM_FILE://
    //:USE_PATHS_IF_YOU_GOT_THEM:----------------------------://
    #define P_F  printf             //:######################://
    #define I_P  AAC2020_GLEBIND_InfoPrint     //:######################://
    #define I_S  AAC2020_GLEBIND_InfoPrint_STR //:######################://
    #define I_I  AAC2020_GLEBIND_InfoPrint_INT //:######################://

        I_P( "[ABOUT_TO:USE_PATHS_IF_YOU_GOT_THEM\n" );;

        if(0==num_paths){
            P_F("[AAC2020_GLEBIND:ERR:2019_03_04_1243AM]\n");
            P_F("[AAC2020_GLEBIND:zero_search_paths]\n    ");
            P_F("[AAC2020_GLEBIND:add_paths_to]:%s\n      ",
                AAC2020_GLEBIND_name_of_search_path_file
            );;
 
            /** Without search paths, we will fail to load   **/
            /** the DLL. Best to stop here so the console    **/
            /** output's last message is the ROOT problem.   **/
            fflush(stdout);exit(666);
      
        }else
        if( num_paths >= 1 ){
            AAC2020_GLEBIND_InfoPrint(
                "[AT_LEAST_ONE(LINE/PATH)FOUND_IN_FILE]\n");

            AAC2020_GLEBIND_MM_DEBUGPRINT_01(
                "[SearchPathsFound]"
            );;
            #if( AAC2020_GLEBIND_MV_DEBUGPRINT_01 > 0 )
                I_I("[num_paths]:", num_paths);
                fflush(stdout);
            #endif
        }else{
            printf("[INVALID_NUMBER_OF_PATHS]\n");
        };;
    
    #undef P_F //:###########################################://
    #undef I_I //:###########################################://
    #undef I_S //:###########################################://
    #undef I_P //:###########################################://
    //:----------------------------:USE_PATHS_IF_YOU_GOT_THEM://
    //:ATTEMPT_TO_LOAD_LIBRARY_FROM_PATHS:-------------------://
    #define I_P AAC2020_GLEBIND_InfoPrint

        I_P("[ABOUT_TO:ATTEMPT_TO_LOAD_LIBRARY_FROM_PATHS\n" ); 

        //:Loop through search paths, exit on the
        //:first path that successfully loads DLL:
        for(int i = 0; i < num_paths; i++){
            //:sleep(1);
            dll_path = dll_path_array[i];
            AAC2020_GLEBIND_InfoPrint_STR(
            /**/"[AAC2020_GLEBIND:TRYING_PATH]"
            ,   dll_path 
            );
            open_gl_handle = PEB2020_LoadLibraryA( dll_path );
            if(NULL != open_gl_handle){ 
                I_P( "[AAC2020_GLEBIND:OPENED_THAT_DLL]\n" );
                break; 
            }else{
                I_P( "[AAC2020_GLEBIND:FAILED_THAT_DLL]\n" );
            };;
        };;

    #undef I_P
    //:-------------------:ATTEMPT_TO_LOAD_LIBRARY_FROM_PATHS://
    //:REPORT_RESULT_OF_OUR_EFFORTS:-------------------------://
    #define I_P AAC2020_GLEBIND_InfoPrint

        I_P("[ABOUT_TO:REPORT_RESULT_OF_OUR_EFFORTS]\n");

        if(NULL==open_gl_handle){

            /** [Failed_To_Load_DLL]                         **/
            /** No news is good news. And if you get         **/
            /** this news, it is bad news.                   **/
            /** #AAC2020_GLEBIND_no_news_is_good_news#                  **/
            printf("[FATAL_ERROR:OPENGL_DLL_HANDLE_IS_NULL]\n");
            printf("[If_You_Are_Seeing_This_It_Means_None_]\n");
            printf("[Of_Your_Paths_Pointed_To_OpenGL32.dll]\n");
            fflush(stdout);exit(666);
        }else{
            if( AAC2020_GLEBIND_no_news_is_good_news >= 1 ){
                //: Do nothing. No news is good news.
            }else{
                I_P("[OK:DLL_HANDLE_IS_SATED]\n");
                fflush(stdout);
            };;
        };;
    
    #undef I_P
    //:-------------------------:REPORT_RESULT_OF_OUR_EFFORTS://
    
    AAC2020_GLEBIND_MM_DEBUGPRINT_01(
        "[END:AAC2020_GLEBIND_TryOpenDLL]"
    );;
    return( open_gl_handle );
} //[[AAC2020_GLEBIND_TryOpenDLL]]//

//[][][][][][][][][][][][][][][][][][][][][][][]//



//[][][][][][][][][][][][][][][][][][][][][][][]//

//# ONLY_USE_FOR_OPENGL_FUNCTIONS_THAT_DO      #//
//# NOT_REQUIRE_AN_EXISTING_CONTEXT_TO_WORK    #//
AAC2020_GLEBIND_FUNC
AAC2020_GLEBIND_LoadFunc(
    const char* name_of_open_gl_function  
){
#define I_P AAC2020_GLEBIND_InfoPrint
    //:LAZY_LOAD_OPEN_GL_DLL:--------------------------------://

        AAC2020_GLEBIND_MM_DEBUGPRINT_01( "[BEG:AAC2020_GLEBIND_LoadFunc]" );

        //:Lazily load OpenCL.dll the first time
        //:it is needed.
        if(NULL==AAC2020_GLEBIND_open_gl_handle){

            I_P("[About_To_Attempt:AAC2020_GLEBIND_TryOpenDLL()]\n");
            AAC2020_GLEBIND_open_gl_handle =( AAC2020_GLEBIND_TryOpenDLL() );

        };;
        if(NULL==AAC2020_GLEBIND_open_gl_handle){

            aac2020_glebind_Halt("[GL_DLL_HANDLE_STILL_NULL]");

        };;
    
        AAC2020_GLEBIND_MM_DEBUGPRINT_01("[has_open_cl_handle]");

    //:--------------------------------:LAZY_LOAD_OPEN_GL_DLL://
    //:GET_FUNCTION_ADDRESS_FROM_OPEN_GL_DLL:----------------://

        AAC2020_GLEBIND_FUNC function_pointer = 
       (AAC2020_GLEBIND_FUNC)PEB2020_GetProcAddress( 

            AAC2020_GLEBIND_open_gl_handle
            ,name_of_open_gl_function

        );if(NULL==function_pointer){
            printf(
            /**/"[AAC2020_GLEBIND_LoadFunc:Fail]:%s\n"
            ,   name_of_open_gl_function
            );;
            fflush(stdout);
            exit(666);
        };;

    //:----------------:GET_FUNCTION_ADDRESS_FROM_OPEN_GL_DLL://
    //:RETURN_FUNCTION_POINTER:------------------------------://

        AAC2020_GLEBIND_MM_DEBUGPRINT_01("[END:AAC2020_GLEBIND_LoadFunc]");
        return( function_pointer );

    //:------------------------------:RETURN_FUNCTION_POINTER://
#undef I_P
} //[[AAC2020_GLEBIND_LoadFunc]]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
//|GOAL: [OpenGL]<===>[OpenCL] Interopability. |//
//|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx|//
//|OpenGL types so I don't have to include     |//
//|OpenGL header. My intention is to only bind |//
//|enough of OpenGL to get a context I can use |//
//|with OpenCL.                                |//
//+ #gltypes# #gltype# #gltypedefs#            +//
//|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx|//


//:OPEN_GL_TYPEDEFS:COMMENTED_OUT:===========================://
//:    //:#AAC2020_GLEBIND_GLH_TYPES#://                         //: ://
//:    #ifndef    GL_VERSION                                 ://
//:                                                          ://
//:        typedef int GLsizei;                              ://
//:        typedef unsigned int GLuint;                      ://
//:                                                          ://
//:        //:glcoarearb.h:                                  ://
//:        typedef unsigned int GLenum;                      ://
//:                                                          ://
//:        //: glcorearb.h:                                  ://
//:        //: typedef khronos_ssize_t GLsizeiptr;           ://
//:        //:                                               ://
//:        //: khronos.org/opengl/wiki/OpenGL_Type:          ://
//:        //: Non-negative binary integer size,             ://
//:        //: for memory offsets and ranges	             ://
//:        //:                                               ://
//:        //:Assuming compilation in 64bit mode:            ://
//:        typedef unsigned __int64 GLsizeiptr;              ://
//:                                                          ://
//:        typedef void GLvoid;                              ://
//:                                                          ://
//:        //:glcorearb.h:                                   ://
//:        typedef int GLint;                                ://
//:                                                          ://
//:        //:glcorearb.h:                                   ://
//:        typedef unsigned char GLboolean;                  ://
//:                                                          ://
//:        //:glcorearb.h                                    ://
//:        typedef char GLchar;                              ://
//:                                                          ://
//:        //:glcorearb.h                                    ://
//:        typedef unsigned int GLbitfield;                  ://
//:                                                          ://
//:        //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//    ://
//:        //| On a platfrom that supports IEEE-754   |//    ://
//:        //| float it's going to be 32 bit. On      |//    ://
//:        //| platforms that don't,different width   |//    ://
//:        //| will probably be the least of your     |//    ://
//:        //| problems. Bottom line - use float and  |//    ://
//:        //| don't worry.                           |//    ://
//:        //| stackoverflow.com/questions/18705192   |//    ://
//:        //|                                        |//    ://
//:        //|glcoarearb.h:                           |//    ://
//:        //|     typedef khronos_float_t GLfloat;   |//    ://
//:        //|khrplatform.h:                          |//    ://
//:        //|     typedef float khronos_float_t;     |//    ://
//:        typedef float GLfloat;                  //||//    ://
//:        //|                                        |//    ://
//:        //|________________________________________|//    ://
//:                                                          ://
//:                                                          ://
//:        //////////////////////////////////////////////    ://
//:        //| glcore.h:                              |//    ://
//:        //| typedef khronos_uint8_t GLubyte;       |//    ://
//:        //|                                        |//    ://
//:        //| khrplatform.h                          |//    ://
//:        //| khronos.org/registry/EGL/api/KHR       |//    ://
//:        //| /khrplatform.h                         |//    ://
//:        //| [BEG:QUOTE]                            |//    ://
//:        //| "Types that are (so far) the same "    |//    ://
//:        //| "on all platforms                 "    |//    ://
//:        //| [END:QUOTE]                            |//    ://
//:        //| typedef unsigned char khronos_uint8_t; |//    ://
//:        typedef unsigned char GLubyte; //:         :////: ://
//:        //////////////////////////////////////////////    ://
//:                                                          ://
//:    #endif /** GL_VERSION **/                             ://
//:===========================:OPEN_GL_TYPEDEFS:COMMENTED_OUT://

//[][][][][][][][][][][][][][][][][][][][][][][]//

/////////[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]/////////
////////[]                              []////////
///////[]                                []///////
//////[]                                  []//////
/////[]                                    []/////
////[]                                      []////
///[]                                        []///
//[]                                          []//
//[                                            ]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XX This one is special.                   XX]//
//[XX The wrapper function is called         XX]//
//[XX AAC2020_GLEBIND_wglGetProcAddress instead of      XX]//
//[XX      wglGetProcAddress to avoid        XX]//
//[XX      conflicts with Windows.h.         XX]//
//[XX The "wglGetProcAddress" function       XX]//
//[XX does NOT work "out of the box" like    XX]//
//[XX "GetProcAddress".                      XX]//
//[XX                                        XX]//
//[XX I am sure if I knew more               XX]//
//[XX about linkers I could fix this.        XX]//
//[XX But messing with linkers would destroy XX]//
//[XX the point of this library being an     XX]//
//[XX                                        XX]//
//[XX "easy bindings"                        XX]//
//[XX                                        XX]//
//[XX library. The whole point is to just    XX]//
//[XX include this file and get access to    XX]//
//[XX openGL functions.                      XX]//
//[XX                                        XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]   XX]//
AAC2020_GLEBIND_WIN32_PROC                               
(*PFN_wglGetProcAddress)            //[  ]   XX]//
(                                   //[  ]   XX]//
/**/const char* /**LPCSTR**/    Arg1                  
); //[- - - - - - - - - - - - - -]////[  ]   XX]//
                                    //[  ]   XX]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯]////[  ]   XX]//
                                    //[  ]   XX]//
PFN_wglGetProcAddress               //[  ]   XX]//
pfn_wglGetProcAddress;              //[  ]   XX]//
                                    //[  ]   XX]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_]////[  ]   XX]//
AAC2020_GLEBIND_WIN32_PROC                  //[  ]   XX]//
AAC2020_GLEBIND_wglGetProcAddress              //[  ]   XX]//
(                                   //[  ]   XX]//
/**/const char*    Arg1                  //[01]   XX]//
){                                  //[  ]   XX]//                 
    AAC2020_GLEBIND_FuncPointerSated(          //[  ]   XX]//
    /**/ "[pfn_wglGetProcAddress]", //[  ]   XX]//
(AAC2020_GLEBIND_FUNC)pfn_wglGetProcAddress );;//[  ]   XX]//         
    return(pfn_wglGetProcAddress(   //[  ]   XX]//
    /**/      Arg1                  //[01]   XX]//
    ));;                            //[  ]   XX]//           
} //[[AAC2020_GLEBIND_wglGetProcAddress]____________]   XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XX                                        XX]//
//[XX Also does NOT need an openGL context   XX]//
//[XX in order to fetch it.                  XX]//
//[XX                                        XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]   XX]//
void* /** HGLRC:Handle_GL_RenderingContext **/      
(*PFN_wglGetCurrentContext)         //[  ]   XX]//
(                                   //[  ]   XX]//
                             void   //[00]   XX]//
); //[- - - - - - - - - - - - - -]////[  ]   XX]//
                                    //[  ]   XX]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯]////[  ]   XX]//
                                    //[  ]   XX]//
PFN_wglGetCurrentContext            //[  ]   XX]//
pfn_wglGetCurrentContext;           //[  ]   XX]//
                                    //[  ]   XX]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_]////[  ]   XX]//
void* /** HGLRC:Handle_GL_RenderingContext **/                           
AAC2020_GLEBIND_wglGetCurrentContext           //[  ]   XX]//
(                                   //[  ]   XX]//
                             void   //[00]   XX]//
){                                  //[  ]   XX]//                 
    AAC2020_GLEBIND_FuncPointerSated(          //[__ ¯¯]XX]//
    /**/ "[pfn_wglGetCurrentContext]", //[  ]XX]//
(AAC2020_GLEBIND_FUNC)pfn_wglGetCurrentContext );;//[  ]XX]//         
    return(pfn_wglGetCurrentContext(   //[  ]XX]//
                                    //[¯¯ __]XX]//
                          //[void]////[00]   XX]//
    ));;                            //[  ]   XX]//           
} //[[AAC2020_GLEBIND_wglGetCurrentContext]____________]XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XX                                        XX]//
//[XX Also does NOT need an openGL context   XX]//
//[XX in order to fetch it.                  XX]//
//[XX                                        XX]//
//[XX wglCreateContext:                      XX]//
//[XX                                        XX]//
//[XX RCTX:Rendering_Context                 XX]//
//[XX H_DC:Hardware Device Context (HDC).    XX]//
//[XX PIXF:Pixel_Format                      XX]//
//[XX                                        XX]//
//[XX RCTX for drawin on H_DC.               XX]//
//[XX RCTX PIXF === H_DC PIXF                XX]//
//[XX                                        XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]   XX]//
void* /** HGLRC:Handle_GL_RenderingContext **/                               
(*PFN_wglCreateContext)             //[  ]   XX]//
(                                   //[  ]   XX]//
/**/ void* /** HDC **/      Arg1    //[01]   XX]//
); //[- - - - - - - - - - - - - -]////[  ]   XX]//
                                    //[  ]   XX]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯]////[  ]   XX]//
                                    //[  ]   XX]//
PFN_wglCreateContext                //[  ]   XX]//
pfn_wglCreateContext;               //[  ]   XX]//
                                    //[  ]   XX]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_]////[  ]   XX]//
void* /** HGLRC:Handle_GL_RenderingContext **/                                
AAC2020_GLEBIND_wglCreateContext               //[  ]   XX]//
(                                   //[  ]   XX]//
/**/ void* /** HDC **/      Arg1    //[01]   XX]//
){                                  //[  ]   XX]//                 
    AAC2020_GLEBIND_FuncPointerSated(          //[__ ¯¯]XX]//
    /**/ "[pfn_wglCreateContext]",     //[  ]XX]//
(AAC2020_GLEBIND_FUNC)pfn_wglCreateContext );;    //[  ]XX]//         
    return(pfn_wglCreateContext(       //[  ]XX]//
                                    //[¯¯ __]XX]//
                            Arg1    //[01]   XX]//
    ));;                            //[  ]   XX]//           
} //[[AAC2020_GLEBIND_wglCreateContext]________________]XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XX                                        XX]//
//[XX Also does NOT need an openGL context   XX]//
//[XX in order to fetch it.                  XX]//
//[XX                                        XX]//
//[XX The wglMakeCurrent function makes a    XX]//
//[XX specified OpenGL rendering context the XX]//
//[XX calling thread's current rendering     XX]//
//[XX context. All subsequent OpenGL calls   XX]//
//[XX made by the thread are drawn on the    XX]//
//[XX device identified by hdc. You can also XX]//
//[XX use wglMakeCurrent to change the       XX]//
//[XX calling thread's current rendering     XX]//
//[XX context so it's no longer current.     XX]//
//[XX                                        XX]//
//[XX SC[ wingdi-wglmakecurrent-msdn-url ]   XX]//
//[XX                                        XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]   XX]//
int /** BOOL **/                    //[  ]   XX]//
(*PFN_wglMakeCurrent)               //[  ]   XX]//
(                                   //[  ]   XX]//
/**/void* /** HDC   **/ input_HDC   //[01]   XX]//
,   void* /** HGLRC **/ input_HGLRC //[02]   XX]//
); //[- - - - - - - - - - - - - -]////[  ]   XX]//
                                    //[  ]   XX]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯]////[  ]   XX]//
                                    //[  ]   XX]//
PFN_wglMakeCurrent                  //[  ]   XX]//
pfn_wglMakeCurrent;                 //[  ]   XX]//
                                    //[  ]   XX]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_]////[  ]   XX]//
int /** BOOL **/                    //[  ]   XX]//
AAC2020_GLEBIND_wglMakeCurrent                 //[  ]   XX]//
(                                   //[  ]   XX]//
/**/void* /** HDC   **/ input_HDC   //[01]   XX]//
,   void* /** HGLRC **/ input_HGLRC //[02]   XX]//
){                                  //[  ]   XX]//                 
    AAC2020_GLEBIND_FuncPointerSated(          //[__ ¯¯]XX]//
    /**/ "[pfn_wglMakeCurrent]",       //[  ]XX]//
(AAC2020_GLEBIND_FUNC)pfn_wglMakeCurrent );;      //[  ]XX]//         
    return(pfn_wglMakeCurrent(         //[  ]XX]//
                                    //[¯¯ __]XX]//
    /**/               input_HDC    //[01]   XX]//
    ,                  input_HGLRC  //[02]   XX]//
    ));;                            //[  ]   XX]//           
} //[[AAC2020_GLEBIND_wglMakeCurrent]__________________]XX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//! wglGetProcAddress will not return function !//
//! pointers from any OpenGL functions that    !//
//! are directly exported by the OpenGL32.DLL  !//
//! itself. This means the old ones from       !//
//! OpenGL version 1.1. Fortunately those      !//
//! functions can be obtained by the Win32's   !//
//! GetProcAddress. On the other hand          !//
//! GetProcAddress will not work for the       !//
//! functions for which wglGetProcAddress      !//
//! works. So in order to get the address of   !//
//! any GL function one can try with           !//
//! wglGetProcAddress and if it fails,try      !//
//! again with the Win32's GetProcAddress:     !//
//! SOURCE[ URL[                               !//
//!                                            !//
//!     https://www.khronos.org/opengl         !//
//!     /wiki/Load_OpenGL_Functions            !//
//!                                            !//
//! ]URL]SOURCE                                !//
AAC2020_GLEBIND_FUNC
AAC2020_GLEBIND_GetAnyGLFuncAddress(
    const char* name_of_open_gl_function
){
    
    AAC2020_GLEBIND_FUNC p =(
        (AAC2020_GLEBIND_FUNC)AAC2020_GLEBIND_wglGetProcAddress(    
            name_of_open_gl_function   
        )
    );;                                   
    
    if(
        (p ==        0        ) ||
        (p == ( AAC2020_GLEBIND_FUNC )0x1) || 
        (p == ( AAC2020_GLEBIND_FUNC )0x2) ||
        (p == ( AAC2020_GLEBIND_FUNC )0x3) ||
        (p == ( AAC2020_GLEBIND_FUNC ) -1) ||
    0){
        //: HMODULE module =(
        //:     LoadLibraryA("opengl32.dll")
        //: );;
        //: p = (void *)GetProcAddress(
        //:     module
        //: ,   name_of_open_gl_function
        //: );;

        //:You were supposed to check for this
        //:Before using the function!
        if(NULL==AAC2020_GLEBIND_open_gl_handle){
            aac2020_glebind_Halt("[2019_06_06_1248AM]");
        };;

        p = (AAC2020_GLEBIND_FUNC)PEB2020_GetProcAddress(
        /**/AAC2020_GLEBIND_open_gl_handle
        ,   name_of_open_gl_function
        );;

        if(NULL==p){
            //:DispiteYourBestEffortsYouFail
            aac2020_glebind_Halt(
                "[DispiteYourBestEfforsYouFail]"
            );;
        };;
    };;

    if(NULL==p){
        aac2020_glebind_Halt("[2019_06_06_1250AM]");;
    };;

    return( p );
}

//[][][][][][][][][][][][][][][][][][][][][][][]//

//#BEG[ FUNCTION_PROTOTYPES_AND_WRAPPERS ]=====#//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                            //[  ]//
(*PFN_glGenBuffers)                             //[  ]//
(                                               //[  ]//
/**/int            /** GLsizei    **/        n  //[01]//
,   unsigned int*  /** GLuint:PTR **/  buffers  //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGenBuffers                          //[  ]//
pfn_glGenBuffers;                         //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGenBuffers                              //[  ]//
(                                         //[  ]//
/**/int            /** GLsizei    **/        n  //[01]//
,   unsigned int*  /** GLuint:PTR **/  buffers  //[02]//
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/ "[pfn_glGenBuffers]",            //[  ]//
(AAC2020_GLEBIND_FUNC)pfn_glGenBuffers );;           //[  ]//                    
    /*void*/(pfn_glGenBuffers(            //[  ]//
    /**/                               n  //[01]//
    ,                            buffers  //[02]//
    ));;                                  //[  ]//                      
} //[[glGenBuffers]____________________________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glBindBuffer)                       //[  ]//
(                                         //[  ]//
/**/unsigned int /** GLenum **/                        target  //[01]//
,   unsigned int /** GLuint **/                        buffer  //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glBindBuffer                          //[  ]//
pfn_glBindBuffer;                         //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glBindBuffer                              //[  ]//
(                                         //[  ]//
/**/unsigned int /** GLenum **/                        target  //[01]//
,   unsigned int /** GLuint **/                        buffer  //[02]//
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
      /**/ "[pfn_glBindBuffer]",          //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glBindBuffer );;         //[  ]//                    
    /*VOID*/(pfn_glBindBuffer(            //[  ]//
    /**/                          target  //[01]//
    ,                             buffer  //[02]//
    ));;                                  //[  ]//                      
} //[[glBindBuffer]____________________________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glBufferData)                       //[  ]//
(                                         //[  ]//
/**/unsigned int /** GLenum **/         target                 //[01]//
,   unsigned __int64 /** GLsizeiptr **/       size                 //[02]//
,   const void* /** GLvoid:PTR **/    data                 //[03]//
,   unsigned int /** GLenum **/          usage                 //[04]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glBufferData                          //[  ]//
pfn_glBufferData;                         //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glBufferData                              //[  ]//
(                                         //[  ]//
/**/unsigned int /** GLenum **/         target                 //[01]//
,   unsigned __int64 /** GLsizeiptr **/       size                 //[02]//
,   const void* /** GLvoid:PTR **/    data                 //[03]//
,   unsigned int /** GLenum **/          usage                 //[04]//
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glBufferData]",          //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glBufferData );;         //[  ]//                    
    /*VOID*/(pfn_glBufferData(            //[  ]//
    /**/           target                 //[  ]//
    ,                size                 //[  ]//
    ,                data                 //[  ]//
    ,               usage                 //[  ]//
    ));;                                  //[  ]//                      
} //[[glBufferData]____________________________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
unsigned int /** GLenum **/                                    //[  ]//
(*PFN_glGetError)                         //[  ]//
(                                         //[  ]//
            void                          //[00]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGetError                            //[  ]//
pfn_glGetError;                           //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
unsigned int /** GLenum **/                                    //[  ]//
glGetError                                //[  ]//
(                                         //[  ]//
            void                          //[00]//
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glGetError]",            //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGetError );;           //[  ]//                    
      return(pfn_glGetError(              //[  ]//
        /** VOID **/                      //[  ]//
    ));;                                  //[  ]//                      
} //[[glGetError]______________________________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glEnableVertexAttribArray)          //[  ]//
(                                         //[  ]//
            unsigned int /** GLuint **/ index                  //[00]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glEnableVertexAttribArray             //[  ]//
pfn_glEnableVertexAttribArray;            //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glEnableVertexAttribArray                 //[  ]//
(                                         //[  ]//
            unsigned int /** GLuint **/ index                  //[00]//
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glEnableVertexAttribArray]",   //
  (AAC2020_GLEBIND_FUNC)pfn_glEnableVertexAttribArray );;  //                  
/*X_return*/(pfn_glEnableVertexAttribArray(     //
                   index                  //[  ]//
    ));;                                  //[  ]//                      
} //[[glEnableVertexAttribArray]_______________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glVertexAttribPointer)              //[  ]//
(                                         //[  ]//
/**/unsigned int /** GLuint **/           index                //[01]//
,   int /** GLint **/             size                //[02]//
                                          //[  ]//
,   unsigned int /** GLenum **/            type                //[03]//
,   unsigned char /** GLboolean **/   normalized                //[04]//
                                          //[  ]//
,   int /** GLsizei **/         stride                //[05]//
,   const void* /** GLvoid:PTR **/  pointer                //[06]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glVertexAttribPointer                 //[  ]//
pfn_glVertexAttribPointer;                //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glVertexAttribPointer                     //[  ]//
(                                         //[  ]//
/**/unsigned int /** GLuint **/           index                //[01]//
,   int /** GLint **/             size                //[02]//
                                          //[  ]//
,   unsigned int /** GLenum **/            type                //[03]//
,   unsigned char /** GLboolean **/   normalized                //[04]//
                                          //[  ]//
,   int /** GLsizei **/         stride                //[05]//
,   const void* /** GLvoid:PTR **/  pointer                //[06]//
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glVertexAttribPointer]", //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glVertexAttribPointer );;//[  ]//           
/*X_return*/(pfn_glVertexAttribPointer(   //[  ]//
                                          //[  ]//
    /**/            index                 //[01]//
    ,                size                 //[02]//
    //                 //                 //[  ]//
    ,                type                 //[03]//
    ,          normalized                 //[04]//
    //                 //                 //[  ]//
    ,              stride                 //[05]//
    ,             pointer                 //[06]//
    ));;                                  //[  ]//                      
} //[[glVertexAttribPointer]___________________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glDrawArrays)                       //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/   mode //[01]//
,                           int /** GLint **/   first //[02]//
,                           int /** GLsizei **/ count //[03]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glDrawArrays                          //[  ]//
pfn_glDrawArrays;                         //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glDrawArrays                              //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/   mode //[01]//
,                           int /** GLint **/   first //[02]//
,                           int /** GLsizei **/ count //[03]//
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glDrawArrays]",          //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glDrawArrays );;         //[  ]//           
/*X_return*/(pfn_glDrawArrays(            //[  ]//
    /**/                             mode //[01]//
    ,                               first //[02]//
    ,                               count //[03]//
    ));;                                  //[  ]//                      
} //[[glDrawArrays]____________________________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glDisableVertexAttribArray)         //[  ]//
(                                         //[  ]//
                            unsigned int /** GLuint **/ index  //[01]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glDisableVertexAttribArray            //[  ]//
pfn_glDisableVertexAttribArray;           //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glDisableVertexAttribArray                //[  ]//
(                                         //[  ]//
                            unsigned int /** GLuint **/ index  //[01]//  
){                                        //[  ]//                            
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glDisableVertexAttribArray]",  //
  (AAC2020_GLEBIND_FUNC)pfn_glDisableVertexAttribArray );; //           
/*X_return*/(pfn_glDisableVertexAttribArray(    //
                                   index  //[01]//
    ));;                                  //[  ]//                      
} //[[glDisableVertexAttribArray]______________]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
unsigned int /** GLuint **/                                    //[  ]//
(*PFN_glCreateShader)                     //[  ]//
(                                         //[  ]//
                        unsigned int /** GLenum **/ shaderType //[01]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glCreateShader                        //[  ]//
pfn_glCreateShader;                       //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
unsigned int /** GLuint **/                                    //[  ]//
glCreateShader                            //[  ]//
(                                         //[  ]//
                        unsigned int /** GLenum **/ shaderType //[01]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glCreateShader]",  //    //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glCreateShader );; //    //[  ]//
    return(  pfn_glCreateShader(    //    //[  ]//
                               shaderType //[01]//
    ));;                                  //[  ]//                     
} //[[glCreateShader]__________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glShaderSource)                     //[  ]//
(                                         //[  ]//
/**/            unsigned int /** GLuint **/            shader  //[01]//
,               int /** GLsizei **/            count  //[02]//
,               const char**  /** GLchar:PTR_PTR**/    string  //[03]//
,               const int*  /** GLint:PTR **/      length  //[04]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glShaderSource                        //[  ]//
pfn_glShaderSource;                       //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glShaderSource                            //[  ]//
(                                         //[  ]//
/**/            unsigned int /** GLuint **/            shader  //[01]//
,               int /** GLsizei **/            count  //[02]//
,               const char**  /** GLchar:PTR_PTR**/    string  //[03]//
,               const int*  /** GLint:PTR **/      length  //[04]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glShaderSource]",        //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glShaderSource );;       //[  ]//
  /*X_RET*/( pfn_glShaderSource(          //[  ]//
    /**/                          shader  //[01]//
    ,                              count  //[02]//
    ,                             string  //[03]//
    ,                             length  //[04]//
    ));;                                  //[  ]//                     
} //[[glShaderSource]__________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glCompileShader)                    //[  ]//
(                                         //[  ]//
/**/            unsigned int /** GLuint **/            shader  //[01]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glCompileShader                       //[  ]//
pfn_glCompileShader;                      //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glCompileShader                           //[  ]//
(                                         //[  ]//
/**/            unsigned int /** GLuint **/            shader  //[01]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glCompileShader]",       //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glCompileShader );;      //[  ]//
  /*X_RET*/( pfn_glCompileShader(         //[  ]//
    /**/                          shader  //[01]//
    ));;                                  //[  ]//                     
} //[[glCompileShader]_________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glGetShaderiv)                      //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLuint **/ shader //[01]//
,                           unsigned int /** GLenum **/  pname //[02]//
,                           int*  /** GLint:PTR **/ params //[03]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGetShaderiv                         //[  ]//
pfn_glGetShaderiv;                        //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGetShaderiv                             //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLuint **/ shader //[01]//
,                           unsigned int /** GLenum **/  pname //[02]//
,                           int*  /** GLint:PTR **/ params //[03]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glGetShaderiv]",         //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGetShaderiv );;        //[  ]//
  /*X_RET*/( pfn_glGetShaderiv(           //[  ]//
    /**/                           shader //[01]//
    ,                               pname //[02]//
    ,                              params //[03]//
    ));;                                  //[  ]//                     
} //[[glGetShaderiv]___________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glGetShaderInfoLog)                 //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/       shader   //[01]//
,	                int  /** GLsizei **/   maxLength   //[02]//
,	                int* /** GLsizei **/      length   //[03]//
,	                char*  /** GLchar:PTR **/     infoLog   //[04]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGetShaderInfoLog                    //[  ]//
pfn_glGetShaderInfoLog;                   //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGetShaderInfoLog                        //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/       shader   //[01]//
,	                int  /** GLsizei **/   maxLength   //[02]//
,	                int* /** GLsizei **/      length   //[03]//
,	                char*  /** GLchar:PTR **/     infoLog   //[04]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glGetShaderInfoLog]",    //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGetShaderInfoLog );;   //[  ]//
  /*X_RET*/( pfn_glGetShaderInfoLog(      //[  ]//
    /**/                         shader   //[01]//
    ,                         maxLength   //[02]//
    ,                            length   //[03]//
    ,                           infoLog   //[04]//
    ));;                                  //[  ]//                     
} //[[glGetShaderInfoLog]______________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
unsigned int /** GLuint **/                                    //[  ]//
(*PFN_glCreateProgram)                    //[  ]//
(                                         //[  ]//
                                   void   //[00]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glCreateProgram                       //[  ]//
pfn_glCreateProgram;                      //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
unsigned int /** GLuint **/                                    //[  ]//
glCreateProgram                           //[  ]//
(                                         //[  ]//
                                   void   //[00]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glCreateProgram]",       //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glCreateProgram );;      //[  ]//
    return(  pfn_glCreateProgram(         //[  ]//
                                //|void|////[00]//
    ));;                                  //[  ]//                     
} //[[glCreateProgram]_________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glAttachShader)                     //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/  program   //[01]//
,                       unsigned int /** GLuint **/   shader   //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glAttachShader                        //[  ]//
pfn_glAttachShader;                       //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glAttachShader                            //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/  program   //[01]//
,                       unsigned int /** GLuint **/   shader   //[02]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glAttachShader]",        //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glAttachShader );;       //[  ]//
    /*NO*/(  pfn_glAttachShader(          //[  ]//
    /**/                        program   //[01]//
    ,                            shader   //[02]//
    ));;                                  //[  ]//                     
} //[[glAttachShader]__________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glLinkProgram)                      //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/  program   //[01]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glLinkProgram                         //[  ]//
pfn_glLinkProgram;                        //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glLinkProgram                             //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/  program   //[01]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glLinkProgram]",         //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glLinkProgram );;        //[  ]//
    /*NO*/(  pfn_glLinkProgram(           //[  ]//
    /**/                        program   //[01]//
    ));;                                  //[  ]//                     
} //[[glLinkProgram]___________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glGetProgramiv)                     //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/   program  //[01]//
,                       unsigned int /** GLenum **/     pname  //[02]//
,                       int*  /** GLint:PTR **/    params  //[03]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGetProgramiv                        //[  ]//
pfn_glGetProgramiv;                       //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGetProgramiv                            //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/   program  //[01]//
,                       unsigned int /** GLenum **/     pname  //[02]//
,                       int*  /** GLint:PTR **/    params  //[03]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glGetProgramiv]",        //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGetProgramiv );;       //[  ]//
    /*NO*/(  pfn_glGetProgramiv(          //[  ]//
    /**/                         program  //[01]//
    ,                              pname  //[02]//
    ,                             params  //[03]//
    ));;                                  //[  ]//                     
} //[[glGetProgramiv]__________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glGetProgramInfoLog)                //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/       program  //[01]//
,                   int  /** GLsizei **/    maxLength  //[02]//
,                   int* /** GLsizei **/       length  //[03]//
,                   char*  /** GLchar:PTR **/      infoLog  //[04]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGetProgramInfoLog                   //[  ]//
pfn_glGetProgramInfoLog;                  //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGetProgramInfoLog                       //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/       program  //[01]//
,                   int  /** GLsizei **/    maxLength  //[02]//
,                   int* /** GLsizei **/       length  //[03]//
,                   char*  /** GLchar:PTR **/      infoLog  //[04]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glGetProgramInfoLog]",   //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGetProgramInfoLog );;  //[  ]//
    /*NO*/(  pfn_glGetProgramInfoLog(     //[  ]//
    /**/                         program  //[01]//
    ,                          maxLength  //[02]//
    ,                             length  //[03]//
    ,                            infoLog  //[04]//
    ));;                                  //[  ]//                     
} //[[glGetProgramInfoLog]_____________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glDetachShader)                     //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/       program  //[01]//
,                   unsigned int /** GLuint **/        shader  //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glDetachShader                        //[  ]//
pfn_glDetachShader;                       //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glDetachShader                            //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/       program  //[01]//
,                   unsigned int /** GLuint **/        shader  //[02]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glDetachShader]",        //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glDetachShader );;       //[  ]//
    /*NO*/(  pfn_glDetachShader(          //[  ]//
    /**/                         program  //[01]//
    ,                             shader  //[02]//
    ));;                                  //[  ]//                     
} //[[glDetachShader]__________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glDeleteShader)                     //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/        shader  //[01]//      
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glDeleteShader                        //[  ]//
pfn_glDeleteShader;                       //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glDeleteShader                            //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/        shader  //[01]// 
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glDeleteShader]",        //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glDeleteShader );;       //[  ]//
    /*NO*/(  pfn_glDeleteShader(          //[  ]//
    /**/                          shader  //[01]//
    ));;                                  //[  ]//                     
} //[[glDeleteShader]__________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glClear)                            //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLbitfield **/  mask  //[01]//      
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glClear                               //[  ]//
pfn_glClear;                              //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glClear                                   //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLbitfield **/  mask  //[01]// 
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glClear]",               //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glClear );;              //[  ]//
    /*NO*/(  pfn_glClear(                 //[  ]//
    /**/                            mask  //[01]//
    ));;                                  //[  ]//                     
} //[[glClear]_________________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glUseProgram)                       //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/   program  //[01]//      
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glUseProgram                          //[  ]//
pfn_glUseProgram;                         //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glUseProgram                              //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLuint **/   program  //[01]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glUseProgram]",          //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glUseProgram );;         //[  ]//
    /*NO*/(  pfn_glUseProgram(            //[  ]//
    /**/                         program  //[01]//
    ));;                                  //[  ]//                     
} //[[glUseProgram]____________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glViewport)                         //[  ]//
(                                         //[  ]//
/**/                    int /** GLint **/        x    //[01]//
,                       int /** GLint **/        y    //[02]//
,                       int /** GLsizei **/  width    //[03]//
,                       int /** GLsizei **/ height    //[04]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glViewport                            //[  ]//
pfn_glViewport;                           //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glViewport                                //[  ]//
(                                         //[  ]//
/**/                    int /** GLint **/        x    //[01]//
,                       int /** GLint **/        y    //[02]//
,                       int /** GLsizei **/  width    //[03]//
,                       int /** GLsizei **/ height    //[04]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glViewport]",            //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glViewport );;           //[  ]//
    /*NO*/(  pfn_glViewport(              //[  ]//
    /**/                             x    //[01]//
    ,                                y    //[02]//
    ,                            width    //[03]//
    ,                           height    //[04]//
    ));;                                  //[  ]//                     
} //[[glViewport]______________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glClearColor)                       //[  ]//
(                                         //[  ]//
/**/                    float /** GLfloat **/  R_ed     //[01]//
,                       float /** GLfloat **/  G_reen   //[02]//
,                       float /** GLfloat **/  B_lue    //[03]//
,                       float /** GLfloat **/  A_alpha  //[04]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glClearColor                          //[  ]//
pfn_glClearColor;                         //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glClearColor                              //[  ]//
(                                         //[  ]//
/**/                    float /** GLfloat **/  R_ed     //[01]//
,                       float /** GLfloat **/  G_reen   //[02]//
,                       float /** GLfloat **/  B_lue    //[03]//
,                       float /** GLfloat **/  A_alpha  //[04]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glClearColor]",          //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glClearColor );;         //[  ]//
    /*NO*/(  pfn_glClearColor(            //[  ]//
    /**/                         R_ed     //[01]//
    ,                            G_reen   //[02]//
    ,                            B_lue    //[03]//
    ,                            A_alpha  //[04]//
    ));;                                  //[  ]//           
} //[[glClearColor]____________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glGenVertexArrays)                  //[  ]//
(                                         //[  ]//
/**/                    int /** GLsizei **/       n   //[01]//
,                       unsigned int*  /** GLuint:PTR **/   arrays   //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGenVertexArrays                     //[  ]//
pfn_glGenVertexArrays;                    //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGenVertexArrays                         //[  ]//
(                                         //[  ]//
/**/                    int /** GLsizei **/       n   //[01]//
,                       unsigned int*  /** GLuint:PTR **/   arrays   //[02]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glGenVertexArrays]",     //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGenVertexArrays );;    //[  ]//
    /*NO*/(  pfn_glGenVertexArrays(       //[  ]//
    /**/                              n   //[01]//
    ,                            arrays   //[02]//
    ));;                                  //[  ]//           
} //[[glGenVertexArrays]_______________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glBindVertexArray)                  //[  ]//
(                                         //[  ]//
                            unsigned int /** GLuint **/ array  //[01]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glBindVertexArray                     //[  ]//
pfn_glBindVertexArray;                    //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glBindVertexArray                         //[  ]//
(                                         //[  ]//
                            unsigned int /** GLuint **/ array  //[01]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glBindVertexArray]",     //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glBindVertexArray );;    //[  ]//
    /*NO*/(  pfn_glBindVertexArray(       //[  ]//
                                   array  //[01]//
    ));;                                  //[  ]//           
} //[[glBindVertexArray]_______________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glGenTextures)                      //[  ]//
(                                         //[  ]//
/**/int /** GLsizei **/ n_number_of_textures_to_make  //[01]//
,   unsigned int*  /** GLuint:PTR **/         texture_names_pointer  //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGenTextures                         //[  ]//
pfn_glGenTextures;                        //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGenTextures                             //[  ]//
(                                         //[  ]//
/**/
    int /** GLsizei **/                   //[01]//
    n_number_of_textures_to_make          //[01]//
,              
    unsigned int*  /** GLuint:PTR **/                                //[02]//
    texture_names_pointer                 //[02]//

){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glGenTextures]",         //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGenTextures );;        //[  ]//
    /*NO*/(  pfn_glGenTextures(           //[  ]//
    /**/    n_number_of_textures_to_make  //[01]//
    ,              texture_names_pointer  //[02]//
    ));;                                  //[  ]//           
} //[[glGenTextures]___________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glBindTexture)                      //[  ]//
(                                         //[  ]//
/**/        unsigned int /** GLenum **/  texture_binding_target//[01]//
,           unsigned int /** GLuint **/ texture_name_aka_handle//[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glBindTexture                         //[  ]//
pfn_glBindTexture;                        //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glBindTexture                             //[  ]//
(                                         //[  ]//
/**/        unsigned int /** GLenum **/  texture_binding_target//[01]//
,           unsigned int /** GLuint **/ texture_name_aka_handle//[02]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glBindTexture]",         //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glBindTexture );;        //[  ]//
    /*NO*/(  pfn_glBindTexture(           //[  ]//
    /**/            texture_binding_target//[01]//
    ,              texture_name_aka_handle//[02]//
    ));;                                  //[  ]//           
} //[[glBindTexture]___________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glTexParameteri)                    //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/ target //[01]//
,                           unsigned int /** GLenum **/  pname //[02]//
,                           int /** GLint **/   param //[03]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glTexParameteri                       //[  ]//
pfn_glTexParameteri;                      //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glTexParameteri                           //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/ target //[01]//
,                           unsigned int /** GLenum **/  pname //[02]//
,                           int /** GLint **/   param //[03]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glTexParameteri]",       //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glTexParameteri );;      //[  ]//
    /*NO*/(  pfn_glTexParameteri(         //[  ]//
    /**/                           target //[01]//
    ,                               pname //[02]//
    ,                               param //[03]//
    ));;                                  //[  ]//           
} //[[glTexParameteri]_________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glTexImage2D)                       //[  ]//
(                                         //[  ]//
/**/            unsigned int /** GLenum **/            target  //[01]//
,	            int /** GLint **/              level  //[02]//
,	            int /** GLint **/     internalformat  //[03]//
,	            int /** GLsizei **/            width  //[04]//
,	            int /** GLsizei **/           height  //[05]//
,	            int /** GLint **/             border  //[06]//
,	            unsigned int /** GLenum **/            format  //[07]//
,	            unsigned int /** GLenum **/              type  //[08]//
,	            const void* /** GLvoid:PTR **/       data  //[09]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glTexImage2D                          //[  ]//
pfn_glTexImage2D;                         //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glTexImage2D                              //[  ]//
(                                         //[  ]//
/**/            unsigned int /** GLenum **/            target  //[01]//
,	            int /** GLint **/              level  //[02]//
,	            int /** GLint **/     internalformat  //[03]//
,	            int /** GLsizei **/            width  //[04]//
,	            int /** GLsizei **/           height  //[05]//
,	            int /** GLint **/             border  //[06]//
,	            unsigned int /** GLenum **/            format  //[07]//
,	            unsigned int /** GLenum **/              type  //[08]//
,	            const void* /** GLvoid:PTR **/       data  //[09]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glTexImage2D]",          //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glTexImage2D );;         //[  ]//
    /*NO*/(  pfn_glTexImage2D(            //[  ]//
    /**/                          target  //[01]//
    ,	                           level  //[02]//
    ,	                  internalformat  //[03]//
    ,	                           width  //[04]//
    ,	                          height  //[05]//
    ,	                          border  //[06]//
    ,	                          format  //[07]//
    ,	                            type  //[08]//
    ,	                            data  //[09]//
    ));;                                  //[  ]//           
} //[[glTexImage2D]____________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glActiveTexture)                    //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLenum **/   texture  //[01]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glActiveTexture                       //[  ]//
pfn_glActiveTexture;                      //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glActiveTexture                           //[  ]//
(                                         //[  ]//
/**/                    unsigned int /** GLenum **/   texture  //[01]//
){                                        //[  ]//                           
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    /**/   "[pfn_glActiveTexture]",       //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glActiveTexture );;      //[  ]//
    /*NO*/(  pfn_glActiveTexture(         //[  ]//
    /**/                         texture  //[01]//
    ));;                                  //[  ]//           
} //[[glActiveTexture]_________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
int /** GLint **/                                     //[  ]//
(*PFN_glGetUniformLocation)               //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/         program//[01]//
,                   const char*  /** GLchar:PTR **/     name//[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGetUniformLocation                  //[  ]//
pfn_glGetUniformLocation;                 //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
int /** GLint **/                                     //[  ]//
glGetUniformLocation                      //[  ]//
(                                         //[  ]//
/**/                unsigned int /** GLuint **/         program//[01]//
,                   const char*  /** GLchar:PTR **/     name//[02]//
){                                        //[  ]//   
    int /** GLint **/ ret;                            //[  ]//
                                          //[  ]//
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    //[[[[[[[pfn]]]]]]]////[___________]////[  ]//
    /**/   "[pfn_glGetUniformLocation]",  //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGetUniformLocation );; //[  ]//
    ret=(    pfn_glGetUniformLocation(    //[  ]//
    /**/                           program//[01]//
    ,                                 name//[02]//
    ));;                                  //[  ]//
                                          //[  ]//
    return( ret );                        //[  ]//
                                          //[  ]//
} //[[glGetUniformLocation]____________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glUniform1i)                        //[  ]//
(                                         //[  ]//
/**/                        int /** GLint **/ location//[01]//
,                           int /** GLint **/       v0//[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glUniform1i                           //[  ]//
pfn_glUniform1i;                          //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glUniform1i                               //[  ]//
(                                         //[  ]//
/**/                        int /** GLint **/ location//[01]//
,                           int /** GLint **/       v0//[02]//
){                                        //[  ]//   
    /**VOID ret;**/                       //[  ]//
                                          //[  ]//
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    //[[[[[[[pfn]]]]]]]////[___________]////[  ]//
    /**/   "[pfn_glUniform1i]",           //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glUniform1i );;          //[  ]//
   /*NO*/(   pfn_glUniform1i(             //[  ]//
    /**/                          location//[01]//
    ,                                   v0//[02]//
    ));;                                  //[  ]//
                                          //[  ]//
    /**return( ret );**/                  //[  ]//
                                          //[  ]//
} //[[glUniform1i]_____________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glPixelStorei)                      //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/  pname //[01]//
,                           int /** GLint **/   param //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glPixelStorei                         //[  ]//
pfn_glPixelStorei;                        //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glPixelStorei                             //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/  pname //[01]//
,                           int /** GLint **/   param //[02]//
){                                        //[  ]//   
    /**VOID ret;**/                       //[  ]//
                                          //[  ]//
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    //[[[[[[[pfn]]]]]]]////[___________]////[  ]//
    /**/   "[pfn_glPixelStorei]",         //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glPixelStorei );;        //[  ]//
   /*NO*/(   pfn_glPixelStorei(
    /**/                            pname //[01]//
    ,                               param //[02]//
    ));;                                  //[  ]//
                                          //[  ]//
    /**return( ret );**/                  //[  ]//
                                          //[  ]//
} //[[glPixelStorei]___________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glEnable)                           //[  ]//
(                                         //[  ]//
/**/        unsigned int /** GLenum **/  cap_is_for_capability //[01]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glEnable                              //[  ]//
pfn_glEnable;                             //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glEnable                                  //[  ]//
(                                         //[  ]//
/**/        unsigned int /** GLenum **/  cap_is_for_capability //[01]//
){                                        //[  ]//   
    /**VOID ret;**/                       //[  ]//
                                          //[  ]//
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    //[[[[[[[pfn]]]]]]]////[___________]////[  ]//
    /**/   "[pfn_glEnable]",              //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glEnable );;             //[  ]//
   /*NO*/(   pfn_glEnable(                //[  ]//
    /**/            cap_is_for_capability //[01]//
    ));;                                  //[  ]//
                                          //[  ]//
    /**return( ret );**/                  //[  ]//
                                          //[  ]//
} //[[glEnable]________________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glFinish)                           //[  ]//
(                                         //[  ]//
        /** ZERO_PARAMETERS **/           //[00]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glFinish                              //[  ]//
pfn_glFinish;                             //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glFinish                                  //[  ]//
(                                         //[  ]//
        /** ZERO_PARAMETERS **/           //[00]//
){                                        //[  ]//   
    /**VOID ret;**/                       //[  ]//
                                          //[  ]//
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    //[[[[[[[pfn]]]]]]]////[___________]////[  ]//
    /**/   "[pfn_glFinish]",              //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glFinish );;             //[  ]//
   /*NO*/(   pfn_glFinish(                //[  ]//
        /** ZERO_PARAMETERS **/           //[00]//
    ));;                                  //[  ]//
                                          //[  ]//
    /**return( ret );**/                  //[  ]//
                                          //[  ]//
} //[[glFinish]________________________]////[  ]//
//:--------------------------------------------://
//:--------------------------------------------://
typedef //[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
void                                      //[  ]//
(*PFN_glGetIntegerv )                     //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/  pname //[01]//
,                           int*  /** GLint:PTR **/   data //[02]//
); //[- - - - - - - - - - - - - - - - -]////[  ]//
                                          //[  ]//
//[¯|¯|¯|¯|¯|¯|¯|¯|¯¯¯¯|¯|¯|¯|¯|¯|¯|¯|¯]////[  ]//
                                          //[  ]//
PFN_glGetIntegerv                         //[  ]//
pfn_glGetIntegerv ;                       //[  ]//
                                          //[  ]//
//[_|_|_|_|_|_|_|_|____|_|_|_|_|_|_|_|_]////[  ]//
void                                      //[  ]//
glGetIntegerv                             //[  ]//
(                                         //[  ]//
/**/                        unsigned int /** GLenum **/  pname //[01]//
,                           int*  /** GLint:PTR **/   data //[02]//
){                                        //[  ]//   
    /**VOID ret;**/                       //[  ]//
                                          //[  ]//
    AAC2020_GLEBIND_FuncPointerSated(                //[  ]//
    //[[[[[[[pfn]]]]]]]////[___________]////[  ]//
    /**/   "[pfn_glGetIntegerv ]",        //[  ]//
  (AAC2020_GLEBIND_FUNC)pfn_glGetIntegerv  );;       //[  ]//
   /*NO*/(   pfn_glGetIntegerv (          //[  ]//
    /**/                            pname //[01]//
    ,                                data //[02]//
    ));;                                  //[  ]//
                                          //[  ]//
    /**return( ret );**/                  //[  ]//
                                          //[  ]//
} //[[glGetIntegerv ]__________________]////[  ]//
//:--------------------------------------------://

//[][][][][][][][][][][][][][][][][][][][][][][]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//#END[ FUNCTION_PROTOTYPES_AND_WRAPPERS ]=====#//

//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - ://

int
aac2020_glebind_Alert( const char* alert_message ){

    //:WhatWentWrong?
    printf( "[aac2020_glebind_Alert:alert_message]:%s\n"
                        ,alert_message );;
    fflush(stdout);


    //:CUT_AND_PASTED_FROM:AAC2020_GINAWIN:==================://

        aac2020_ginawin_FUNCTION_POINTERS_struct*
        FP=&(aac2020_ginawin_function_pointers);

        if(NULL==FP->USER32.MessageBoxW){
            #define H aac2020_ginawin_Halt
            H( "[AAC2020_GLEBIND:ForgotToInitMsgBoxW]"  );
            #undef  H
        };;

        struct aac2020_ginawin_data_USER32*         
        U32D = &(                             
            FP->USER32.DATA                   
        );;

        int msgboxID =(
        FP->USER32.MessageBoxW(
            NULL
        ,
            L"You forgot to do something in code.\n"
            L"strcat is a lot of work to make a  \n"
            L"custom message. So check the       \n"
            L"console for what went wrong.       \n"
        ,
            L"[!!CHECK_THE_CONSOLE!!]"
        ,
            (
                U32D -> mb_iconexclamation | 
                U32D -> mb_ok              |
            0)
        ));;

        return msgboxID;    

    //:==================:CUT_AND_PASTED_FROM:AAC2020_GINAWIN://

} 

//: - - - - - - - - - - - - - ---- - - - - - - - - - - - - - ://

//[][][][][][][][][][][][][][][][][][][][][][][]//



struct
aac2020_glebind_library_container{

    void* /** HGLRC **/
    handle_to_gl_rendering_context;

    struct 
    aac2020_glebind_BBT_is_BUFFER_BINDING_TARGET{

        unsigned int /** GLenum **/ gl_array_buffer; //: 0x8892

    }BBT;struct aac2020_glebind_BBT_is_BUFFER_BINDING_TARGET*
                            BUFFER_BINDING_TARGET;

    //|-  --  --  --  --  --  --  --  --  --  -|//

    struct
    aac2020_glebind_BD_is_BUFFER_DATA{
        
        //: The data store contents will be
        //: modified once and used many times as
        //: the source for GL drawing commands.
        unsigned int /** GLenum **/ gl_static_draw; //: 0x88E4

    }BD;struct aac2020_glebind_BD_is_BUFFER_DATA*
                          BUFFER_DATA;

    //|-  --  --  --  --  --  --  --  --  --  -|//

    struct
    aac2020_glebind_ERR_is_ERROR_FLAGS{

        unsigned int /** GLenum **/ gl_no_error; //: 0

    }ERR;struct aac2020_glebind_ERR_is_ERROR_FLAGS*
                            ERROR_FLAGS;

    //|-  --  --  --  --  --  --  --  --  --  -|//
    //|                                        |//
    //|  Reason I am calling them:             |//
    //|  "Common Enum Types"                   |//
    //|  khronos.org/opengl/wiki/OpenGL_Type   |//
    //|___                                  ___|//
    struct 
    aac2020_glebind_TYP_is_COMMON_ENUM_TYPES{

        unsigned int /** GLenum **/ gl_float; //: 0x1406

    }TYP;struct aac2020_glebind_TYP_is_COMMON_ENUM_TYPES*
                            COMMON_ENUM_TYPES;

    //|========================================|//
    struct 
    aac2020_glebind_BOL_is_BOOLEAN_CONSTANTS{

        unsigned char /** GLboolean **/  gl_true ; //:  1
        unsigned char /** GLboolean **/  gl_false; //:  0

    }BOL;struct aac2020_glebind_BOL_is_BOOLEAN_CONSTANTS*
                            BOOLEAN_CONSTANTS;
    //|========================================|//

    struct 
    aac2020_glebind_MOD_is_DRAW_MODES{

        unsigned int /** GLenum **/ gl_triangles     ; //:0x0004
        unsigned int /** GLenum **/ gl_triangle_fan  ; //:0x0006
        unsigned int /** GLenum **/ gl_triangle_strip; //:0x0005

    }MOD;struct aac2020_glebind_MOD_is_DRAW_MODES*
                            DRAW_MODES;

    //|========================================|//

    struct 
    aac2020_glebind_ST_is_SHADER_TYPES{

        unsigned int /** GLenum **/ gl_vertex_shader  ; //:??
        unsigned int /** GLenum **/ gl_fragment_shader; //:??

    }ST;struct aac2020_glebind_ST_is_SHADER_TYPES*
                          SHADER_TYPES;

    //:Functions:
    //|========================================|//

    struct
    aac2020_glebind_SPN_is_SHADER_PARAM_NAMES{

        unsigned int /** GLenum **/ gl_compile_status ;
        unsigned int /** GLenum **/ gl_info_log_length;

    }SPN;struct aac2020_glebind_SPN_is_SHADER_PARAM_NAMES*
                            SHADER_PARAM_NAMES;

    //|========================================|//

    struct
    aac2020_glebind_PPN_is_PROGRAM_PARAM_NAMES{

        unsigned int /** GLenum **/ gl_link_status;
        unsigned int /** GLenum **/ gl_info_log_length;

    }PPN;struct aac2020_glebind_PPN_is_PROGRAM_PARAM_NAMES*
                            PROGRAM_PARAM_NAMES;

    //|========================================|//
    struct
    aac2020_glebind_MAS_is_BITFIELD_MASKS{

        unsigned int /** GLbitfield **/ gl_color_buffer_bit;

    }MAS;struct aac2020_glebind_MAS_is_BITFIELD_MASKS*
                            BITFIELD_MASKS;

    //|========================================|//
    //|Lets stop making shorthand and longhand |//
    //|ways to access structs. Use longhanded. |// 
    //|If you need shorthand, use a macro      |// 
    //|at the site where you need it.          |//
    //|Synonyms make it harder to find         |//
    //|references in the code.                 |//
    //|-  --  --  --  --  --  --  --  --  --  -|//


    struct
    aac2020_glebind_TEXTURE_is_for_TEXTURE{

        //: L0 == Nesting Level ZERO(0); ####################://
        //: L1 == Nesting Level ONE(1);  ####################://
        //: SL0:StructLevel0 ################################://
        //: SL1:StructLevel1 ################################://
        #define SL0( A     ) struct A            //:#########://
        #define SL1( A , B ) struct A ## _ ## B  //:#########://

        struct
        aac2020_glebind_SLOT_if_for_TEXTURE_UNIT_SLOT{
    
            //:We only need this one. To get
            //:other slots simply add an
            //:offset. All slots are contiguously
            //:numbered.
            unsigned int /** GLenum **/ gl_texture0; //:0x84C0

        }SLOT;
        
        //+ Moved to:                          +//
        //+ TEXTURE.TEX_TYP.GPU_DEV            +//
        //- struct                                 -//
        //- aac2020_glebind_texture_BINDING_TARGETS{          -//
        //-                                        -//
        //-     unsigned int /** GLenum **/ gl_texture_2d; //: 0x0DE1   -//
        //-                                        -//
        //- }BINDING_TARGETS;                      -//

        SL0(aac2020_glebind_TEX_LOD_is_LEVEL_OF_DETAIL){
        SL1(aac2020_glebind_TEX_LOD_is_LEVEL_OF_DETAIL,gpu){
        //:LODsUsedBy:openGL/device/gpu
        
            int zero;
        
        }GPU_DEV;
        SL1(aac2020_glebind_TEX_LOD_is_LEVEL_OF_DETAIL,cpu){
        //:LODsUsedBy:client/host/cpu

            int unused;

        }CPU_HOS;
        }TEX_LOD;
        SL0(aac2020_glebind_TEX_TYP_is_for_TEXTURE_TYPE){
        SL1(aac2020_glebind_TEX_TYP_is_for_TEXTURE_TYPE,gpu){
        //:TextureTypesUsedBy:openGL/device/gpu
        
            unsigned int /** GLenum **/ gl_texture_2d; //: 0x0DE1
        
        }GPU_DEV;
        SL1(aac2020_glebind_TEX_TYP_is_for_TEXTURE_TYPE,cpu){
        //:TextureTypesUsedBy:client/host/cpu

            int unused;

        }CPU_HOS;
        }TEX_TYP;
        SL0(aac2020_glebind_PIX_FMT_is_for_PIXEL_FORMAT){
        SL1(aac2020_glebind_PIX_FMT_is_for_PIXEL_FORMAT,gpu){
        //:PixelFormatsUsedBy:openGL/device/gpu
        //:(Also known as "Internal_Format")
        //:(Also known as "Internal Format")
        
            //- GLint gl_rgba8; //: 0x8058     -//

            int /** GLint **/ gl_rgba8ui; //: 0x8D7C
        
        }GPU_DEV;
        SL1(aac2020_glebind_PIX_FMT_is_for_PIXEL_FORMAT,cpu){
        //:PixelFormatsUsedBy:client/host/cpu

            //- GLint gl_rgba; //: 0x1908      -//
            
            int /** GLint **/ gl_rgba_integer; //: 0x8D99

        }CPU_HOS;
        }PIX_FMT;
        SL0(aac2020_glebind_PIX_TYP_is_for_PIXEL_TYPE){
        SL1(aac2020_glebind_PIX_TYP_is_for_PIXEL_TYPE,gpu){
        //:PixelTypesUsedBy:openGL/device/gpu

        
            int unused;
        
        }GPU_DEV;
        SL1(aac2020_glebind_PIX_TYP_is_for_PIXEL_TYPE,cpu){
        //:PixelTypesUsedBy:client/host/cpu

            unsigned int /** GLenum **/ gl_unsigned_byte; //:0x1401

        }CPU_HOS;
        }PIX_TYP;
        SL0(aac2020_glebind_PIX_DAT_is_for_PIXEL_DATA){
        SL1(aac2020_glebind_PIX_DAT_is_for_PIXEL_DATA,gpu){
        //:PixelTypesUsedBy:openGL/device/gpu

        
            int unused;
        
        }GPU_DEV;
        SL1(aac2020_glebind_PIX_DAT_is_for_PIXEL_DATA,cpu){
        //:PixelTypesUsedBy:client/host/cpu

            void* /** GLvoid:PTR **/ pix_nul; //:Null_Data

        }CPU_HOS;
        }PIX_DAT;
        SL0(aac2020_glebind_BORDER_is_for_TEXTURE_BORDER){
            int /** GLint **/ must_be_zero_for_teximage2d;
        }BORDER;
        SL0(aac2020_glebind_texture_PARAMETERS){

            struct
            aac2020_glebind_texture_parameter_NAMES{

                #define T unsigned int /** GLenum **/ 
                T gl_texture_min_filter; //:0x2801
                T gl_texture_mag_filter; //:0x2800
                T gl_texture_wrap_s    ; //:0x2802
                T gl_texture_wrap_t    ; //:0x2803
                #undef T
            }NAM;

            struct
            aac2020_glebind_texture_parameter_VALUES{
                int /** GLint **/ gl_nearest       ;//:0x2600
                int /** GLint **/ gl_clamp_to_edge ;//:0x812F
            }VAL;

        }PARAMETER;

        //:Example Usage:
        //+    GLint which_texture_iid;        +//
        //+    glGetIntegerv(                  +//
        //+       AAC2020_GLEBIND.TEXTURE.QUERY.          +//
        //+       gl_texture_binding_2d        +//
        //+    ,                               +//
        //+       &(which_texture_iid)         +//
        //+    );;                             +//
        struct
        aac2020_glebind_texture_parameters_QUERY{
            
            //:Thought I wanted this for use
            //:with "GL_TEXTURE_BINDING_2D".
            //:But that gives me the
            //:texture's iid, and NOT the
            //:active texture unit.

            #define T unsigned int /** GLenum **/
            T gl_texture_binding_2d; //:0x8069
            T gl_active_texture;     //:0x84E0
            #undef  T

            //[ exout:"example_output"_________]//
            //! You want what texture handle   !//
            //! was currently bound to texture !//
            //! [slot/unit] using:             !//
            //! glBindTexture                  !//
            //| query: GL_TEXTURE_BINDING_2D   |//
            //| exout: texture int id handle.  |//
            //[-  --  --  --  --  --  --  --  -]//
            //! You want what texture uint was !//
            //! last set with: glActiveTexture !//
            //| query: GL_ACTIVE_TEXTURE       |//
            //| exout: GL_TEXTURE0             |//

            //[ DOCUMENTATION QUOTE:           ]//
            //[ GL_ACTIVE_TEXTURE:             ]//
            //| data returns a single value    |//
            //| indicating the active          |//
            //| multitexture unit. The initial |//
            //| value is GL_TEXTURE0.          |//

        }QUERY;

        #undef  SL0  //:#####################################://
        #undef  SL1  //:#####################################://

    }TEXTURE;
    //|-  --  --  --  --  --  --  --  --  --  -|//
    
    struct aac2020_glebind_UNIFORM_is_for_UNIFORMS{

        //: Though it is "0x826E" in my glcore.arb
        //: header, I will define it as the
        //: minimum gauranteed value of 1024
        //: according to:
        //| www.khronos.org/opengl/wiki/       |//
        //| Layout_Qualifier_(GLSL)|//         |//

        int /** GLint **/ gl_max_uniform_locations; //:0x826E

    }UNIFORM; //| <--Try to keep everything    |//
              //|    SINGULAR grammatically.   |//

    struct aac2020_glebind_ALIGNMENT_is_for_ALIGNMENT{
        
        //:For use with:
        //: glPixelStorei

        unsigned int /** GLenum **/ gl_unpack_alignment; //:0x0CF5
        
    }ALIGNMENT;

    //:Some constants are duplicated in different
    //:areas. But I like how it is more explicit
    //:about the usage of the value.
    struct aac2020_glebind_CAPABILITIES_you_can_enable{

        unsigned int /** GLenum **/ gl_texture_2d; //: 0x0DE1

    }CAPABILITY; //:<--SINGULAR plurality!



        PFN_glGenBuffers 
            glGenBuffers;

        PFN_glBindBuffer
            glBindBuffer;

        PFN_glBufferData
            glBufferData;

        PFN_glGetError
            glGetError;

        PFN_glEnableVertexAttribArray
            glEnableVertexAttribArray;

        PFN_glVertexAttribPointer
            glVertexAttribPointer;

        PFN_glDrawArrays
            glDrawArrays;

        PFN_glDisableVertexAttribArray
            glDisableVertexAttribArray;

        PFN_glCreateShader
            glCreateShader;

        PFN_glShaderSource
            glShaderSource;

        PFN_glCompileShader
            glCompileShader;

        PFN_glGetShaderiv
            glGetShaderiv;

        PFN_glGetShaderInfoLog
            glGetShaderInfoLog;

        PFN_glCreateProgram
            glCreateProgram;

        PFN_glAttachShader
            glAttachShader;

        PFN_glLinkProgram
            glLinkProgram;

        PFN_glGetProgramiv
            glGetProgramiv;

        PFN_glGetProgramInfoLog
            glGetProgramInfoLog;

        PFN_glDetachShader
            glDetachShader;

        PFN_glDeleteShader
            glDeleteShader;

        PFN_glClear
            glClear;

        PFN_glUseProgram
            glUseProgram;

        PFN_glViewport
            glViewport;
    
        PFN_glClearColor
            glClearColor;

        PFN_glGenVertexArrays
            glGenVertexArrays;

        PFN_glBindVertexArray
            glBindVertexArray;

        PFN_glGenTextures
            glGenTextures;

        PFN_glBindTexture
            glBindTexture;

        PFN_glTexParameteri
            glTexParameteri;

        PFN_glTexImage2D
            glTexImage2D;

        PFN_glActiveTexture
            glActiveTexture;

        PFN_glGetUniformLocation
            glGetUniformLocation;

        PFN_glUniform1i
            glUniform1i;

        PFN_glPixelStorei
            glPixelStorei;

        PFN_glEnable  //:Maybe I need this to get
            glEnable; //:texture sampler working?

        PFN_glFinish
            glFinish;

        PFN_glGetIntegerv
            glGetIntegerv;

    //|========================================|//

}AAC2020_GLEBIND={
    .BUFFER_BINDING_TARGET=&( AAC2020_GLEBIND.BBT  )
   ,.BUFFER_DATA          =&( AAC2020_GLEBIND.BD   )
   ,.ERROR_FLAGS          =&( AAC2020_GLEBIND.ERR  )
   ,.COMMON_ENUM_TYPES    =&( AAC2020_GLEBIND.TYP  )
   ,.BOOLEAN_CONSTANTS    =&( AAC2020_GLEBIND.BOL  )
   ,.DRAW_MODES           =&( AAC2020_GLEBIND.MOD  )
   ,.SHADER_TYPES         =&( AAC2020_GLEBIND.ST   )
   ,.SHADER_PARAM_NAMES   =&( AAC2020_GLEBIND.SPN  )
   ,.PROGRAM_PARAM_NAMES  =&( AAC2020_GLEBIND.PPN  )
   ,.BITFIELD_MASKS       =&( AAC2020_GLEBIND.MAS  )
    
   ,.BBT.gl_array_buffer    = 0x8892 //|IIIIIII|//
   ,.BD .gl_static_draw     = 0x88E4 //|IIIIIII|//
   ,.ERR.gl_no_error        = 0x0    //|IIIIIII|//
   ,.TYP.gl_float           = 0x1406 //|IIIIIII|//
   ,.BOL.gl_true            = 1      //|IIIIIII|//
   ,.BOL.gl_false           = 0      //|IIIIIII|//
   ,.MOD.gl_triangles       = 0x0004 //|IIIIIII|//
   ,.MOD.gl_triangle_fan    = 0x0006 //|IIIIIII|//
   ,.MOD.gl_triangle_strip  = 0x0005 //|IIIIIII|//
   ,.ST .gl_vertex_shader   = 0x8B31 //|IIIIIII|//
   ,.ST .gl_fragment_shader = 0x8B30 //|IIIIIII|//
   ,.SPN.gl_compile_status  = 0x8B81 //|IIIIIII|//
   ,.SPN.gl_info_log_length = 0x8B84 //|IIIIIII|//
   ,.PPN.gl_link_status     = 0x8B82 //|IIIIIII|//
   ,.PPN.gl_info_log_length = 0x8B84 //|IIIIIII|//
   ,.MAS.gl_color_buffer_bit= 0x00004000 //|III|//
                              //|IIIIIIIIIIIIII|//
   ,.TEXTURE.TEX_TYP.GPU_DEV  //|IIIIIIIIIIIIII|//
    .gl_texture_2d = 0x0DE1   //|IIIIIIIIIIIIII|//

   ,.TEXTURE.TEX_LOD.GPU_DEV.zero = 0

   //- ,.TEXTURE.PIX_FMT.GPU_DEV               -//
   //-  .gl_rgba8=0x8058                       -//
   ,.TEXTURE.PIX_FMT.GPU_DEV.
     gl_rgba8ui =0x8D7C 

   //- ,.TEXTURE.PIX_FMT.CPU_HOS.              -//
   //-   gl_rgba =0x1908                       -//

   ,.TEXTURE.PIX_FMT.CPU_HOS.            
     gl_rgba_integer = 0x8D99              

   ,.TEXTURE.PIX_TYP.CPU_HOS.
     gl_unsigned_byte = 0x1401

   ,.TEXTURE.PIX_DAT.CPU_HOS.pix_nul=NULL

   ,.TEXTURE.BORDER
    .must_be_zero_for_teximage2d = 0

                                         //|III|//
    #define TPN TEXTURE.PARAMETER.NAM    //|III|//
   ,.TPN.gl_texture_min_filter = 0x2801  //|III|//
   ,.TPN.gl_texture_mag_filter = 0x2800  //|III|//
   ,.TPN.gl_texture_wrap_s     = 0x2802  //|III|//
   ,.TPN.gl_texture_wrap_t     = 0x2803  //|III|//
    #undef TPN                           //|III|//
    #define TPV TEXTURE.PARAMETER.VAL    //|III|//
   ,.TPV.gl_nearest            = 0x2600  //|III|//
   ,.TPV.gl_clamp_to_edge      = 0x812F  //|III|//
    #undef TPV                           //|III|//

   ,.TEXTURE.SLOT.gl_texture0  = 0x84C0  //|III|//

   ,.UNIFORM.gl_max_uniform_locations = 1024

   ,.ALIGNMENT.gl_unpack_alignment = 0x0CF5

   ,.CAPABILITY.gl_texture_2d = 0x0DE1

   ,.TEXTURE.QUERY.gl_texture_binding_2d=0x8069
   ,.TEXTURE.QUERY.gl_active_texture    =0x84E0

    ,//[comma]//

    .glGenBuffers=&(  //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
     glGenBuffers   ) //|______________________|//

    ,//[comma]//

    .glBindBuffer=&(  //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
     glBindBuffer   ) //|______________________|//

    ,//[comma]//

    .glBufferData=&(  //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
     glBufferData   ) //|______________________|//

    ,//[comma]//

    .glGetError  =&(  //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
     glGetError     ) //|______________________|//

    ,//[comma]//

    .glEnableVertexAttribArray =&(  //|¯¯¯¯¯¯¯¯|//
     glEnableVertexAttribArray    ) //|________|//

    ,//[comma]//

    .glVertexAttribPointer     =&(  //|¯¯¯¯¯¯¯¯|//
     glVertexAttribPointer        ) //|________|//

    ,//[comma]//

    .glDrawArrays              =&(  //|¯¯¯¯¯¯¯¯|//
     glDrawArrays                 ) //|________|//

    ,//[comma]//

    .glDisableVertexAttribArray=&(  //|¯¯¯¯¯¯¯¯|//
     glDisableVertexAttribArray   ) //|________|//

    ,//[comma]//

    .glCreateShader            =&(  //|¯¯¯¯¯¯¯¯|//
     glCreateShader               ) //|________|//

    ,//[comma]//

    .glShaderSource            =&(  //|¯¯¯¯¯¯¯¯|//
     glShaderSource               ) //|________|//

    ,//[comma]//

    .glCompileShader           =&(  //|¯¯¯¯¯¯¯¯|//
     glCompileShader              ) //|________|//

    ,//[comma]//

    .glGetShaderiv             =&(  //|¯¯¯¯¯¯¯¯|//
     glGetShaderiv                ) //|________|//

    ,//[comma]//

    .glGetShaderInfoLog        =&(  //|¯¯¯¯¯¯¯¯|//
     glGetShaderInfoLog           ) //|________|//

    ,//[comma]//

    .glCreateProgram           =&(  //|¯¯¯¯¯¯¯¯|//
     glCreateProgram              ) //|________|//

    ,//[comma]//

    .glAttachShader            =&(  //|¯¯¯¯¯¯¯¯|//
     glAttachShader               ) //|________|//

    ,//[comma]//

    .glLinkProgram             =&(  //|¯¯¯¯¯¯¯¯|//
     glLinkProgram                ) //|________|//
    
    ,//[comma]//

    .glGetProgramiv            =&(  //|¯¯¯¯¯¯¯¯|//
     glGetProgramiv               ) //|________|//

    ,//[comma]//

    .glGetProgramInfoLog       =&(  //|¯¯¯¯¯¯¯¯|//
     glGetProgramInfoLog          ) //|________|//

    ,//[comma]//

    .glDetachShader            =&(  //|¯¯¯¯¯¯¯¯|//
     glDetachShader               ) //|________|//

    ,//[comma]//

    .glDeleteShader            =&(  //|¯¯¯¯¯¯¯¯|//
     glDeleteShader               ) //|________|//

    ,//[comma]//

    .glClear                   =&(  //|¯¯¯¯¯¯¯¯|//
     glClear                      ) //|________|//

    ,//[comma]//

    .glUseProgram              =&(  //|¯¯¯¯¯¯¯¯|//
     glUseProgram                 ) //|________|//

    ,//[comma]//

    .glViewport                =&(  //|¯¯¯¯¯¯¯¯|//
     glViewport                   ) //|________|//

    ,//[comma]//

    .glClearColor              =&(  //|¯¯¯¯¯¯¯¯|//
     glClearColor                 ) //|________|//

    ,//[comma]//

    .glGenVertexArrays         =&(  //|¯¯¯¯¯¯¯¯|//
     glGenVertexArrays            ) //|________|//

    ,//[comma]//

    .glBindVertexArray         =&(  //|¯¯¯¯¯¯¯¯|//
     glBindVertexArray            ) //|________|//

    ,//[comma]//

    .glGenTextures             =&(  //|¯¯¯¯¯¯¯¯|//
     glGenTextures                ) //|________|//

    ,//[comma]//

    .glBindTexture             =&(  //|¯¯¯¯¯¯¯¯|//
     glBindTexture                ) //|________|//

    ,//[comma]//

    .glTexParameteri           =&(  //|¯¯¯¯¯¯¯¯|//
     glTexParameteri              ) //|________|//

    ,//[comma]//

    .glTexImage2D              =&(  //|¯¯¯¯¯¯¯¯|//
     glTexImage2D                 ) //|________|//

    ,//[comma]//

    .glActiveTexture           =&(  //|¯¯¯¯¯¯¯¯|//
     glActiveTexture              ) //|________|//

    ,//[comma]//

    .glGetUniformLocation      =&(  //|¯¯¯¯¯¯¯¯|//
     glGetUniformLocation         ) //|________|//

    ,//[comma]//

    .glUniform1i               =&(  //|¯¯¯¯¯¯¯¯|//
     glUniform1i                  ) //|________|//

    ,//[comma]//

    .glPixelStorei             =&(  //|¯¯¯¯¯¯¯¯|//
     glPixelStorei                ) //|________|//

    ,//[comma]//

    .glEnable                  =&(  //|¯¯¯¯¯¯¯¯|//
     glEnable                     ) //|________|//

    ,//[comma]//

    .glFinish                  =&(  //|¯¯¯¯¯¯¯¯|//
     glFinish                     ) //|________|//

    ,//[comma]//

    .glGetIntegerv             =&(  //|¯¯¯¯¯¯¯¯|//
     glGetIntegerv                ) //|________|//
};

void* /** HGLRC **/
AAC2020_GLEBIND_GetRenderingContext(){

    //:windef.h: DECLARE_HANDLE(HGLRC);
    void* /** HGLRC **/ 
    ren_con=(
        AAC2020_GLEBIND.handle_to_gl_rendering_context
    );;
    if(NULL==ren_con){
        aac2020_glebind_Halt("[Null:HGLRC]");
    };;

    return( ren_con );
} //[AAC2020_GLEBIND_GetRenderingContext]//

void* /** HDC **/
AAC2020_GLEBIND_GetDeviceContext(){
    
    void* /** HDC **/
    window_associated_with_rendering_context=(
        AAC2020_GINAWIN_GetWinDC()
    );;

    if(
        NULL
        ==
        window_associated_with_rendering_context
    ){
        aac2020_glebind_Halt("[Null:HDC]");
    };;

    return(
        window_associated_with_rendering_context
    );;
} //[AAC2020_GLEBIND_GetDeviceContext]//


//[][][][][][][][][][][][][][][][][][][][][][][]//

void AAC2020_GLEBIND_GetFuncsFromDLL(){

    //:So we can use shorthand variable:
    typedef
    AAC2020_GLEBIND_FUNC (*F)(const char*);
    F f = &(AAC2020_GLEBIND_LoadFunc);


        pfn_wglGetProcAddress=(
        PFN_wglGetProcAddress)f(
           "wglGetProcAddress"  );;

        pfn_wglGetCurrentContext=(
        PFN_wglGetCurrentContext)f(
           "wglGetCurrentContext"  );;

        pfn_wglCreateContext=(
        PFN_wglCreateContext)f(
           "wglCreateContext"  );;

        pfn_wglMakeCurrent=(
        PFN_wglMakeCurrent)f(
           "wglMakeCurrent"  );;


    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
    //|You must call wglMakeCurrent after      |//
    //|m_hDC has been setup.                   |//
    //|stackoverflow.com/questions/2348332     |//
    //|SC[ mc-after-dc-url ]                   |//
    //|                                        |//
    //|Before you can use OpenGL, the context  |//
    //|you created must be made current. This  |//
    //|is done with the wglMakeCurrent         |//
    //|function.                               |//
    //|                                        |//
    //|https://www.khronos.org/opengl/wiki/    |//
    //|Creating_an_OpenGL_Context_(WGL)        |//
    //|#Simple_Context_Creation                |//
    //|                                        |//
    //|SC[ make-context-current-you-must-url ] |//
    //|                                        |//
    //|________________________________________|//

    //////////////////////////////////////////////

    typedef
    AAC2020_GLEBIND_FUNC (*G)(const char*);
    G g = &(AAC2020_GLEBIND_GetAnyGLFuncAddress);

    //# The OpenGL context must already be     #//
    //# created before calling                 #//
    //# wglGetProcAddress.                     #//
    //# URL[                                   #//
    //#   https://                             #//
    //#   www.gamedev.net/forums/topic/678493  #//
    //#   -manually-loading-opengl             #//
    //#   -functions-on-windows/               #//
    //# ]URL                                   #//
    //# SHORTCUT_ID[ manlofow-url ]            #//

    
    /** **************************************************** **/
    //:POSSIBLE_SOURCE_OF_REFACTOR_PROBLEMS:=================://

        /** This might be okay. The vital piece is that a    **/
        /** window must exist before you are able to create  **/
        /** an openGL context. AAC2020_GINAWIN_Init(...)     **/
        /** will do this. However, calling it here goes      **/
        /** against the LIBCHAN (library chain) code         **/
        /** structure we are trying to make.                 **/
        /** -John Mark Isaac Madison DATE[ 2020_11_01 ]      **/

        //[ ************************************************ ]//
        //- AAC2020_GINAWIN_Init(); <------ Commented out.   -//
        //[ ************************************************ ]//

        printf("*********************************\n");
        printf(
        "[DEBUG_NOTE:Originally_GLEB_Inited_GLEB_SWIN_here]\n"
        );;
        printf("*********************************\n");

    //:=================:POSSIBLE_SOURCE_OF_REFACTOR_PROBLEMS://
    /** **************************************************** **/

    void* /** HDC **/ 
    windows_handle_to_device_context=(
        AAC2020_GINAWIN_GetWinDC() 
    );;
    void* /** HGLRC **/ 
    handle_to_gl_rendering_context=(
        pfn_wglCreateContext(
            windows_handle_to_device_context
        )
    );;
    if(NULL==handle_to_gl_rendering_context){
        aac2020_glebind_Alert("[HGLRC:Fail]");
    }else{
        printf("[HGLRC:Pass]\n");
    };;

    //# Context must be made current before    #//
    //# We can fetch other functions!          #//
    int /** BOOL **/ make_current_worked = (0-777);
    make_current_worked=(
    AAC2020_GLEBIND_wglMakeCurrent(
        windows_handle_to_device_context
    ,   handle_to_gl_rendering_context
    ));;

    if(1 == make_current_worked ){
        aac2020_glebind_OK("[make_current_worked]");
    }else{
        aac2020_glebind_Alert("[FailedToMakeCurrent]");
    };;

    AAC2020_GLEBIND.handle_to_gl_rendering_context=(
         handle_to_gl_rendering_context
    );;
    

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
    pfn_glGenBuffers               =(       //||//
    PFN_glGenBuffers                 )g(    //||//
       "glGenBuffers"                   );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glBindBuffer               =(       //||//
    PFN_glBindBuffer                 )g(    //||//
       "glBindBuffer"                   );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//                               
    pfn_glBufferData               =(       //||//
    PFN_glBufferData                 )g(    //||//
       "glBufferData"                   );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//                               
    pfn_glGetError                 =(       //||//
    PFN_glGetError                   )g(    //||//
       "glGetError"                     );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glEnableVertexAttribArray  =(       //||//
    PFN_glEnableVertexAttribArray    )g(    //||//
       "glEnableVertexAttribArray"      );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glVertexAttribPointer      =(       //||//
    PFN_glVertexAttribPointer        )g(    //||//
       "glVertexAttribPointer"          );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glDrawArrays               =(       //||//
    PFN_glDrawArrays                 )g(    //||//
       "glDrawArrays"                   );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glDisableVertexAttribArray =(       //||//
    PFN_glDisableVertexAttribArray   )g(    //||//
       "glDisableVertexAttribArray"     );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glCreateShader             =(       //||//
    PFN_glCreateShader               )g(    //||//
       "glCreateShader"                 );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glShaderSource             =(       //||//
    PFN_glShaderSource               )g(    //||//
       "glShaderSource"                 );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glCompileShader            =(       //||//
    PFN_glCompileShader              )g(    //||//
       "glCompileShader"                );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGetShaderiv              =(       //||//
    PFN_glGetShaderiv                )g(    //||//
       "glGetShaderiv"                  );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGetShaderInfoLog         =(       //||//
    PFN_glGetShaderInfoLog           )g(    //||//
       "glGetShaderInfoLog"             );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glCreateProgram            =(       //||//
    PFN_glCreateProgram              )g(    //||//
       "glCreateProgram"                );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glAttachShader             =(       //||//
    PFN_glAttachShader               )g(    //||//
       "glAttachShader"                 );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glLinkProgram              =(       //||//
    PFN_glLinkProgram                )g(    //||//
       "glLinkProgram"                  );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGetProgramiv             =(       //||//
    PFN_glGetProgramiv               )g(    //||//
       "glGetProgramiv"                 );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGetProgramInfoLog        =(       //||//
    PFN_glGetProgramInfoLog          )g(    //||//
       "glGetProgramInfoLog"            );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glDetachShader             =(       //||//
    PFN_glDetachShader               )g(    //||//
       "glDetachShader"                 );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glDeleteShader             =(       //||//
    PFN_glDeleteShader               )g(    //||//
       "glDeleteShader"                 );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glClear                    =(       //||//
    PFN_glClear                      )g(    //||//
       "glClear"                        );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glUseProgram               =(       //||//
    PFN_glUseProgram                 )g(    //||//
       "glUseProgram"                   );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glViewport                 =(       //||//
    PFN_glViewport                   )g(    //||//
       "glViewport"                     );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glClearColor               =(       //||//
    PFN_glClearColor                 )g(    //||//
       "glClearColor"                   );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGenVertexArrays          =(       //||//
    PFN_glGenVertexArrays            )g(    //||//
       "glGenVertexArrays"              );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glBindVertexArray          =(       //||//
    PFN_glBindVertexArray            )g(    //||//
       "glBindVertexArray"              );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGenTextures              =(       //||//
    PFN_glGenTextures                )g(    //||//
       "glGenTextures"                  );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glBindTexture              =(       //||//
    PFN_glBindTexture                )g(    //||//
       "glBindTexture"                  );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glTexParameteri            =(       //||//
    PFN_glTexParameteri              )g(    //||//
       "glTexParameteri"                );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glTexImage2D               =(       //||//
    PFN_glTexImage2D                 )g(    //||//
       "glTexImage2D"                   );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glActiveTexture            =(       //||//
    PFN_glActiveTexture              )g(    //||//
       "glActiveTexture"                );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGetUniformLocation       =(       //||//
    PFN_glGetUniformLocation         )g(    //||//
       "glGetUniformLocation"           );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glUniform1i                =(       //||//
    PFN_glUniform1i                  )g(    //||//
       "glUniform1i"                    );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glPixelStorei              =(       //||//
    PFN_glPixelStorei                )g(    //||//
       "glPixelStorei"                  );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glEnable                   =(       //||//
    PFN_glEnable                     )g(    //||//
       "glEnable"                       );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glFinish                   =(       //||//
    PFN_glFinish                     )g(    //||//
       "glFinish"                       );; //||//
    //|-  --  --  --  --  --  --  --  --  --  -|//
    pfn_glGetIntegerv              =(       //||//
    PFN_glGetIntegerv                )g(    //||//
       "glGetIntegerv"                  );; //||//
    //|________________________________________|//


     

} //[[AAC2020_GLEBIND_GetFuncsFromDLL]]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

//:Meant to be a quick test to give us a bit
//:of certainty that we didn't make any stupid
//:mistakes, but not at all comprehensive.
void aac2020_glebind_LibraryAliasSmokeTest(){

    unsigned int /** GLenum **/ a;
    unsigned int /** GLenum **/ b;

    unsigned int /** GLenum **/ c;
    unsigned int /** GLenum **/ d;

    unsigned int /** GLenum **/ e;
    unsigned int /** GLenum **/ f;

    unsigned int /** GLenum **/ g;
    unsigned int /** GLenum **/ h;

    unsigned char /** GLboolean **/ i1, i2;
    unsigned char /** GLboolean **/ j1, j2;

    unsigned int /** GLenum **/ k;
    unsigned int /** GLenum **/ l;

    unsigned int /** GLenum **/ m;
    unsigned int /** GLenum **/ n;
    
    unsigned int /** GLenum **/ o;
    unsigned int /** GLenum **/ p;

    unsigned int /** GLenum **/ q,r,s,t;

    unsigned int /** GLenum **/ u,v;

    unsigned int /** GLenum **/ w,x;

    unsigned int /** GLbitfield **/ y,z;


    //

    a = AAC2020_GLEBIND.BUFFER_BINDING_TARGET  
        -> gl_array_buffer;
    
    b = AAC2020_GLEBIND.BBT
        .  gl_array_buffer;

    //

    c = AAC2020_GLEBIND.BUFFER_DATA  
        -> gl_static_draw;
    
    d = AAC2020_GLEBIND.BD
        .  gl_static_draw;

    //

    e = AAC2020_GLEBIND.ERROR_FLAGS  
        -> gl_no_error;
    
    f = AAC2020_GLEBIND.ERR
        .  gl_no_error;

    //

    g = AAC2020_GLEBIND.COMMON_ENUM_TYPES  
        -> gl_float;
    
    h = AAC2020_GLEBIND.TYP
        .  gl_float;

    //

    i1 = AAC2020_GLEBIND.BOOLEAN_CONSTANTS
        -> gl_false;
    i2 = AAC2020_GLEBIND.BOOLEAN_CONSTANTS
        -> gl_true;

    j1 = AAC2020_GLEBIND.BOL
        . gl_false;
    j2 = AAC2020_GLEBIND.BOL
        .  gl_true;

    //

    k = AAC2020_GLEBIND.DRAW_MODES
        -> gl_triangles;

    l = AAC2020_GLEBIND.MOD
        .  gl_triangles;

    //

    m = AAC2020_GLEBIND.SHADER_TYPES
        -> gl_vertex_shader;

    n = AAC2020_GLEBIND.ST
        .  gl_vertex_shader;

    //

    o = AAC2020_GLEBIND.SHADER_TYPES
        -> gl_fragment_shader;

    p = AAC2020_GLEBIND.ST
        .  gl_fragment_shader;

    //

    q = AAC2020_GLEBIND.SHADER_PARAM_NAMES
        -> gl_compile_status;

    r = AAC2020_GLEBIND.SPN
        .  gl_compile_status;

    //

    s = AAC2020_GLEBIND.SHADER_PARAM_NAMES
        -> gl_info_log_length;

    t = AAC2020_GLEBIND.SPN
        .  gl_info_log_length;

    //

    u = AAC2020_GLEBIND.PROGRAM_PARAM_NAMES
        -> gl_link_status;

    v = AAC2020_GLEBIND.PPN
        .  gl_link_status;

    //

    w = AAC2020_GLEBIND.PROGRAM_PARAM_NAMES
        -> gl_info_log_length;

    x = AAC2020_GLEBIND.PPN
        .  gl_info_log_length;

    //

    y = AAC2020_GLEBIND.BITFIELD_MASKS
        -> gl_color_buffer_bit;

    z = AAC2020_GLEBIND.MAS
        .  gl_color_buffer_bit;

    //

    //:Fetched from "." or "->" is same:
    //|========================================|//
    if(a !=b ){ aac2020_glebind_Halt("[LibSmokeTest:AB]"); }
    if(c !=d ){ aac2020_glebind_Halt("[LibSmokeTest:CD]"); }
    if(e !=f ){ aac2020_glebind_Halt("[LibSmokeTest:EF]"); }
    if(g !=h ){ aac2020_glebind_Halt("[LibSmokeTest:GH]"); }
    if(i1!=j1){ aac2020_glebind_Halt("[SMOKETEST:G1H1:]"); }
    if(i2!=j2){ aac2020_glebind_Halt("[SMOKETEST:G2H2:]"); }
    if(k !=l ){ aac2020_glebind_Halt("[LibSmokeTest:KL]"); }
    if(m !=n ){ aac2020_glebind_Halt("[LibSmokeTest:MN]"); }
    if(o !=p ){ aac2020_glebind_Halt("[LibSmokeTest:OP]"); }
    if(q !=r ){ aac2020_glebind_Halt("[LibSmokeTest:QR]"); }
    if(s !=t ){ aac2020_glebind_Halt("[LibSmokeTest:ST]"); }
    if(u !=v ){ aac2020_glebind_Halt("[LibSmokeTest:UV]"); }
    if(w !=x ){ aac2020_glebind_Halt("[LibSmokeTest:WX]"); }
    if(y !=z ){ aac2020_glebind_Halt("[LibSmokeTest:YZ]"); }
    //|========================================|//

    //:Make sure not accidentially same value:
    //|========================================|//
    if( a ==c ){ aac2020_glebind_Halt("[LibSmokeTest:AC]"); }
    if( b ==d ){ aac2020_glebind_Halt("[LibSmokeTest:BD]"); }      
    if( c ==e ){ aac2020_glebind_Halt("[LibSmokeTest:CE]"); }
    if( d ==f ){ aac2020_glebind_Halt("[LibSmokeTest:DF]"); }
    if( e ==g ){ aac2020_glebind_Halt("[LibSmokeTest:EG]"); }
    if( f ==h ){ aac2020_glebind_Halt("[LibSmokeTest:FH]"); }
    if( g ==i1){ aac2020_glebind_Halt("[LibSmokeTest:GI]"); }
    if( h ==j1){ aac2020_glebind_Halt("[LibSmokeTest:HJ]"); }
    if( i1==k ){ aac2020_glebind_Halt("[LibSmokeTest:IK]"); }
    if( j1==l ){ aac2020_glebind_Halt("[LibSmokeTest:JL]"); }
    if( m ==o ){ aac2020_glebind_Halt("[LibSmokeTest:MO]"); }
    if( n ==p ){ aac2020_glebind_Halt("[LibSmokeTest:NP]"); }
    if( q ==s ){ aac2020_glebind_Halt("[LibSmokeTest:QS]"); }
    if( t ==r ){ aac2020_glebind_Halt("[LibSmokeTest:TR]"); }
    if( m ==q ){ aac2020_glebind_Halt("[LibSmokeTest:MQ]"); }
    if( o ==s ){ aac2020_glebind_Halt("[LibSmokeTest:OS]"); }
    if( p ==q ){ aac2020_glebind_Halt("[LibSmokeTest:PQ]"); }
    if( r ==s ){ aac2020_glebind_Halt("[LibSmokeTest:RS]"); }
    if( t ==u ){ aac2020_glebind_Halt("[LibSmokeTest:TU]"); }
    if( v ==x ){ aac2020_glebind_Halt("[LibSmokeTest:TU]"); }
    if( e ==i2){ aac2020_glebind_Halt("[LibSmokeTST:EI2]"); }
    if( f ==j2){ aac2020_glebind_Halt("[LibSmokeTST:FJ2]"); }
    if( x == y){ aac2020_glebind_Halt("[LibSmokeTest:XY]"); }
    //|========================================|//

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
    //|Synonyms should be equal:               |//
    //|AKA:Different paths to copies of same   |//
    //|    value.                              |//
    if( w != s ){ aac2020_glebind_Halt("[SmokeT:WS]");}
    if( t != x ){ aac2020_glebind_Halt("[SmokeT:TX]");}
    //|________________________________________|//

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
    //| Pattern breaking, but keep since       |//
    //| you already wrote it:                  |//
    //+ e<>i1 by co-incidence only.            +//
    //+ f<>j1 by co-incidence only.            +//
    if( e!=i1){ aac2020_glebind_Halt("[LibSmokeTest:EI1]"); }
    if( f!=j1){ aac2020_glebind_Halt("[LibSmokeTest:FJ1]"); }    
    //|________________________________________|//

    //:For extra saftey, re-look up values from
    //:header file and make sure correct:
    if( AAC2020_GLEBIND.SHADER_TYPES -> gl_fragment_shader
                   != 0x8B30
    ){ aac2020_glebind_Halt("[FS:0x8B30]"); }

    if( AAC2020_GLEBIND.SHADER_TYPES -> gl_vertex_shader
                   != 0x8B31
    ){ aac2020_glebind_Halt("[VS:0x8B31]"); }


    //:Double Check More hardcoded values:
    ; ;if( AAC2020_GLEBIND.SHADER_PARAM_NAMES
        -> gl_compile_status  !=   0x8B81
    ){
                    aac2020_glebind_Halt("[SPN:0x8B81]");
    };;if( AAC2020_GLEBIND.SHADER_PARAM_NAMES
        -> gl_info_log_length !=   0x8B84
    ){
                    aac2020_glebind_Halt("[SPN:0x8B84]");
    };;

    //:Double check. Use online docs.
    //:錶/本/OpenGL/api/GL/glcorearb.h
    if( AAC2020_GLEBIND.PROGRAM_PARAM_NAMES
        -> gl_link_status !=       0x8B82
    ){
                   aac2020_glebind_Halt("[PPN:0x8B82]");
    };;

    //:Double-check online docs:
    if( AAC2020_GLEBIND.PROGRAM_PARAM_NAMES
        -> gl_info_log_length !=   0x8B84
    ){
                   aac2020_glebind_Halt("[PPN:0x8B84]");
    };;

    //:Double-check online docs:
    if( AAC2020_GLEBIND.BITFIELD_MASKS
        -> gl_color_buffer_bit != 0x00004000
    ){
                  aac2020_glebind_Halt("[MAS:0x00004000]");
    };;

    
    //:Make sure drawing mode constants
    //:are correct. Do "==" comparison FIRST
    //:in case you accidentially use "="
    //:instead of "==" in comparison.
    //|========================================|//
    if(
        AAC2020_GLEBIND.DRAW_MODES -> gl_triangles
                        ==
        AAC2020_GLEBIND.DRAW_MODES -> gl_triangle_fan
    ){
        aac2020_glebind_Halt("[TRI==FAN]"); 
    };;
    if(
        AAC2020_GLEBIND.DRAW_MODES -> gl_triangles
                        ==
        AAC2020_GLEBIND.DRAW_MODES -> gl_triangle_strip
    ){
        aac2020_glebind_Halt("[TRI==STRIP]"); 
    };;
    if(
        AAC2020_GLEBIND.DRAW_MODES -> gl_triangle_fan
                        ==
        AAC2020_GLEBIND.DRAW_MODES -> gl_triangle_strip
    ){
        aac2020_glebind_Halt("[FAN==STRIP]"); 
    };;
    if( AAC2020_GLEBIND.DRAW_MODES -> gl_triangles
                        != 0x0004
    ){   aac2020_glebind_Halt("[TRIS!=0x0004]"); }
    if( AAC2020_GLEBIND.DRAW_MODES -> gl_triangle_fan 
                         != 0x0006
    ){  aac2020_glebind_Halt("[TRIFAN!=0x0006]"); }
    if( AAC2020_GLEBIND.DRAW_MODES -> gl_triangle_strip 
                           != 0x0005
    ){  aac2020_glebind_Halt("[TRISTRIP!=0x0005]"); }
    //|========================================|//

    if( AAC2020_GLEBIND.TEXTURE.TEX_TYP.GPU_DEV
                  .gl_texture_2d!=0x0DE1
    ){ aac2020_glebind_Halt("[gl_texture_2d!=0x0DE1]"); }


    //:Testing texture parameter values
    //:and texture parameter names used to
    //:setup integer texture.
    #define TPN AAC2020_GLEBIND.TEXTURE.PARAMETER.NAM
    if( TPN.gl_texture_min_filter != 0x2801 ){
                         aac2020_glebind_Halt("[0x2801]");};;

    if( TPN.gl_texture_mag_filter != 0x2800 ){
                         aac2020_glebind_Halt("[0x2800]");};;

    if( TPN.gl_texture_wrap_s     != 0x2802 ){
                         aac2020_glebind_Halt("[0x2802]");};;

    if( TPN.gl_texture_wrap_t     != 0x2803 ){
                         aac2020_glebind_Halt("[0x2803]");};;
    #undef TPN
    #define TPV AAC2020_GLEBIND.TEXTURE.PARAMETER.VAL
    if( TPV.gl_nearest            != 0x2600 ){
                         aac2020_glebind_Halt("[0x2600]");};;

    if( TPV.gl_clamp_to_edge      != 0x812F ){
                         aac2020_glebind_Halt("[0x812F]");};;
    #undef TPV

    //:Added: DATE[ 2019_06_18 ]
    //////////////////////////////////////////////
    if(AAC2020_GLEBIND.TEXTURE.TEX_LOD.GPU_DEV.zero 
    != 0){ aac2020_glebind_Halt("[2019_06_18_0518PM"); }
  

    //- if(AAC2020_GLEBIND.TEXTURE.PIX_FMT.GPU_DEV        -//
    //- .gl_rgba8 != 0x8058){                  -//
    //-     aac2020_glebind_Halt("[0x8058]");             -//
    //- };;                                    -//


    //- if( AAC2020_GLEBIND.TEXTURE.PIX_FMT.CPU_HOS       -//
    //- .gl_rgba   !=   0x1908){               -//
    //-     aac2020_glebind_Halt("[0x1908]");             -//
    //- };;                                    -//

    if( AAC2020_GLEBIND.TEXTURE.PIX_TYP.CPU_HOS
    .gl_unsigned_byte
    !=0x1401){ aac2020_glebind_Halt("[0x1401]"); }

    if( AAC2020_GLEBIND.TEXTURE.PIX_DAT.CPU_HOS.pix_nul
    != 0 ){ aac2020_glebind_Halt("[pix_nul:NotNull]"); }

    if( AAC2020_GLEBIND.TEXTURE.BORDER
    .must_be_zero_for_teximage2d
    != 0 ){ aac2020_glebind_Halt("[must_be_0_for_TI2D]");}

    if(AAC2020_GLEBIND.TEXTURE.PIX_FMT.CPU_HOS        
    .gl_rgba_integer                       
    != 0x8D99 ){ aac2020_glebind_Halt("[0x8D99]"); }  

    if(AAC2020_GLEBIND.TEXTURE.PIX_FMT.GPU_DEV        
    .gl_rgba8ui !=  0x8D7C ){ 
        aac2020_glebind_Halt("[0x8D7C]");
    };;

    if(AAC2020_GLEBIND.TEXTURE.SLOT.
    gl_texture0 !=  0x84C0){
        aac2020_glebind_Halt("[0x84C0]");
    };;

    if(AAC2020_GLEBIND.UNIFORM.gl_max_uniform_locations
    != 1024 ){
        aac2020_glebind_Halt("[USE:1024(NOT:0x826E)]");
    };;

    if(AAC2020_GLEBIND.ALIGNMENT.gl_unpack_alignment
    != 0x0CF5 ){
        aac2020_glebind_Halt("[0x0CF5]");
    };;
    
    if(AAC2020_GLEBIND.CAPABILITY.gl_texture_2d
    != 0x0DE1 ){
        aac2020_glebind_Halt("[CAP:0x0DE1]");
    };;

    unsigned int /** GLenum **/ CAP_gl_texture_2d =(
        AAC2020_GLEBIND.CAPABILITY.gl_texture_2d
    );;
    unsigned int /** GLenum **/ TEX_gl_texture_2d =(
        AAC2020_GLEBIND.TEXTURE.TEX_TYP.GPU_DEV
        .gl_texture_2d
    );;
    if( CAP_gl_texture_2d  
    !=  TEX_gl_texture_2d ){
        aac2020_glebind_Halt("[CAP_T2D!=TEX_T2D]");
    };;
  
    if(AAC2020_GLEBIND.TEXTURE.QUERY.gl_texture_binding_2d
    !=0x8069){
        aac2020_glebind_Halt("[0x8069]");
    };;
    if(AAC2020_GLEBIND.TEXTURE.QUERY.gl_active_texture 
    !=0x84E0){
        aac2020_glebind_Halt("[0x84E0]");
    };;

    //////////////////////////////////////////////

    aac2020_glebind_OK("[LibSmokeTest]");
    

} //[aac2020_glebind_LibraryAliasSmokeTest]//

void AAC2020_GLEBIND_Wait(){

    AAC2020_GINAWIN_Wait();

}

void AAC2020_GLEBIND_Init(){ //:Initialize
#define I_P AAC2020_GLEBIND_InfoPrint

    I_P("[ABOUT_TO:TouchFile_OPEN_GL_SEARCH_PATHS]");
    AAC2020_GLEBIND_TouchFile_OPEN_GL_SEARCH_PATHS(
        1  /** if_not_exist_add_default_contents **/ );;

    I_P("[ABOUT_TO:AAC2020_GLEBIND_GetFuncsFromDLL(...)]\n");
    AAC2020_GLEBIND_GetFuncsFromDLL();

    I_P("[ABOUT_TO:aac2020_glebind_LibraryAliasSmokeTest(...)]\n");
    aac2020_glebind_LibraryAliasSmokeTest();
    
#undef I_P
} //[[AAC2020_GLEBIND_Init]]//

void AAC2020_GLEBIND_Demo(){

    AAC2020_GINAWIN.X    =   0  ;
    AAC2020_GINAWIN.Y    =   0  ;
    AAC2020_GINAWIN.WID  = 256  ;
    AAC2020_GINAWIN.HIG  = 512  ;

    AAC2020_GLEBIND_Init();
    AAC2020_GLEBIND_Wait();

} //[AAC2020_GLEBIND_Demo]//
void AAC2020_GLEBIND_Demonstration( void ){
     AAC2020_GLEBIND_Demo();
} //[AAC2020_GLEBIND_Demonstration]//

//[][][][][][][][][][][][][][][][][][][][][][][]//

void AAC2020_GLEBIND_Term(){ //:Terminate
    //:Put any cleanup logic here.
} //[[AAC2020_GLEBIND_Term]_______________________________]//

//[][][][][][][][][][][][][][][][][][][][][][][]//


//!:Added_For_Libraries_Further_Down_The_Chain:!//
//////////////////////////////////////////////////

void
AAC2020_GLEBIND_FitViewportToWindow( void ){

    //:Set size of viewport:
    int X   = AAC2020_GINAWIN_GetClient_X  ();
    int Y   = AAC2020_GINAWIN_GetClient_Y  ();
    int WID = AAC2020_GINAWIN_GetClient_WID();
    int HIG = AAC2020_GINAWIN_GetClient_HIG();
    AAC2020_GLEBIND.glViewport(
    /**/(int /** GLint **/) X
    ,   (int /** GLint **/) Y
    ,   (int /** GLint **/) WID
    ,   (int /** GLint **/) HIG
    );;

}

//////////////////////////////////////////////////

//+ BOTTOM_OF_FILE:DOCUMENTATION:BEG + + + + + +//

//+NO_RGBA_INT_01||||||||||||||||||||||||||||||+//
//|The reason GL_RGBA_INTEGER is not legal in  |//
//|this case that there are rules about which  |//
//|conversions between format and              |//
//|internalFormat are supported. In this case, |//
//|GL_RGBA for the internalFormat specifies a  |//
//|normalized format,while GL_RGBA_INTEGER for |//
//|format specifies that the input consists of |//
//|values that should be used as integers.     |//
//|There is no conversion defined between these|//
//|two.                                        |//
//|stackoverflow.com/questions/34497195/       |//
//||||||||||||||||||||||||||||||||||||||||||||||//


//+ BOTTOM_OF_FILE:DOCUMENTATION:END + + + + + +//
