
//: F_S: Fragment Shader Code

//:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:======================://
//:AAC2020_PAINT5D_DEFAULT_001:==============================://
//:PASTE_INTO_FILE[ P5D_001._ ]:=============================://

    //:P5D_001____AAC2020_PAINT5D_DEFAULT_001:===========://
    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//
    //:glsl_file_scope_stuff:----------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //| # |//
        //:#_KEEP_USAMPLER_HIGH_#          ://     //| # |//
        //:#_SAM_PRECISION_BEFORE_SAM_VAR_#://     //| # |//
        precision highp usampler2D;                //| # |//
                                                   //| # |//
        //|(( UNI ))____________________________|////| # |//
        //[:::::::SHADERTOY_COMPATIBILITY:::::::]////| # |//
        #define fragCoord gl_FragCoord             //| # |//
        uniform vec3 iResolution;                  //| # |//
        uniform usampler2D taudepo;                //| # |//
        uniform usampler2D paint5d;                //| # |//
                                                   //| # |//
        //|(( INN ))____________________________|////| # |//
        //:     fag_tec:FrAGshaderTExtureCoord  :////| # |//
        in vec2 fag_tec;                           //| # |//
                                                   //| # |//
        //|(( OUT ))____________________________|////| # |//
        out vec4 FragColor;                        //| # |//
                                                   //| # |//
    #endif                                         //| # |//
    //:----------------------------:glsl_file_scope_stuff://
    //:type_macros:--------------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //| # |//
        /** When Running As GLSL Code. **/         //| # |//
                                                   //| # |//
        #define U32         uint    //:  01  ://   //| # |//
        #define I32          int    //:  02  ://   //| # |//
        #define IV2        ivec2    //:  03  ://   //| # |//
        #define UV4        uvec4    //:  04  ://   //| # |//
        #define T_F   texelFetch    //:  05  ://   //| # |//
        #define P5D      paint5d    //:  06  ://   //| # |//
        #define SAM   usampler2D    //:  07  ://   //| # |//
        #define U00    uint( 0 )    //:  08  ://   //| # |//
        #define I00     int( 0 )    //:  09  ://   //| # |//
        #define B_3    uint( 3 )    //:  10  ://   //| # |//
        #define V_A                 //:  11  ://   //| # |//
        #define FV4         vec4    //:  12  ://   //| # |//
        #define ASS  /**NOTHING**/  //:  13  ://   //| # |//
        #define ERR  /**NOTHING**/  //:  14  ://   //| # |//
    #else                                          //| # |//
                                                   //| # |//
        /** When Running As C99/C11 Code. **/      //| # |//
                                                   //| # |//
        #define U32   uint32_t                     //| # |//
        #define I32    int32_t                     //| # |//
        #define IV2   struct AAC2020_OPEN_GL_IV2   //| # |//
        #define UV4   struct AAC2020_OPEN_GL_UV4   //| # |//
        #define T_F   aac2020_polyfill_texel_fetch //| # |//
        #define P5D   ( 0 )                        //| # |//
        #define SAM    int                         //| # |//
        #define U00    0x00                        //| # |//
        #define I00   ( 0 )                        //| # |//
        #define B_3   ( 3 )                        //| # |//
        #define V_A   void                         //| # |//
        #define FV4   struct AAC2020_OPEN_GL_FV4   //| # |//
        #define ASS   assert                       //| # |//
        #define ERR   aac2020_p5d1ogl_Halt         //| # |//
    #endif                                         //| # |//
    //:--------------------------------------:type_macros://
    //:seven_letter_macros:------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL            
                                                    
        #define FV4_MAK      vec4                        
        #define BIN_011 uint( 3 )  
        #define CUVIPIX struct AAC2020_OPEN_GL_PAINT5D_CUVIPIX
                                                    
    #else                                           
                                                    
        #define FV4_MAK aac2020_polyfill_GLSL_MakeVec4
        #define BIN_011 ((U32)3 )
        #define CUVIPIX struct AAC2020_OPEN_GL_PAINT5D_CUVIPIX
                                                    
    #endif                                          
    //:------------------------------:seven_letter_macros://
    //:main_shim_macros:---------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //| # |//
        #define RET_MAIN void /** <-- GLSL**/      //| # |//
        #define FUN_MAIN main /** <-- GLSL**/      //| # |//
                                                   //| # |//
    #else                                          //| # |//
                                                   //| # |//
        #define RET_MAIN FV4 /** <-- [C99/C11]**/  //| # |//
        #define FUN_MAIN OPEN_GL_PAINT5D_Main      //| # |//
                                                   //| # |//
    #endif                                         //| # |//
    //:---------------------------------:main_shim_macros://
    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//
    //:C99_AND_GLSL_STRUCTS:-----------------------------://
    /** ************************************************ ***
    @VID_IID[ 0097 ]TIME[ 08:00:00 ]
    These structs are declared exactly the same for 
    the [CPU / HOST] C99 code as they are for the
    [ GPU / DEVICE ] GLSL code.
    *** ************************************************ **/
    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://

        struct AAC2020_OPEN_GL_PAINT5D_CUVIPIX{

            I32 cuv_i_x ; //:canvas_user_view:(pixel)i_x
            I32 cuv_i_y ; //:canvas_user_view:(pixel)i_y
                          //:i_x == integer x
                          //:i_y == integer y 
        };
    
    //:-----------------------------:C99_AND_GLSL_STRUCTS://


        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                        //[ x ]//
        OPEN_GL_PAINT5D_TexelFetch_U32(            //[ x ]//
            SAM u32_sam  //:<-- GLSL only.......:////[ x ]//
        ,   IV2 glo                                //[ x ]//
        ,   I32 levodet_ALWAYS_ZERO                //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
            U32 u32_var; /** Output/Return **/     //[ x ]//
                                                   //[ x ]//
            //:TEXEL_FETCH_RETURNS_XYZW_U08:-------------://     
            /** GET: [ x,y,z,w ] / [r,g,b,a]  **/  //[ x ]//
            /**      texel As a uvec 4 type.  **/  //[ x ]//
                UV4 uv4=(                          //[ x ]//
                    T_F(                           //[ x ]//
                        u32_sam                    //[ x ]//
                    ,   glo                        //[ x ]//
                    ,   levodet_ALWAYS_ZERO        //[ x ]//
                    ));;                           //[ x ]//
                                                   //[ x ]//
            //:-------------:TEXEL_FETCH_RETURNS_XYZW_U08://
            //:BIT_PACK_YOUR_PIXEL:----------------------://
            #define CPU_PIX AAC2020_PIXNAME_paint5d_cpu_pix
            /** **************************************** ***
                @VID_IID[ 0086 ]TIME[ 01:29:10 ]   //[ x ]//
                Bit shifting code copied directly  //[ x ]//
                from                               //[ x ]//
                aac2020_paint5d_UTC_BitPack_Get 's //[ x ]//
                bitshift code because we are       //[ x ]//
                really good at fucking up          //[ x ]//
                trivial bit shifting code.         //[ x ]//
                                                   //[ x ]//
                @VID_IID[ 0092 ]TIME[ 00:32:23 ]   //[ x ]//
                Code relocated to here because we  //[ x ]//
                mistakenly thought native GLSL     //[ x ]//
                texelFetch returned a unit32 but   //[ x ]//
                actually                           //[ x ]//
                returns a [ uvec4 / UV4 ]          //[ x ]//
            *** **************************************** **/
                                                   //[ x ]//
                u32_var=( U00 /** 0x00 **/         //[ x ]//
                | ( uv4.x << 24 ) //: R ://        //[ x ]//
                | ( uv4.y << 16 ) //: G ://        //[ x ]//
                | ( uv4.z <<  8 ) //: B ://        //[ x ]//
                | ( uv4.w <<  0 ) //: A ://        //[ x ]//
                );;  /** @PAIR_CODE_2021_01_14@ **///[ x ]//
                                                   //[ x ]//
            #undef  CPU_PIX                        //[ x ]//
            //:----------------------:BIT_PACK_YOUR_PIXEL://
            return( u32_var );                     //[ x ]//
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                        //[ x ]//
        OPEN_GL_PAINT5D_BitPack_Get(               //[ x ]//
            IV2     glo                            //[ x ]//
        ,   I32 aus_dex                            //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
        ASS( B_3 == BIN_011 );                     //[ x ]//
                                                   //[ x ]//
            U32 u32_var ;                          //[ x ]//
            U32 til_val ;                          //[ x ]//
                                                   //[ x ]//
            u32_var =(                             //[ x ]//
                OPEN_GL_PAINT5D_TexelFetch_U32(    //[ x ]//          
                    P5D //:texture_to_sample    :////[ x ]//
                ,   glo //:integer_texel_coord  :////[ x ]//
                ,   I00 //:level_of_detail_zero :////[ x ]//
                ));;                               //[ x ]//
                                                   //[ x ]//
            til_val =(                             //[ x ]//
                ( u32_var >> (aus_dex*2) )         //[ x ]//
                &                                  //[ x ]//
                BIN_011                            //[ x ]//
            );;                                    //[ x ]//
                                                   //[ x ]//
            return( til_val );                     //[ x ]//
        }                                          //[ x ]//
                                                   //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        I32                                        //[ - ]//
        OPEN_GL_PAINT5D_til_exp_CTO_til_peb(       //[ - ]//
            I32         til_exp                    //[ - ]//
        )                                          //[ - ]//
        {                                          //[ - ]//
                                                   //[ - ]//
        #define T_E til_exp                        //[ - ]//
        #define T_P til_peb                        //[ - ]//
                                                   //[ - ]//
            ASS( til_exp >= 0 && til_exp <=(8-1) );//[ - ]//
                                                   //[ - ]//
                        I32 T_P ;                  //[ - ]//
            if( 0 == T_E ){ T_P = (  1 ); };       //[ 1 ]//
            if( 1 == T_E ){ T_P = (  2 ); };       //[ 2 ]//
            if( 2 == T_E ){ T_P = (  4 ); };       //[ 3 ]//
            if( 3 == T_E ){ T_P = (  8 ); };       //[ 4 ]//
            if( 4 == T_E ){ T_P = ( 16 ); };       //[ 5 ]//
            if( 5 == T_E ){ T_P = ( 32 ); };       //[ 6 ]//
            if( 6 == T_E ){ T_P = ( 64 ); };       //[ 7 ]//
            if( 7 == T_E ){ T_P = (128 ); };       //[ 8 ]//
                                                   //[ - ]//
            return( til_peb );                     //[ - ]//
                                                   //[ - ]//
        #undef  T_E                                //[ - ]//
        #undef  T_P                                //[ - ]//
                                                   //[ - ]//
                                                   //[ - ]//
        }                                          //[ - ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        I32                                        //[ - ]//
        OPEN_GL_PAINT5D_til_exp_CTO_max_cor(       //[ - ]//
            I32         til_exp                    //[ - ]//
        )                                          //[ - ]//
        {                                          //[ - ]//
        #define T_E til_exp                        //[ - ]//
        #define M_C max_cor                        //[ - ]//
                                                   //[ - ]//
            I32 max_cor;                           //[ - ]//
            if( 0 == T_E ){ M_C = ( 128 - 1 ); };  //[ 1 ]//
            if( 1 == T_E ){ M_C = (  64 - 1 ); };  //[ 2 ]//
            if( 2 == T_E ){ M_C = (  32 - 1 ); };  //[ 3 ]//
            if( 3 == T_E ){ M_C = (  16 - 1 ); };  //[ 4 ]//
            if( 4 == T_E ){ M_C = (   8 - 1 ); };  //[ 5 ]//
            if( 5 == T_E ){ M_C = (   4 - 1 ); };  //[ 6 ]//
            if( 6 == T_E ){ M_C = (   2 - 1 ); };  //[ 7 ]//
            if( 7 == T_E ){ M_C = (   1 - 1 ); };  //[ 8 ]//
                                                   //[ - ]//
                                                   //[ - ]//
            return( max_cor );                     //[ - ]//
                                                   //[ - ]//
        #undef  T_E                                //[ - ]//
        #undef  M_C                                //[ - ]//
        }                                          //[ - ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        I32                                        //[ x ]//
        OPEN_GL_PAINT5D_til_exp_CTO_diagpix(       //[ x ]//
            I32         til_exp                    //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
        #define T til_exp                          //[ x ]//
        #define D diagpix                          //[ x ]//
                                                   //[ x ]//
            I32 diagpix =( 9999 );                 //[ x ]//
                                                   //[ x ]//
            //:@VID_IID[ 0085 ]TIME[ 01:53:00 ] :////[ x ]//
            //:TODO: Make into lookup table:    :////[ x ]//
            //:BUT MUST GET WORKING IN OPENGL   :////[ x ]//
            //:BEFORE YOU DO SUCH REFACTOR!     :////[ x ]//
            if( 0 == T ){ D = 0   ; }else          //[ x ]//
            if( 1 == T ){ D = 128 ; }else          //[ x ]//     
            if( 2 == T ){ D = 192 ; }else          //[ x ]//
            if( 3 == T ){ D = 224 ; }else          //[ x ]//
            if( 4 == T ){ D = 240 ; }else          //[ x ]//
            if( 5 == T ){ D = 248 ; }else          //[ x ]//
            if( 6 == T ){ D = 252 ; }else          //[ x ]//
            if( 7 == T ){ D = 254 ; }else{         //[ x ]//
                                                   //[ x ]//
                /// if out of range, ///           //[ x ]//
                /// set to invalid   ///           //[ x ]//
                /// config pixel.    ///           //[ x ]//
                D = 9001 ;                         //[ x ]//
                                                   //[ x ]//
            };;                                    //[ x ]//
                                                   //[ x ]//
            return( diagpix );                     //[ x ]//
                                                   //[ x ]//
        #undef  T                                  //[ x ]//
        #undef  D                                  //[ x ]//
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        IV2                                        //[ x ]//
        OPEN_GL_PAINT5D_painpix_CTO_glocpix(       //[ x ]//
            I32 til_qua                            //[ x ]//
        ,   I32 til_exp                            //[ x ]//
        ,   I32 til_lay                            //[ x ]//
        ,   I32 loc_t_x                            //[ x ]//
        ,   I32 loc_t_y                            //[ x ]//
        ){                                         //[ x ]//
        //:declare__variables: . . . . . . . . . . . . . ://
                                                   //[ x ]//
            IV2 glo; /** glo_t_x & glo_t_y **/     //[ x ]//
            IV2 tem; /** tempi_x & tempi_y **/     //[ x ]//
            IV2 qua; /** o_x_qua & o_y_qua **/     //[ x ]//
            IV2 lay; /** o_x_lay & o_y_lay **/     //[ x ]//
                                                   //[ x ]//
            I32 dia; /** diagpix **/               //[ x ]//
            I32 m_c; /** max_cor **/               //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . . :declare__variables://
        //:CALCULATE::painpix_CTO_glocpix: . . . . . . . ://
                                                   //[ x ]//
            m_c =(                                 //[ x ]//
            OPEN_GL_PAINT5D_til_exp_CTO_max_cor(   //[ x ]//
                            til_exp ));;           //[ x ]//
            dia =(                                 //[ x ]//
            OPEN_GL_PAINT5D_til_exp_CTO_diagpix(   //[ x ]//
                            til_exp ));;           //[ x ]//
                                                   //[ x ]//
            tem.x =  til_qua       % ( 2 ) ;       //[ x ]//
            tem.y = (til_qua-tem.x)/ ( 2 ) ;       //[ x ]//
                                                   //[ x ]//
            qua.x = ( tem.x * 256 );               //[ x ]//
            qua.y = ( tem.y * 256 );               //[ x ]//
                                                   //[ x ]//
            tem.x =  til_lay          % (  2  ) ;  //[ x ]//
            tem.y = (til_lay - tem.x) / (  2  ) ;  //[ x ]//
                                                   //[ x ]//
            lay.x = ( tem.x * ( m_c + 1 ) ) ;      //[ x ]//
            lay.y = ( tem.y * ( m_c + 1 ) ) ;      //[ x ]//
                                                   //[ x ]//
            glo.x=( qua.x +dia+ lay.x + loc_t_x ); //[ x ]//
            glo.y=( qua.y +dia+ lay.y + loc_t_y ); //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . :CALCULATE::painpix_CTO_glocpix://
        //:return_from_function: . . . . . . . . . . . . ://
                                                   //[ x ]//
            /** glo == glo_t_x & glo_t_y **/       //[ x ]//
            return( glo );                         //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . :return_from_function://
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                        //[ x ]//
        OPEN_GL_PAINT5D_Get(                       //[ x ]//
            I32  til_qua                           //[ x ]//
        ,   I32  til_exp                           //[ x ]//
        ,   I32  til_lay                           //[ x ]//
        ,   I32  loc_t_x                           //[ x ]//
        ,   I32  loc_t_y                           //[ x ]//
        ,   I32  aus_dex                           //[ x ]//
                                                   //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
        //:declare__variables: . . . . . . . . . . . . . ://
                                                   //[ x ]//
            U32 til_val =( U00 );                  //[ x ]//
                                                   //[ x ]//
            /** glo == glo_t_x & glo_t_y  **/      //[ x ]//
            IV2 glo    ;                           //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . . :declare__variables://
        //:get_pixel_and_extract_tile_value: . . . . . . ://
                                                   //[ x ]//
            glo=(                                  //[ x ]//
            OPEN_GL_PAINT5D_painpix_CTO_glocpix(   //[ x ]//
                til_qua                            //[ x ]//
            ,   til_exp                            //[ x ]//
            ,   til_lay                            //[ x ]//
            ,   loc_t_x                            //[ x ]//  
            ,   loc_t_y                            //[ x ]//
            ));;                                   //[ x ]//
                                                   //[ x ]//
            til_val=(                              //[ x ]//
            OPEN_GL_PAINT5D_BitPack_Get(           //[ x ]//
                glo                                //[ x ]//
            ,   aus_dex                            //[ x ]//
            ));;                                   //[ x ]//
                                                   //[ x ]//
        //: . . . . . . :get_pixel_and_extract_tile_value://
        //:return_from_function: . . . . . . . . . . . . ://
                                                   //[ x ]//
            return( til_val );                     //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . :return_from_function://
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://

        CUVIPIX
        OPEN_GL_PAINT5D_painpix_CTO_cuvipix(
            I32 til_qua /** Tile Quadrant ( t_q ) **/
        ,   I32 til_exp /** Tile Exponent ( t_e ) **/
        ,   I32 til_lay /** Tile Layer    ( t_l ) **/
        ,   I32 loc_t_x /** Local Tile X  ( t_x ) **/
        ,   I32 loc_t_y /** Local Tile Y  ( t_y ) **/
        )
        {
            //:check_inputs:-----------------------------://

                ASS( til_qua >= 0 && til_qua <= (  4-1) );
                ASS( til_exp >= 0 && til_exp <= (  8-1) );
                ASS( til_lay >= 0 && til_lay <= (  3-1) );
                ASS( loc_t_x >= 0 && loc_t_x <= (128-1) );
                ASS( loc_t_y >= 0 && loc_t_y <= (128-1) );

            //:-----------------------------:check_inputs://
            //:declare_vars:-----------------------------://

                CUVIPIX cuvipix;

                I32 qua_c_x; /** til_qua as cell x coord.**/
                I32 qua_c_y; /** til_qua as cell y coord.**/
                             /** AKA:til_qua's[x|y]coord.**/

                I32 til_peb; /** TILe(span_in)PEBbles ...**/

                I32 tor_i_x; /** TIle_ORigin:i_x ........**/
                I32 tor_i_y; /** TIle_ORigin:i_y ........**/
                  
                I32 pox_qua; /** Pixel_Offset__X__:QUAd  **/
                I32 poy_qua; /** Pixel_Offset__Y__:QUAd  **/
                  
            //:-----------------------------:declare_vars://

            //:##########################################://
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://

                /** ***************************** ***
                @VID_IID[ 0097 ]TIME[ 08:15:42 ]  
                til_lay does not change the
                canvas_user_view coordinate (cuvipix)
                because the layers are.....
                LAYERED directly on top of each other
                at the same exact 2D coordinate.
                *** ***************************** **/

                if( til_lay ){ /** NOOP **/ };

            #endif //:###################################://
           
            /** @VID_IID[ 0097 ]TIME[ 08:08:42 ]  ****** **/
            /** Convert tile quadrant index into         **/
            /** it's XY cell location equivalent.        **/
            /** AKA: INDEX TO XY CONVERSION.      ****** **/
            qua_c_x =  til_qua           % 2 ;
            qua_c_y = (til_qua - qua_c_x)/ 2 ;
            ASS( qua_c_x >= 0 && qua_c_x <= 1 );
            ASS( qua_c_x >= 0 && qua_c_x <= 1 );
    
            /** **************************************** **/
            /** @VID_IID[ 0097 ]TIME[ 08:27:42 ]         **/
            /** Get the span of the current tile         **/
            /** in focus in terms of the smallest        **/
            /** tile size. ***************************** **/
            /** @VID_IID[ 0103 ]TIME[ 04:05:20 ]    .....**/
            /** Fixed the logic for getting til_peb .....**/
            til_peb =( OPEN_GL_PAINT5D_til_exp_CTO_til_peb(
                                       til_exp ));
                

            //:##########################################://
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL //:####://

                //:  @VID_IID[ 0098 ]TIME[ 03:52:30 ] :::://
                //:  This error check is pointless ::::::://
                I32 max_cor =( til_peb - 1 );

                if( til_peb > (max_cor+1) ){

            ////    printf("\n\n");
            ////    printf("[painpix_CTO_cuvipix:ARGS]:\n");
            ////    printf("\n");
            ////    printf("[til_qua]:%d\n" , til_qua);
            ////    printf("[til_exp]:%d\n" , til_exp);
            ////    printf("[til_lay]:%d\n" , til_lay);
            ////    printf("[loc_t_x]:%d\n" , loc_t_x);
            ////    printf("[loc_t_y]:%d\n" , loc_t_y);
            ////
            ////    printf("[til_peb:>:max_cor]....\n\n");
            ////    printf("[til_peb]:%d\n" , til_peb);
            ////    printf("[max_cor]:%d\n" , max_cor);
            ////
            ////    printf("\n\n");

                    ERR("[til_peb_IS_OOB_2021]");
                };;

            #endif //:###################################://

            /** **************************************** ***
            @VID_IID[ 0097 ]TIME[ 08:38:23 ] Get the top ***
            left origin of the current tile in focus.    ***
                                                         ***
            tor_i_x:TileORigin:int_x  [ tor==Tile_ORigin ]      
            tor_i_y:TileORigin:int_y                     ***
                                                         ***
            @VID_IID[ 0103 ]TIME[ 03:20:00 ]             ***
            [ tor_i_x ]AND[ tor_i_y ]RE_EXPLAINED_AGAIN  ***
                                                         ***
            *** **************************************** **/
            //:------------------------------------------://
            tor_i_x =( til_peb * loc_t_x );
            tor_i_y =( til_peb * loc_t_y );
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL //:####://
            if(  1
            && ( tor_i_x >= 0 && tor_i_x <= (256-1) )
            && ( tor_i_y >= 0 && tor_i_y <= (256-1) )
            ){
                /** DO NOTHING **/
            }else{
            
                printf("\n\n");
                printf("[til_exp]:%d\n" , til_exp );
                printf("[til_peb]:%d\n" , til_peb );
                printf("\n\n");

                printf("\n\n");
                printf("[tor_i_x]:%d\n" , tor_i_x );
                printf("[tor_i_y]:%d\n" , tor_i_y );
                printf("\n\n");

                ERR("[tor_is_out_of_range_my_friend]");

            };;
            #endif //:###################################://
            ASS( tor_i_x >= 0 && tor_i_x <= (256-1) );
            ASS( tor_i_y >= 0 && tor_i_y <= (256-1) );
            //:-----------------------------------------://

            /** pox : pixel [offset/origin] X **/
            /** poy : pixel [offset/origin] Y **/
            pox_qua = ( qua_c_x * 128 );
            poy_qua = ( qua_c_y * 128 );
            //:##########################################://
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL //:####://

                if( 1
                && ( pox_qua >= 0 && pox_qua <=(128 - 0)  )
                && ( poy_qua >= 0 && poy_qua <=(128 - 0)  )
                ){
                    /** OKAY. Do nothing. **/
                }else{
                    printf("[pox_qua]:%d\n",pox_qua);
                    printf("[poy_qua]:%d\n",poy_qua);
                    ERR("[OOB_pox_qua_AND_poy_qua]");
                };;

            #endif //:###################################://
            ASS( pox_qua >= 0 && pox_qua <=(128 - 0) );
            ASS( poy_qua >= 0 && poy_qua <=(128 - 0) );
            //://////////////////////////////////////////://

            cuvipix.cuv_i_x=( pox_qua + tor_i_x );
            cuvipix.cuv_i_y=( poy_qua + tor_i_y );
            ASS( cuvipix.cuv_i_x >= 0 );
            ASS( cuvipix.cuv_i_y >= 0 );
            ASS( cuvipix.cuv_i_x <=( 256 - 1 ) );
            ASS( cuvipix.cuv_i_y <=( 256 - 1 ) );

            return( cuvipix );
        }

        //:- - - - - - - - - - - -- - - - - - - - - - - -://

        U32 
        OPEN_GL_PAINT5D_til_exp_CTO_squ_ash(
        I32             til_exp
        )
        {
            /** **************************************** ***
            til_exp: Tile Exponent
            squ_ash: Literally "SQUASH" for "squash amount"
                CTO: ConvertTO
            *** **************************************** **/
            //:input_checks:-----------------------------://

                ASS( til_exp >= 0 && til_exp <= (8-1) );

            //:-----------------------------:input_checks://
            //:declare_var:------------------------------://

                I32 squ_ash=( 0 - 66077 /** @TRAP_VAL@ **/);

            //:------------------------------:declare_var://
            #if( AAC2020_CRASH_ON_VITAL_TODO >= 1 ) //:######://

                #error OPTIMIZE_WITH_A_LOOKUP_TABLE

            #endif //:#######################################://
        
            /** TODO: Re-write as lookup table once we       **/
            /** have the final PAINT5D GLSL shader working.  **/
            if( 0 == til_exp ){ squ_ash =   1; };
            if( 1 == til_exp ){ squ_ash =   2; };
            if( 2 == til_exp ){ squ_ash =   4; };
            if( 3 == til_exp ){ squ_ash =   8; };
            if( 4 == til_exp ){ squ_ash =  16; };
            if( 5 == til_exp ){ squ_ash =  32; };
            if( 6 == til_exp ){ squ_ash =  64; };
            if( 7 == til_exp ){ squ_ash = 128; };
            
            return( squ_ash );
        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
 
//://////////////////////////////////////////////////////://
//://////////////////////////////////////////////////////://
//://////////////////////////////////////////////////////://
#ifndef AAC2020_MACRO_THIS_IS_OPEN_GL             //: ## ://
#define P5D_TOR struct aac2020_p5d1ogl_P5D_TOR    //: 01 ://
#define U08 uint8_t /** GCC: <stdint.h> **/       //: 02 ://

        //:- - - - - - - - - - - -- - - - - - - - - - - -://

        /** P5D_TOR: Paint5D_TileORigin                  **/
        /**          The origin pixel in terms of the    **/
        /**          "data view" aka the texture         **/
        /**          memory storing the tile values.     **/
        struct aac2020_p5d1ogl_P5D_TOR{

            I32 loc_t_x ; //:LocalTileCoordinate:X
            I32 loc_t_y ; //:LocalTileCoordinate:Y

        };

        //:- - - - - - - - - - - -- - - - - - - - - - - -://

        P5D_TOR
        OPEN_GL_til_exp_AND_lay_dex_CTO_p5d_tor(
            I32 til_exp
        ,   I32 lay_dex
        )
        {
        //:declare_variables:----------------------------://

            P5D_TOR p5d_tor;
            I32     diagpix;
            I32     max_cor;

        //:----------------------------:declare_variables://
        //:CORE_LOGIC_OF_FUNCTION:=======================://

            diagpix=(
            OPEN_GL_PAINT5D_til_exp_CTO_diagpix(
                            til_exp ));;

            
            max_cor=(
            OPEN_GL_PAINT5D_til_exp_CTO_max_cor(
                            til_exp ));

            if( 0 == lay_dex ){
                p5d_tor.loc_t_x=( diagpix + 0 );
                p5d_tor.loc_t_y=( diagpix + 0 );
            }else
            if( 1 == lay_dex ){
                p5d_tor.loc_t_x=( diagpix + max_cor + 1 );
                p5d_tor.loc_t_y=( diagpix +           0 );
            }else
            if( 2 == lay_dex ){
                p5d_tor.loc_t_x=( diagpix +           0 );
                p5d_tor.loc_t_y=( diagpix + max_cor + 1 );
            }else{
                ERR("[BAD_LAYER_INDEX_YEAR_2021]");
            };;

            //:===================:CORE_LOGIC_OF_FUNCTION://
            //:coarse_range_check:-----------------------://

            assert( p5d_tor.loc_t_x >= 0 );
            assert( p5d_tor.loc_t_y >= 0 );
            assert( p5d_tor.loc_t_x <=( 512 -1 ) );
            assert( p5d_tor.loc_t_y <=( 512 -1 ) );
    
            //:-----------------------:coarse_range_check://
            //:Error_If_On_Config_Pixel:-----------------://
            if( 
                (
                    (256-1) == p5d_tor.loc_t_x
                &&  (256-1) == p5d_tor.loc_t_y
                )
                ||
                (
                    (512-1) == p5d_tor.loc_t_x
                &&  (256-1) == p5d_tor.loc_t_y
                )
                ||
                (
                    (256-1) == p5d_tor.loc_t_x
                &&  (512-1) == p5d_tor.loc_t_y
                )
                ||
                (
                    (512-1) == p5d_tor.loc_t_x
                &&  (512-1) == p5d_tor.loc_t_y
                )
            ){
                /** The configuration pixel is NEVER **/
                /** A valid location for storing data.**/
                ERR("[YOU_ARE_NO_THE_CONFIG_PIXEL]");
            };;
            //:-----------------:Error_If_On_Config_Pixel://
    
            return( p5d_tor );
        }

        //:- - - - - - - - - - - -- - - - - - - - - - - -://

        /** ******************************************** **/
        /** @VID_IID[ 0105 ]TIME[ 04:41:40 ]         *** **/
        /** This code only exists to test the        *** **/
        /** getter function                          *** **/
        /** OPEN_GL_PAINT5D_cuvipix_CTO_cuvbits_Get  *** **/
        /**                                          *** **/
        /** We cannot "PUT" pixels within GLSL       *** **/
        /** shader code. Hence the gaurd used to     *** **/
        /** omit this code when compiled as GLSL     *** **/
        /** fragment shader.                         *** **/
        /** @VID_IID[ 0105 ]TIME[ 04:43:42]EXPLAINED *** **/
        /** ******************************************** **/

        void                                             ///
        OPEN_GL_PAINT5D_cuvipix_CTO_cuvbits_Put(         ///

            //|LOCATION_OF_THE_DATA|||||||||||||||||||||||//
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
                                                         ///
            //|VALUES_OF_THE_DATA|||||||||||||||||||||||||//
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///
        ,   U32 cuvbits_cuv_b16  //:STORES_8_TILE_VALUES ///
                                                         ///
        )                                                ///
        {                                                ///
        #define I_X cuv_i_x_000_255  //:------------: 01 ://
        #define I_Y cuv_i_y_000_255  //:------------: 02 ://
        #define LAY lay_dex_000_002  //:------------: 03 ://
        #define AUS aus_dex_000_015  //:------------: 04 ://
        #define B16 cuvbits_cuv_b16  //:------------: 05 ://
        //:declare_variables:----------------------------://

            /** Which SubTile Graphic Are You Drawing On?**/
            /** There are four of them. This is the      **/
            /** origin pixel of the quadrant targeted.   **/

            I32 til_qua_q_x; //:QUADRANT                 ://
            I32 til_qua_q_y; //:                         ://
                             //:                         ://
            I32 til_qua_o_x; //:ORIGIN                   ://
            I32 til_qua_o_y; //:                         ://
                             //:                         ://
            I32     til_qua; //:1D_INDEX_VERSION         ://
                             //:@VID_IID[0105]T[6:51:10] ://
                             //:                         ://
            I32     peb_t_x; //:PEBBLE_TILE_X            ://
            I32     peb_t_y; //:PEBBLE_TILE_Y            ://
                             //:                         ://
            I32     loc_t_x; //:LOCAL_TILE[ X | Y ]COORD ://
            I32     loc_t_y; //:@VID_IID[0105]T[6:38:00] ://

            I32         t_e; //:til_exp( TileSizeExponent://

            I32     max_cor; //:maximum_local_tile_coord ://

            I32     til_peb; //:TILe_(size_in)_PEBbles   ://
                             //:@VID_IID[0105]T[7:26:00] ://

            //:UNSIGNED!!!!
            U32     til_val; //:two_bit_tile_value_to_set://
            //:UNSIGNED!!!!

        //- P5D_TOR p5d_tor;    Paint5D_TileORigin       -//
                             //:Origin_On_The_Texture    ://
                             //:Memory_Storing_Data      ://
 
        //:----------------------------:declare_variables://

            /** @VID_IID[ 0105 ]TIME[ 03:40:00 ] ******* **/
            /** cuvbits_cuv_b16 specifies               ]**/
            /** all the different tile values           ]**/
            /** at a canvas_user_view location          ]**/
            /** and layer specified by[ lay_dex_000_002 ]**/
            /** **************************************** **/    

            til_qua_q_x=( I_X / 128 );
            til_qua_q_y=( I_Y / 128 );
            ASS( til_qua_q_x >= 0 && til_qua_q_x <= 1 );
            ASS( til_qua_q_y >= 0 && til_qua_q_y <= 1 );

            til_qua_o_x=( til_qua_q_x * 128 );
            til_qua_o_y=( til_qua_q_y * 128 );
            ASS( til_qua_o_x >= 0 && til_qua_o_x <= 128 );
            ASS( til_qua_o_y >= 0 && til_qua_o_y <= 128 );

            peb_t_x=( cuv_i_x_000_255 -( til_qua_o_x ) );
            peb_t_y=( cuv_i_y_000_255 -( til_qua_o_y ) );

            /** xy to index formula for 2x2 cell grid **/
            til_qua =(   til_qua_q_x + 
                       ( til_qua_q_y  *  2 ) );;
            assert( til_qua >= 0 && til_qua <=(4-1) );

            //:set_all_8_tiles:--------------------------://
            #define TIL_EXP t_e
            for( t_e = 0 ; t_e <=(8-1) ; t_e ++ ){

                //|  Get Origin Of Block Of Memory ..... |//
                //|  For the Current Tile Value    ..... |//
                //|  That Is Being Laid            ..... |//
                //-  p5d_tor=(                           -//
                //-  til_exp_AND_lay_dex_CTO_p5d_tor(    -//
                //-  /**/    TIL_EXP                     -//
                //-  ,       lay_dex_000_002             -//
                //-  ));;                                -//

                /** Convert[ I_X , I_Y ] coords into   ..**/
                /** Local To Data Parition Coordinates ..**/

                til_peb=(
                    OPEN_GL_PAINT5D_til_exp_CTO_til_peb(
                                    TIL_EXP ));
                ASS( til_peb >= 0 && til_peb <= 128 );

                loc_t_x=( peb_t_x / til_peb );
                loc_t_y=( peb_t_y / til_peb );
                assert( loc_t_x >= 0 && loc_t_x <=(128-1));
                assert( loc_t_y >= 0 && loc_t_y <=(128-1));
        
                //:local_tile_exact_bounds_check:--------://

                    max_cor=( 
                    OPEN_GL_PAINT5D_til_exp_CTO_max_cor( 
                                    TIL_EXP ));;

                    if( loc_t_x > max_cor 
                    ||  loc_t_y > max_cor
                    ){
                        ERR("[LOC_TXY_OOB_2021_01_25]");
                    };;

                //:--------:local_tile_exact_bounds_check://

                til_val =(
                    ( cuvbits_cuv_b16 >> (t_e*2) )
                    &( BIN_011 ) //:<--2BitMask
                );;
                assert( til_val <= 3 );

                /** All Values Are U08 Here           **/
                /** But that's okay because were are  **/
                /** NOT compiling as OPENGL code here **/
                AAC2020_PAINT5D_Put(
                    (U08)til_qua //:[til_qua | t_q      ]://
                ,   (U08)TIL_EXP //:[til_exp | t_e      ]://
                ,   (U08)LAY     //:[til_lay | t_l | lay]://
                ,   (U08)loc_t_x //:[loc_t_x | t_x      ]://
                ,   (U08)loc_t_y //:[loc_t_y | t_y      ]://
                ,   (U08)AUS     //:[aus_dex | a_d      ]://
                ,   (U08)til_val //:[til_val | t_v      ]://
                );;
            };;
            #undef  TIL_EXP
            //:--------------------------:set_all_8_tiles://

        #undef  I_X  //:----------------------------: 01 ://
        #undef  I_Y  //:----------------------------: 02 ://
        #undef  LAY  //:----------------------------: 03 ://
        #undef  AUS  //:----------------------------: 04 ://
        #undef  B16  //:----------------------------: 05 ://
        }

#undef  P5D_TOR                                   //: 01 ://
#undef      U08                                   //: 02 ://
#endif  //:#AAC2020_MACRO_THIS_IS_OPEN_GL         ::: ## ://
//://////////////////////////////////////////////////////://
//://////////////////////////////////////////////////////://
//://////////////////////////////////////////////////////://

        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                              ///
        OPEN_GL_PAINT5D_cuvipix_CTO_cuvbits_Get(         ///
                                                         ///
            /** FUNCTION_WRITTEN_ON[ 2021_01_18 ]  **/   ///
            /**    VID_IID[ 0097 ]                 **/   ///
            /**    TIME[ 00:00:00 ]TO[ 06:02:20 ]  **/   ///
                                                         ///
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///
        ){                                               ///
        #define C_X cuv_i_x_000_255               //: 01 ://
        #define C_Y cuv_i_y_000_255               //: 02 ://
        #define T_L lay_dex_000_002               //: 03 ://
        #define A_D aus_dex_000_015               //: 04 ://
        #define t_e_CTO_m_c OPEN_GL_PAINT5D_til_exp_CTO_max_cor
        #define t_e_CTO_s_a OPEN_GL_PAINT5D_til_exp_CTO_squ_ash
            //:input_checks:- - - - - - - - - - - - - - -://

                ASS( cuv_i_x_000_255 >=  (  0  )  );
                ASS( cuv_i_y_000_255 >=  (  0  )  );
                ASS( lay_dex_000_002 >=  (  0  )  );
                ASS( aus_dex_000_015 >=  (  0  )  );

                ASS( cuv_i_x_000_255 <=  (256-1)  );
                ASS( cuv_i_y_000_255 <=  (256-1)  );
                ASS( lay_dex_000_002 <=    (3-1)  );
                ASS( aus_dex_000_015 <=   (16-1)  );

            //:- - - - - - - - - - - - - - -:input_checks://
            //:var__declare:- - - - - - - - - - - - - - -://

                //:UNSIGNED_FOR_BIT_PACKING:-------------://

                /** Canvas_User_View:BITS  **/
                U32 cuvbits =( U00 /** 0x00 **/ );

                U32     t_v; /** [ TileValue / til_val ] **/

                //:-------------:UNSIGNED_FOR_BIT_PACKING://
                //:EVERYTHING_ELSE:----------------------://

                /// glocpix not needed, OPEN_GL_PAINT5D_Get
                /// function handles calculation of tha.
                /// glocpix; /** GLObal Coord PIXels  ...**/
                             /** Data View Coordinate ...**/

            //  IV2 til_qua; /** Tile Quadrant ..........**/
                I32 qua_c_x; /** Tile Quadrant: cell x   **/
                I32 qua_c_y; /** Tile Quadrant: cell y   **/

                I32 nos_t_x; /** NO_Squash(nos)TileX(t_x)**/
                I32 nos_t_y; /** NO_Squash(nos)TileY(t_y)**/

                I32     t_x; /** Final Local Tile [X|Y]  **/
                I32     t_y; /** AKA[ loc_t_x | loc_t_y ]**/

                I32     s_a; /** Squash Amount (squ_ash) **/

                I32     t_q; /** TileQuadrant / til_qua  **/
                I32     t_e; /** TileExponent / til_exp  **/
                I32     m_c; /** MaximumCoord / max_cor  **/

                //:----------------------:EVERYTHING_ELSE://

            //:- - - - - - - - - - - - - - -:var__declare://

            //: til_qua ==( [ cuv_i_x && cuv_i_y ] / 128 )
            qua_c_x =( C_X / 128 );
            qua_c_y =( C_Y / 128 );
            ASS( qua_c_x >= 0 && qua_c_x <= 1 );
            ASS( qua_c_y >= 0 && qua_c_y <= 1 );

            /** @VID_IID[ 0098 ]TIME[ 05:32:00 ] **/
            /** Fixed xy-to-index math here.     **/
            t_q = qua_c_x + ( qua_c_y  *  2  );
            ASS( t_q >= 0 && t_q <= (4-1) );

            /** NOS: NOt_Squashed ............ **/
            /** nos_t_x : Not squashed loc_t_x **/
            /** nos_t_y : Not squashed loc_t_y **/
            nos_t_x = C_X -( qua_c_x * 128 );
            nos_t_y = C_Y -( qua_c_y * 128 );

            /** t_e     == til_exp            **/
            /** til_exp == TILe_size_EXPonent **/
            for( t_e = 0 ; t_e <=( 8 - 1 ) ; t_e ++ ){

                /** m_c == max_cor  **/
                /** Max Coord Index **/
                m_c = t_e_CTO_m_c(  t_e  );
                s_a = t_e_CTO_s_a(  t_e  );

                t_x = nos_t_x / s_a ;
                t_y = nos_t_y / s_a ;

                /**  t_y === loc_t_y ( PAINT5D.D._ )**/
                /**  t_x === loc_t_x ( #_DIA_DAL_# )**/
                ASS( t_x >= 0 && t_x <= m_c );
                ASS( t_y >= 0 && t_y <= m_c );
                 
                //:BINARY PACKED TILE VALUES (til_val)
                //:      BIN[ 00 ] ==> DEC[ 0 ]
                //:      BIN[ 01 ] ==> DEC[ 1 ]
                //:      BIN[ 10 ] ==> DEC[ 2 ]
                //:      BIN[ 11 ] ==> DEC[ 3 ]
                t_v=(
                    OPEN_GL_PAINT5D_Get(                    
                        t_q    //: I32 [ til_qua / t_q ] ://                        
                    ,   t_e    //: I32 [ til_exp / t_e ] ://                        
                    ,   T_L    //: I32 [ til_lay / t_l ] ://                        
                    ,   t_x    //: I32 [ loc_t_x / t_x ] ://                        
                    ,   t_y    //: I32 [ loc_t_y / t_y ] ://                        
                    ,   A_D    //: I32 [ aus_dex / a_d ] ://                        
                    ));;

                ASS( t_v <= (4-1) );
                ASS( t_v == ( BIN_011 & t_v) );
                cuvbits=(
                cuvbits |
                    (
                        /** 2 bits per tile value. **/
                        /** Position based on it's **/
                        /** tile exponent (t_e)    **/
                        t_v <<( t_e * 2 )
                    )
                );;
            };;

            return( cuvbits );

        #undef          C_X //:---------------------: 01 ://
        #undef          C_Y //:---------------------: 02 ://
        #undef          T_L //:---------------------: 03 ://
        #undef          A_D //:---------------------: 04 ://
        #undef  t_e_CTO_m_c //:---------------------: 05 ://
        #undef  t_e_CTO_s_a //:---------------------: 06 ://
        }

        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        RET_MAIN
        FUN_MAIN( 
            V_A /** V_A: Void_Argument **/
        ){
             
            /** @VID_IID[ 0093 ]TIME[ 00:21:10 ] **/
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL
                FV4 FragColor; /** <-- C99 Code  **/
            #endif

            FragColor = FV4_MAK(
                1.0
            ,   0.0
            ,   1.0
            ,   1.0 //:Alpha
            );;

            
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL

                /** ************************** ***
                If [C99/C11] code, return the  
                fragment color here.  
                @VID_IID[ 0093 ]TIME[ 00:51:30 ]
                *** ************************** **/

                return( FragColor ); /**<-- C99**/

            #endif

        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
    //:type_macros:--------------------------------------://
                                                   //[ x ]//
        #undef U32      //:  01  ://               //[ x ]//
        #undef I32      //:  02  ://               //[ x ]//
        #undef IV2      //:  03  ://               //[ x ]//
        #undef UV4      //:  04  ://               //[ x ]//
        #undef T_F      //:  05  ://               //[ x ]//
        #undef P5D      //:  06  ://               //[ x ]//
        #undef SAM      //:  07  ://               //[ x ]//
        #undef U00      //:  08  ://               //[ x ]//
        #undef I00      //:  09  ://               //[ x ]//
        #undef B_3      //:  10  ://               //[ x ]//
        #undef V_A      //:  11  ://               //[ x ]//
        #undef FV4      //:  12  ://               //[ x ]//
        #undef ASS      //:  13  ://               //[ x ]//
        #undef ERR      //:  14  ://               //[ x ]//
                                                   //[ x ]//
    //:--------------------------------------:type_macros://
    //:seven_letter_macros:------------------------------://
    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/
    /** Decided on [MAK] for [MAKE] as our constructor   **/
    /** postfix ........................................ **/

        #undef FV4_MAK
        #undef BIN_011
        #undef CUVIPIX

    //:------------------------------:seven_letter_macros://
    //:main_shim_macros:---------------------------------://

        #undef RET_MAIN
        #undef FUN_MAIN

    //:---------------------------------:main_shim_macros://
    //:===========:P5D_001____AAC2020_PAINT5D_DEFAULT_001://  

//:=============================:PASTE_INTO_FILE[ P5D_001._ ]://
//:==============================:AAC2020_PAINT5D_DEFAULT_001://
//:======================:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE://


//:CTRL_F_HELP:==============================================://
/** ******************************************************** ***

    WRONG[ sqa_ash  ]CORRECT[ squ_ash ]
    WRONG[ cuvibits ]CORRECT[ cuvbits ]

    WRONG[ til_sip  ]CORRECT[ til_peb ]

    WRONG[ qua_i_x  ]CORRECT[ qua_c_x ]( Cell , not integer )
    WRONG[ qua_i_y  ]CORRECT[ qua_c_y ]( Cell , not integer )

*** ******************************************************** **/
//:==============================================:CTRL_F_HELP://
//:VARIABLE_EXPLANATIONS:====================================://
/** ******************************************************** ***

    cuvbits :

        All tile values for all    
        tile sizes that are on the   
        current pixel. Bitpacked     
        into a 32 bit unsigned int.  

    til_peb :

        Tile Span Measured In Pebbles.
        PEBBLE: The size of the SMALLEST tile.
                (A tile with til_exp == 0 )



*** ******************************************************** **/
//:====================================:VARIABLE_EXPLANATIONS://