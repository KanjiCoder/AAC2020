//:shader code file for UISHARE


    //:Get_User_Interface_Rectangle_By_Enum:-------------://
    REC
    AAC2020_UISHARE_Get_REC_p5d( 
        I32 lis_dex //:<--[ 0 ==> UILISTS.P5D_UI0 ] --=--
                    //:   [ 1 ==> UILISTS.P5D_UI1 ]   |
                    //:   [ 2 ==> UILISTS.P5D_UI2 ]   8
                    //:   [ # ==> UILISTS.P5D_UI# ]   |
                    //:   [ 7 ==> UILISTS.P5D_UI7 ] --=--
    )
    {
        ASS( lis_dex >= 0 && lis_dex <=(8-1) );

        REC p5d_rec; //+[ p5d_ui0 ... p5d_ui7 ]+//
        p5d_rec =(
        AAC2020_TAUFRAG_Get_REC_p5d(
            lis_dex //:EX:[ P5D_UR0 | P5D_UR1 | ... ]
        ));;
        return( p5d_rec );
    }
    //:-------------:Get_User_Interface_Rectangle_By_Enum://
    //:Get_Button_Pixel:---------------------------------://
    /** ************************************************ ***
    @VID_IID[ 0253 ]TIME[ 01:33:50 ]
    FOR_CPU_SIDE_CODE_SEE[ AAC2020_UILISTS_Get_ButExt ]
    FOR_CPU_SIDE_CODE_SEE[ AAC2020_UILISTS_Get_ButMai ]
    Get_ButExt: Get[s] button EXTra Data
    Get_ButMai: Get[s] button MAIN  data
                MAIN_DATA: 
                    but_tex : Button Text
                    but_typ : Button Type
                    but_val : Button Value
    *** ************************************************ **/

        FV4 //+ Normalized_0_to_1_RGBA_Color +//
        AAC2020_UISHARE_Get_but_pix(
            I32 dex_edi //:<-- What Editor? AKA[ dex_sub ]
        ,   I32 lis_dex //:<-- What UI?     AKA[ lis_dex ]
        ,   I32     b_y //:<-- What Button? AKA[ but_dex ]
        ,   I32     b_x //:<-- What Character Cell?
        ,   IV2 but_pix //:<-- Local_Pixel_Within_Button_Cell
        )
        { 
            //:NO_OPERATIONS:----------------------------://
            if( dex_edi   > 0 ){ /**  NOOP **/ };
            if( lis_dex   > 0 ){ /**  NOOP **/ };
            if( b_y       > 0 ){ /**  NOOP **/ };
            if( b_x       > 0 ){ /**  NOOP **/ };
            if( but_pix.x > 0 ){ /**  NOOP **/ };
            //:----------------------------:NO_OPERATIONS://
            //:C89_DECLARE_ALL_VARS_HERE:----------------://
                I32 dex_var ; //:Var_Cell:Index_Of_Button_ 
                I32 pix_dex ; //:Var_Cell:1D_Index__Of_2X2
                IV2     t_l ; //:Var_Cell:XY_Origin_Of_2X2 
            
                U32 asc_pix; //:<--pixel_encoding_4_letters
                I32 asc_val; //:<--Ascii_Value_Of_Character
                I32     c_c; //:<--Custom_Character_Code
            
                I32     c_y; //:<--GLYPH_CELL:Y
                I32     c_x; //:<--GLYPH_CELL:X
            
                U32 gly_pix; //:<--Glyph: PIXEL
                U32 gly_bit; //:<--Glyph: BIT
                F32 gly_f32; //:<--Glyph: BIT (as Float32)
            //:----------------:C89_DECLARE_ALL_VARS_HERE://
            //:C99_NOOPS:--------------------------------://
            #if !defined( AAC2020_MACRO_THIS_IS_OPEN_GL )
                t_l.x=( 0 );
                t_l.y=( 0 );

                if( dex_var > 0 ){ /** NOOP **/ };
                if( pix_dex > 0 ){ /** NOOP **/ };
                if(   t_l.x > 0 ){ /** NOOP **/ };
               
                if( asc_pix > 0 ){ /** NOOP **/ };
                if( asc_val > 0 ){ /** NOOP **/ };

                if(     c_c > 0 ){ /** NOOP **/ };
                if(     c_y > 0 ){ /** NOOP **/ };
                if(     c_x > 0 ){ /** NOOP **/ };

                if( gly_pix > 0 ){ /** NOOP **/ };
                if( gly_bit > 0 ){ /** NOOP **/ };
                if( gly_f32 > 0 ){ /** NOOP **/ };
            #endif
            //:--------------------------------:C99_NOOPS://
            //:Asserts:----------------------------------://

                //:Glyphs are 8x8 pixels, so local pixel
                //:coordinate should be between[ 0 to 7 ]
                ASS( but_pix.x >= 0 && but_pix.x <= 7 );
                ASS( but_pix.y >= 0 && but_pix.y <= 7 );

            //:----------------------------------:Asserts://
            //:TAKEN_FROM[ AAC2020_UILISTS_Get_ButMai ]==://    
            #define NOC_WID         (      16             )
            #define NOC_HIG         (      16             )
            #define UILISTS_LIS_DEX ( lis_dex             )
            #define UILISTS_BUT_DEX (     b_y             )
            #define BUTTON_CELL_X   ( UILISTS_LIS_DEX + 0 )
            #define BUTTON_CELL_Y   ( UILISTS_BUT_DEX + 0 )
            #define TAUDEPO_DEX_VAR ( dex_var             )
            
                //: @_XY_TO_INDEX_FORMULA_@
                dex_var =( 0 
                +( BUTTON_CELL_X *    1    ) 
                +( BUTTON_CELL_Y * NOC_WID )
                );;
            
            #undef NOC_WID
            #undef NOC_HIG
            #undef UILISTS_LIS_DEX
            #undef UILISTS_BUT_DEX
            #undef BUTTON_CELL_X
            #undef BUTTON_CELL_Y    
            #undef TAUDEPO_DEX_VAR
            //:=:TAKEN_FROM[ AAC2020_UILISTS_Get_ButMai ]://   
            //:1D_LOC:BUTTON_2X2_DATA:-------------------://
            //+  C99 : AAC2020_UILISTS_Get_ButMai        +//
            //- GLSL : AAC2020_UISHARE_Get_ButMai<-DONTDO-//
            //+  C99 : AAC2020_TAUDEPO_Get     +++++++++++//
            //+ GLSL : aac2020_taufrag_pix_dex +++++++++++//
            pix_dex=(
            aac2020_taufrag_pix_dex(     
                14      //: dex_tau :EX:TAUDEPO.TAU_014  :// <<<<<<<<<<<<<< TODO: Remove This HardCoding.                        
            ,   dex_edi //: dex_sub :EX:TAUDEPO.PAINT5D  ://                                                  
            ,   dex_var //: dex_var :EX:TAUDEPO.P5D_A_D  ://  
            ));;
            //:-------------------:1D_LOC:BUTTON_2X2_DATA://
            //:2D_LOC:BUTTON_2X2_DATA:-------------------://
            #define DEX pix_dex  /**  1D_Index_Of_Pixel  **/
            #define WIP ( 512 )  /**  Width_In_Pixels    **/
            #define  A  MAK_I32  /**  AKA:MI3 ...........**/
            #define  B  TRU_F32  /**  AKA:TRU ...........**/
            #define  C  MAK_F32  /**  AKA:MF3 ...........**/

                //:Get Top Left Pixel Coord Of 2x2 cluster:
                t_l.y  =A( B( C(DEX) / (C(      WIP))  ));   
                t_l.x  = (  (   DEX  - ( (t_l.y*WIP))  ));

            #undef  DEX  /** 1D Index Of Top Left Pixel  **/
            #undef  WIP  /** Width Of TAUDEPO in Pixels  **/
            #undef   A   //:-----------------------------://
            #undef   B   //:-----------------------------://
            #undef   C   //:-----------------------------://
            //:-------------------:2D_LOC:BUTTON_2X2_DATA://
            //:GET_PIXEL_WITH_LETTER_OF_INTEREST:--------://
            //:GET_PIXEL_WITH_CHARACTER_OF_INTEREST:-----://
            /** It would be simpler to just take the 2x2 **/
            /** cluster of pixels and convert to a button**/
            /** data object that contains a 7-letter     **/
            /** character string of the button text. But **/
            /** then we are:                             **/
            /** 1: Using up a lot of extra bandwidth.    **/
            /** 2: Doing lots of extra calcs we are just **/
            /**    going to throw away.                  **/
            /** @VID_IID[ 0252 ]TIME[ 01:11:23 ]         **/
            /** **************************************** **/
            #define DO_NON_OPTIMIZED_CODE ( 0 )
            #if(    DO_NON_OPTIMIZED_CODE > 0 ) //:######://
           //::::GET_CORRECT_PIXEL:BRANCHED_VERSION::::::://
            #define C_I b_x   /** C_I == character Index **/

                if( C_I >= 0 && C_I <= 3 ){
                    //:1st_4_characters  [ 0 , 1 , 2 , 3 ]
                    asc_pix =(
                        AAC2020_TAUFRAG_TexelFetch_U32(                       
                            t_l.x + 0 , t_l.y + 0       ));;               
                }else                                             
                if( C_I >= 4 && C_I <= 7 ){   
                    //:2nd_4_characters  [ 4 , 5 , 6 , 7 ]
                    asc_pix =(
                        AAC2020_TAUFRAG_TexelFetch_U32(                       
                            t_l.x + 1 , t_l.y + 0       ));;               
                }else{                                            
                    //:BUTTON_X_VALUE_OUT_OF_BOUNDS:              
                    //:PUT_BLANK_COLOR_HERE                       
                };;                                               

            #undef C_I
            #else  //:###################################://
            //::::GET_CORRECT_PIXEL:NON_BRANCHING_VERSION://
            #define C_I b_x   /** C_I == character Index **/

                /** ************************************ **/
                /**[ asc_pix ]encodes FOUR ascii chars   **/
                /** We only care about ONE(1) of them.   **/
                /** @VID_IID[ 0252 ]TIME[ 01:29:23 ]     **/
                /** ************************************ **/

                asc_pix=( AAC2020_TAUFRAG_TexelFetch_U32(
                    t_l.x + (C_I/4) //:#_TOPLEF_2X2_BDC_#://
                ,   t_l.y + (  0  ) //:#_TOPLEF_2X2_BDC_#://
                ));;

            #undef C_I
            #endif //:###################################://
            //:-----:GET_PIXEL_WITH_CHARACTER_OF_INTEREST://
            //:--------:GET_PIXEL_WITH_LETTER_OF_INTEREST://
            //:GET_ASCII_VALUE_OF_GLYPH_CHARACTER:-------://
            #define M MOD_I32  //:-----------------------://
            #define U U32_255  //:-----------------------://

                asc_val=(U32_I32(
                    //:@VID_IID[0293]T[01:11:11]@NET_BYTE@
                    //:#_EXTRACTED_COMMENT_293_NET_BYTE_##
                    (   asc_pix >> ((3 - M( b_x , 4 ))*8) ) 
                    
                    //:Mask_Just_To_Be_Safe
                    & ( U /**AKA:UxFF**/ )
                ));;

            #undef  M  //:-------------------------------://    
            #undef  U  //:-------------------------------://    
            //:-------:GET_ASCII_VALUE_OF_GLYPH_CHARACTER://
            //:CONVERT_ASC_TO_CHARACTER_CODE:------------://  
            /** @VID_IID[ 0252 ]TIME[ 02:01:23 ] ******* **/    
            #define ITS_A_CUSTOM_CHARACTER_CODE ( c_c )

                if( asc_val >= '0' && asc_val <= '9' ){
                    c_c =( 0+( asc_val - '0' ));
                }else
                if( asc_val >= 'A' && asc_val <= 'Z' ){
                    c_c =(10+( asc_val - 'A' ));
                }else
                if( asc_val == '_' ){
                    c_c =( (10+26+1) - 1 );
                }else{
                    c_c=( (8*8)-1 );
                };;

            #undef  ITS_A_CUSTOM_CHARACTER_CODE /******* **/
            //:------------:CONVERT_ASC_TO_CHARACTER_CODE://    
            //:FETCH_GLYPH_PIXEL_USING_CHAR_CODE:============://
            #define GDX         (  0 ) //:TOP_LEF:UIRECTS:TEX  //:<<<<<<<<<<<<<<<<<< TODO: Remove This Hard Coding. GDX & GDY
            #define GDY         (  0 ) //:TOP_LEF:UIRECTS:TEX  //:<<<<<<<<<<<<<<<<<< TODO: Remove This Hard Coding. GDX & GDY
            #define UIR_WID     (  8 ) //:8x8 glyphs on texture
            #define UIR_HIG     (  8 ) //:8x8 glyphs on texture
            #define PNG_BIT_DEX ( 31 ) //:<<<<<<<<<<<<<<<<<<<<<<<<<<< TODO:Un hard code this. uses value[ AAC2020_UIRECTS_64P_08G_PNG_bit_dex ]
            /** @VID_IID[ 0252 ]TIME[ 02:16:16 ] *********** **/

                //:Convert Character Code[ c_c ]To a cell xy ://
                //:coordinate.[ c_c ] is just the 1D-index   ://
                //:location of the character cell.           ://
                //:INDEX_TO_XY_GLSL:-------------------------://
                #define A AAC2020_POLYOGL_MAK_I32
                #define B AAC2020_POLYOGL_MAK_F32
                #define C AAC2020_POLYOGL_Trunc

                    c_y  =A( C( B(c_c) /(   B(UIR_WID))   ));
                    c_x  = (     (c_c  -( c_y*UIR_WID )   ));

                #undef  A  //:-------------------------------://
                #undef  B  //:-------------------------------://
                #undef  C  //:-------------------------------://
                //:-------------------------:INDEX_TO_XY_GLSL://
            
                //:Entire_Pixel_Of_Glyph:
                gly_pix=(
                    AAC2020_TAUFRAG_TexelFetch_U32(
                        GDX +( c_x * 8 )+( but_pix.x )
                    ,   GDY +( c_y * 8 )+( but_pix.y )
                    ));;
                
                gly_bit=(
                ( gly_pix >> PNG_BIT_DEX ) & BIN_001 );;
                
                gly_f32=( U32_F32( gly_bit ) );
            
            #undef          GDX //:<--ORIGIN:Of_SUB_Texture_Area
            #undef          GDY //:<--ORIGIN:Of_SUB_Texture_Area
            #undef      UIR_WID //:<--Width :Of_SUB_Texture_Area
            #undef      UIR_HIG //:<--Height:Of_SUB_Texture_Area
            #undef  PNG_BIT_DEX //:<--Bit_Of_Pixel_To_Look_At
            //:============:FETCH_GLYPH_PIXEL_USING_CHAR_CODE://
            //:RENDER_FINAL_PIXEL_FOR_UI_CHARACTER_GLYPH:----://

                I32 oex=( MOD_I32( b_x , 2 ) );                                                             
                I32 oey=( MOD_I32( b_y , 2 ) );   

                FV4 rec_pix = MAK_FV4(
                    ( gly_f32 * 255.0 * oex )
                ,   ( gly_f32 * 255.0 * oey )
                ,   ( gly_f32 * 255.0 )
                ,   (     1.0 * 255.0 )
                );;

            //:----:RENDER_FINAL_PIXEL_FOR_UI_CHARACTER_GLYPH://
                                                            
            return( rec_pix );
        }

    //:Get_Button_Pixel:---------------------------------://

    //:Global_To_Local:----------------------------------://
    /** @VID_IID[ 0293 ]T[01:17:42]EXTRACTED_JUNK_CODE   **/
    /** #_EXTRACTED_ON_2021_05_10_0809AM_# ************* **/
    #define AAC2020_UISHARE_glo_CTO_loc E_S(DONT_20210408)
    //+ @VID_IID[ 0250 ]TIME[ 02:13:23 ]DO_NOT_USE_FUNC! +//
    //+ REASON:Do Everything In 1-Coord System(GLOBAL)   +//
    //:----------------------------------:Global_To_Local://
    //:CLEAN_UP_AFTER_YOURSELF:--------------------------://

        #undef  DO_NON_OPTIMIZED_CODE

    //:--------------------------:CLEAN_UP_AFTER_YOURSELF://