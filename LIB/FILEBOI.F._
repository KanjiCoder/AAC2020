//:----------------------------------------------------------://
//: FILEBOI: Manages File System Access                      ://
//:----------------------------------------------------------://
//:FILE_MACROS:TOP:##########################################://

    /** Don't get carried Away Here.        **/
    /** 3 uncommon macros max.              **/
    /** 7   common macros max (U32,I32,ETC) **/

    #define I_S aac2020_fileboi_Info_str

//:##########################################:FILE_MACROS:TOP://
//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://
    void 
    aac2020_fileboi_Halt( const char* msg_err )
    {
        printf("[FATAL_ERROR:AAC2020_fileboi]:%s\n", msg_err );
        fflush(stdout);
        exit( 489 /** 69 + 420 == 489 , NICE! **/ );
    }
//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:INFO_PRINT_STRING:========================================://

    void
    aac2020_fileboi_Info_str( 
        const char* msg_fmt /** Format String **/
    ,   const char* msg_inf /** Information String **/
    )
    {
        if( AAC2020_SILENCE.FILEBOI >= 1 ){

            /** Do nothing. Silenced. **/

        }else{

            printf("[FILEBOI_INFO_STR_BELOW]:\n");
            printf( msg_fmt , msg_inf );
            fflush(stdout);

        };;

    }

//:========================================:INFO_PRINT_STRING://
//:PRIVATE:RECURIVE_MAKE_DIRECTORY:==========================://

    int
    aac2020_fileboi_MakeOneDirectory(
        const char* name
    )
    {
        int mkdir_status_zero_is_success=( 23 );

        #ifdef __linux__
            mkdir_status_zero_is_success =  mkdir(name, 0777);  
        #else
            mkdir_status_zero_is_success =  mkdir(name);
        #endif

        return( mkdir_status_zero_is_success );
    }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    void aac2020_fileboi_mkdir(char* path) 
    {
        if( ((char*)0) != strrchr(path, '\\' ) ){
            aac2020_fileboi_Halt("BACK_SLASHES_NOT_SUPPORTED]");
        };;

        char *sep = strrchr(path, '/');
        if( ((char*)0) != sep ){

            *sep = 0;
            aac2020_fileboi_mkdir(path);
            *sep = '/';
        };;

        if(
            aac2020_fileboi_MakeOneDirectory(path) 
        && 
            errno != EEXIST
        ){
            if( AAC2020_SILENCE.FILEBOI <= 0 ){

                /** REVISIT[ DATE[ 2020_12_09 ] ] ********** **/
                /** Is this an error? Why the fuck did I     **/
                /** Write this? I have no clue what this     **/
                /** should mean? Is it info or actually      **/
                /** an error that should fail fast?          **/
                I_S("[FUCKING_FILES_MAN]:(((%s)))\n", path); 

            };;
        };;
    }

//:==========================:PRIVATE:RECURIVE_MAKE_DIRECTORY://
//:TOUCH_FILE:===============================================://
#define U32 uint32_t /** GCC: <stdint.h> **/
#define SMF aac2020_fileboi_Halt /** SMF:SupriseMotherFucker **/
#define MACRO_MAX_LEN ( 256 )

    U32
    AAC2020_FILEBOI_TouchFile(
        const char* file_name /** EX:frag_shader_nam **/
    )
    {
        I_S("[FILEBOI_TouchFile]:%s\n" , file_name );;  

        //:GET_STR_LEN_AND_VALIDATE:-------------------------://
        #define NILIDEX ( 1 ) /** 1 null terminator **/

            int str_len = strlen( file_name );
            if( str_len > ( MACRO_MAX_LEN - NILIDEX ) ){

                /** Must be short enough to accomidate     **/
                /** Length of string plus null terminator. **/
                aac2020_fileboi_Halt("[TOO_LONG]");

            };;
        
        #undef  NILIDEX  /** 1 null terminator **/
        //:-------------------------:GET_STR_LEN_AND_VALIDATE://
        //:EXPECT_EXACTLY_ONE_DOT:---------------------------://
        //:DO_NOT_ALLOW_BACKSLASH:---------------------------://

            /** These constraints will make it easier to     **/
            /** implement your code. * * * * * * * * * * * * **/

            int nos = ( 0 ); /** nos: Number_Of_back_Slashes **/
            int nod = ( 0 ); /** nod: Number_Of_Dots **/
            for( int i = 0; i < str_len; i++ ){

                if( file_name[i] == '.'  ){ nod++; };
                if( file_name[i] == '\\' ){ nos++; };

            };;

            if( nod >   1  ){ SMF("[TOO_MANY_DOTS]"); }else
            if( nod <=  0  ){ SMF("[ZERO_____DOTS]"); }else
            if(  1  == nod ){ /** OKAY. NOOP **/    }else
            {
                SMF("[WTF:EDCL]");//:ExpectedDeadCodeLine
            };; 

            if( nos != 0 ){ SMF("[UNDOCUMENTED_BACKSLASHES]");};

        //:---------------------------:DO_NOT_ALLOW_BACKSLASH://
        //:---------------------------:EXPECT_EXACTLY_ONE_DOT://
        //:CREATE_DIRECTORY:---------------------------------://

            //:PATH_ONLY_SUB_STRING:- - - - - - - - - - - - -://

                //:FIND__LAST_SLASH:. . . . . . . . . . . . .://

                    int dex_last_slash =( 0 - 1 );
                    for( int i = 0; i < str_len; i++ ){
                        if( '/' == file_name[ i ]  ){
                            dex_last_slash =( i );
                        };;
                    };;

                //:. . . . . . . . . . . . .:FIND__LAST_SLASH://
                //:TAKE_TO_LAST_SLASH:. . . . . . . . . . . .://

                    /** dir_sus : DIRectory_SUb_String **/
                    char dir_sus[ MACRO_MAX_LEN ] = {0};
                    for( int i = 0; i < dex_last_slash; i++ ){

                        if( '.' != file_name[ i ]  ){

                            dir_sus[ i ] = file_name[ i ];

                        }else{
                            //:DNE:Did_Not_Expect
                            //:DBL:Dot_Before_Lastslash
                            aac2020_fileboi_Halt("[DNE_DBL]");
                        };;

                    };;

                //:. . . . . . . . . . . .:TAKE_TO_LAST_SLASH://

            //:- - - - - - - - - - - - -:PATH_ONLY_SUB_STRING://
            //:RECURSIVE_MAKE_DIR:- - - - - - - - - - - - - -://
 
                if( dex_last_slash <= 0 ){
                        
                    /** Creation of directory requires at  * **/
                    /** least ONE character BEFORE the     * **/
                    /** last slash.                        * **/
                    /** Example/Reason: f/t.x              * **/

                }else
                if( dex_last_slash  < 1 ){

                    /** ECATOH: ExpectedCaseAboveTOHandle  * **/
                    /** "<1" is the same as "<=0"          * **/
                    aac2020_fileboi_Halt("[ECATOH]");

                }else{

                    //:RECURSIVE_MAKE_DIR:4REAL:. . . . . . .://

                        I_S("[MAKING_DIRECTORY:dir_sus]:%s\n"
                                              ,dir_sus);;

                        /** dir_sus : DIRectory_SUb_String **/
                        aac2020_fileboi_mkdir( dir_sus );

                    //:. . . . . . .:RECURSIVE_MAKE_DIR:4REAL://

                };;

            //:- - - - - - - - - - - - - -:RECURSIVE_MAKE_DIR://

        //:---------------------------------:CREATE_DIRECTORY://
        //:CREATE_FILE_IF_NOT_EXIST:-------------------------://

            /** Open For: APPEND/BINARY/UPDATE (a/b/+)   * * **/
            /** Using wrong open can DELETE FILE CONTENTS  * **/
            /** Which is not what we want. We want a touch.  **/
            FILE*   file_han = fopen( file_name , "ab+" );
            fclose( file_han );

        //:-------------------------:CREATE_FILE_IF_NOT_EXIST://

        return( 0x00 );
    }

#undef  MACRO_MAX_LEN
#undef  SMF /** www.youtube.com/watch?v=_bSEfx6D8mA **/
#undef  U32
//:===============================================:TOUCH_FILE://
//:SAVE_PNG_FILE_TO_DISK:====================================://
#define U08    uint8_t /** GCC: <stdint.h> **/        //: 01 ://
#define U32   uint32_t /** GCC: <stdint.h> **/        //: 02 ://
#define I32    int32_t /** GCC: <stdint.h> **/        //: 03 ://
#define CHR const char                                //: 04 ://
#define TXT       char                                //: 05 ://
#define ERR aac2020_fileboi_Halt                      //: 06 ://

    int
    AAC2020_FILEBOI_SaveFile_PNG(
        CHR* nof_wex /** NameOfFile__WithEXtension       ....**/
    ,   U08* pix_arr /** PIXel ARRay in RGBA byte format ....**/
    ,   U32  pix_wid /** Width  in pixels of pix_arr     ....**/
    ,   U32  pix_hig /** Height in pixels of pix_arr     ....**/
    )
    {
        /** @VID_IID[ 0095 ]TIME[ 01:32:50 ] *************** **/
        /** This function was made by copying and pasting    **/
        /** R:\G\AAC2020\LIB\MAIN\AAC2020_TestSaveFile_PNG._ **/
        /** and refactoring it to be more general use.       **/
        /** ************************************************ **/

        //:error_check_inputs:-------------------------------://

            if( ((CHR*)0) == nof_wex ){ 
                ERR("[KANJICODER_SAYS:NIL_STR_nof_wex_2021]");
            };;

            if( ((U08*)0) == pix_arr ){ 
                ERR("[KANJICODER_SAYS:NIL_ARR_pix_arr:2021]");
            };;
            if( 0 == pix_wid || 0 == pix_hig ){
                ERR("[INVALID_PNG_SIZE]");
            };;

            /** ".PNG" is 4 characters. Thus file name **/
            /** should be MORE than 4 characters.      **/
            if( strlen( nof_wex ) <= 4 ){
                ERR("[NO_POSSIBLE_WAY_NAME_IS_VALID_2021]");
            };;

            if(   '/' == nof_wex[ 0 ] //:FORWARDSLASH___CHAR
            ||   '\\' == nof_wex[ 0 ] //:BACKSLASH_CHARACTER
            ){
                ERR("[DO_NOT_PUT_SLASH_BEFORE_BASE_FOLDER]");
            };;

        //:-------------------------------:error_check_inputs://

        //- unsigned char pix_arr[512*512*4]; //:AKA[ image ]-//
        //- unsigned int  pix_wid=( 512 );                   -//
        //- unsigned int  pix_hig=( 512 );                   -//

        //:SAVE_FILE_PNG:------------------------------------://
        #define FILE_PNG ( "USE:nof_wex" );

            //:create_relative_file_path:fil_png:------------://

                /**  @VID_IID[ 0095 ]TIME[ 01:08:42 ] ...... **/
                /**  Base Name Of The Saved File.     ...... **/
                CHR* nam_bas = "MOD/" ;

                I32  len_nof = strlen( nof_wex );
                I32  len_bas = strlen( nam_bas );
                I32  len_all =( len_nof + len_bas );
                TXT* fil_png =((TXT*)0);

                /** @VID_IID[ 0095 ]TIME[ 01:07:20 ]  ...... **/
                /** Create max index (m_i) variables. ...... **/
                I32 m_i_bas =( len_bas           - 1 );
                I32 m_i_nof =( len_nof + len_bas - 1 );

                fil_png = calloc(1, ( len_all + 1 ) );

                I32 l_i =( 0 ); //:local_index

                for( I32 i = 0 ; i < len_all ; i ++ ){

                    if( i >=(   0   )
                    &&  i <=(m_i_bas)
                    ){
                        l_i =( i - 0 );
                        if( l_i < 0 || l_i > m_i_bas ){
                            ERR("[l_i:OOB:FROM:BASEFOLDER]");
                        };;

                        fil_png[ i ] = nam_bas[ l_i ];
                    }else
                    if( i >=( m_i_bas + 1 ) 
                    &&  i <=( m_i_nof + 0 )
                    ){
                        /** @VID_IID[ 0096 ]TIME[ 00:13:00 ] **/
                        /** Minus_One_Fix_To_Var[ l_i ]  *** **/
                        l_i =( i - m_i_bas - 1 );
                        if( l_i < 0 || l_i > (len_nof-1) ){
                            ERR("[l_i:OOB:FROM:FILENAME]");
                        };;
                        fil_png[ i ] = nof_wex[ l_i ];
                    }else{
                        ERR("[OUT_OF_BOUNDS_SAVE_FILE_2021]");
                    };;
                };;

                /** @VID_IID[ 0095 ]TIME[ 01:25:16 ]      ...**/
                /** Make absolutely sure there is a null  ...**/
                /** terminator at the end of all of this. ...**/
                fil_png[ (len_all+1)-1 ]=( 0x00 );

            //:------------:create_relative_file_path:fil_png://

            //: We don't have a touchFolder, only TouchFile.
            //: AAC2020_FILEBOI_TouchFolder("./MOD");
            AAC2020_FILEBOI_TouchFile( fil_png /**file_png**/ );

            U32 result = ( 11223344 /** TRAPVALUE **/ );

            #if( AAC2020_INCLUDE_LODEPNG >= 1 ) //:##########://

                result=( 
                    lodepng_encode32_file( 

                        fil_png  //:AKA[ file_png ]

                    ,   pix_arr  //:AKA[ image ]
                    ,   pix_wid 
                    ,   pix_hig
                    )
                );;

            #endif //:#######################################://
            #if( AAC2020_INCLUDE_LODEPNG <= 0 ) //:##########://

                /** @VID_IID[ 3H 17M 18S ] ***************** **/
                /** When lodepng is not included, we just    **/
                /** want to pretend it returned success      **/
                /** so that we do not crash the program.     **/
                /** ((( result = ( 0 ) )))                   **/
                /** **************************************** **/

                result = ( 0 );

                /** @VID_IID[ 0065 ]TIME[ 3H 19M 29S ]   * * **/
                /** SILENCE THE COMPILER.                * * **/
                if( pix_arr[0]> 1 ){ /** NOOP: NO:LODEPNG **/ };
                if( pix_wid   > 1 ){ /** NOOP: NO:LODEPNG **/ };
                if( pix_hig   > 1 ){ /** NOOP: NO:LODEPNG **/ };

                printf("\n\n");
                printf("[*********************************]\n");
                printf("[- - - - - - - - - - - - - - - - -]\n")
                printf("[FROM:LIB/FILEBOI.F._.............]\n");
                printf("[- - - - - - - - - - - - - - - - -]\n");
                printf("[PNG_FILE_IS_JUST_A_STUB_FILE.....]\n");
                printf("[PLEASE_INCLUDE_LODEPNG_TO_FIX....]\n");
                printf("[SET:AAC2020_INCLUDE_LODEPNG >= 1 ]\n");
                printf("[*********************************]\n");
                printf("[SHOULD_BE_IN: LIBCHAN.TOP._ .....]\n");
                printf("[*********************************]\n");
                printf("\n\n");
                fflush( stdout );

            #endif //:#######################################://
            //:free_calloc_memory:---------------------------://

                free( fil_png /**[ file_png / file_path ]**/ );

            //:---------------------------:free_calloc_memory://
        #undef  FILE_PNG
        //:------------------------------------:SAVE_FILE_PNG://

        return( result );
    } 

#undef  U08                                           //: 01 ://
#undef  U32                                           //: 02 ://
#undef  I32                                           //: 03 ://
#undef  CHR                                           //: 04 ://
#undef  TXT                                           //: 05 ://
#undef  ERR                                           //: 06 ://
//:====================================:SAVE_PNG_FILE_TO_DISK://
//:FILE_MACROS:BOT:##########################################://
 
    /** REDEFINE, THEN UNDEF. For Redundancy. **/
    #define I_S aac2020_fileboi_Info_str
    #undef  I_S 

//:##########################################:FILE_MACROS:BOT://