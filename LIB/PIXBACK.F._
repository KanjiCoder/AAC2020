//: PIXBACK.F._:

//:Backup functions for PIXNAME's data.

//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://
    void 
    aac2020_pixback_Halt( const char* msg_err )
    {
        printf("[FATAL_ERROR:aac2020_pixback]:%s\n", msg_err );
        fflush(stdout);
        exit( 111 );
    }
//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:LOG_AFTER_HALT:===========================================://

    void
    aac2020_pixback_Info_any(
        const char* str_fmt
    ,   void*       dat_any   
    )
    { if( AAC2020_SILENCE.PIXBACK <= 0 ){

        /** Same Line As Next Printf **/
        printf("[pixback_log]....(   " ); fflush( stdout );
        printf( str_fmt , dat_any      ); fflush( stdout );
        printf(               "   )\n" ); fflush( stdout );

    };; }

//:===========================================:LOG_AFTER_HALT://

//:INIT_NONE:================================================://
#define U32 uint32_t /** GCC: <stdint.h> **/

    U32
    AAC2020_PIXBACK_InitNone( U32 u32 )
    {
        if( u32 ){ /** Reserved for future use **/ };

        /** @VID_IID[ 0H 37M 29S ]          **/
        /** And then no work was ever done. **/

        extern U32 AAC2020_PIXBACK_UnitTest( U32  );
                   AAC2020_PIXBACK_UnitTest( 0x00 );

        return( 0x00 );
    }

#undef  U32
//:================================================:INIT_NONE://
//:GENERIC_PIXNAME_BACKUP_CODE:==============================://
#define U08 uint8_t /** GCC: <stdint.h> **/
#define I32 int32_t /** GCC: <stdint.h> **/

    void
    AAC2020_PIXBACK_Backup(

        U08*  pixname_data //:<-- Non Freeable
    ,   U08* *BYREF_backup //:<-- @REFERENCE_TO_A_POINTER@
    ,   I32   size_of_data //:<-- Measured_In_Bytes
    )
    {
        assert( ((void*)0) !=  pixname_data  );
        assert( ((void*)0) !=  BYREF_backup  ); //:@REFS_N_NIL@
        assert( ((void*)0) ==(*BYREF_backup) );

        (*BYREF_backup)=( malloc( size_of_data ) );
        memcpy(
            (*BYREF_backup)
        ,    pixname_data
        ,    size_of_data
        );;
    }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    void
    AAC2020_PIXBACK_Restore(

        U08*  pixname_data //:<-- @NON_FREEABLE_FILESCOPE_VAR@
    ,   U08* *BYREF_backup //:<-- @REFERENCE_TO_A_POINTER@
    ,   I32   size_of_data //:<-- Measured_In_Bytes
    )
    {
        assert( ((void*)0) !=  pixname_data  );
        assert( ((void*)0) !=  BYREF_backup  );
        assert( ((void*)0) !=(*BYREF_backup) );

        //:copy_and_free:------------------------------------://

            memcpy(
                pixname_data
            ,  (*BYREF_backup)
            ,   size_of_data
            );;

            free( (*BYREF_backup) );
                  (*BYREF_backup)=((void*)0);

        //:------------------------------------:copy_and_free://

        assert( ((void*)0) ==(*BYREF_backup) );
    }

#undef  U08 
#undef  I32 
//:==============================:GENERIC_PIXNAME_BACKUP_CODE://
//:BACKUP_THINGS_THAT_ARE_NOT_PIXELS:========================://
#define I32 int32_t /** GCC: <stdint.h> **/
#define U08 uint8_t /** GCC: <stdint.h> **/

    void
    AAC2020_PIXBACK_Backup_void(
        void*  pixname_data //:<-- Non Freeable
    ,   void* *BYREF_backup //:<-- @REFERENCE_TO_A_POINTER@
    ,   I32    size_of_data //:<-- Measured_In_Bytes
    )
    {
        /** @VID_IID[ 0061 ]TIME[ 2H 40M 23S ]      **/
        /** It's just a simple wrapper with re-cast **/
        AAC2020_PIXBACK_Backup(

             (U08* )pixname_data //:<-- Non Freeable
        ,    (U08**)BYREF_backup //:<-- @REFERENCE_TO_A_POINTER@
        ,           size_of_data //:<-- Measured_In_Bytes
        );;
    }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    void
    AAC2020_PIXBACK_Restore_void(
        void*  pixname_data //:<-- Non Freeable
    ,   void* *BYREF_backup //:<-- @REFERENCE_TO_A_POINTER@
    ,   I32    size_of_data //:<-- Measured_In_Bytes
    )
    {
        /** @VID_IID[ 0061 ]TIME[ 2H 40M 23S ]      **/
        /** It's just a simple wrapper with re-cast **/
        AAC2020_PIXBACK_Restore(

             (U08* )pixname_data //:<-- Non Freeable
        ,    (U08**)BYREF_backup //:<-- @REFERENCE_TO_A_POINTER@
        ,           size_of_data //:<-- Measured_In_Bytes
        );;
    }

#undef  I32
#undef  U08
//:========================:BACKUP_THINGS_THAT_ARE_NOT_PIXELS://
//:SPECIFIC_BACKUP_RESTORE:==================================://
#define U08 uint8_t    /** GCC: <stdint.h> **/        //: 01 ://
#define U32 uint32_t   /** GCC: <stdint.h> **/        //: 02 ://
#define V_P ((void*)0) /** V_P:VoidPointer **/        //: 03 ://
#define D_V  void**    /** D_V:DoubleVoid  **/        //: 04 ://
#define ERR aac2020_pixback_Halt                      //: 05 ://

    //:SPECIFIC_BACKUP_RESTORE:taudirt:----------------------://

        /** ************************************************ **/
        /**NOTE: TAUDIRT IS NOT AN ALLOCATION OF PIXEL BYTES!**/
        /**      But we use U08 because we don't care what   **/
        /**      the data is. We just care how much of it    **/
        /**      there is.                                   **/
        /**      @VID_IID[ 0075 ]TIME[ 01H 09M 02S ]         **/
        /** ************************************************ **/

        void
        AAC2020_PIXBACK_Backup_taudirt(
            U08* *BYREF_backup //:<-- @REF_TO_A_POINTER@
        )
        {
            //:input_check:----------------------------------://

                /** @VID_IID[ 0075 ]TIME[ 00H 40M 05S ] **/

                if( V_P ==  BYREF_backup  ){ 
                    ERR("[BUTAU:REFS_CANT_BE_NULL:20210102.B]");
                };;
                if( V_P !=(*BYREF_backup )){
                    ERR("[BUTAU:POINTER_IS_IN_USE:20210102.B]");
                };;

            //:----------------------------------:input_check://
            //:GetSizeOfDataToBackup:------------------------://
                U32 
                SIZE_OF_taudirt_dir_any =( sizeof( struct
                AAC2020_TAUDIRT_l_A_04x04_TAU_Pix_512 ));;

                U32
                SIZECHK_taudirt_dir_any =( sizeof( 
                AAC2020_TAUDIRT_DIR_ANY               ));;

                if( SIZE_OF_taudirt_dir_any
                !=  SIZECHK_taudirt_dir_any
                ){
                    ERR("[TUADIRT_SIZE_CHECK_FAIL:BACKUP]");
                };;
            //:------------------------:GetSizeOfDataToBackup://
            //:Do_Thing_With_Data:BACKUP:--------------------://
            
                /** BUTAU:BackUp_TAUdirt **/

                if( V_P==  BYREF_backup  ){ ERR("[BUTAU:01]");};
                if( V_P!=(*BYREF_backup) ){ ERR("[BUTAU:02]");};
                AAC2020_PIXBACK_Backup_void(
                    &( AAC2020_TAUDIRT_DIR_ANY )//:<--@PERM_DATA 
                ,    (D_V)BYREF_backup //:<-- @REF_TO_A_POINTER@
                ,    ( SIZE_OF_taudirt_dir_any ) //:<--NUM_BYTES
                );;

            //:--------------------:Do_Thing_With_Data:BACKUP://
        }

        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://

        void
        AAC2020_PIXBACK_Restore_taudirt(
            U08* *BYREF_backup //:<-- @REF_TO_A_POINTER@
        )
        {
            //:input_check:----------------------------------://

                /** @VID_IID[ 0075 ]TIME[ 00H 42M 40S ] **/

                if( V_P ==  BYREF_backup  ){ 
                    ERR("[RETAU:REFS_CANT_BE_NULL:20210102.R]");
                };;
                if( V_P ==(*BYREF_backup )){
                    ERR("[RETAU:BACKUPDATA_ISNULL:20210102.R]");
                };;

            //:----------------------------------:input_check://
            //:GetSizeOfDataToBackup:------------------------://
                U32 
                SIZE_OF_taudirt_dir_any =( sizeof( struct
                AAC2020_TAUDIRT_l_A_04x04_TAU_Pix_512 ));;

                U32
                SIZECHK_taudirt_dir_any =( sizeof( 
                AAC2020_TAUDIRT_DIR_ANY               ));;

                if( SIZE_OF_taudirt_dir_any
                !=  SIZECHK_taudirt_dir_any
                ){
                    ERR("[TUADIRT_SIZE_CHECK_FAIL:RESTORE]");
                };;
            //:------------------------:GetSizeOfDataToBackup://
            //:Do_Thing_With_Data:RESTORE:-------------------://

                /** RETAU:REstore_TAUdirt **/

                if( V_P==  BYREF_backup  ){ ERR("[RETAU:01]");};
                if( V_P==(*BYREF_backup) ){ ERR("[RETAU:02]");};
                AAC2020_PIXBACK_Restore_void(
                    &( AAC2020_TAUDIRT_DIR_ANY )//:<--@PERM_DATA 
                ,    (D_V)BYREF_backup //:<-- @REF_TO_A_POINTER@
                ,    ( SIZE_OF_taudirt_dir_any ) //:<--NUM_BYTES
                );;
                if( V_P!=(*BYREF_backup) ){ ERR("[RETAU:03]");};

            //:-------------------:Do_Thing_With_Data:RESTORE://
        }

    //:----------------------:SPECIFIC_BACKUP_RESTORE:taudirt://
    //:SPECIFIC_BACKUP_RESTORE:taudepo:----------------------://

        void
        AAC2020_PIXBACK_Backup_taudepo(
            U08* *BYREF_backup //:<-- @REF_TO_A_POINTER@
        )
        {
            if( V_P==  BYREF_backup  ){ ERR("[PIXBACK_01]");};
            if( V_P!=(*BYREF_backup) ){ ERR("[PIXBACK_02]");};
            AAC2020_PIXBACK_Backup(
                &( AAC2020_PIXNAME_taudepo_cpu_pix[0] )
            ,   BYREF_backup      //:<-- @REF_TO_A_POINTER@
            ,   ( 512 * 512 * 4 ) //:<-- Measured_In_Bytes
            );;
        }

        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://

        void
        AAC2020_PIXBACK_Restore_taudepo(
            U08* *BYREF_backup //:<-- @REF_TO_A_POINTER@
        )
        {
            if( V_P==  BYREF_backup  ){ ERR("[PIXBACK_03]");};
            if( V_P==(*BYREF_backup) ){ ERR("[PIXBACK_04]");};
            AAC2020_PIXBACK_Restore(
                &( AAC2020_PIXNAME_taudepo_cpu_pix[0] )
            ,   BYREF_backup      //:<-- @REF_TO_A_POINTER@
            ,   ( 512 * 512 * 4 ) //:<-- Measured_In_Bytes
            );;
            if( V_P!=(*BYREF_backup) ){ ERR("[PIXBACK_05]");};
        }


    //:----------------------:SPECIFIC_BACKUP_RESTORE:taudepo://
    //:SPECIFIC_BACKUP_RESTORE:paint5d:----------------------://

        void
        AAC2020_PIXBACK_Backup_paint5d(
            U08* *BYREF_backup //:<-- @REF_TO_A_POINTER@
        )
        {
            if( V_P==  BYREF_backup  ){ ERR("[PIXBACK_01]");};
            if( V_P!=(*BYREF_backup) ){ ERR("[PIXBACK_02]");};
            AAC2020_PIXBACK_Backup(
                &( AAC2020_PIXNAME_paint5d_cpu_pix[0] )
            ,   BYREF_backup      //:<-- @REF_TO_A_POINTER@
            ,   ( 512 * 512 * 4 ) //:<-- Measured_In_Bytes
            );;
        }

        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://

        void
        AAC2020_PIXBACK_Restore_paint5d(
            U08* *BYREF_backup //:<-- @REF_TO_A_POINTER@
        )
        {
            if( V_P==  BYREF_backup  ){ ERR("[PIXBACK_03]");};
            if( V_P==(*BYREF_backup) ){ ERR("[PIXBACK_04]");};
            AAC2020_PIXBACK_Restore(
                &( AAC2020_PIXNAME_paint5d_cpu_pix[0] )
            ,   BYREF_backup      //:<-- @REF_TO_A_POINTER@
            ,   ( 512 * 512 * 4 ) //:<-- Measured_In_Bytes
            );;
            if( V_P!=(*BYREF_backup) ){ ERR("[PIXBACK_05]");};
        }


    //:----------------------:SPECIFIC_BACKUP_RESTORE:paint5d://

#undef  U08                                           //: 01 ://
#undef  U32                                           //: 02 ://
#undef  V_P                                           //: 03 ://
#undef  D_V                                           //: 04 ://
#undef  ERR                                           //: 05 ://
//:==================================:SPECIFIC_BACKUP_RESTORE://
//:UNIT_TEST:================================================://
#define I32  int32_t /** GCC: <stdint.h> **/
#define U32 uint32_t /** GCC: <stdint.h> **/
#define U08  uint8_t /** GCC: <stdint.h> **/
#define ERR  aac2020_pixback_Halt
#define LOG  aac2020_pixback_Info_any

    U32
    AAC2020_PIXBACK_UnitTest( U32 u32 )
    {
        if( u32 ){ /** Reserved For Future Use **/ };

        /** @VID_IID[ 0061 ]TIME[ 03H 59M 32S ] . . . . . . .**/
        /** First Draft Of Unit Test Finished. It Passes. . .**/

        LOG( "[AAC2020_PIXBACK_UnitTest:BEG]",0);

        //:variable_and_data_assignments:--------------------://

            U08 v_1; /** [value1 / var1 ] **/
            U08 v_2; /** [value2 / var2 ] **/
            void* backup_data =((void*)0);

            //:Two_Arrays_Must_Have_Identical_data:----------://

                I32 backup_test_data[ 8 ]={                    
                /**/0x0A0A0A0A   ,   0x2e777777     
                ,   0x74697774   ,   0x632e6863     
                ,   0x6b2f6d6f   ,   0x696a6e61     
                ,   0x65646f63   ,   0x000A0A72     
                };;      

                I32 backup_test_copy[ 8 ]={                    
                /**/0x0A0A0A0A   ,   0x2e777777     
                ,   0x74697774   ,   0x632e6863     
                ,   0x6b2f6d6f   ,   0x696a6e61     
                ,   0x65646f63   ,   0x000A0A72     
                };;   

            //:----------:Two_Arrays_Must_Have_Identical_data://
            //:Must_Have_Some_Different_Data:----------------://

                I32 mess_it_up[ 8 ]={                    
                /**/0x0A0A0A0A   ,   0x7777772e                  
                ,   0x74776974   ,   0x63682e63                  
                ,   0x6f6d2f6b   ,   0x616e6a69                  
                ,   0x636f6465   ,   0x720A0A00                  
                };;   

            //:----------------:Must_Have_Some_Different_Data://

        //:--------------------:variable_and_data_assignments://
        //:backup_and_verify:--------------------------------://

            LOG("[PIXBACK:backup_and_verify]",0);

            AAC2020_PIXBACK_Backup_void(
                &( backup_test_data[ 0 ] ) //:<-- Non Freeable
            ,   &( backup_data           ) //:<-- @REF_TO_PTR@
            ,    ( 8 * 4                 ) //:<-- UNITS:BYTES
            );;           

            /** @VID_IID[ 0061 ]TIME[ 03H 19M 8S ] **/
            /** Confirm Memory Copied Correctly.   **/

            for( I32 dex = 0 ; dex <= ((8 * 4) - 1) ; dex++ ){

                v_1 = ((U08*)&( backup_test_data[ 0 ] ))[ dex ];
                v_2 = ((U08*)   backup_data            )[ dex ];

                if( v_1 != v_2 ){
                    ERR("[COPY_IN_UNIT_TEST_FAILED:BACKUP]");
                };;

            };;

        //:--------------------------------:backup_and_verify://
        //:mess_up_the_original_data:------------------------://

            LOG("[PIXBACK:mess_up_the_original_data]",0);

            U08 some_dont_match=( 0 );
            for( I32 mit = 0 ; mit <= ( 8 - 1 ) ; mit ++ ){

                /** mit : Mess_It_Up **/

                v_1 = backup_test_data[ mit ];
                v_2 = mess_it_up[       mit ];
                if( v_1 != v_2 ){ some_dont_match++; };

                backup_test_data[ mit ] = mess_it_up[ mit ];
                
            };;
            /** @VID_IID[ 0061 ]TIME[ 03H 32M 32S ]          **/
            /** If all new values match, then we really      **/
            /** haven't messed up anything and we can't      **/
            /** see the visible effects of restoration.      **/
            assert( some_dont_match >= 1 );
        //:------------------------:mess_up_the_original_data://
        //:restore_and_verify:-------------------------------://

            LOG("[PIXBACK:restore_and_verify:001]",0);

            AAC2020_PIXBACK_Restore_void(
                &( backup_test_data[ 0 ] ) //:<-- Non Freeable
            ,   &( backup_data           ) //:<-- @REF_TO_PTR@
            ,    ( 8 * 4                 ) //:<-- Units:BYTES
            );;    

            LOG("[PIXBACK:restore_and_verify:002]",0);

            /** @VID_IID[ 0061 ]TIME[ 03H 26M 59S ]          **/
            /** Once again, the original data should MATCH   **/
            /** the backup data. Since we just restored      **/
            /** using the backup.                            **/

            assert( ((void*)0) == backup_data );

            for( I32 dex = 0 ; dex <= ((8 * 4) - 1) ; dex++ ){

                v_1 = ((U08*)&( backup_test_data[ 0 ] ))[ dex ];
                v_2 = ((U08*)&( backup_test_copy[ 0 ] ))[ dex ];

                if( v_1 != v_2 ){
                    ERR("[COPY_IN_UNIT_TEST_FAILED:RESTORE]");
                };;

            };;

            LOG("[PIXBACK:restore_and_verify:003]",0);

        //:-------------------------------:restore_and_verify://

        LOG( "[AAC2020_PIXBACK_UnitTest:END]",0);


        AAC2020_TODOMAN_Vital("[UNIT_TESTS_FOR_SPECIFIC_BACKUP_FUNCTIONS]");

        return( 0x00 );
    }

#undef  I32
#undef  U32
#undef  U08
#undef  ERR
#undef  LOG
//:================================================:UNIT_TEST://