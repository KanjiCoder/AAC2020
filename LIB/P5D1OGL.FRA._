

    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//
    //[AAC2020_PAINT5D_DEFAULT_001:======================]//
    //[PASTE_INTO_FILE[ P5D_001._ ]:=====================]//
    //:P5D_001____AAC2020_PAINT5D_DEFAULT_001:===========://
    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//
    //:main_shim_macros:---------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //[===]//
        #define RET_MAIN void                      //| 0 |//
        #define FUN_MAIN main                      //| 1 |//
                                                   //| - |//
        #define TYP_F_C /** nothing **/            //| 2 |//
        #define INN_F_C /** nothing **/            //| 3 |//
                                                   //| - |//
        #define ERR     /** NOTHING **/            //| 4 |//
        #define LOG     /** NOTHING **/            //| 5 |//
        #define LOF     /** NOTHING **/            //| 6 |//
        #define LOI     /** NOTHING **/            //| 7 |//            
    #else                                          //[===]//                           
        #define RET_MAIN FV4                       //| 0 |//
        #define FUN_MAIN AAC2020_P5D1OGL_Main      //| 1 |//
                                                   //| - |//
        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //| 2 |//
        #define INN_F_C F_C                        //| 3 |//
                                                   //| - |//
        #define ERR   aac2020_p5d1ogl_Halt         //| 4 |//
        #define LOG   aac2020_p5d1ogl_Info_any     //| 5 |//
        #define LOF   aac2020_p5d1ogl_Info_f32     //| 6 |//
        #define LOI   aac2020_p5d1ogl_Info_i32     //| 7 |//
    #endif                                         //[===]//
    //:---------------------------------:main_shim_macros://
    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//
    //:C99_AND_GLSL_STRUCTS:-----------------------------://
    /** *********************************** ***    //| S |//
    @VID_IID[ 0097 ]TIME[ 08:00:00 ]               //| S |//
    These structs are declared exactly the same    //| S |//
    for the [CPU / HOST] C99 code as they are      //| S |//
    for the [ GPU / DEVICE ] GLSL code.            //| S |//
    *** *********************************** **/    //| S |//
    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
                                                   //| S |//
        struct AAC2020_P5D1OGL_CUVIPIX{            //| S |//
                                                   //| S |//
            I32 cuv_i_x ; //:canvas_user_view:X :////| S |//
            I32 cuv_i_y ; //:canvas_user_view:Y :////| S |//
                          //:i_x == integer x   :////| S |//
                          //:i_y == integer y   :////| S |//
        };                                         //| S |//
                                                   //| S |//
    //:-----------------------------:C99_AND_GLSL_STRUCTS://
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                        //[ x ]//
        AAC2020_P5D1OGL_TexelFetch_U32(            //[ x ]//
            SAM u32_sam //:<--[C99/C11]AND[GLSL]:////[ x ]//
        ,   IV2 glo                                //[ x ]//
        ,   I32 levodet_ALWAYS_ZERO                //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
            return(                                //[ x ]//
            AAC2020_FRAGCOM_TexelFetch_U32(        //[ x ]//
            /**/    u32_sam       , glo            //[ x ]//
            ,       levodet_ALWAYS_ZERO            //[ x ]//
            ));;                                   //[ x ]//
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                        //[ x ]//
        AAC2020_P5D1OGL_TexelFetch_U32XY(          //[ x ]//
            SAM u32_sam //:<--[C99/C11]AND[GLSL]:////[ x ]//
        ,   I32 g_x                                //[ x ]//
        ,   I32 g_y                                //[ x ]//
        ,   I32 levodet_ALWAYS_ZERO                //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
            return(                                //[ x ]//
            AAC2020_FRAGCOM_TexelFetch_U32XY(      //[ x ]//
            /**/    u32_sam , g_x , g_y            //[ x ]//
            ,       levodet_ALWAYS_ZERO            //[ x ]//
            ));;                                   //[ x ]//
        }                                          //[ x ]//
        //:NEW_FEATURE_TAUDEPO_ACCESS:-------------------://
        //:DATE[ 2021_02_10 ]VID_IID[ 0131 ]T[ 04:35:23 ]://
    ////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////

    /** @VID_IID[ 0177 ]TIME[ 02:47:00 ]         ******* **/
    /** Fetching Data From Texture Memory Is Now ******* **/
    /** all in[ TAUFRAG.FRA._                    ******* **/

    //- REMOVED: aac2020_p5d1ogl_taudepo_pix_dex - - - - -//
    //+ ....USE: aac2020_taufrag_pix_dex         + + + + +//

    //- REMOVED: AAC2020_P5D1OGL_TAUDEPO_Get_U32 - - - - -//
    //+ ....USE:         aac2020_taufrag_Get_U32 + + + + +//

    //- AAC2020_P5D1OGL_TAUDEPO_Get_REC          - - - - -//
    //+ ....USE:         aac2020_taufrag_Get_REC + + + + +//
 
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
    ////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////
        //:DATE[ 2021_02_10 ]VID_IID[ 0131 ]T[ 04:35:23 ]://
        //:-------------------:NEW_FEATURE_TAUDEPO_ACCESS://
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                        //[ x ]//
        AAC2020_P5D1OGL_BitPack_Get(               //[ x ]//
            IV2     glo                            //[ x ]//
        ,   I32 aus_dex                            //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
                                                   //[ x ]//
            U32 u32_var ;                          //[ x ]//
            U32 til_val ;                          //[ x ]//
                                                   //[ x ]//
            u32_var =(                             //[ x ]//
                AAC2020_P5D1OGL_TexelFetch_U32(    //[ x ]//          
                    P5D //:texture_to_sample    :////[ x ]//
                ,   glo //:integer_texel_coord  :////[ x ]//
                ,  ( 0 )//:level_of_detail_zero :////[ x ]//
                ));;                               //[ x ]//
                                                   //[ x ]//
            til_val =(                             //[ x ]//
                ( u32_var >> (aus_dex*2) )         //[ x ]//
                &                                  //[ x ]//
                BIN_011                            //[ x ]//
            );;                                    //[ x ]//
                                                   //[ x ]//
            return( til_val );                     //[ x ]//
        }                                          //[ x ]//
                                                   //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        I32                                        //[ - ]//
        AAC2020_P5D1OGL_til_exp_CTO_til_peb(       //[ - ]//
            I32         til_exp                    //[ - ]//
        )                                          //[ - ]//
        {                                          //[ - ]//
                                                   //[ - ]//
        #define T_E til_exp                        //[ - ]//
        #define T_P til_peb                        //[ - ]//
                                                   //[ - ]//
            ASS( til_exp >= 0 && til_exp <=(8-1) );//[ - ]//
                                                   //[ - ]//
                        I32 T_P ;                  //[ - ]//
            if( 0 == T_E ){ T_P = (  1 ); };       //[ 1 ]//
            if( 1 == T_E ){ T_P = (  2 ); };       //[ 2 ]//
            if( 2 == T_E ){ T_P = (  4 ); };       //[ 3 ]//
            if( 3 == T_E ){ T_P = (  8 ); };       //[ 4 ]//
            if( 4 == T_E ){ T_P = ( 16 ); };       //[ 5 ]//
            if( 5 == T_E ){ T_P = ( 32 ); };       //[ 6 ]//
            if( 6 == T_E ){ T_P = ( 64 ); };       //[ 7 ]//
            if( 7 == T_E ){ T_P = (128 ); };       //[ 8 ]//
                                                   //[ - ]//
            return( til_peb );                     //[ - ]//
                                                   //[ - ]//
        #undef  T_E                                //[ - ]//
        #undef  T_P                                //[ - ]//
                                                   //[ - ]//
                                                   //[ - ]//
        }                                          //[ - ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        I32                                        //[ - ]//
        AAC2020_P5D1OGL_til_exp_CTO_max_cor(       //[ - ]//
            I32         til_exp                    //[ - ]//
        )                                          //[ - ]//
        {                                          //[ - ]//
        #define T_E til_exp                        //[ - ]//
        #define M_C max_cor                        //[ - ]//
                                                   //[ - ]//
            I32 max_cor;                           //[ - ]//
            if( 0 == T_E ){ M_C = ( 128 - 1 ); };  //[ 1 ]//
            if( 1 == T_E ){ M_C = (  64 - 1 ); };  //[ 2 ]//
            if( 2 == T_E ){ M_C = (  32 - 1 ); };  //[ 3 ]//
            if( 3 == T_E ){ M_C = (  16 - 1 ); };  //[ 4 ]//
            if( 4 == T_E ){ M_C = (   8 - 1 ); };  //[ 5 ]//
            if( 5 == T_E ){ M_C = (   4 - 1 ); };  //[ 6 ]//
            if( 6 == T_E ){ M_C = (   2 - 1 ); };  //[ 7 ]//
            if( 7 == T_E ){ M_C = (   1 - 1 ); };  //[ 8 ]//
                                                   //[ - ]//
                                                   //[ - ]//
            return( max_cor );                     //[ - ]//
                                                   //[ - ]//
        #undef  T_E                                //[ - ]//
        #undef  M_C                                //[ - ]//
        }                                          //[ - ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        I32                                        //[ x ]//
        AAC2020_P5D1OGL_til_exp_CTO_diagpix(       //[ x ]//
            I32         til_exp                    //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
        #define T til_exp                          //[ x ]//
        #define D diagpix                          //[ x ]//
                                                   //[ x ]//
            I32 diagpix =( 9999 );                 //[ x ]//
                                                   //[ x ]//
            //:@VID_IID[ 0085 ]TIME[ 01:53:00 ] :////[ x ]//
            //:TODO: Make into lookup table:    :////[ x ]//
            //:BUT MUST GET WORKING IN OPENGL   :////[ x ]//
            //:BEFORE YOU DO SUCH REFACTOR!     :////[ x ]//
            if( 0 == T ){ D = 0   ; }else          //[ x ]//
            if( 1 == T ){ D = 128 ; }else          //[ x ]//     
            if( 2 == T ){ D = 192 ; }else          //[ x ]//
            if( 3 == T ){ D = 224 ; }else          //[ x ]//
            if( 4 == T ){ D = 240 ; }else          //[ x ]//
            if( 5 == T ){ D = 248 ; }else          //[ x ]//
            if( 6 == T ){ D = 252 ; }else          //[ x ]//
            if( 7 == T ){ D = 254 ; }else{         //[ x ]//
                                                   //[ x ]//
                /// if out of range, ///           //[ x ]//
                /// set to invalid   ///           //[ x ]//
                /// config pixel.    ///           //[ x ]//
                D = 9001 ;                         //[ x ]//
                                                   //[ x ]//
            };;                                    //[ x ]//
                                                   //[ x ]//
            return( diagpix );                     //[ x ]//
                                                   //[ x ]//
        #undef  T                                  //[ x ]//
        #undef  D                                  //[ x ]//
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        IV2                                        //[ x ]//
        AAC2020_P5D1OGL_painpix_CTO_glocpix(       //[ x ]//
            I32 til_qua                            //[ x ]//
        ,   I32 til_exp                            //[ x ]//
        ,   I32 til_lay                            //[ x ]//
        ,   I32 loc_t_x                            //[ x ]//
        ,   I32 loc_t_y                            //[ x ]//
        ){                                         //[ x ]//
        //:declare__variables: . . . . . . . . . . . . . ://
                                                   //[ x ]//
            IV2 glo; /** glo_t_x & glo_t_y **/     //[ x ]//
            IV2 tem; /** tempi_x & tempi_y **/     //[ x ]//
            IV2 qua; /** o_x_qua & o_y_qua **/     //[ x ]//
            IV2 lay; /** o_x_lay & o_y_lay **/     //[ x ]//
                                                   //[ x ]//
            I32 dia; /** diagpix **/               //[ x ]//
            I32 m_c; /** max_cor **/               //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . . :declare__variables://
        //:CALCULATE::painpix_CTO_glocpix: . . . . . . . ://
                                                   //[ x ]//
            m_c =(                                 //[ x ]//
            AAC2020_P5D1OGL_til_exp_CTO_max_cor(   //[ x ]//
                            til_exp ));;           //[ x ]//
            dia =(                                 //[ x ]//
            AAC2020_P5D1OGL_til_exp_CTO_diagpix(   //[ x ]//
                            til_exp ));;           //[ x ]//
                                                   //[ x ]//
            tem.x =  til_qua       % ( 2 ) ;       //[ x ]//
            tem.y = (til_qua-tem.x)/ ( 2 ) ;       //[ x ]//
                                                   //[ x ]//
            qua.x = ( tem.x * 256 );               //[ x ]//
            qua.y = ( tem.y * 256 );               //[ x ]//
                                                   //[ x ]//
            tem.x =  til_lay          % (  2  ) ;  //[ x ]//
            tem.y = (til_lay - tem.x) / (  2  ) ;  //[ x ]//
                                                   //[ x ]//
            lay.x = ( tem.x * ( m_c + 1 ) ) ;      //[ x ]//
            lay.y = ( tem.y * ( m_c + 1 ) ) ;      //[ x ]//
                                                   //[ x ]//
            glo.x=( qua.x +dia+ lay.x + loc_t_x ); //[ x ]//
            glo.y=( qua.y +dia+ lay.y + loc_t_y ); //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . :CALCULATE::painpix_CTO_glocpix://
        //:return_from_function: . . . . . . . . . . . . ://
                                                   //[ x ]//
            /** glo == glo_t_x & glo_t_y **/       //[ x ]//
            return( glo );                         //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . :return_from_function://
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                        //[ x ]//
        AAC2020_P5D1OGL_Get(                       //[ x ]//
            I32  til_qua                           //[ x ]//
        ,   I32  til_exp                           //[ x ]//
        ,   I32  til_lay                           //[ x ]//
        ,   I32  loc_t_x                           //[ x ]//
        ,   I32  loc_t_y                           //[ x ]//
        ,   I32  aus_dex                           //[ x ]//
                                                   //[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
        //:declare__variables: . . . . . . . . . . . . . ://
                                                   //[ x ]//
            U32 til_val =( U32_000 );              //[ x ]//
                                                   //[ x ]//
            /** glo == glo_t_x & glo_t_y  **/      //[ x ]//
            IV2 glo    ;                           //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . . :declare__variables://
        //:get_pixel_and_extract_tile_value: . . . . . . ://
                                                   //[ x ]//
            glo=(                                  //[ x ]//
            AAC2020_P5D1OGL_painpix_CTO_glocpix(   //[ x ]//
                til_qua                            //[ x ]//
            ,   til_exp                            //[ x ]//
            ,   til_lay                            //[ x ]//
            ,   loc_t_x                            //[ x ]//  
            ,   loc_t_y                            //[ x ]//
            ));;                                   //[ x ]//
                                                   //[ x ]//
            til_val=(                              //[ x ]//
            AAC2020_P5D1OGL_BitPack_Get(           //[ x ]//
                glo                                //[ x ]//
            ,   aus_dex                            //[ x ]//
            ));;                                   //[ x ]//
                                                   //[ x ]//
        //: . . . . . . :get_pixel_and_extract_tile_value://
        //:return_from_function: . . . . . . . . . . . . ://
                                                   //[ x ]//
            return( til_val );                     //[ x ]//
                                                   //[ x ]//
        //: . . . . . . . . . . . . :return_from_function://
        }                                          //[ x ]//
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
                                                   //[ x ]//
        CUVIPIX                                    //[ x ]//
        AAC2020_P5D1OGL_painpix_CTO_cuvipix(       //[ x ]//
            I32 til_qua /** Tile Quadrant( t_q )**///[ x ]//
        ,   I32 til_exp /** Tile Exponent( t_e )**///[ x ]//
        ,   I32 til_lay /** Tile Layer   ( t_l )**///[ x ]//
        ,   I32 loc_t_x /** Local Tile X ( t_x )**///[ x ]//
        ,   I32 loc_t_y /** Local Tile Y ( t_y )**///[ x ]//
        )                                          //[ x ]//
        {                                          //[ x ]//
            //:check_inputs:-----------------------------://
            #define T_Q til_qua                    //[ x ]//
            #define T_E til_exp                    //[ x ]//
            #define T_L til_lay                    //[ x ]//
            #define T_X loc_t_x                    //[ x ]//
            #define T_Y loc_t_y                    //[ x ]//
                                                   //[ x ]//
                ASS( T_Q >= 0 && T_Q <= (  4-1) ); //[ x ]//
                ASS( T_E >= 0 && T_E <= (  8-1) ); //[ x ]//
                ASS( T_L >= 0 && T_L <= (  3-1) ); //[ x ]//
                ASS( T_X >= 0 && T_X <= (128-1) ); //[ x ]//
                ASS( T_Y >= 0 && T_Y <= (128-1) ); //[ x ]//
                                                   //[ x ]//
            #undef  T_Q                            //[ x ]//
            #undef  T_E                            //[ x ]//
            #undef  T_L                            //[ x ]//
            #undef  T_X                            //[ x ]//
            #undef  T_Y                            //[ x ]//
            //:-----------------------------:check_inputs://
            //:declare_vars:-----------------------------://
                                                   //[ x ]//
                CUVIPIX cuvipix;                   //[ x ]//
                                                   //[ x ]//
                I32 qua_c_x; /** til_qua as cell**///[ x ]//
                I32 qua_c_y; /** [X|Y]coordinate**///[ x ]//
                                                   //[ x ]//
                I32 til_peb; /** Size_In_Pebbles**///[ x ]//
                                                   //[ x ]//
                I32 tor_i_x; /** TIle_ORigin:i_x**///[ x ]//
                I32 tor_i_y; /** TIle_ORigin:i_y**///[ x ]//
                                                   //[ x ]//
                I32 pox_qua; /** Pixel_Offset   **///[ x ]//
                I32 poy_qua; /** QUAdrant [X,Y] **///[ x ]//
                                                   //[ x ]//
            //:-----------------------------:declare_vars://
            //:##########################################://
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://
                                                   //:###://
                /** ************************* ***  //:###://
                @VID_IID[ 0097 ]TIME[ 08:15:42 ]   //:###://
                til_lay does not change the        //:###://
                canvas_user_view coordinate        //:###://
                (cuvipix) because the layers are   //:###://
                LAYERED directly on top of each    //:###://
                other at the same exact 2D         //:###://
                coordinate.                        //:###://
                *** ************************* **/  //:###://
                                                   //:###://
                if( til_lay ){ /** NOOP **/ };     //:###://
                                                   //:###://
            #endif //:###################################://
            /** @VID_IID[ 0097 ]TIME[ 08:08:42 ]  ****** **/
            /** Convert tile quadrant index into         **/
            /** it's XY cell location equivalent.        **/
            /** AKA: INDEX TO XY CONVERSION.      ****** **/
            qua_c_x =  til_qua           % 2 ;     //:***://
            qua_c_y = (til_qua - qua_c_x)/ 2 ;     //:***://
            ASS( qua_c_x >= 0 && qua_c_x <= 1 );   //:***://
            ASS( qua_c_x >= 0 && qua_c_x <= 1 );   //:***://
                                                   //:***://
            /** **************************************** **/
            /** @VID_IID[ 0097 ]TIME[ 08:27:42 ]         **/
            /** Get the span of the current tile         **/
            /** in focus in terms of the smallest        **/
            /** tile size. ***************************** **/
            /** @VID_IID[ 0103 ]TIME[ 04:05:20 ]    .....**/
            /** Fixed the logic for getting til_peb .....**/
            til_peb =( AAC2020_P5D1OGL_til_exp_CTO_til_peb(
                                       til_exp )); //:***://
                                                   //:***://
                                                   //:***://
            //:##########################################://
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://
                                                   //:###://
                //:  @VID_IID[ 0098 ]TIME[ 03:52:30 ] :::://
                //:  This error check is pointless ::::::://
                I32 max_cor =( til_peb - 1 );      //:###://
                                                   //:###://
                if( til_peb > (max_cor+1) ){       //:###://
                                                   //:###://
                    ERR(E_S(til_peb_IS_OOB_2021)); //:###://
                };;                                //:###://
                                                   //:###://
            #endif //:###################################://
            /** **************************************** ***
            @VID_IID[ 0097 ]TIME[ 08:38:23 ] Get the top ***
            left origin of the current tile in focus.    ***
                                                         ***
            tor_i_x:TileORigin:int_x  [tor==Tile_ORigin] ***    
            tor_i_y:TileORigin:int_y                     ***
                                                         ***
            @VID_IID[ 0103 ]TIME[ 03:20:00 ]             ***
            [ tor_i_x ]AND[ tor_i_y ]RE_EXPLAINED_AGAIN  ***
                                                         ***
            *** **************************************** **/
            //:------------------------------------------://
            tor_i_x =( til_peb * loc_t_x );        //:---://
            tor_i_y =( til_peb * loc_t_y );        //:---://
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://
            if(  1                                 //:###://
            &&( tor_i_x >= 0 && tor_i_x <=(256-1) )//:###://
            &&( tor_i_y >= 0 && tor_i_y <=(256-1) )//:###://
            ){                                     //:###://
                /** DO NOTHING **/                 //:###://
            }else{                                 //:###://
                                                   //:###://
                ERR(E_S( tor_out_of_range_2021 )); //:###://
                                                   //:###://
            };;                                    //:###://
            #endif //:###################################://
            ASS( tor_i_x >= 0 && tor_i_x<=(256-1));//:---://
            ASS( tor_i_y >= 0 && tor_i_y<=(256-1));//:---://
            //:------------------------------------------://
                                                   //:---://
            /** pox : pixel [offset/origin] X **/  //:---://
            /** poy : pixel [offset/origin] Y **/  //:---://
            pox_qua = ( qua_c_x * 128 );           //:---://
            poy_qua = ( qua_c_y * 128 );           //:---://
            //:##########################################://
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://
                                                   //:###://
                if( 1                              //:###://
                && ( pox_qua >= 0 && pox_qua <=(128 - 0)  )
                && ( poy_qua >= 0 && poy_qua <=(128 - 0)  )
                ){                                 //:###://
                    /** OKAY. Do nothing. **/      //:###://
                }else{                             //:###://
                                                   //:###://
                    ERR(E_S( OOB_POXY_2021 ));     //:###://
                                                   //:###://
                };;                                //:###://
                                                   //:###://
            #endif //:###################################://
            ASS(pox_qua >= 0 && pox_qua<=(128 -0));//:---://
            ASS(poy_qua >= 0 && poy_qua<=(128 -0));//:---://
            //://////////////////////////////////////////://
                                                   //:---://
            cuvipix.cuv_i_x=( pox_qua + tor_i_x ); //:---://
            cuvipix.cuv_i_y=( poy_qua + tor_i_y ); //:---://
            ASS( cuvipix.cuv_i_x >= 0 );           //:---://
            ASS( cuvipix.cuv_i_y >= 0 );           //:---://
            ASS( cuvipix.cuv_i_x <=( 256 - 1 ) );  //:---://
            ASS( cuvipix.cuv_i_y <=( 256 - 1 ) );  //:---://
                                                   //:---://
            return( cuvipix );                     //:---://
        }                                          //:---://
                                                   //:---://
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
                                                   //:---://
        I32                                        //:---://
        AAC2020_P5D1OGL_til_exp_CTO_squ_ash(       //:---://
        I32             til_exp                    //:---://
        )                                          //:---://
        {                                          //:---://
            /** *************************** ***    //:---://
            til_exp: Tile Exponent                 //:---://
            squ_ash: Literally[  SQUASH ]          //:---://
                     for[ squash amount ]          //:---://
                CTO: ConvertTO                     //:---://
            *** *************************** **/    //:---://
            //:input_checks:-----------------------------://
                                                     //:-://
                ASS(til_exp >= 0 && til_exp<=(8-1)); //:-://
                                                     //:-://
            //:-----------------------------:input_checks://
            //:declare_var:------------------------------://
                                                   //:---://
                I32 squ_ash=( 0 - 66077 );         //:---://
                                                   //:---://
            //:------------------------------:declare_var://
            #if( AAC2020_CRASH_ON_VITAL_TODO >= 1 ) //:##://
                                                    //:##://
                #error OPTIMIZE_WITH_A_LOOKUP_TABLE //:##://
                                                    //:##://
            #endif //:###################################://
                                                   //:---://
            /** TODO: Re-write as lookup table **/ //:---://
            /** once we have final PAINT5D     **/ //:---://
            /** GLSL shader working.           **/ //:---://
            if( 0 == til_exp ){ squ_ash =   1; };  //:---://
            if( 1 == til_exp ){ squ_ash =   2; };  //:---://
            if( 2 == til_exp ){ squ_ash =   4; };  //:---://
            if( 3 == til_exp ){ squ_ash =   8; };  //:---://
            if( 4 == til_exp ){ squ_ash =  16; };  //:---://
            if( 5 == til_exp ){ squ_ash =  32; };  //:---://
            if( 6 == til_exp ){ squ_ash =  64; };  //:---://
            if( 7 == til_exp ){ squ_ash = 128; };  //:---://
                                                   //:---://
            return( squ_ash );                     //:---://
        }                                          //:---://
        //:- - - - - - - - - - - -- - - - - - - - - - - -://


    //:C99C99C99C99C99C99C99C99::C99C99C99C99C99C99C99C99://
    //://////////////////////////////////////////////////://
    //://////////////////////////////////////////////////://
    //://////////////////////////////////////////////////://
    #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL          //: # ://
    #define P5D_TOR struct aac2020_p5d1ogl_P5D_TOR //: 1 ://
    #define U08 uint8_t /** GCC: <stdint.h> **/    //: 2 ://
    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
                                                   //:---://
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
                                                   //:---://
        /** P5D_TOR: Paint5D_TileORigin                  **/
        /**          The origin pixel in terms of the    **/
        /**          [ data view ]aka the texture        **/
        /**          memory storing the tile values.     **/
        struct aac2020_p5d1ogl_P5D_TOR{            //:---://
                                                   //:---://
            I32 loc_t_x ; //:LocalTileCoordinate:X //:---://
            I32 loc_t_y ; //:LocalTileCoordinate:Y //:---://
                                                   //:---://
        };                                         //:---://
                                                   //:---://
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
                                                   //:---://
        P5D_TOR                                    //:---://
        OPEN_GL_til_exp_AND_lay_dex_CTO_p5d_tor(   //:---://
            I32 til_exp                            //:---://
        ,   I32 lay_dex                            //:---://
        )                                          //:---://
        {                                          //:---://
        //:declare_variables:----------------------------://
                                                   //:---://
            P5D_TOR p5d_tor;                       //:---://
            I32     diagpix;                       //:---://
            I32     max_cor;                       //:---://
                                                   //:---://
        //:----------------------------:declare_variables://
        //:CORE_LOGIC_OF_FUNCTION:=======================://
        #define TOR_I_X p5d_tor.loc_t_x            //:---://
        #define TOR_I_Y p5d_tor.loc_t_y            //:---://
                                                   //:---://
            diagpix=(                              //:---://
            AAC2020_P5D1OGL_til_exp_CTO_diagpix(   //:---://
                            til_exp ));;           //:---://
                                                   //:---://
                                                   //:---://
            max_cor=(                              //:---://
            AAC2020_P5D1OGL_til_exp_CTO_max_cor(   //:---://
                            til_exp ));            //:---://
                                                   //:---://
            if( 0 == lay_dex ){                    //:---://
                TOR_I_X=( diagpix + 0 );           //:---://
                TOR_I_Y=( diagpix + 0 );           //:---://
            }else                                  //:---://
            if( 1 == lay_dex ){                    //:---://
                TOR_I_X=( diagpix + max_cor + 1 ); //:---://
                TOR_I_Y=( diagpix +           0 ); //:---://
            }else                                  //:---://
            if( 2 == lay_dex ){                    //:---://
                TOR_I_X=( diagpix +           0 ); //:---://
                TOR_I_Y=( diagpix + max_cor + 1 ); //:---://
            }else{                                 //:---://
                                                   //:---://
                ERR(E_S( BAD_lay_dex_YEAR_2021 )); //:---://
                                                   //:---://
            };;                                    //:---://
                                                   //:---://
            #undef  TOR_I_X                        //:---://
            #undef  TOR_I_Y                        //:---://
            //:===================:CORE_LOGIC_OF_FUNCTION://
            //:coarse_range_check:-----------------------://
                                                   //:---://
            assert( p5d_tor.loc_t_x >= 0 );        //:---://
            assert( p5d_tor.loc_t_y >= 0 );        //:---://
            assert( p5d_tor.loc_t_x <=( 512 -1 ) );//:---://
            assert( p5d_tor.loc_t_y <=( 512 -1 ) );//:---://
                                                   //:---://
            //:-----------------------:coarse_range_check://
            //:Error_If_On_Config_Pixel:-----------------://
            if(                                    //:---://
                (                                  //:---://
                    (256-1) == p5d_tor.loc_t_x     //:---://
                &&  (256-1) == p5d_tor.loc_t_y     //:---://
                )                                  //:---://
                ||                                 //:---://
                (                                  //:---://
                    (512-1) == p5d_tor.loc_t_x     //:---://
                &&  (256-1) == p5d_tor.loc_t_y     //:---://
                )                                  //:---://
                ||                                 //:---://
                (                                  //:---://
                    (256-1) == p5d_tor.loc_t_x     //:---://
                &&  (512-1) == p5d_tor.loc_t_y     //:---://
                )                                  //:---://
                ||                                 //:---://
                (                                  //:---://
                    (512-1) == p5d_tor.loc_t_x     //:---://
                &&  (512-1) == p5d_tor.loc_t_y     //:---://
                )                                  //:---://
            ){                                     //:---://
                /** *********************** ***    //:---://
                Configuration pixel is NEVER       //:---://
                valid data storage location.       //:---://
                @VID_IID[ 0112 ]T[ 02:30:42 ]      //:---://
                *** *********************** **/    //:---://
                ERR(E_S( ONN_CFG_PIX_2021 ));      //:---://
            };;                                    //:---://
            //:-----------------:Error_If_On_Config_Pixel://
                                                   //:---://
            return( p5d_tor );                     //:---://
        }                                          //:---://
                                                   //:---://
        /** ******************************************** **/
        /** @VID_IID[ 0105 ]TIME[ 04:41:40 ]         *** **/
        /** This code only exists to test the        *** **/
        /** getter function                          *** **/
        /** AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get  *** **/
        /**                                          *** **/
        /** We cannot[ PUT ]pixels within GLSL       *** **/
        /** shader code. Hence the gaurd used to     *** **/
        /** omit this code when compiled as GLSL     *** **/
        /** fragment shader.                         *** **/
        /** @VID_IID[ 0105 ]TIME[ 04:43:42]EXPLAINED *** **/
        /** ******************************************** **/
        void                                             ///
        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Put(         ///
                                                         ///
            //|LOCATION_OF_THE_DATA|||||||||||||||||||||||//
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
                                                         ///
            //|VALUES_OF_THE_DATA|||||||||||||||||||||||||//
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///
        ,   U32 cuvbits_cuv_b16  //:STORES_8_TILE_VALUES ///
                                                         ///
        )                                                ///
        {                                                ///
        #define I_X cuv_i_x_000_255  //:------------: 01 ://
        #define I_Y cuv_i_y_000_255  //:------------: 02 ://
        #define LAY lay_dex_000_002  //:------------: 03 ://
        #define AUS aus_dex_000_015  //:------------: 04 ://
        #define B16 cuvbits_cuv_b16  //:------------: 05 ://
        //:declare_variables:----------------------------://
                                                   //:---://
            /** **************************************** ***
            Which SubTile Graphic Are You Drawing On?    ///
            There are four of them. This is the          ///
            origin pixel of the quadrant targeted.       ///
            *** **************************************** **/
                                                   //:---://
            I32 til_qua_q_x; //:QUADRANT                 ://
            I32 til_qua_q_y; //:                         ://
                             //:                         ://
            I32 til_qua_o_x; //:ORIGIN                   ://
            I32 til_qua_o_y; //:                         ://
                             //:                         ://
            I32     til_qua; //:1D_INDEX_VERSION         ://
                             //:@VID_IID[0105]T[6:51:10] ://
                             //:                         ://
            I32     peb_t_x; //:PEBBLE_TILE_X            ://
            I32     peb_t_y; //:PEBBLE_TILE_Y            ://
                             //:                         ://
            I32     loc_t_x; //:LOCAL_TILE[ X | Y ]COORD ://
            I32     loc_t_y; //:@VID_IID[0105]T[6:38:00] ://
                                                          //
            I32         t_e; //:til_exp( TileSizeExponent://
                                                          //
            I32     max_cor; //:maximum_local_tile_coord ://
                                                          //
            I32     til_peb; //:TILe_(size_in)_PEBbles   ://
                             //:@VID_IID[0105]T[7:26:00] ://
                                                          //
            //:UNSIGNED!!!!                               //
            U32     til_val; //:two_bit_tile_value_to_set://
            //:UNSIGNED!!!!                               //
                                                          //
        //- P5D_TOR p5d_tor;    Paint5D_TileORigin       -//
                             //:Origin_On_The_Texture    ://
                             //:Memory_Storing_Data      ://
                                                          //
        //:----------------------------:declare_variables://
                                                          //
            /** @VID_IID[ 0105 ]TIME[ 03:40:00 ] ******* **/
            /** cuvbits_cuv_b16 specifies               ]**/
            /** all the different tile values           ]**/
            /** at a canvas_user_view location          ]**/
            /** and layer specified by[ lay_dex_000_002 ]**/
            /** **************************************** **/    
                                                          //
            til_qua_q_x=( I_X / 128 );                    //
            til_qua_q_y=( I_Y / 128 );                    //
            ASS( til_qua_q_x >= 0 && til_qua_q_x <= 1 );  //
            ASS( til_qua_q_y >= 0 && til_qua_q_y <= 1 );  //
                                                          //
            til_qua_o_x=( til_qua_q_x * 128 );            //
            til_qua_o_y=( til_qua_q_y * 128 );            //
            ASS( til_qua_o_x >= 0 && til_qua_o_x <= 128 );//
            ASS( til_qua_o_y >= 0 && til_qua_o_y <= 128 );//
                                                          //
            peb_t_x=( cuv_i_x_000_255 -( til_qua_o_x ) ); //
            peb_t_y=( cuv_i_y_000_255 -( til_qua_o_y ) ); //
                                                          //
            /** xy to index formula for 2x2 cell grid **/ //
            til_qua =(   til_qua_q_x +                    //
                       ( til_qua_q_y  *  2 ) );;          //
            assert( til_qua >= 0 && til_qua <=(4-1) );    //
                                                          //
            //:set_all_8_tiles:--------------------------://
            #define TIL_EXP t_e                           //
            for( t_e = 0 ; t_e <=(8-1) ; t_e ++ ){        //
                                                          //
                //|  Get Origin Of Block Of Memory ..... |//
                //|  For the Current Tile Value    ..... |//
                //|  That Is Being Laid            ..... |//
                //-  p5d_tor=(                           -//
                //-  til_exp_AND_lay_dex_CTO_p5d_tor(    -//
                //-  /**/    TIL_EXP                     -//
                //-  ,       lay_dex_000_002             -//
                //-  ));;                                -//
                                                          //
                /** Convert[ I_X , I_Y ] coords into   ..**/
                /** Local To Data Parition Coordinates ..**/
                                                          //
                til_peb=(                                 //
                    AAC2020_P5D1OGL_til_exp_CTO_til_peb(  //
                                    TIL_EXP ));           //
                ASS( til_peb >= 0 && til_peb <= 128 );    //
                                                          //
                     loc_t_x=( peb_t_x / til_peb );       //
                     loc_t_y=( peb_t_y / til_peb );       //
                ASS( loc_t_x >= 0 && loc_t_x <=(128-1));  //
                ASS( loc_t_y >= 0 && loc_t_y <=(128-1));  //
                                                          //
                //:local_tile_exact_bounds_check:--------://
                                                          //
                    max_cor=(                             //
                    AAC2020_P5D1OGL_til_exp_CTO_max_cor(  //
                                    TIL_EXP ));;          //
                                                          //
                    if( loc_t_x > max_cor                 //
                    ||  loc_t_y > max_cor                 //
                    ){                                    //
                        ERR(E_S( LOC_TXY_OOB_2021 ));     //
                    };;                                   //
                                                          //
                //:--------:local_tile_exact_bounds_check://
                                                          //
                til_val =(                                //
                    ( cuvbits_cuv_b16 >> (t_e*2) )        //
                    &( BIN_011 ) //:<--2BitMask           //
                );;                                       //
                assert( til_val <= 3 );                   //
                                                          //
                /** All Values Are U08 Here           **/ //
                /** But that's okay because were are  **/ //
                /** NOT compiling as OPENGL code here **/ //
                AAC2020_PAINT5D_Put(                      //
                    (U08)til_qua //:[til_qua | t_q      ]://
                ,   (U08)TIL_EXP //:[til_exp | t_e      ]://
                ,   (U08)LAY     //:[til_lay | t_l | lay]://
                ,   (U08)loc_t_x //:[loc_t_x | t_x      ]://
                ,   (U08)loc_t_y //:[loc_t_y | t_y      ]://
                ,   (U08)AUS     //:[aus_dex | a_d      ]://
                ,   (U08)til_val //:[til_val | t_v      ]://
                );;                                       //
            };;                                           //
            #undef  TIL_EXP                               //
            //:--------------------------:set_all_8_tiles://
                                                          //
        #undef  I_X  //:----------------------------: 01 ://
        #undef  I_Y  //:----------------------------: 02 ://
        #undef  LAY  //:----------------------------: 03 ://
        #undef  AUS  //:----------------------------: 04 ://
        #undef  B16  //:----------------------------: 05 ://
        } //:{ AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Put }:://                                              //

    //:C99C99C99C99C99C99C99C99::C99C99C99C99C99C99C99C99://

        void
        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Put(
            //|LOCATION_OF_THE_DATA|||||||||||||||||||||||//
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
                                                         ///
            //|VALUES_OF_THE_DATA|||||||||||||||||||||||||//
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///
        ,   I32 til_exp_000_007  //:AKA[ til_exp ]       ///
        ,   U32 til_val_000_003  //:STORES_1_TILE_VALUE  ///
        )
        {
        #define I_X cuv_i_x_000_255  //:------------: 01 ://
        #define I_Y cuv_i_y_000_255  //:------------: 02 ://
        #define LAY lay_dex_000_002  //:------------: 03 ://
        #define AUS aus_dex_000_015  //:------------: 04 ://
        #define T_E til_exp_000_007  //:------------: 05 ://
        #define T_V til_val_000_003  //:------------: 06 ://
        //-     B16 cuvbits_cuv_b16  //:------------: ## -//
        //:new_input_checks_2021_04_14:------------------://
        #define E aac2020_p5d1ogl_Halt

            /**@VID_IID[0258]TIME[00:25:50]************* **/
            if( I_X <0||I_X >255 ){E(E_S([I_X:20210414]));};
            if( I_Y <0||I_Y >255 ){E(E_S([I_Y:20210414]));};
            if( LAY <0||LAY >  2 ){E(E_S([LAY:20210414]));};
            if( AUS <0||AUS > 15 ){E(E_S([AUS:20210414]));};
            if( T_E <0||T_E >  7 ){E(E_S([T_E:20210414]));};
            if(         T_V >  3 ){E(E_S([T_V:20210414]));};

        #undef  E
        //:------------------:new_input_checks_2021_04_14://
        //:declare_variables:----------------------------://
                                                   //:---://
            /** **************************************** ***
            Which SubTile Graphic Are You Drawing On?    ///
            There are four of them. This is the          ///
            origin pixel of the quadrant targeted.       ///
            *** **************************************** **/
                                                   //:---://
            I32 til_qua_q_x; //:QUADRANT                 ://
            I32 til_qua_q_y; //:                         ://
                             //:                         ://
            I32 til_qua_o_x; //:ORIGIN                   ://
            I32 til_qua_o_y; //:                         ://
                             //:                         ://
            I32     til_qua; //:1D_INDEX_VERSION         ://
                             //:@VID_IID[0105]T[6:51:10] ://
                             //:                         ://
            I32     peb_t_x; //:PEBBLE_TILE_X            ://
            I32     peb_t_y; //:PEBBLE_TILE_Y            ://
                             //:                         ://
            I32     loc_t_x; //:LOCAL_TILE[ X | Y ]COORD ://
            I32     loc_t_y; //:@VID_IID[0105]T[6:38:00] ://
                                                          //
            //-         t_e; //:til_exp( TileSizeExponent-//
                                                          //
            I32     max_cor; //:maximum_local_tile_coord ://
                                                          //
            I32     til_peb; //:TILe_(size_in)_PEBbles   ://
                             //:@VID_IID[0105]T[7:26:00] ://
                                                          //
            //:UNSIGNED!!!!                               //
            //-     til_val; //:two_bit_tile_value_to_set-//
            //:UNSIGNED!!!!                               //
                                                          //
        //- P5D_TOR p5d_tor;    Paint5D_TileORigin       -//
                             //:Origin_On_The_Texture    ://
                             //:Memory_Storing_Data      ://
                                                          //
        //:----------------------------:declare_variables://
                                                          //
            /** @VID_IID[ 0105 ]TIME[ 03:40:00 ] ******* **/
            /** cuvbits_cuv_b16 : USAGE_DESCRIBED ****** **/
            /** @VID_IID[ 0258 ]TIME[ 00:14:23 ] ******* **/
            /** Why_Are_We_Removing[ cuvbits_cuv_b16 ] * **/
                                                          //
            til_qua_q_x=( I_X / 128 );                    //
            til_qua_q_y=( I_Y / 128 );                    //
            ASS( til_qua_q_x >= 0 && til_qua_q_x <= 1 );  //
            ASS( til_qua_q_y >= 0 && til_qua_q_y <= 1 );  //
                                                          //
            til_qua_o_x=( til_qua_q_x * 128 );            //
            til_qua_o_y=( til_qua_q_y * 128 );            //
            ASS( til_qua_o_x >= 0 && til_qua_o_x <= 128 );//
            ASS( til_qua_o_y >= 0 && til_qua_o_y <= 128 );//
                                                          //
            peb_t_x=( cuv_i_x_000_255 -( til_qua_o_x ) ); //
            peb_t_y=( cuv_i_y_000_255 -( til_qua_o_y ) ); //
                                                          //
            /** xy to index formula for 2x2 cell grid **/ //
            til_qua =(   til_qua_q_x +                    //
                       ( til_qua_q_y  *  2 ) );;          //
            assert( til_qua >= 0 && til_qua <=(4-1) );    //
                                                          //
            //:set_all_8_tiles:--------------------------://
            #define TIL_EXP T_E                           //
            #define TIL_VAL T_V                           //
            //- for( t_e = 0 ; t_e <=(8-1) ; t_e ++ )    -//
            {         
                                                          //
                /** Convert[ I_X , I_Y ] coords into   ..**/
                /** Local To Data Parition Coordinates ..**/
                                                          //
                til_peb=(                                 //
                    AAC2020_P5D1OGL_til_exp_CTO_til_peb(  //
                                    TIL_EXP ));           //
                ASS( til_peb >= 0 && til_peb <= 128 );    //
                                                          //
                     loc_t_x=( peb_t_x / til_peb );       //
                     loc_t_y=( peb_t_y / til_peb );       //
                ASS( loc_t_x >= 0 && loc_t_x <=(128-1));  //
                ASS( loc_t_y >= 0 && loc_t_y <=(128-1));  //
                                                          //
                //:local_tile_exact_bounds_check:--------://
                                                          //
                    max_cor=(                             //
                    AAC2020_P5D1OGL_til_exp_CTO_max_cor(  //
                                    TIL_EXP ));;          //
                                                          //
                    if( loc_t_x > max_cor                 //
                    ||  loc_t_y > max_cor                 //
                    ){                                    //
                        ERR(E_S( LOC_TXY_OOB_2021 ));     //
                    };;                                   //
                                                          //
                //:--------:local_tile_exact_bounds_check://
                                                          //
                //+ @VID_IID[ 0258 ]T[00:33:23]WHY_GONE? +//
                //- til_val =(                           -//
                //-     ( cuvbits_cuv_b16 >> (t_e*2) )   -//
                //-     &( BIN_011 ) //:<--2BitMask      -//
                //- );;                                  -//
                //- assert( til_val <= 3 );              -//
                                                          //
                /** All Values Are U08 Here           **/ //
                /** But that's okay because were are  **/ //
                /** NOT compiling as OPENGL code here **/ //
                AAC2020_PAINT5D_Put(                      //
                    (U08)til_qua //:[til_qua | t_q      ]://
                ,   (U08)TIL_EXP //:[til_exp | t_e      ]://
                ,   (U08)LAY     //:[til_lay | t_l | lay]://
                ,   (U08)loc_t_x //:[loc_t_x | t_x      ]://
                ,   (U08)loc_t_y //:[loc_t_y | t_y      ]://
                ,   (U08)AUS     //:[aus_dex | a_d      ]://
                ,   (U08)TIL_VAL //:[til_val | t_v      ]://
                );;                                       //
            };;                                           //
            #undef  TIL_EXP                               //
            #undef  TIL_VAL                               //
            //:--------------------------:set_all_8_tiles://
                                                          //
        #undef  I_X  //:----------------------------: 01 ://
        #undef  I_Y  //:----------------------------: 02 ://
        #undef  LAY  //:----------------------------: 03 ://
        #undef  AUS  //:----------------------------: 04 ://
        #undef  T_E  //:----------------------------: 05 ://
        #undef  T_V  //:----------------------------: 06 ://
        //-     B16  //:----------------------------: ## -//
        }

    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
    #undef  P5D_TOR                               //: 01 ://
    #undef      U08                               //: 02 ://
    #endif  //:#AAC2020_MACRO_THIS_IS_OPEN_GL     ::: ## ://
    //://////////////////////////////////////////////////://
    //://////////////////////////////////////////////////://
    //://////////////////////////////////////////////////://
    //:C99C99C99C99C99C99C99C99::C99C99C99C99C99C99C99C99://


        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                              
        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get(          
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///
        ,   I32 til_exp_000_007  //:AKA[ til_exp ]       ///
        )
        {               
        /** ******************************************** ***
        @VID_IID[ 0257 ]TIME[ 02:03:42 ]
        LIKE[ AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get ]
        But has the extra parameter[ til_exp ]and gets just
        ONE_TILE_VALUE( til_val )instead of a bitpacking
        of all tile values under the current pixel.
        
        Using this to help calculate touching values for
        auto-tiling calculations.
        SEE[ toupaca / toupac0 / toupac1 / toupac2 ]
        
        We should be able to create this function by
        [ COPY + PAST ]ing[ cuvipix_CTO_cuvbits_Get ]
        and removing the tile exponent( t_e / til_exp )loop.

        SEE[ #_WORKING_OUT_TOUPACK_BIT_FETCHING_# ]
        *** ******************************************** **/                                            
        #define C_X cuv_i_x_000_255               //: 01 ://
        #define C_Y cuv_i_y_000_255               //: 02 ://
        #define T_L lay_dex_000_002               //: 03 ://
        #define A_D aus_dex_000_015               //: 04 ://
        #define ETO_m_c AAC2020_P5D1OGL_til_exp_CTO_max_cor
        #define ETO_s_a AAC2020_P5D1OGL_til_exp_CTO_squ_ash
            //:input_checks:- - - - - - - - - - - - - - -://
                                                     //:i://
                ASS( cuv_i_x_000_255 >=  (  0  )  ); //:i://
                ASS( cuv_i_y_000_255 >=  (  0  )  ); //:i://
                ASS( lay_dex_000_002 >=  (  0  )  ); //:i://
                ASS( aus_dex_000_015 >=  (  0  )  ); //:i://
                ASS( til_exp_000_007 >=  (  0  )  ); //:i://
                                                     //:i://
                ASS( cuv_i_x_000_255 <=  (256-1)  ); //:i://
                ASS( cuv_i_y_000_255 <=  (256-1)  ); //:i://
                ASS( lay_dex_000_002 <=    (3-1)  ); //:i://
                ASS( aus_dex_000_015 <=   (16-1)  ); //:i://
                ASS( til_exp_000_007 <=   ( 8-1)  ); //:i://
                                                     //:i://
            //:- - - - - - - - - - - - - - -:input_checks://
            //:var__declare:- - - - - - - - - - - - - - -://
                                                          //
                //:UNSIGNED_FOR_BIT_PACKING:-------------://
                                                          //
                //+  @VID_IID[0257]T[02:30:50]           +//
                //+  Version only gets 1 tile value.     +//
                //+  No bitpacking of tile values.       +//
                //- /** Canvas_User_View:BITS  **/       -//
                //- U32 cuvbits =( U00 /** 0x00 **/ );   -//
                                                          //
                U32     t_v; /** [ t_v / til_val ] **/    //
                                                          //
                //:-------------:UNSIGNED_FOR_BIT_PACKING://
                //:EVERYTHING_ELSE:----------------------://
                                                      //////
                /// glocpix not needed,               //////
                /// AAC2020_P5D1OGL_Get function      //////
                ///  handles calculation of that.     //////
                /// glocpix; /** GLObal Coord PIXels  ...**/
                             /** Data View Coordinate ...**/
                                                      //////
            //  IV2 til_qua; /** Tile Quadrant ..........**/
                I32 qua_c_x; /** Tile Quadrant: cell x   **/
                I32 qua_c_y; /** Tile Quadrant: cell y   **/
                                                      //////
                I32 nos_t_x; /** NO_Squash(nos)TileX(t_x)**/
                I32 nos_t_y; /** NO_Squash(nos)TileY(t_y)**/
                                                      //////
                I32     t_x; /** Final Local Tile [X|Y]  **/
                I32     t_y; /** AKA[ loc_t_x | loc_t_y ]**/
                                                      //////
                I32     s_a; /** Squash Amount (squ_ash) **/
                                                      //////
                I32     t_q; /** TileQuadrant / til_qua  **/
                //-     t_e;     TileExponent / til_exp  -//
                I32     m_c; /** MaximumCoord / max_cor  **/
                                                      //////
                //:----------------------:EVERYTHING_ELSE://
                                                      //////
            //:- - - - - - - - - - - - - - -:var__declare://
                                                      //////
            //: til_qua ==( [ cuv_i_x && cuv_i_y ] / 128 )
            qua_c_x =( C_X / 128 );                   //////
            qua_c_y =( C_Y / 128 );                   //////
            ASS( qua_c_x >= 0 && qua_c_x <= 1 );      //////
            ASS( qua_c_y >= 0 && qua_c_y <= 1 );      //////
                                                      //////
            /** @VID_IID[ 0098 ]TIME[ 05:32:00 ] **/  //////
            /** Fixed xy-to-index math here.     **/  //////
            t_q = qua_c_x + ( qua_c_y  *  2  );       //////
            ASS( t_q >= 0 && t_q <= (4-1) );          //////
                                                      //////
            /** NOS: NOt_Squashed ............ **/    //////
            /** nos_t_x : Not squashed loc_t_x **/    //////
            /** nos_t_y : Not squashed loc_t_y **/    //////
            nos_t_x = C_X -( qua_c_x * 128 );         //////
            nos_t_y = C_Y -( qua_c_y * 128 );         //////
                                                       
            #define T_E ( til_exp_000_007 )   
            //- for( t_e = 0 ; t_e <=( 8 - 1 ) ; t_e ++ )-//
            {   //:<--[ NO_LONGER_A_LOOP ]               ://
                //:<--[ @VID_IID[ 0257 ]T[ 02:29:32 ]    ://
                                                         ///
                /** m_c == max_cor  **/                  ///
                /** Max Coord Index **/                  ///
                m_c = ETO_m_c(  T_E  );                  ///
                s_a = ETO_s_a(  T_E  );                  ///
                                                         ///
                t_x = nos_t_x / s_a ;                    ///
                t_y = nos_t_y / s_a ;                    ///
                                                         ///
                /**  t_y === loc_t_y ( PAINT5D.D._ ).....**/
                /**  t_x === loc_t_x ( #_DIA_DAL_# ).....**/
                ASS( t_x >= 0 && t_x <= m_c );           ///
                ASS( t_y >= 0 && t_y <= m_c );           ///
                                                         ///
                //:BINARY PACKED TILE VALUES (til_val)   ://
                //:      BIN[ 00 ] ==> DEC[ 0 ]          ://
                //:      BIN[ 01 ] ==> DEC[ 1 ]          ://
                //:      BIN[ 10 ] ==> DEC[ 2 ]          ://
                //:      BIN[ 11 ] ==> DEC[ 3 ]          ://
                t_v=(                                    ///
                    AAC2020_P5D1OGL_Get(                 ///
                        t_q    //: I32 [ til_qua / t_q ] ://                         
                    ,   T_E    //: I32 [ til_exp / t_e ] ://                        
                    ,   T_L    //: I32 [ til_lay / t_l ] ://                        
                    ,   t_x    //: I32 [ loc_t_x / t_x ] ://                        
                    ,   t_y    //: I32 [ loc_t_y / t_y ] ://                        
                    ,   A_D    //: I32 [ aus_dex / a_d ] ://                        
                    ));;                                 ///
                                                         ///
                ASS( t_v <= U32_003 /** uint(4-1) **/ ); ///
                ASS( t_v == ( BIN_011 & t_v) );          ///

                //||||||||||||||||||||||||||||||||||||||||//
                //+ THIS_VERSION_DOESNT_BIT_PACK         +//
                //+ MULTIPLE TILE_VALUES.                +//
                //- cuvbits=(                            -//
                //- cuvbits |                            -//
                //-     (                                -//
                //-         /** 2 bits per tile value.**/-//
                //-         /** Position based on it's**/-//
                //-         /** tile exponent (t_e)   **/-//
                //-         t_v <<( t_e * 2 )            -//
                //-     )                                -//
                //- );;                                  -//
                //||||||||||||||||||||||||||||||||||||||||//
                                   
            } //:<--[ NO_LONGER_A_LOOP ]
            #undef  T_E
                                                     
            return( t_v /**RETURN[ til_val ]UNDER PIXEL**/);                           
                                                     
        #undef          C_X //:---------------------: 01 ://
        #undef          C_Y //:---------------------: 02 ://
        #undef          T_L //:---------------------: 03 ://
        #undef          A_D //:---------------------: 04 ://
        #undef      ETO_m_c //:---------------------: 05 ://
        #undef      ETO_s_a //:---------------------: 06 ://
        } //:END[ AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get ]     
        //:- - - - - - - - - - - -- - - - - - - - - - - -://                                         
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        U32                                              ///
        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get(         ///
                                                         ///
            /** FUNCTION_WRITTEN_ON[ 2021_01_18 ]  **/   ///
            /**    VID_IID[ 0097 ]                 **/   ///
            /**    TIME[ 00:00:00 ]TO[ 06:02:20 ]  **/   ///
                                                         ///
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///
        ){                                               ///
        #define C_X cuv_i_x_000_255               //: 01 ://
        #define C_Y cuv_i_y_000_255               //: 02 ://
        #define T_L lay_dex_000_002               //: 03 ://
        #define A_D aus_dex_000_015               //: 04 ://
        #define ETO_m_c AAC2020_P5D1OGL_til_exp_CTO_max_cor
        #define ETO_s_a AAC2020_P5D1OGL_til_exp_CTO_squ_ash
            //:input_checks:- - - - - - - - - - - - - - -://
                                                     //:i://
                ASS( cuv_i_x_000_255 >=  (  0  )  ); //:i://
                ASS( cuv_i_y_000_255 >=  (  0  )  ); //:i://
                ASS( lay_dex_000_002 >=  (  0  )  ); //:i://
                ASS( aus_dex_000_015 >=  (  0  )  ); //:i://
                                                     //:i://
                ASS( cuv_i_x_000_255 <=  (256-1)  ); //:i://
                ASS( cuv_i_y_000_255 <=  (256-1)  ); //:i://
                ASS( lay_dex_000_002 <=    (3-1)  ); //:i://
                ASS( aus_dex_000_015 <=   (16-1)  ); //:i://
                                                     //:i://
            //:- - - - - - - - - - - - - - -:input_checks://
            //:var__declare:- - - - - - - - - - - - - - -://
                                                          //
                //:UNSIGNED_FOR_BIT_PACKING:-------------://
                                                          //
                /** Canvas_User_View:BITS  **/            //
                U32 cuvbits =( U32_000 );                 //
                                                          //
                U32     t_v; /** [ t_v / til_val ] **/    //
                                                          //
                //:-------------:UNSIGNED_FOR_BIT_PACKING://
                //:EVERYTHING_ELSE:----------------------://
                                                      //////
                /// glocpix not needed,               //////
                /// AAC2020_P5D1OGL_Get function      //////
                ///  handles calculation of that.     //////
                /// glocpix; /** GLObal Coord PIXels  ...**/
                             /** Data View Coordinate ...**/
                                                      //////
            //  IV2 til_qua; /** Tile Quadrant ..........**/
                I32 qua_c_x; /** Tile Quadrant: cell x   **/
                I32 qua_c_y; /** Tile Quadrant: cell y   **/
                                                      //////
                I32 nos_t_x; /** NO_Squash(nos)TileX(t_x)**/
                I32 nos_t_y; /** NO_Squash(nos)TileY(t_y)**/
                                                      //////
                I32     t_x; /** Final Local Tile [X|Y]  **/
                I32     t_y; /** AKA[ loc_t_x | loc_t_y ]**/
                                                      //////
                I32     s_a; /** Squash Amount (squ_ash) **/
                                                      //////
                I32     t_q; /** TileQuadrant / til_qua  **/
                I32     t_e; /** TileExponent / til_exp  **/
                I32     m_c; /** MaximumCoord / max_cor  **/
                                                      //////
                //:----------------------:EVERYTHING_ELSE://
                                                      //////
            //:- - - - - - - - - - - - - - -:var__declare://
                                                      //////
            //: til_qua ==( [ cuv_i_x && cuv_i_y ] / 128 )
            qua_c_x =( C_X / 128 );                   //////
            qua_c_y =( C_Y / 128 );                   //////
            ASS( qua_c_x >= 0 && qua_c_x <= 1 );      //////
            ASS( qua_c_y >= 0 && qua_c_y <= 1 );      //////
                                                      //////
            /** @VID_IID[ 0098 ]TIME[ 05:32:00 ] **/  //////
            /** Fixed xy-to-index math here.     **/  //////
            t_q = qua_c_x + ( qua_c_y  *  2  );       //////
            ASS( t_q >= 0 && t_q <= (4-1) );          //////
                                                      //////
            /** NOS: NOt_Squashed ............ **/    //////
            /** nos_t_x : Not squashed loc_t_x **/    //////
            /** nos_t_y : Not squashed loc_t_y **/    //////
            nos_t_x = C_X -( qua_c_x * 128 );         //////
            nos_t_y = C_Y -( qua_c_y * 128 );         //////
                                                      //////
            /** t_e     == til_exp            **/     //////
            /** til_exp == TILe_size_EXPonent **/     //////
            for( t_e = 0 ; t_e <=( 8 - 1 ) ; t_e ++ ){   ///
                                                         ///
                /** m_c == max_cor  **/                  ///
                /** Max Coord Index **/                  ///
                m_c = ETO_m_c(  t_e  );                  ///
                s_a = ETO_s_a(  t_e  );                  ///
                                                         ///
                t_x = nos_t_x / s_a ;                    ///
                t_y = nos_t_y / s_a ;                    ///
                                                         ///
                /**  t_y === loc_t_y ( PAINT5D.D._ ).....**/
                /**  t_x === loc_t_x ( #_DIA_DAL_# ).....**/
                ASS( t_x >= 0 && t_x <= m_c );           ///
                ASS( t_y >= 0 && t_y <= m_c );           ///
                                                         ///
                //:BINARY PACKED TILE VALUES (til_val)   ://
                //:      BIN[ 00 ] ==> DEC[ 0 ]          ://
                //:      BIN[ 01 ] ==> DEC[ 1 ]          ://
                //:      BIN[ 10 ] ==> DEC[ 2 ]          ://
                //:      BIN[ 11 ] ==> DEC[ 3 ]          ://
                t_v=(                                    ///
                    AAC2020_P5D1OGL_Get(                 ///
                        t_q    //: I32 [ til_qua / t_q ] ://                         
                    ,   t_e    //: I32 [ til_exp / t_e ] ://                        
                    ,   T_L    //: I32 [ til_lay / t_l ] ://                        
                    ,   t_x    //: I32 [ loc_t_x / t_x ] ://                        
                    ,   t_y    //: I32 [ loc_t_y / t_y ] ://                        
                    ,   A_D    //: I32 [ aus_dex / a_d ] ://                        
                    ));;                                 ///
                                                         ///
                ASS( t_v <= U32_003 /**4-1**/  );        ///
                ASS( t_v == ( BIN_011 & t_v)   );        ///
                cuvbits=(                                ///
                cuvbits |                                ///
                    (                                    ///
                        /** 2 bits per tile value. **/   ///
                        /** Position based on it's **/   ///
                        /** tile exponent (t_e)    **/   ///
                        t_v <<( t_e * 2 )                ///
                    )                                    ///
                );;                                      ///
            };;                                          ///
                                                         ///
            return( cuvbits );                           ///
                                                         ///
        #undef          C_X //:---------------------: 01 ://
        #undef          C_Y //:---------------------: 02 ://
        #undef          T_L //:---------------------: 03 ://
        #undef          A_D //:---------------------: 04 ://
        #undef      ETO_m_c //:---------------------: 05 ://
        #undef      ETO_s_a //:---------------------: 06 ://
        }                                                ///
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        F32
        P5D1OGL_GET_res_wid( void )
        {
            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL
                return( iResolution.x );
            #else
                return( AAC2020_CPUNIFO_iResolution_wid );
            #endif
        }
        F32
        P5D1OGL_GET_res_hig( void )
        {
            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL
                return( iResolution.y );
            #else
                return( AAC2020_CPUNIFO_iResolution_hig );
            #endif
        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        F32
        AAC2020_P5D1OGL_CludMap_ZOF_1_D(
            I32 fraic_1 //:[ fic.x | fic.y ]/(fraic_x|fraic_y)
        ,   I32 vp0_san //:[ p5d_vp0's [wid|hig] in pixels ]
        ,   I32 vp1_san //:[ p5d_vp1's [wid|hig] in pixels ]
        ,   I32 clu_san //:Clustering_Of_vp0_units
        )
        {   
        /** SEE[ README.MD ]DIAGRAM[ #_DIA_TILOPER_# ]   **/
        /** ******************************************** ***
        Originally AAC2020_P5D1OGL_CludMap_RNG_1_D was
        supposed to call this[ CludMap_ZOF_1_D ]function,
        but we tried TWICE and kept on failing our unit
        tests. So now[ CludMap_ZOF_1_D ]no longer needs
        to be in our code base. Not even sure it behaves
        the way I want it to... Because we did a __LOT__
        of diagramming for[ CludMap_RNG_1_D ]. And have
        PIXEL_PERFECT_PREFERENCES for how the function
        should be behaving. Those PIXEL_PERFECT_PREFERENCES
        are what made it take 3_FUCKING_TRIES before we
        settled on a final function design.
        *** ******************************************** **/

            //:Convert_Inputs_To_Float32:----------------://
            F32 f32_fraic_1 = MAK_F32( fraic_1 );
            F32 f32_vp0_san = MAK_F32( vp0_san );
            F32 f32_vp1_san = MAK_F32( vp1_san );
            F32 f32_clu_san = MAK_F32( clu_san );
            //:----------------:Convert_Inputs_To_Float32://

            /** ******************************************** ***
            @VID_IID[ 0260 ]TIME[ 03:15:10 ]NORMALIZE_PROBLEM
            ( SEE[ README.MD ]DIAGRAM[ #_CLUDMAP_1X1_INPUT_# ] )

            +---+---+
            |   |   | <-- vp1_san (offscreen)
            +---+---+

            +---+---+---+---+             ( f_1 == fraic_1 )
            |f_1|f_1|f_1|f_1| <-- vp0_san (onscreen)
            +---+---+---+---+
            *** ******************************************** **/

            F32     ppt =( f32_vp0_san / 
                          (f32_vp1_san / f32_clu_san ) );

            //+ vp1_nom =( 1.0 ); //:vp1_san normalized to 1 +//
            F32 vp0_nom =( ppt );
        
            F32 ti_used =floor( f32_fraic_1 / ppt );
                           

            F32 fraic_L =( f32_fraic_1 -
              ( ti_used * ( ppt )));;

            //:##############################################://
            #if !defined( AAC2020_MACRO_THIS_IS_OPEN_GL ) //:://
                if( fraic_L < 0.0 ){ 
                    ERR(E_S([fraic_L:OOBNEG]));
                };;
                if( fraic_L > ( vp0_nom - 1.0 ) ){
                if( vp0_nom > (           1.0 ) ){ //:#VP0_GT1#
                #define I_x_P  intmax_t /** GCC: <stdint.h> **/
                #define V_x_P  void
                #define VCAST V_x_P*)(I_x_P
                #define DCAST V_x_P*)(double
        
                    LOG(E_S([RUNTIME_FUNCTION_CALL_PROBLEM]),0);
        
                    if( vp0_nom > 1.0 ){
                        LOG(E_S([vp0_nom_GT_1]),0);
                    };;
                    if( vp0_nom== 1.0 ){
                        LOG(E_S([vp0_nom_EQ_1]),0);
                    };;
                    if( vp0_nom < 1.0 ){
                        LOG(E_S([vp0_nom_LT_1]),0);
                    };;
        
                    //:--------------------------------------://
                    //: #VP0_GT1# :                          ://
                    //: vp0_nom must be greater than 1.0.    ://
                    //: Less than 1.0 means 1 pixel maps     ://
                    //: to MORE THAN ONE TILE.               ://
                    //: Exactly 1.0 means that the only      ://
                    //: possible internal tile coordinate    ://
                    //: we could have is [ 0.0 ]             ://
                    //: ( 0.0 == dead_center                 ://
                    //:--------------------------------------://
        
                    LOG(E_S([0_0:fraic_1]:%d), (VCAST)fraic_1 );
                    LOG(E_S([0_0:vp0_san]:%d), (VCAST)vp0_san );
                    LOG(E_S([0_0:vp1_san]:%d), (VCAST)vp1_san );
                    LOG(E_S([0_0:clu_san]:%d), (VCAST)clu_san );
                                        
                    LOF(E_S([0_0:fraic_L]:%f),        fraic_L );
                    LOF(E_S([0_0:vp0_nom]:%f),        vp0_nom );
                    LOF(E_S([PIX_PER_TIL]:%f),            ppt );
        
                    //:@_WHATS_MY_UTC_DEX_@://
                    LOI(E_S([aac2020_p5d1ogl_utc_t_i]:%d)
                    ,        aac2020_p5d1ogl_utc_t_i    );;
        
                    ERR(E_S([0_0:fraic_L:OOBPOS]));
            
                #undef I_x_P
                #undef V_x_P
                #undef VCAST
                #undef DCAST
                };;};;
            /** ******************************************** ***
            +---+
            |   | <-- vp1_nom (offscreen)
            +---+
                           ( f_L == fraic_L         )
            +---+---+      ( f_L == fraic_1 , LOCAL )
            |f_L|f_L|  <-- vp0_nom (onscreen)
            +---+---+ 
            *** ******************************************** **/
        
                /** C99 Hackish debugging vars **/
                AAC2020_P5D1OGL_DEBUVAR_vp0_nom =( vp0_nom );
                AAC2020_P5D1OGL_DEBUVAR_fraic_L =( fraic_L );
        
            #endif //:#######################################://
            //:##############################################://

            F32 tilop_1;

            tilop_1=(

                ( vp0_nom > 1.0 ) 
                ?
                /** README_MD[ #_DIA_TILOPER_CALC_TABLE_# ] **/
                (   ((fraic_L/(vp0_nom - 1.0))*2.0)   - 1.0)
                :
                0.0
            );;
       

            return( tilop_1 );
        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        F32
        AAC2020_P5D1OGL_CludMap_RNG_1_D(
            I32 fraic_1 //:[ fic.x | fic.y ]/(fraic_x|fraic_y)

            //:ON_SCREEN_VIEWPORT_PIXEL_SELECTION_RECT:(1D)
        ,   I32 vp0_b_0 //:AKA[ vp0_min ]( x_0 | y_0 )
        ,   I32 vp0_b_1 //:AKA[ vp0_max ]( x_1 | y_1 )

            //:OFFSCREEN_TILE_DATA_SELECTION_RECT:(1D)
        ,   I32 vp1_b_0 //:AKA[ vp1_min ]( x_0 | y_0 ) 
        ,   I32 vp1_b_1 //:AKA[ vp1_max ]( x_1 | y_1 ) 

        ,   I32 clu_san //:Clustering_Of_vp0_units
        )
        {
        //:FIRST__DRAFT_IN_THE_TRASH[ DOC/000/TRASH/011._ ]
        //:SECOND_DRAFT_IN_THE_TRASH[ DOC/000/TRASH/012._ ] 
        //:THIRD__DRAFT_NOTES[ #_RNG_1_D_VERSION_003_#    ]
        //:MORE_NOTES[ #_UNIT_TEST_DEBUGGING_2021_04_23_# ]
        //:MORE[ #_ONE_LAST_DIAGRAM_FOR_TESTS_2021_04_23_#]

            F32 tilop_1 =( 0.0 ); /** tiloper , 1D **/

            //:SEE[ #_DIA_2021_04_21_AYE_# ]

            F32 vp1_san=(  
                MAK_F32(vp1_b_1)-MAK_F32(vp1_b_0)+1.0 );;
            F32 vp0_san=(  
                MAK_F32(vp0_b_1)-MAK_F32(vp0_b_0)+1.0 );;
            F32 f32_clu=(
                MAK_F32( clu_san ) );

            if( (vp1_san / f32_clu) > vp0_san ){
                //:More tiles than pixels, so just  -----://
                //:always assume we are in the dead -----://
                //:center of  whatever tile is      -----://
                //:associated with that pixel.      -----://
                tilop_1 = ( 0.0 );
            }else{
            #define pig      fraic_1
            #define COC_SAN  coc_CTO_pic
            #define PIC_SAN  coc_CTO_pic
  
                #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )
                    #define F_L_O_O_R AAC2020_FRAGCOM_FLO_F32
                #else
                    #define F_L_O_O_R AAC2020_POLYOGL_FLO_F32
                #endif

                //:declare_vars:-------------------------://
                
                    //: cug : ClUster_Global_Coordinate :://
                    //: coc : Cluster_lOcal__Coordinate :://

                F32     bas_cug ;//:BASe_cug(low[ cug ]vp1)
                F32     bas_coc ;//:BASe_coc(low[ coc ]vp1)
                F32     off_coc ;//:OFFset_coc
                F32     tar_coc ;//:TARget_coc
                ///     f32_clu ;  :Float32_CLUster_span:://
                
                F32 coc_CTO_pic ;//:AKA[sub_clu -PER- PIXEL]
                F32         pil ;//:Pixel_Index____Local
                F32         pic ;//:Pixel_Internal_Coord

                ///         n_0 ;//:@Numer_Min ( n_0 / u_d )
                ///         n_1 ;//:@Numer_Max ( n_1 / u_d )
                F32         u_d ;//:UN_Common_Denominator
                ///         c_d ;//:Common____Denominator
                ///         c_n ;//:Common____Numerator  -//
                F32         a_0 ;//:Anchor_percent_0(LEF)-//
                F32         a_1 ;//:Anchor_percent_1(RIG)-//
                F32         icp ;//:Internal_Cell_Percent-//
                F32         sap ;//:cluster_SpAn_Percentage
                
                //:-------------------------:declare_vars://

                
                //: num_coc : NUMberof: Cluster_lOcal_Coords
                //: num_pic : NUMberof: PIxel___local_Coords
                //:     coc * coc_pic ==     pic  
                //: num_coc * coc_pic == num_pic
                //: COC_SAN =MAK_F32( vp0_san / vp1_san );
                coc_CTO_pic =MAK_F32( vp0_san / vp1_san );

                    //: pil =MAK_F32(fraic_1 - vp0_b_0 );
                        pil =MAK_F32(    pig - vp0_b_0 );

                    //: pic =( pil % COC_SAN );
                        pic =(
                            pil
                        -   
                           (F_L_O_O_R( pil / COC_SAN )
                                          *( COC_SAN ))
                        );;

                bas_cug =MAK_F32( vp1_b_0 );

            //: bas_coc == bas_cug % f32_clu ____________://
                bas_coc =( 
                        bas_cug
                        -
                        (F_L_O_O_R( bas_cug /  f32_clu )     
                                            *( f32_clu ))
                        );;

                off_coc=( 
                    F_L_O_O_R( pil / coc_CTO_pic ) ); 

            //: tar_coc ==(bas_coc+off_coc)%(clu_san) ___://
                tar_coc=(
                               (bas_coc+off_coc)-
                   (F_L_O_O_R( (bas_coc+off_coc)/f32_clu )
                                                *f32_clu )
                );;

        //[     //:SEE[DOC_H[[ #_DIA_C_D_AND_SAP_# ]]]//
        //[     u_d =MAK_F32( clu_san );             ]//
        //[ //- c_d =( u_d *( PIC_SAN - 1.0) ); -//  ]//
        //[     c_d =((u_d *  PIC_SAN)- 1.0);        ]//
        //[     c_n =((tar_coc*PIC_SAN)+pic);        ]//
        //[ //- sap =( pic / c_d );            -//   ]//
        //[     sap =( c_n / c_d );                  ]//

                //:#_HOPEFULLY_LAST_DIAGRAM_2021_04_23_# ://
                u_d =MAK_F32( clu_san );
                a_0 =( (tar_coc + 0.0) / u_d ); //:ANCHOR_0
                a_1 =( (tar_coc + 1.0) / u_d ); //:ANCHOR_1
                icp =( pic / (PIC_SAN - 1.0) ); //:I_P_C
                sap =( a_0 + (icp*(a_1-a_0)) ); //:percent
                                                          
                tilop_1 =( ( sap * 2.0 ) - 1.0 );

                //:if_c99:should_crash:##################://
                #if !defined(AAC2020_MACRO_THIS_IS_OPEN_GL)
                    I32 should_crash=( 0 );
                #endif //:###########:if_c99:should_crash://

                //:if_c99:#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#://
                #if !defined(AAC2020_MACRO_THIS_IS_OPEN_GL)
                
                    if( pic < 0 ){
                        ERR(E_S([PIC_TOO_LOW_2021]));
                    }else
                    if( pic > ( COC_SAN     - 1 ) ){
                        ERR(E_S([PIC_OOB_POS_2021]));
                    }else
                    if( pic > ( coc_CTO_pic - 1 ) ){
                        ERR(E_S([PIC_OOB_WTF_2021]));
                    };;

                    ASS( pic >=0 && pic <=(coc_CTO_pic -1));
                    ASS( pic >=0 && pic <=(COC_SAN     -1));

                    //:SEE_HASHTAG_DOCS[#_CALC_N0_AND_N1_#]
                    //:@VID_IID[0269]T[04:12:32]EXPLAINED
                    F32 n_0 =( tar_coc + 0.0 ); //:@numer_min
                    F32 n_1 =( tar_coc + 1.0 ); //:@numer_max
                
                    F32 sap_min=( n_0 / u_d );
                    F32 sap_max=( n_1 / u_d );

                    if( n_0 < 0 || n_1 < 1 || u_d < 1 ){
                        ERR(E_S([BAD_FRACTIONAL_THINGS]));
                    };;
                    if( sap_max < sap_min ){
                        ERR(E_S([OUT_OF_ORDER_BOUNDS]));
                    };;
                    if( sap < sap_min ){  
                        should_crash=( 1 );
                        LOG(E_S([OOB_NEG_SAP_2021]),0);
                    };;
                    if( sap > sap_max ){
                        should_crash=( 1 );
                        LOG(E_S([OOB_POS_SAP_2021]),0);
                    };;

                #endif //:-------------------------------://
                //:#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#:if_c99://

            //:IF_C99:###################################://
            #if !defined( AAC2020_MACRO_THIS_IS_OPEN_GL )
            if( 3 == clu_san ){ //:DOC_H[#_DIA_KEY_001_#]://
            if( 5 == vp1_b_0 ){ //:DOC_H[#_DIA_KEY_001_#]://
            if( 6 == vp1_b_1 ){ //:DOC_H[#_DIA_KEY_001_#]://
            if( 7 == vp0_b_0 ){ //:DOC_H[#_DIA_KEY_001_#]://
            if(10 == vp0_b_1 ){ //:DOC_H[#_DIA_KEY_001_#]://
            #define ACT_TILOP_1 tilop_1

                F32 itest_delta;
                F32 EXP_tilop_1;

                //:--------------------------------------://
                //:Test cases below based on diagrams:   ://
                //:#_RNG_1_D_DIAGRAMS_DATE_2021_04_22_#  ://
                //:@VID_IID[0269]TIME[06:25:50]EXPLAINING://
                //:--------------------------------------://

                if( 7 == fraic_1 ){
                    //:#_ANS_KEY_001_#
                    EXP_tilop_1 =( +0.3333 );
                };;
                if( 8 == fraic_1 ){
                     //:#_ANS_KEY_001_#
                    EXP_tilop_1 =( +1.0000 );
                };;
                if( 9 == fraic_1 ){
                     //:#_ANS_KEY_001_#
                    EXP_tilop_1 =( -1.0000 );
                };;
                if(10 == fraic_1 ){
                     //:#_ANS_KEY_001_#
                    EXP_tilop_1 =( -0.3333 );
                };;

                itest_delta=( AAC2020_POLYOGL_ABS_F32(
                         EXP_tilop_1 - ACT_TILOP_1   ));;

                if( itest_delta > 0.0001 ){ //:----------://

                    should_crash=( 1 );
                    LOG(E_S([FAILED_INTERNAL_TEST_2021]),0);

                };; //:----------------------------------://

                if( should_crash >= 1 ){
                    //:SEE[DOC_H[#_DIA_KEY_001_DEBUG_#]]
                    LOI(E_S([INN:fraic_1]:%d),fraic_1);
                    LOI(E_S([INN:vp0_b_0]:%d),vp0_b_0);
                    LOI(E_S([INN:vp0_b_1]:%d),vp0_b_1);
                    LOI(E_S([INN:vp1_b_0]:%d),vp1_b_0);
                    LOI(E_S([INN:vp1_b_1]:%d),vp1_b_1);
                    LOI(E_S([INN:clu_san]:%d),clu_san); 
                
                    LOF(E_S([VAR:::::pic]:%f),    pic);
                    LOF(E_S([VAR:tar_coc]:%f),tar_coc);
                    LOF(E_S([VAR:PIC_SAN]:%f),PIC_SAN);
                //- LOF(E_S([VAR:::::c_n]:%f),    c_n); -//
                //- LOF(E_S([VAR:::::c_d]:%f),    c_d); -//
                    LOF(E_S([VAR:::::a_0]:%f),    a_0);
                    LOF(E_S([VAR:::::a_1]:%f),    a_1);
                    LOF(E_S([VAR:::::icp]:%f),    icp);
                
                    LOF(E_S([____SAP]:%f),sap     );
                    LOF(E_S([sap_min]:%f),sap_min );
                    LOF(E_S([sap_max]:%f),sap_max );

                    ERR(E_S(SHOULD_CRASH_IS_TRUE_2021));    
                };;
                
            #undef  ACT_TILOP_1
            };;};;};;};;};;
            #endif //:-----------------------------------://
            //:###################################:IF_C99://

            #undef  pig       //:<--lowercase_macro : 01 ://
            #undef  COC_SAN   //:-------------------: 02 ://
            #undef  PIC_SAN   //:-------------------: 03 ://
            #undef  F_L_O_O_R //:-------------------: 04 ://
            };;

            return(  
                tilop_1 /** Tile_Internal_LOcal_PERcent **/ 
            );;

        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        FV2
        AAC2020_P5D1OGL_CludMap_fic_vp0_vp1_clu(
            IV2 fic      //:fic:Fragment_Integer_Coord       
        ,   REC p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]
        ,   REC p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]
        ,   I32 clu_san  //:Clustering_Span_Size   
        )
        {
        /** ******************************************** ***
        FUNC_NOTES[ #_CLUDMAP_FIC_VP0_VP1_CLU_EXPLAINED_# ]
        ALSO_SEE[   #_LAST_DIAGRAM_FOR_TESTS_2021_04_23_# ]
        *** ******************************************** **/

            FV2 tiloper ;

            tiloper.x=(
                AAC2020_P5D1OGL_CludMap_RNG_1_D(
                    fic.x       //:fraic_1
                ,   p5d_vp0.x_0 //:vp0_b_0
                ,   p5d_vp0.x_1 //:vp0_b_1

                ,   p5d_vp1.x_0 //:vp1_b_0
                ,   p5d_vp1.x_1 //:vp1_b_1
                
                ,   clu_san
                ));;

            tiloper.y=(
                AAC2020_P5D1OGL_CludMap_RNG_1_D(
                    fic.y       //:fraic_1
                ,   p5d_vp0.y_0 //:vp0_b_0
                ,   p5d_vp0.y_1 //:vp0_b_1

                ,   p5d_vp1.y_0 //:vp1_b_0
                ,   p5d_vp1.y_1 //:vp1_b_1
                
                ,   clu_san
                ));;

            return( tiloper );
        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://   
        FV2
        AAC2020_P5D1OGL_fic_MAP_tiloper(
            IV2 fic      //:fic:Fragment_Integer_Coord       
        ,   REC p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]
        ,   REC p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]
        ,   I32 til_exp  //:TILesize_EXPonent
        )
        {
        /** ******************************************** ***
        FUNC_NOTES[ #_P5D_FIC_MAP_TILOPER_EXPLAINED_# ]
        *** ******************************************** **/
        //:LOCAL_HARDCODED_LOOKUP_TABLE:=================://
        I32 LUT_til_exp_CTO_til_peb[ 8 ]= ARR_I32( 8 )
        ARR_BEG
        /**/   1  //: til_exp == 0 ://
        ,      2  //: til_exp == 1 ://
        ,      4  //: til_exp == 2 ://
        ,      8  //: til_exp == 3 ://
        ,     16  //: til_exp == 4 ://
        ,     32  //: til_exp == 5 ://
        ,     64  //: til_exp == 6 ://
        ,    128  //: til_exp == 7 ://
        ARR_END;
        //:=================:LOCAL_HARDCODED_LOOKUP_TABLE://

        //:<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< TODO:FIGURE_OUT_THIS_MAPPING_LOGIC
            I32 til_peb =(LUT_til_exp_CTO_til_peb[
                              til_exp ]);;
            FV2 tiloper ;

            tiloper=(
            AAC2020_P5D1OGL_CludMap_fic_vp0_vp1_clu(
                fic      //:fic:Fragment_Integer_Coord       
            ,   p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]
            ,   p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]
            ,   til_peb  //:destination_unit_grouping_size
            ));;         //:[ til_peb == clu == ClusterSize ]
                         //:[ til_peb == clu_san ]::::::::://

            return( tiloper );
        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://   
        RET_MAIN
        FUN_MAIN( 
                       TYP_F_C          INN_F_C
        //[ GLSL:|     NOTHING     |    NOTHING   - - - -]//
        //[  C99:|  struct FV4     |    F_C       - - - -]//
        ){
        
            //: U08 arr[ 3 ]=        { 1 , 2 , 3 }; //:C99
            //: U08 arr[ 3 ]=U08[ 3 ]( 1 , 2 , 3 ); //:OGL

            //:DECLARE_VARIABLES:------------------------://
             
                /** @VID_IID[ 0093 ]TIME[ 00:21:10 ] **/
                #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL
                    FV4 FragColor; /** <-- C99 Code  **/
                //: R_Y AAC2020_POLYOGL_R_Y_Get()
                    #define R_Y 512.0
                #else
                    #define R_Y iResolution.y
                    /** HELLO_WORLD **/
                #endif

                I32 cuv_i_x; //:Canvas_User_View:Integer_X
                I32 cuv_i_y; //:Canvas_User_View:Integer_Y

            //:------------------------:DECLARE_VARIABLES://
            //:GET_VARS_STORED_IN_TEXTURE:---------------://

                REC p5d_vp0 =(  /**AKA[ P5D_REC_VP0 ] **/
                    AAC2020_TAUFRAG_Get_REC_p5d_vp0() );;

                REC p5d_vp1 =(  /**AKA[ P5D_REC_VP1 ] **/
                    AAC2020_TAUFRAG_Get_REC_p5d_vp1() );;

                I32 aus_dex =(      /**AKA[ P5D_A_D ] **/
                    AAC2020_TAUFRAG_Get_I32_p5d_a_d() );;

                REC p5d_ur1 =(  /**AKA[ P5D_REC_ur1 ] **/
                    AAC2020_TAUFRAG_Get_REC_p5d_ur1() );;

            //:---------------:GET_VARS_STORED_IN_TEXTURE://    
            //:GET:fragment_integer_coord:---------------://

            IV2 fic; /** fic:Frag_INTEGER_coordinate **/
            fic.x =( MAK_I32( F_C.x - 0.5 ) );
            fic.y =( MAK_I32( 
                (
                    (P5D1OGL_GET_res_hig()   - 1.0 )
                   -(                F_C.y         ) 
                )-0.5 
            ));;

            //:---------------:GET:fragment_integer_coord://

        //- UV4 uv4_pix; @VID_IID[0289]T[05:55:23] --------- -//
            FV4 fv4_pix;

            if( (1==1)
            &&  fic.x >= p5d_vp0.x_0
            &&  fic.x <= p5d_vp0.x_1
            &&  fic.y >= p5d_vp0.y_0
            &&  fic.y <= p5d_vp0.y_1
            ){  //:IN_BOUNDS:

                

                /** BETS ARE OFF WHEN MAPPING FROM **/
                /** small range to larger range.   **/
                IV2 cuv;

                cuv=(AAC2020_FRAGCOM_fic_MAP_cuv(
                    fic , p5d_vp0 , p5d_vp1
                ));;

                /** [ cuv_i_x , cuv_i_y ] should always **/
                /** be within bounds for this code.     **/
                cuv_i_x=( cuv.x );
                cuv_i_y=( cuv.y );
                ASS( cuv_i_x >= (    0) );
                ASS( cuv_i_y >= (    0) );
                ASS( cuv_i_x <= (256-1) );
                ASS( cuv_i_y <= (256-1) );

                //:TOUCHING_VALUES_FOR_EACH_LAYER:-------://
                //:GET_LAYER_DATA:-----------------------://
                /** Value of all tiles over the pixel    **/
                /** being rendered.@IID[0256]T[01:20:23] **/

                    U32 u32_l_0=(
                    AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( 
                        cuv_i_x  //:AKA[ cuvipix.i_x ]   ///
                    ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///
                    ,         0  //:AKA[ lay_dex ]       ///
                    ,   aus_dex  //:AKA[ aus_dex ]       ///   
                    ));;////////////////////////////////////
                    U32 u32_l_1=(
                    AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( 
                        cuv_i_x  //:AKA[ cuvipix.i_x ]   ///
                    ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///
                    ,         1  //:AKA[ lay_dex ]       ///
                    ,   aus_dex  //:AKA[ aus_dex ]       ///   
                    ));;////////////////////////////////////
                    U32 u32_l_2=(
                    AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( 
                        cuv_i_x  //:AKA[ cuvipix.i_x ]   ///
                    ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///
                    ,         2  //:AKA[ lay_dex ]       ///
                    ,   aus_dex  //:AKA[ aus_dex ]       ///   
                    ));;////////////////////////////////////

                //:-----------------------:GET_LAYER_DATA://
                //:TOUCHING_VALUES_FOR_EACH_LAYER:-------://

            //:IDONT_KNOW_WHAT_TO_CALL_THIS_SECTION:---------://

                /** **************************************** **/
                /** @VID_IID[ 0256 ]TIME[ 03:48:50 ] ** **** **/
                /** Lookup table to convert a tile size **** **/
                /** exponent into the relative size of  **** **/
                /** the tile measuered in[ pebbles ]    **** **/
                /** **************************************** **/
                I32 LUT_til_exp_CTO_til_peb[ 8 ]= ARR_I32( 8 )
                ARR_BEG
                /**/   1  //: til_exp == 0 ://
                ,      2  //: til_exp == 1 ://
                ,      4  //: til_exp == 2 ://
                ,      8  //: til_exp == 3 ://
                ,     16  //: til_exp == 4 ://
                ,     32  //: til_exp == 5 ://
                ,     64  //: til_exp == 6 ://
                ,    128  //: til_exp == 7 ://
                ARR_END;

                //:@VID_IID[ 0256 ]TIME[ 03:52:32 ]::::::::::://
                //:Touching Values For Auto Tiling Require ::://
                //:that we query what tiles are around     ::://
                //:the current tile being rendered.        ::://
                //:                                        ::://
                /// MOV_TOP;  //:FIND:Tile_Neighbor_ABOVE  ::://
                /// MOV_LEF;  //:FIND:Tile_Neighbor_LEFT   ::://
                /// MOV_RIG;  //:FIND:Tile_Neighbor_RIGHT  ::://
                /// MOV_BOT;  //:FIND:Tile_Neighbor_BELOW  ::://

                /** @VID_IID[ 0257 ]TIME[ 00:20:32 ] ******* **/
                /** Size Of A Tile Measured In Pebbles.      **/
                /** Written this way because it can be       **/
                /** read as a conversion factor.             **/
                /** (READ_AS: til ==> peb)                   **/
                /**            til___til peb_____peb         **/
                /**            --------- -----------         **/
                /** Example: ( til * til_peb ==> peb )       **/
                /**            --------- -----------         **/
                /**            til___til peb_____peb         **/
                I32 til_peb;                        /** **** **/
                /** **************************************** **/

                U32     cen ; //:<--[ My_House_Is_CENTER_Tile ]
                U32     ntv ; //:<--[ Neightbor_Tile_Value    ]
                U32     bit ; //:<--[ tou_bit :Touching_Bit   ]
                U32     tou ; //:<--[ tou_val :Touching_Value ]
                FV2 tiloper ; //:<--[ tilop_x , tilop_y       ]

                //:There are 8 different tile sizes on   ://
                //:a single layer. We want to collect all://
                //:the pixel colors into an array and    ://
                //:allow the engine user to define a     ://
                //:blending function to combine all 8    ://
                //:uint32 colors.                        ://
                FV4 tilpixu ; //:[tilpixu]:TILe_PIXel_Uint32
                FV4 tilpixa[ 8 ]= ARR_FV4( 8 )
                ARR_BEG
                0   //: <--- Zero Init The Memory Maybe?
                    //: til_exp == 0 ://
                    //: til_exp == 1 ://
                    //: til_exp == 2 ://
                    //: til_exp == 3 ://
                    //: til_exp == 4 ://
                    //: til_exp == 5 ://
                    //: til_exp == 6 ://
                    //: til_exp == 7 ://
                ARR_END;

                FV4 laypixu ; //:[laypixu]:LAYer_PIXel_Uint32
                FV4 laypixa[ 3 ]= ARR_FV4( 3 )
                ARR_BEG
                0   //: <--- Zero Init The Memory Maybe?
                    //: til_lay == 0 ://
                    //: til_lay == 1 ://
                    //: til_lay == 2 ://
                ARR_END;

                FV4 plypix3 ;//: PLY_PIXels_3 
                             //: ( laypixa composited )
                             //: ( (plyed)   together )

                /** fv4_000 : FloatVec4:ERASER **/
                FV4 fv4_000 =( MAK_FV4( 0.0,0.0,0.0,0.0 ) );

                for( I32 til_lay = ( 0 ) //:[ wrong:lay_dex ]
                ;        til_lay <=(3-1) //:[ wrong:lay_dex ] 
                ;        til_lay++       //:[ wrong:lay_dex ]
                ){
                    //:Not_Necessary to delete like    ::://
                    //:this unless we are accumulating ::://
                    //:over multiple layers for some   ::://
                    //:reason.                         ::://
                    tilpixa[ 0 ]=( fv4_000 );
                    tilpixa[ 1 ]=( fv4_000 );
                    tilpixa[ 2 ]=( fv4_000 );
                    tilpixa[ 3 ]=( fv4_000 );
                    tilpixa[ 4 ]=( fv4_000 );
                    tilpixa[ 5 ]=( fv4_000 );
                    tilpixa[ 6 ]=( fv4_000 );
                    tilpixa[ 7 ]=( fv4_000 );

                for( I32 til_exp = ( 0 )
                ;        til_exp <=(8-1)
                ;        til_exp++
                ){
                //|LOOP_SECTION:TOUCHING_VALUES:||||||||||||||//

                    tou=( U32_000 /** @_ERASE_PER_ITER_@ **/ );

                    til_peb=LUT_til_exp_CTO_til_peb[
                                til_exp            ];;

                    //:WHERE_IS_MY_HOUSE:====================://

                        cen=(
                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( 
                            cuv_i_x  //:<--[ canvas_user_view ]
                        ,   cuv_i_y  //:<--[ canvas_user_view ]
                        ,   til_lay  //:AKA[ til_lay / t_l ]       
                        ,   aus_dex  //:AKA[ aus_dex / a_d ]
                        ,   til_exp  //:AKA[ til_exp / t_e ]
                        ));; 
 
                    //:====================:WHERE_IS_MY_HOUSE://
                    //:CANVAS_USER_VIEW_MAX_VALUE:===========://

                        #define  CUV_MAX ( 256 - 1 )

                    //:===========:CANVAS_USER_VIEW_MAX_VALUE://
                    //:NEIGHBOR_SHIFT_AMOUNTS:===============://

                        //:     123_123_123
                        //:     1234567_123
                        #define TOUSHIF_X_0 ( 3 ) //:LEF://
                        #define TOUSHIF_X_1 ( 2 ) //:RIG://
                        #define TOUSHIF_Y_0 ( 1 ) //:TOP://
                        #define TOUSHIF_Y_1 ( 0 ) //:BOT://
    
                    //:===============:NEIGHBOR_SHIFT_AMOUNTS://
                    //:NEIGHBOR_TOP:=========================://
                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://
                    #define MOV_TOP   (     til_peb )
                    #define U32_TOP   (         ntv )
                    #define TOUSHIF   ( TOUSHIF_Y_0 )

                        U32_TOP =(
                        ( ((cuv_i_y)-(MOV_TOP)) < 0 ) 
                        ? 
                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO
                        :
                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( 
                          ((cuv_i_x)*(   1   )) //:<---[ STAY ]
                        , ((cuv_i_y)-(MOV_TOP)) //:<---[ MOVE ]
                        ,   til_lay  //:AKA[ til_lay / t_l ]    
                        ,   aus_dex  //:AKA[ aus_dex / a_d ]
                        ,   til_exp  //:AKA[ til_exp / t_e ]
                        ));; 
 
                        bit =( ntv == cen ? U32_001 : U32_000 );
                        tou =( tou | ( bit << TOUSHIF ) );
            
                    #undef  MOV_TOP
                    #undef  U32_TOP
                    #undef  TOUSHIF
                    //:=========================:NEIGHBOR_TOP://
                    //:NEIGHBOR_LEF:=========================://
                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://
                    #define MOV_LEF   (     til_peb )
                    #define U32_LEF   (         ntv )
                    #define TOUSHIF   ( TOUSHIF_X_0 )

                        U32_LEF =(
                        ( ((cuv_i_x)-(MOV_LEF)) < 0 ) 
                        ? 
                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO
                        :
                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( 
                          ((cuv_i_x)-(MOV_LEF)) //:<---[ MOVE ]
                        , ((cuv_i_y)*(   1   )) //:<---[ STAY ]
                        ,   til_lay  //:AKA[ til_lay / t_l ]        
                        ,   aus_dex  //:AKA[ aus_dex / a_d ]
                        ,   til_exp  //:AKA[ til_exp / t_e ]
                        ));; 
 
                        bit =( ntv == cen ? U32_001 : U32_000 );
                        tou =( tou | ( bit << TOUSHIF ) );
            
                    #undef  MOV_LEF
                    #undef  U32_LEF
                    #undef  TOUSHIF
                    //:=========================:NEIGHBOR_LEF://
                    //:NEIGHBOR_RIG:=========================://
                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://
                    #define MOV_RIG   (     til_peb )
                    #define U32_RIG   (         ntv )
                    #define TOUSHIF   ( TOUSHIF_X_1 )

                        U32_RIG =(
                        ( ((cuv_i_x)+(MOV_RIG)) > CUV_MAX ) 
                        ? 
                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO
                        :
                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( 
                          ((cuv_i_x)+(MOV_RIG)) //:<---[ MOVE ]
                        , ((cuv_i_y)*(   1   )) //:<---[ STAY ]
                        ,   til_lay  //:AKA[ til_lay / t_l ]        
                        ,   aus_dex  //:AKA[ aus_dex / a_d ]
                        ,   til_exp  //:AKA[ til_exp / t_e ]
                        ));; 
 
                        bit =( ntv == cen ? U32_001 : U32_000 );
                        tou =( tou | ( bit << TOUSHIF ) );
            
                    #undef  MOV_RIG
                    #undef  U32_RIG
                    #undef  TOUSHIF
                    //:=========================:NEIGHBOR_RIG://
                    //:NEIGHBOR_BOT:=========================://
                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://
                    #define MOV_BOT   (     til_peb )
                    #define U32_BOT   (         ntv )
                    #define TOUSHIF   ( TOUSHIF_Y_1 )

                        U32_BOT =(
                        ( ((cuv_i_y)+(MOV_BOT)) > CUV_MAX ) 
                        ? 
                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO
                        :
                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( 
                          ((cuv_i_x)*(   1   )) //:<---[ STAY ]
                        , ((cuv_i_y)+(MOV_BOT)) //:<---[ MOVE ]
                        ,   til_lay  //:AKA[ til_lay / t_l ]        
                        ,   aus_dex  //:AKA[ aus_dex / a_d ]
                        ,   til_exp  //:AKA[ til_exp / t_e ]
                        ));; 
 
                        bit =( ntv == cen ? U32_001 : U32_000 );
                        tou =( tou | ( bit << TOUSHIF ) );
            
                    #undef  MOV_BOT
                    #undef  U32_BOT
                    #undef  TOUSHIF
                    //:=========================:NEIGHBOR_BOT://
                    //:NEIGHBOR_SHIFT_AMOUNTS:===============://

                        //:     123_123_123
                        //:     1234567_123
                        #undef  TOUSHIF_X_0  //:---------: 3 ://
                        #undef  TOUSHIF_X_1  //:---------: 2 ://
                        #undef  TOUSHIF_Y_0  //:---------: 1 ://
                        #undef  TOUSHIF_Y_1  //:---------: 0 ://
    
                    //:===============:NEIGHBOR_SHIFT_AMOUNTS://
                    //:CANVAS_USER_VIEW_MAX_VALUE:===========://

                        #undef  CUV_MAX

                    //:===========:CANVAS_USER_VIEW_MAX_VALUE://

                //||||||||||||||:LOOP_SECTION:TOUCHING_VALUES|//
                //|LOOP_SECTION:TILE_LOCAL_COORDS:||||||||||||//

                    //:BASED_ON[ AAC2020_FRAGCOM_fic_MAP_cuv ]
                    tiloper=(AAC2020_P5D1OGL_fic_MAP_tiloper(  
                        fic     //:<-- Pixel_On[     p5d:vp0 ]
                    ,   p5d_vp0 //:<-- OnScreenPixels(   vp0 )
                    ,   p5d_vp1 //:<-- OffScreenTileData(vp1 )
                    ,   til_exp //:<-- determines[ clu_san   ]
                    ));;

                //||||||||||||:LOOP_SECTION:TILE_LOCAL_COORDS|//
                //|LOOP_SECTION:RENCORE_001|||||||||||||||||||//
                #define TIL_VAL cen //:Center Tile Is Tile  1://
                #define TOU_VAL tou //:Touching_Value[0-15] 2://
                #define TILOP_X ( tiloper.x )          //:  3://
                #define TILOP_Y ( tiloper.y )          //:  4://

                    tilpixu=(
                    AAC2020_PAINT5D_RENCORE_tilodat_CTO_tilpixu(
                            aus_dex //:AKA[ aus_dex / a_d ]
                        ,   til_lay //:AKA[ til_lay / t_l ] 
                        ,   til_exp //:AKA[ til_exp / t_e ] 
                        ,   TIL_VAL //:AKA[ til_val / t_v ] 
                        ,   TOU_VAL //:AKA[ tou_val / tou ]
                        ,   TILOP_X //:AKA[ tilop_x / p_x ]
                        ,   TILOP_Y //:AKA[ tilop_y / p_y ] 
                        ));;
                    tilpixa[ til_exp ]=( tilpixu );
                
                #undef  TIL_VAL  //:--------------------: 01 ://
                #undef  TOU_VAL  //:--------------------: 02 ://
                #undef  TILOP_X  //:--------------------: 03 ://
                #undef  TILOP_Y  //:--------------------: 04 ://
                //|||||||||||||||||||LOOP_SECTION:RENCORE_001|//


                    
                };; //:<--[ NEXT[ til_exp ] ]

                    laypixu=(
                    AAC2020_PAINT5D_RENCORE_tilpixa_CTO_laypixu(
                                            tilpixa ) );;
                
                    laypixa[ til_lay ]=( laypixu );

                };; //:<--[ NEXT[ til_lay ] ]


                plypix3=(
                AAC2020_PAINT5D_RENCORE_laypixa_CTO_plypix3(
                /**/                    laypixa ));;

            //:---------:IDONT_KNOW_WHAT_TO_CALL_THIS_SECTION://

            /** Eventually will be using this value as **/
            /** the fragment output color.             **/ 
            if( plypix3.x > 0.0 ){ /** NOOP **/ }; //:<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Eventually We Need To Use This.

                //:CORE_RENDERING_ALGORITHM:-------------://


                if( u32_l_0 > U32_000 ){ /** NOOP **/ };
                if( u32_l_1 > U32_000 ){ /** NOOP **/ };
                if( u32_l_2 > U32_000 ){ /** NOOP **/ };
            
                //:-------------:CORE_RENDERING_ALGORITHM://
 
                //:INSIDE_VIEWPORT_BOUNDS ==> UNPACK_PIXEL:
                fv4_pix=( plypix3 );
            }else{
                //:OUT_OF_BOUNDS ==> YELLOW
                fv4_pix.x =MAK_F32( 128.0 / 255.0 ); //:RED
                fv4_pix.y =MAK_F32( 128.0 / 255.0 ); //:GREEN
                fv4_pix.z =MAK_F32( 128.0 / 255.0 ); //:BLUE
                fv4_pix.w =MAK_F32( 255.0 / 255.0 ); //:ALPHA
            };;


            /** @VID_IID[ 0116 ]TIME[ 01:33:00 ] ******* **/
            /** MAKE SURE[ P ]key for[ pattern ]uploads  **/
            /** to GPU and we can SEE IT. Do this        **/
            /** BEFORE making more elaborate shader code.**/
            /** *******************************************/
            //: FragColor = MAK_FV4(
            //: 
            //:     MAK_F32( uv4_pix.x ) / 255.0
            //: ,   MAK_F32( uv4_pix.y ) / 255.0
            //: ,   MAK_F32( uv4_pix.z ) / 255.0
            //: ,   1.0 //:Alpha
            //: );;
            FragColor =( fv4_pix /**FloatVec4Pixel**/ );

            //:DRAW_USER_INTERFACE_OVER_WHATEVER:============://
            I32 p5d_vu1=( AAC2020_TAUFRAG_Get_I32_p5d_vu1( ));;
            if( p5d_vu1 >= 1 /** UI #1 Is Visible **/ ){

                if( (1==1)
                &&  fic.x >= p5d_ur1.x_0  //: INSIDE_UI_RECT?://
                &&  fic.x <= p5d_ur1.x_1  //: INSIDE_UI_RECT?://
                &&  fic.y >= p5d_ur1.y_0  //: INSIDE_UI_RECT?://
                &&  fic.y <= p5d_ur1.y_1  //: INSIDE_UI_RECT?://
                ){
                    /** TODO: Make UI Transparent if needed **/

                    IV2 fic_glo =( fic );

                    /** TODO: Get mouse position somehow. **/
                    IV2 mou_glo;
                        mou_glo=( FRAGCOM_GET_mou_glo() );
                    
                    //|GET_Frag_And_Mouse_Local:-------------|//
                    //+@VID_IID[ 0250 ]T[ 02:04:50 ]DONT_DO! +//
                    //+BECAUSE[ p5d_ur1 ]IS_IN_GLOBAL_COORDS +//
                    //- IV2 fic_loc=(                        -//
                    //-     AAC2020_UISHARE_glo_CTO_loc(     -//
                    //-         p5d_ur1,fic_glo ));;         -//
                    //- IV2 mou_loc=(                        -//
                    //-     AAC2020_UISHARE_glo_CTO_loc(     -//
                    //-         p5d_ur1,mou_glo ));;         -//
                    //-                                      -//
                    //|-------------:GET_Frag_And_Mouse_Local|//


                    FV4 ur1_pix=( /** UI_Rect_1:Pixel_RGBA **/
                        AAC2020_UIFRAGS_PAINT5D_Main( 
                            fic_glo //:<--[ FIC___GLOBAL ]
                        ,   mou_glo //:<--[ mouse_GLOBAL ]
                        ,         1 //:<--[ p5d_ur1      ]
                        ));;

                    FragColor =( ur1_pix );
                };;
            };;
            //:============:DRAW_USER_INTERFACE_OVER_WHATEVER://

            
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL

                /** ************************** ***
                If [C99/C11] code, return the  
                fragment color here.  
                @VID_IID[ 0093 ]TIME[ 00:51:30 ]
                *** ************************** **/

                return( FragColor ); /**<-- C99**/

            #endif

        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
    //:main_shim_macros:---------------------------------://
                                                   //:---://
        #undef  RET_MAIN                           //:---://
        #undef  FUN_MAIN                           //:---://
                                                   //:---://
        #undef  TYP_F_C                            //:---://
        #undef  INN_F_C                            //:---://
                                                   //:---://
        #undef  ERR                                //:---://
        #undef  LOG                                //:---://
        #undef  LOF                                //:---://
        #undef  LOI                                //:---://
                                                   //:---://
    //:---------------------------------:main_shim_macros://
    //:===========:P5D_001____AAC2020_PAINT5D_DEFAULT_001://  
    //[=====================:PASTE_INTO_FILE[ P5D_001._ ]]//
    //[======================:AAC2020_PAINT5D_DEFAULT_001]//
    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//