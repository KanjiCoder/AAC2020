//:NATIDUI.F._

//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://
    void 
    aac2020_natidui_Halt( const char* msg_err )
    {
        printf("[FATAL_ERROR:aac2020_natidui]:%s\n", msg_err );
        fflush(stdout);
        exit( 10  /** 420 / 42 **/  );
    }
//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:ARE_WE_ALLOWED_TO_SPEAK:==================================://
#define U08 uint8_t /** GCC: <stdint.h> **/

    U08
    aac2020_natidui_AllowedToSpeak( void ){
    /** @VID_IID[ 0156 ]TIME[ 02:46:23 ] **/
                                             U08 say=( 0 ); 
        if( AAC2020_SILENCE.NATIDUI <=(  0  ) ){ say=( 1 ); };
        if( AAC2020_SILENCE.SILENCE <=( 0-1 ) ){ say=( 1 ); };
        if( AAC2020_SILENCE.SILENCE >=( 0+1 ) ){ say=( 0 ); };

        return( say );
    }

#undef  U08
//:==================================:ARE_WE_ALLOWED_TO_SPEAK://
//:OKAY_NEAR_TOP_BUT_BELOW_HALT:=============================://

    void
    aac2020_natidui_Okay( const char* msg_o_k ){

        if( aac2020_natidui_AllowedToSpeak()>=1 ){

            printf( "[aac2020_natidui:Okay]:%s\n" ,  msg_o_k);
            fflush(stdout);

        };;
    }  

//:=============================:OKAY_NEAR_TOP_BUT_BELOW_HALT://
//:INFO_NEAR_TOP_BUT_BELOW_HALT:=============================://

    void
    aac2020_natidui_Info( const char* msg_o_k ){

        if( aac2020_natidui_AllowedToSpeak()>=1 ){

            printf( "[aac2020_natidui:Info]:%s\n" ,  msg_o_k);
            fflush(stdout);

        };;
    }  

//:=============================:INFO_NEAR_TOP_BUT_BELOW_HALT://
//:ERROR_CHECK_SIZE_OF_TYPES:================================://
#define ERR aac2020_natidui_Halt                        //:00://
#define S01 AAC2020_NATIDUI_CHOOSECOLORA /**STRUCT#01**///:01://
 
    int
    AAC2020_NATIDUI_ErrorCheckSizeOfTypes_WIN_10_64BIT()
    {

        /** This function is platform specific. **/
        /** For Platform: Windows 10, 64 bit    **/

        if( 71 != sizeof( struct S01 ) ){ERR("[S01_NOT_071]");};

        return( 0 );
    }

#undef  ERR  //:------------------------------------------:00://
#undef  S01  //:------------------------------------------:01://
//:================================:ERROR_CHECK_SIZE_OF_TYPES://
//:MESSAGE_BOX_FOR_HEX_VALUE:================================://
#define DLL PEB2020_DLIB           //:------------------: 01 ://
#define FUN PEB2020_FUNC           //:------------------: 02 ://
#define LLA PEB2020_LoadLibraryA   //:------------------: 03 ://
#define GPA PEB2020_GetProcAddress //:------------------: 04 ://

    int
    AAC2020_NATIDUI_MessageBoxForHexValue(
        const char*   msg
    ,   unsigned long hex
    ){

        DLL  hUser32    ; /** DLL Library  Reference **/
        FUN  pMessageBox; /** GPA Function Pointer   **/

                           hUser32 = LLA("user32.dll");
        pMessageBox=( GPA( hUser32, "MessageBoxA") );;

        char buf[40]={0};
        //:                     10        20          32      40
        //:-------------1234567890123456789012345678901234567890
        //:------------"[Your_Color_Is]:((( 0xRRGGBBAA )))" 
        sprintf( buf , "[Your_Color_Is]:((( %0x )))" 
        , (unsigned int)hex );

        pMessageBox(
        /**/NULL
        ,   buf /** BODY : Your_Color_Is...        **/
        ,   msg /** TITLE: Caller Supplied Message **/
        
        ,   MACRO_WINDOWS_xxx_MB_OK
        );;

        return( 0 );
    }

#undef  DLL //: 01 :-----------------------------------------://
#undef  FUN //: 02 :-----------------------------------------://
#undef  LLA //: 03 :-----------------------------------------://
#undef  GPA //: 04 :-----------------------------------------://
//:================================:MESSAGE_BOX_FOR_HEX_VALUE://
//:ASK_USER_TO_PICK_COLOR:BWO:===============================://
#define OKAY aac2020_natidui_Okay
#define INFO aac2020_natidui_Info

    unsigned long
    AAC2020_NATIDUI_AskUserToPickColor_BWO()
    {

        /** BWO: BEFORE_main_WINDOW_OPENS .................. **/
        /** This function is NOT aware of GINAWIN library.   **/

        //:LOAD_DLL_FILES:-----------------------------------://
        #define LOAD  PEB2020_LoadLibraryA /** Load DLL Func **/
        #define ADDR  PEB2020_DLIB         /** DLL Address   **/

            ADDR dll_User32   =( LOAD("User32.dll")   );
            ADDR dll_Comdlg32 =( LOAD("Comdlg32.dll") );
            ADDR dll_Gdi32    =( LOAD("Gdi32.dll")    );

        #undef  ADDR 
        #undef  LOAD 
        //:-----------------------------------:LOAD_DLL_FILES://
        //:LOAD_FUNCTIONS:-----------------------------------://
        #define FUN PEB2020_FUNC
        #define GPA PEB2020_GetProcAddress

                FUN           fun_GetDesktopWindow=( GPA(
                    dll_User32 , "GetDesktopWindow"
                ));;
                
                FUN             fun_ChooseColorA=( GPA(
                    dll_Comdlg32 , "ChooseColorA" ));;
                
                if( (void*)0 == fun_ChooseColorA ){
                    assert("[FAIL:ChooseColor:PTR]");
                };;
                
                FUN fun_CreateSolidBrush=(GPA(
                    dll_Gdi32 , "CreateSolidBrush" ));;
                
                if( (void*)0 == fun_CreateSolidBrush ){
                    assert("[FAIL:CreateSolidBrush:PTR]");
                };;
                
        #undef  FUN
        #undef  GPA
        //:-----------------------------------:LOAD_FUNCTIONS://
        //:GET_PARENT_WINDOW:################################://
        //:##################################################://

            /** #_PARENT_ALWAYS_DESKTOP_HERE_DUI_# **/

            void*  hwnd  =(void*)fun_GetDesktopWindow(); 

        //:##################################################://
        //:################################:GET_PARENT_WINDOW://
        //:STUFF_I_DONT_FEEL_LIKE_ORGANIZING:----------------://

            /** Common dialog box structure **/
            struct AAC2020_NATIDUI_CHOOSECOLORA cc ={0}; 
            
            /** array of custom colors **/
            static AAC2020_NATIDUI_COLORREF acrCustClr[16]; 
            
            void*  hbrush; // brush handle
            
            // initial color selection
            static unsigned long  rgbCurrent = 0x808080;   
                                                
            // Initialize AAC2020_NATIDUI_CHOOSECOLORA 
            cc.lStructSize  = sizeof(cc);
            cc.hwndOwner    = hwnd;
            cc.lpCustColors = ( unsigned long *) acrCustClr;
            cc.rgbResult    = rgbCurrent;
            cc.Flags        = ( 0 | 0x00002 /** CC_FULLOPEN **/ 
                                  | 0x00001 /** CC_RGBINIT  **/ 
                                );;
            
            /** #COLOR_PICKER# **/
            if (fun_ChooseColorA(&cc)== 1 /** TRUE **/ ) 
            {
                hbrush = (void*)fun_CreateSolidBrush(
                                                cc.rgbResult);;
                rgbCurrent = cc.rgbResult; 

                if( hbrush ){ /** NOOP **/ };

                OKAY("[OKAY!:fun_ChooseColorA:RETURNED_TRUTH]");
            }else{
                INFO("[ERROR:fun_ChooseColorA:RETURNED_FALSE]");
            };;

            if( 0 == rgbCurrent ){
                INFO("[ARE_WE_SURE_BLACK_WAS_SELECTED?]");
            };;

        //:----------------:STUFF_I_DONT_FEEL_LIKE_ORGANIZING://

        return( rgbCurrent );
    }

#undef  OKAY
#undef  INFO
//:===============================:ASK_USER_TO_PICK_COLOR:BWO://
//:ASK_USER_TO_PICK_COLOR:___:===============================://
#define INFO aac2020_natidui_Info

    unsigned long
    AAC2020_NATIDUI_AskUserToPickColor()
    {
        //:#_DUI_PICKCOLOR_KEPT_FOR_REFERENCE_#://

        //:LOAD_DLL_FILES:-----------------------------------://
        #define DLL PEB2020_DLIB
        #define LLA PEB2020_LoadLibraryA
        
            #if( AAC2020_INCLUDE_GINAWIN <= 0 )

                DLL dll_User32  =( LLA("User32.dll")    );
            #endif
                DLL dll_Comdlg32=( LLA("Comdlg32.dll") );
                DLL dll_Gdi32   =( LLA("Gdi32.dll")    );

        #undef DLL
        #undef LLA
        //:-----------------------------------:LOAD_DLL_FILES://
        //:LOAD_FUNCTIONS:-----------------------------------://

        #if( AAC2020_INCLUDE_GINAWIN <= 0 )

            PEB2020_FUNC
            fun_GetDesktopWindow=( PEB2020_GetProcAddress(
                dll_User32 , "GetDesktopWindow"
            ));;

        #endif

            PEB2020_FUNC
            fun_ChooseColorA=( PEB2020_GetProcAddress(
                dll_Comdlg32 , "ChooseColorA" ));;

            if( (void*)0 == fun_ChooseColorA ){
                assert("[FAIL:ChooseColor:PTR]");
            };;

            PEB2020_FUNC
            fun_CreateSolidBrush=(PEB2020_GetProcAddress(
                dll_Gdi32 , "CreateSolidBrush" ));;

            if( (void*)0 == fun_CreateSolidBrush ){
                assert("[FAIL:CreateSolidBrush:PTR]");
            };;

        //:-----------------------------------:LOAD_FUNCTIONS://
        //:GET_PARENT_WINDOW:################################://
        //:##################################################://
        #if( AAC2020_INCLUDE_GINAWIN <= 0 )

            void*  hwnd  =(void*)fun_GetDesktopWindow(); 

        #endif
        #if( AAC2020_INCLUDE_GINAWIN >= 1 )

        //+Handle to window is NOT a windows device context! +//
        //- void*  hwnd  =(void*)AAC2020_GINAWIN_GetWinDC(); -//
            void* hwnd=( AAC2020_GINAWIN_GET_han_win() );

        #endif
        //:##################################################://
        //:################################:GET_PARENT_WINDOW://
        //:STUFF_I_DONT_FEEL_LIKE_ORGANIZING:----------------://

            /** Common dialog box structure **/
            struct AAC2020_NATIDUI_CHOOSECOLORA cc ={0}; 
            
            /** array of custom colors **/
            static AAC2020_NATIDUI_COLORREF acrCustClr[16]; 
            
            void*  hbrush; // brush handle
            
            // initial color selection
            static unsigned long rgbCurrent = 0x808080;   
                                                
            // Initialize AAC2020_NATIDUI_CHOOSECOLORA 
            cc.lStructSize  = sizeof(cc);
            cc.hwndOwner    = hwnd;
            cc.lpCustColors = ( unsigned long *) acrCustClr;
            cc.rgbResult    = rgbCurrent;
            cc.Flags        = ( 0 | 0x00002 /** CC_FULLOPEN **/ 
                                  | 0x00001 /** CC_RGBINIT  **/ 
                                );;
            
            /** #COLOR_PICKER# **/
            if (fun_ChooseColorA(&cc)== 1 /** TRUE **/ ) 
            {
                hbrush = (void*)fun_CreateSolidBrush(
                                                cc.rgbResult);;
                rgbCurrent = cc.rgbResult; 

                if( hbrush ){ /** NOOP **/ };

                INFO("[OKAY!:fun_ChooseColorA:RETURNED_TRUTH]");
            }else{
                INFO("[ERROR:fun_ChooseColorA:RETURNED_FALSE]");
            };;

            if( 0 == rgbCurrent ){
                INFO("[ARE_WE_SURE_BLACK_WAS_SELECTED?]");
            };;

        //:----------------:STUFF_I_DONT_FEEL_LIKE_ORGANIZING://

        return( rgbCurrent );

    }

#undef  INFO
//:===============================:ASK_USER_TO_PICK_COLOR:___://