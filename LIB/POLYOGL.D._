#include "./POLYOGL.___.LIBCHAN_ORDER_ENFORCER._"
//:NEO_SCALINE_ORDERING:=====================================://
/** ******************************************************** ***

    NEO_SCANLINE_ORDERING (as in NEO from the matrix )
                          (with the falling code rain)

    +----+----+----+----+    
    | 00 | 04 | 08 | 12 |    
    +----+----+----+----+      
    | 01 | 05 | 09 | 13 |     
    +----+----+----+----+     
    | 02 | 06 | 10 | 14 |     
    +----+----+----+----+     
    | 03 | 07 | 11 | 15 |     
    +----+----+----+----+     

    +----=----+----=----+----=----+----=----+ 
    |         |         |         |         | 
    | [00,00] | [01,00] | [02,00] | [03,00] | 
    |         |         |         |         | 
    +----=----+----=----+----=----+----=----+
    |         |         |         |         | 
    | [00,01] | [01,01] | [02,01] | [03,01] | 
    |         |         |         |         | 
    +----=----+----=----+----=----+----=----+
    |         |         |         |         | 
    | [00,02] | [01,02] | [02,02] | [03,02] | 
    |         |         |         |         | 
    +----=----+----=----+----=----+----=----+
    |         |         |         |         | 
    | [00,03] | [01,03] | [02,03] | [03,03] | 
    |         |         |         |         | 
    +----=----+----=----+----=----+----=----+

    C99 Advantages: 
            1.  You can grab column vectors like you would
                need to in GLSL compatible code.

    C99 Disadvantage:
            1. Non standard scaline ordering.
            2. Matrix Cells addressed in non-standard
               [ x , y ] order instead of [ y , x ] order.

    struct AAC2020_POLYOGL_FM4{  //:<--[ GLSL Mat4 ]         ://

        //:--------------------------------------------------://
        //:    x_axis                                        ://
        //:     |                                            ://
        //:     V                                            ://
        F32 col[4][4]; //:<--[ @NEO_SCANLINE_ORDERING@ ]     ://
        //:        ^                                         ://
        //:        |                                         ://
        //:       y_axis                                     ://
        //:--------------------------------------------------://

    };

*** ******************************************************** **/
//:=====================================:NEO_SCALINE_ORDERING://
//:GLSL_MATRIX_MULTIPLICATION:===============================://
/** ******************************************************** ***
@VID_IID[ 0300 ]TIME[ 01:36:23 ]BEGAN_WRITING_THIS_SECTION

    THIS_COMMENT_SECTION_IN_ACTION:
    https://www.shadertoy.com/view/NsSXWG

    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        //: @VID_IID[0300]TIME[03:23:23]DONE_WRITING_CODE ---://
        //: TWITCH[ www.twitch.com/kanjicoder ]////////// ---://

        vec2 uv = fragCoord/iResolution.xy;

        vec3 rd;
             rd.x=( 1.0 );
             rd.y=( 2.0 );
             rd.z=( 3.0 );

        //:--------------------------------------------------://
        //:  VECTORS AND SUB VECTORS ARE "ROW VECTORS"       ://
        //:  rd.xy is __NOT__ a column vector:               ://
        //:  (2X1)  *  (2X2) == NOT POSSIBLE!                ://
        //:     |       |                                    ://
        //:     +---+---+                                    ://
        //:         |                                        ://
        //:      NOT_MATCH!                                  ://
        //:                                                  ://
        //:  rd.xy  *  mat2(10,20,30,40)                     ://
        //:  +- -+     +-     -+                             ://
        //:  |1.0|     |10 , 30|                             ://
        //:  |   |  *  |       | == INVALID_OPERATION        ://
        //:  |2.0|     |20 , 40|                             ://
        //:  +- -+     +-     -+                             ://
        //:--------------------------------------------------://
        //:  rd.xy is __IS__  a row vector:                  ://
        //:  (1X2)  *  (2X2) == __IS__ possible              ://
        //:     |       |                                    ://
        //:     +---+---+                                    ://
        //:         |                                        ://
        //:      YES_MATCH!                                  ://
        //:--------------------------------------------------://
        //:                                                  ://
        //:                  +---+---+                       ://
        //:                  |10 |30 |                       ://
        //:                  +---+---+ <--[ mat2(10,20,30,40) ]
        //:                  |20 |40 |                       ://
        //:                  +---+---+                       ://
        //:        +---+---+ +---+---+                       ://
        //: rd.xy==|1.0|2.0| | x | y |                       ://
        //:        +---+---+ +---+---+                       ://
        //:                                                  ://
        //:        x =( (1.0*10)+(2.0*20) ) ===>  50         ://
        //:        y =( (1.0*30)+(2.0*40) ) ===> 110         ://
        //:--------------------------------------------------://

        rd.xy = rd.xy*mat2(10,20,30,40);
     
        if( rd.x == 50.0 && rd.y == 110.0 ){  
            //:GREEN SCREEN: KNOW WHAT YOU ARE TALKING ABOUT:
            fragColor = vec4(0,1,0,1.0); 
        }else{
            //:BLACK SCREEN: WE ARE BEING IDIOTS:
            fragColor = vec4(0,0,0,1.0);
        };;
    }


*** ******************************************************** **/
//:GLSL_MATRIX_MULTIPLICATION:===============================://
//:GLSL_POLYFILLS_GAURD:*************************************://
    #ifdef MACRO_THIS_IS_GLSL
        #error THIS_IS_NOT_GLSL_CODE_2021
    #endif
//:*************************************:GLSL_POLYFILLS_GAURD://
//:DO_NOT_PASTE_INTO_GLSL_CODE:******************************://
#define I32 int32_t /** GCC: <stdint.h> **/
#define U08 uint8_t /** GCC: <stdint.h> **/
#define F32 float

    //:FUI_FLOAT_UINT_INT:===================================://

        //:FV2_FV3_FV4:--------------------------------------://

            struct AAC2020_POLYOGL_FV2{
            //:@VID_IID[ 0116 ]T[ 00:20:23 ]ORIGINAL_COMMENT ://
                F32 x ; //:[ iResolution.x | iMouse.x ]
                F32 y ; //:[ iResolution.y | iMouse.y ]
                        //:EXAMPLE[ uvc.x ]@VID_IID[ 0292 ]
                        //:EXAMPLE[ uvc.y ]TIME[ 00:14:23 ]
            };
            struct AAC2020_POLYOGL_FV3{
                F32 x ; //:ADDED_DATE[      2021_05_09  ]
                F32 y ; //:@VID_IID[ 0292 ]T[ 00:15:15  ]
                F32 z ; //:FOR[ AAC2020_EXTCODE_FIRETIL ]
            };
            struct AAC2020_POLYOGL_FV4{
                F32 x ; //:RED    @VID_IID[ 0093 ]           ://
                F32 y ; //:GREEN  TIME[ 00:24:50 ]           ://
                F32 z ; //:BLUE   Shim for float vectors to  ://
                F32 w ; //:ALPHA  output frag color.         ://
            };                                                

        //:--------------------------------------:FV2_FV3_FV4://
        //:UV2_UV3_UV4:--------------------------------------://

            /** Uint Vecs are probably 32 bits per component **/    
            /** But best to assume LESS memory, not more.    **/
            /** @VID_IID[ 0292 ]TIME[ 01:41:23 ]             **/

            struct AAC2020_POLYOGL_UV2{
                U08 x ; //: RED    ADDED_DATE[ 2021_05_09 ]  ://
                U08 y ; //: GREEN  @VID_IID[ 0292 ]          ://
                        //:        TIME[ 01:43:13 ]          ://
            };    
            struct AAC2020_POLYOGL_UV3{
                U08 x ; //: RED    ADDED_DATE[ 2021_05_09 ]  ://
                U08 y ; //: GREEN  @VID_IID[ 0292 ]          ://
                U08 z ; //: BLUE   TIME[ 01:42:42 ]          ://
            };                                               
            struct AAC2020_POLYOGL_UV4{
            /** @VID_IID[ 0092 ]TIME[ 00:26:45 ]TEXEL_FETCH  **/
                U08 x ; //: RED   ---------------------------://
                U08 y ; //: GREEN ---------------------------://
                U08 z ; //: BLUE  ---------------------------://
                U08 w ; //: ALPHA ---------------------------://
            };

        //:--------------------------------------:UV2_UV3_UV4://
        //:IV2_IV3_IV4:--------------------------------------://

            struct AAC2020_POLYOGL_IV2{
                I32 x ; //:@VID_IID[ 0092 ]
                I32 y ; //:TIME[ 00:27:55 ]
            };
            struct AAC2020_POLYOGL_IV3{
                I32 x ; //:@VID_IID[ 0292 ]
                I32 y ; //:TIME[ 01:46:23 ]
                I32 z ;  
            };
            struct AAC2020_POLYOGL_IV4{
                I32 x ; //:@VID_IID[ 0292 ]
                I32 y ; //:TIME[ 01:46:23 ]
                I32 z ;  
                I32 w ;  
            };

        //:--------------------------------------:IV2_IV3_IV4://

    //:===================================:FUI_FLOAT_UINT_INT://
    //:STRUCT_TYPE_POLYFILLS:================================://
    
        /** @VID_IID[ 0292 ]T[01:53:32 ]STRUCTS_AFTER_PRIM * **/

        //:RECTANGLE_STRUCT:---------------------------------://

            struct AAC2020_POLYOGL_REC{     
                 
                /** @VID_IID[ 0151 ]REASON_WHY_SIGNED_INT    **/
                /** TIME[ 00:48:10 ]REASON_WHY_SIGNED_INT    **/
                /** @VID_IID[ 0292 ]TIME[ 01:48:23 ]         **/

                //:X_BOUNDS:
                I32 x_0 ; //:<--@_NEVER_NEGATIVE_@.
                I32 x_1 ; //:   But use signed for ease of
                          //:   use as well as underflow
                          //:   detection.
                          //:   @_SHOULD_NOT_BE_NEGATIVE_@
        
                //:Y_BOUNDS:
                I32 y_0 ; //:<--@_NEVER_NEGATIVE_@.
                I32 y_1 ; //:   But use signed for ease of
                          //:   use as well as underflow
                          //:   detection.
                          //:   @_SHOULD_NOT_BE_NEGATIVE_@
            };
        //:---------------------------------:RECTANGLE_STRUCT://
        //:MATRIX_STRUCTS:-----------------------------------://
        /** ************************************************ ***
        @VID_IID[ 0299 ]TIME[ 00:16:32 ]SECTION_CREATED
        1. FM2: Float Matrix 2x2
        2. FM3: Float Matrix 3x3
        3. FM4: Float Matrix 4x4
        *** ************************************************ **/
            struct AAC2020_POLYOGL_FM2{ /** -- GLSL::Mat2 -- **/
                F32 col[2][2];
            };
            struct AAC2020_POLYOGL_FM3{ /** -- GLSL::Mat3 -- **/
                F32 col[3][3];
            };
            struct AAC2020_POLYOGL_FM4{ /** -- GLSL::Mat4 -- **/
                F32 col[4][4];
            };
        //:-----------------------------------:MATRIX_STRUCTS://

    //:================================:STRUCT_TYPE_POLYFILLS://

#undef  I32
#undef  U08
#undef  F32
//:******************************:DO_NOT_PASTE_INTO_GLSL_CODE://