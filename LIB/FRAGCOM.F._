//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://
    void 
    aac2020_fragcom_Halt( const char* msg_err )
    {
        printf("[FATAL_ERROR:aac2020_fragcom]:%s\n", msg_err );
        fflush(stdout);
        exit( 123 );
    }
//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:LOG_AFTER_HALT:===========================================://
    void
    aac2020_fragcom_Info_any(
        const char* str_fmt
    ,   void*       dat_any   
    )
    { if( AAC2020_SILENCE.FRAGCOM <= 0 ){

        /** Same Line As Next Printf **/
        printf("[fragcom_log]....(   " ); fflush( stdout );
        printf( str_fmt , dat_any      ); fflush( stdout );
        printf(               "   )\n" ); fflush( stdout );

    };; }
//:===========================================:LOG_AFTER_HALT://
//:INIT_NONE:================================================://
#define U32 uint32_t /** GCC: <stdint.h> **/
    U32
    AAC2020_FRAGCOM_InitNone( U32 u32 ){
        if( u32 ){ /** reserved for future use **/ };

        if(     aac2020_fragcom_unit_test_ran_or_running <= 0 ){
            U32 AAC2020_FRAGCOM_UnitTest( U32 );
                AAC2020_FRAGCOM_UnitTest( 0x0 );
        };;
        return( 0x00 );
    }
#undef  U32
//:================================================:INIT_NONE://
//:UNIT_TEST_SECTION:========================================://
#define U32 uint32_t /** GCC: <stdint.h> **/  //:-------: 01 ://
#define I32  int32_t /** GCC: <stdint.h> **/  //:-------: 02 ://
#define F32 float                             //:-------: 03 ://
#define ERR aac2020_fragcom_Halt              //:-------: 04 ://
#define E_V extern void                       //:-------: 05 ://
#define LOG aac2020_fragcom_Info_any          //:-------: 06 ://
#define IV2 struct AAC2020_POLYOGL_IV2        //:-------: 07 ://
#define FV4 struct AAC2020_POLYOGL_FV4        //:-------: 08 ://

    U32
    AAC2020_FRAGCOM_UnitTest( U32 u32 ){
        LOG("[AAC2020_FRAGCOM_UnitTest:BEG]",((void*)0));

        if( u32 ){ /**Reserved_For_Future_Use**/ };
        aac2020_fragcom_unit_test_ran_or_running=( 1 );

        //:RECT_MAPPING:-------------------------------------://
    
            /** RECTANGLE_COORD_REMAPPING_TESTS:BEGIN **/
        
        //:SC1: Specific Case #1 ://
        E_V aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC1( void );
            aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC1(      );
    
        //:SC2: Specific Case #2 ://
        E_V aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC2( void );
            aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC2(      );
    
        //:SC3: Specific Case #3:                            ://
        //|                https://i.imgur.com/NBzWjgd.png   |//
        E_V aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC3( void );
            aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC3(      );

        //:SC4: Specific Case #4: (More Accurate SC3 test)
        E_V aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC4( void );
            aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC4(      );
    
        //:BIG: Big Test for:   rec_src_MAP_rec_dst:
        E_V aac2020_fragcom_UTC_rec_src_MAP_rec_dst(     void );
            aac2020_fragcom_UTC_rec_src_MAP_rec_dst(          );
    
        //:-------------------------------------:RECT_MAPPING://

        //+ NO SUCH THING. @VID_IID[ 0136 ]TIME[ 03:44:23 ]  +//
        //- AAC2020_FRAGCOM_Main( fv4 );-------------------- -//

        LOG("[AAC2020_FRAGCOM_UnitTest:END]",((void*)0));
        return( 0x00 );
    }

    E_V /** SC1: Specific Case #1 **/
    aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC1( void )
    {
    /** **************************************************** ***
                                    |   |
        [ ][ ][ ][ ]  [ ][ ][ ][ ]  |   |
        [ ][ ][ ][ ]  [ ][ ][ ][ ]  |   |
        [ ][ ][ ][ ]  [ ][ ][ ][ ]  |   | 
        [ ][ ][ ][A]  [ ][ ][ ][ ]  |   | 
                                    |>>>| 
        [ ][ ][ ][ ]  [B][ ][ ][ ]  |   |   [ ][ ][ ][ ]
        [ ][ ][ ][ ]  [ ][ ][ ][ ]  |   |   [ ][A][ ][ ]
        [ ][ ][ ][ ]  [ ][ ][ ][ ]  |   |   [ ][ ][B][ ]
        [ ][ ][ ][ ]  [ ][ ][ ][ ]  |   |   [ ][ ][ ][ ]
                                    |   |
    *** **************************************************** **/
        IV2 dst;

            dst=(
            AAC2020_FRAGCOM_rec_src_MAP_rec_dst( 
                3,3 //:<--[A]
                //:INN____RANGE  OUT_______RANGE
            ,   0x0,0x0,8-1,8-1, 0x0,0x0,4-1,4-1
                //:              LOW LOW HIG HIG
            ));;
            if( dst.x != (1) //:HALFWAY____LEFT_SIDE
            ||  dst.y != (1) //:HALFWAY____LEFT_SIDE
            ){
                ERR("[SC1:HALFWAY____LEFT_SIDE:FAIL]");
            };;


            dst=(
            AAC2020_FRAGCOM_rec_src_MAP_rec_dst( 
                4,4 //:<--[B]
                //:INN____RANGE  OUT_______RANGE
            ,   0x0,0x0,8-1,8-1, 0x0,0x0,4-1,4-1
                //:              LOW LOW HIG HIG
            ));;
            if( dst.x != (2) //:HALFWAY____RIGHT_SIDE
            ||  dst.y != (2) //:HALFWAY____RIGHT_SIDE
            ){
                printf("[dst.x]:%d\n", dst.x );
                printf("[dst.y]:%d\n", dst.y );
                ERR("[SC1:HALFWAY____RIGHT_SIDE:FAIL]");
            };;
    }

    E_V /** SC2: Specific Case #2 **/
    aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC2( void )
    {
    /** **************************************************** ***
    Using the exact case from where taudepo's paint5d
    32x32 block of memory is located on
    AAC2020_PIXNAME_taudepo
        |<-------- 32 -------->|
        |<-- 16 -->|           |
        |   ____   |    ____   |
        [  ]    [  ][  ]    [  ]
        |          ||          |
        |   T__L   ||   T__R   |
        |          ||          |
        [  ]____[01][  ]____[  ]
        [  ]    [  ][02]    [  ]
        |          ||          |
        |   B__L   ||   B__R   |
        |          ||          |
        [  ]____[  ][  ]____[  ]
    *** **************************************************** **/
        IV2 dst;

            assert( 416+32-1  ==447 );
            assert( 384+32-1  ==415 );
            assert( 447-416+1 == 32 );
            assert( 415-384+1 == 32 );

            dst=(
            AAC2020_FRAGCOM_rec_src_MAP_rec_dst( 

                256-1 , 256-1 //:<--[01]

                //:INN____RANGE  OUT_______RANGE
            ,   0x0,0x0,511,511, 416,384,447,415
                //:              LOW LOW HIG HIG
            ));;
            if( dst.x != (416+16-1) //:HALFWAY____LEFT_SIDE
            ||  dst.y != (384+16-1) //:HALFWAY____LEFT_SIDE
            ){
                ERR("[SC2:HALFWAY____LEFT_SIDE:FAIL]");
            };;

            dst=(
            AAC2020_FRAGCOM_rec_src_MAP_rec_dst( 

                256+0 , 256+0 //:<--[02]

                //:INN____RANGE  OUT_______RANGE
            ,   0x0,0x0,511,511, 416,384,447,415
            ));;
            if( dst.x != (416+16+0) //:HALFWAY____RIGHT_SIDE
            ||  dst.y != (384+16+0) //:HALFWAY____RIGHT_SIDE

            ||  dst.x != (     432) //:HALFWAY____RIGHT_SIDE
            ||  dst.y != (     400) //:HALFWAY____RIGHT_SIDE
            ){
                printf("[.....dst.x]:%d\n", dst.x);
                printf("[.....dst.y]:%d\n", dst.y);
                ERR("[SC2:HALFWAY____RIGHT_SIDE:FAIL]");
            };;
    }

    E_V
    aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC3( void )
    {
    /** **************************************************** ***
    @VID_IID[ 0139 ]TIME[ 00:26:13 ]
    Figuring out the problem by looking at imgur image
    on my left monitor. We want to scan over a large
    "Screen" / "Source" rectangle and sample each target
    pixel at least 4 times. ( 2 sampling locations per axis)

    @VID_IID[ 0139 ]TIME[ 01:01:10 ]
    This test passes and is a proxy for situation seen in:
    https://i.imgur.com/NBzWjgd.png  , we should probably
    do an EXACT test that mocks up the situation in
    https://i.imgur.com/NBzWjgd.png and procedurally tests
    every single pixel. DATE[ 2021_02_16 ]
    ------------------------------------------------------------
        
        T_L SOURCE:                      T_R
          \ SCREEN SIZE.                 /
           \SET OF FRAG COORDS:         /_+__
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][]  |
                                          |
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][] 12
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][]  |
                                          |
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][]  |
            [][][][]  [][][][]  [][][][]__+__
           /| | | |   | | | |   | | | | \
          /[0 1 2 3   4 5 6 7   8 9 1011]\
        B_L                              B_R
            DESTINATION:
            TEXTUR_TO_SAMPLE:           __+__
                        [][]  [][]  [][]  |
                        [][]  [][]  [][]  |
                                          |
                        [][]  [][]  [][]  6
                        [][]  [][]  [][]  |
                                          |
                        [][]  [][]  [][]  |
                        [][]  [][]  [][]__+__
                        | |   | |   | |
                       [0 1   2 3   4 5]
    *** **************************************************** **/
    #define NUM_TES ( 64 )
    #define NUM_COL (  4 )

        I32 tab_utc[ NUM_TES * NUM_COL ]={
         
                //:T_L:- - - - - - - - - -- - - - - - - - - -://
            /**/( 0 ),( 0 )    ,    ( 0 ),( 0 )
            ,   ( 1 ),( 0 )    ,    ( 0 ),( 0 )
            ,   ( 2 ),( 0 )    ,    ( 1 ),( 0 )
            ,   ( 3 ),( 0 )    ,    ( 1 ),( 0 )

            ,   ( 0 ),( 1 )    ,    ( 0 ),( 0 )
            ,   ( 1 ),( 1 )    ,    ( 0 ),( 0 )
            ,   ( 2 ),( 1 )    ,    ( 1 ),( 0 )
            ,   ( 3 ),( 1 )    ,    ( 1 ),( 0 )

            ,   ( 0 ),( 2 )    ,    ( 0 ),( 1 )
            ,   ( 1 ),( 2 )    ,    ( 0 ),( 1 )
            ,   ( 2 ),( 2 )    ,    ( 1 ),( 1 )
            ,   ( 3 ),( 2 )    ,    ( 1 ),( 1 )
                         
            ,   ( 0 ),( 3 )    ,    ( 0 ),( 1 )
            ,   ( 1 ),( 3 )    ,    ( 0 ),( 1 )
            ,   ( 2 ),( 3 )    ,    ( 1 ),( 1 )
            ,   ( 3 ),( 3 )    ,    ( 1 ),( 1 )
                //:- - - - - - - - - -- - - - - - - - - -:T_L://
                //:T_R:- - - - - - - - - -- - - - - - - - - -://
            ,   ( 8 ),( 0 )    ,    ( 4 ),( 0 )
            ,   ( 9 ),( 0 )    ,    ( 4 ),( 0 )
            ,   (10 ),( 0 )    ,    ( 5 ),( 0 )
            ,   (11 ),( 0 )    ,    ( 5 ),( 0 )

            ,   ( 8 ),( 1 )    ,    ( 4 ),( 0 )
            ,   ( 9 ),( 1 )    ,    ( 4 ),( 0 )
            ,   (10 ),( 1 )    ,    ( 5 ),( 0 )
            ,   (11 ),( 1 )    ,    ( 5 ),( 0 )

            ,   ( 8 ),( 2 )    ,    ( 4 ),( 1 )
            ,   ( 9 ),( 2 )    ,    ( 4 ),( 1 )
            ,   (10 ),( 2 )    ,    ( 5 ),( 1 )
            ,   (11 ),( 2 )    ,    ( 5 ),( 1 )
                         
            ,   ( 8 ),( 3 )    ,    ( 4 ),( 1 )
            ,   ( 9 ),( 3 )    ,    ( 4 ),( 1 )
            ,   (10 ),( 3 )    ,    ( 5 ),( 1 )
            ,   (11 ),( 3 )    ,    ( 5 ),( 1 )
                //:- - - - - - - - - -- - - - - - - - - -:T_R://
                //:B_L:- - - - - - - - - -- - - - - - - - - -://
            ,   ( 0 ),( 8 )    ,    ( 0 ),( 4 )
            ,   ( 1 ),( 8 )    ,    ( 0 ),( 4 )
            ,   ( 2 ),( 8 )    ,    ( 1 ),( 4 )
            ,   ( 3 ),( 8 )    ,    ( 1 ),( 4 )

            ,   ( 0 ),( 9 )    ,    ( 0 ),( 4 )
            ,   ( 1 ),( 9 )    ,    ( 0 ),( 4 )
            ,   ( 2 ),( 9 )    ,    ( 1 ),( 4 )
            ,   ( 3 ),( 9 )    ,    ( 1 ),( 4 )

            ,   ( 0 ),(10 )    ,    ( 0 ),( 5 )
            ,   ( 1 ),(10 )    ,    ( 0 ),( 5 )
            ,   ( 2 ),(10 )    ,    ( 1 ),( 5 )
            ,   ( 3 ),(10 )    ,    ( 1 ),( 5 )
                         
            ,   ( 0 ),(11 )    ,    ( 0 ),( 5 )
            ,   ( 1 ),(11 )    ,    ( 0 ),( 5 )
            ,   ( 2 ),(11 )    ,    ( 1 ),( 5 )
            ,   ( 3 ),(11 )    ,    ( 1 ),( 5 )
                //:- - - - - - - - - -- - - - - - - - - -:B_L://
                //:B_R:- - - - - - - - - -- - - - - - - - - -://
            ,   ( 8 ),( 8 )    ,    ( 4 ),( 4 )
            ,   ( 9 ),( 8 )    ,    ( 4 ),( 4 )
            ,   (10 ),( 8 )    ,    ( 5 ),( 4 )
            ,   (11 ),( 8 )    ,    ( 5 ),( 4 )
                                            
            ,   ( 8 ),( 9 )    ,    ( 4 ),( 4 )
            ,   ( 9 ),( 9 )    ,    ( 4 ),( 4 )
            ,   (10 ),( 9 )    ,    ( 5 ),( 4 )
            ,   (11 ),( 9 )    ,    ( 5 ),( 4 )
                                            
            ,   ( 8 ),(10 )    ,    ( 4 ),( 5 )
            ,   ( 9 ),(10 )    ,    ( 4 ),( 5 )
            ,   (10 ),(10 )    ,    ( 5 ),( 5 )
            ,   (11 ),(10 )    ,    ( 5 ),( 5 )
                                            
            ,   ( 8 ),(11 )    ,    ( 4 ),( 5 )
            ,   ( 9 ),(11 )    ,    ( 4 ),( 5 )
            ,   (10 ),(11 )    ,    ( 5 ),( 5 )
            ,   (11 ),(11 )    ,    ( 5 ),( 5 )
                //:- - - - - - - - - -- - - - - - - - - -:B_R://
        };;
        I32 t_i;
        I32 m_i;
        I32 bas;
        I32 s_x;
        I32 s_y;
        I32 d_x;
        I32 d_y;
        IV2 dst;
    
        m_i=( (NUM_TES )-1 );
        for( t_i = 0 ; t_i <= m_i ; t_i ++ ){

            bas =( t_i * NUM_COL );

            s_x = tab_utc[ bas + 0 ]; //:SOURCE: X
            s_y = tab_utc[ bas + 1 ]; //:SOURCE: Y

            d_x = tab_utc[ bas + 2 ]; //:DESTINATION: X
            d_y = tab_utc[ bas + 3 ]; //:DESTINATION: Y

            dst=(
            AAC2020_FRAGCOM_rec_src_MAP_rec_dst( 
                s_x,s_y //:<--Source XY Location To Map
                //:INN__RANGE    OUT___RANGE
            ,   0x0,0x0,11,11,   0x0,0x0,5,5
            ));;

            if( dst.x != d_x
            ||  dst.y != d_y
            ){
                printf("[**************************]\n");

                printf("[t_i]:%d\n", t_i );
                printf("\n");
                printf("[got:dst.x]:%d\n" , dst.x );
                printf("[got:dst.y]:%d\n" , dst.y );
                printf("\n");
                printf("[exp:::d_x]:%d\n" ,   d_x );
                printf("[exp:::d_y]:%d\n" ,   d_y );

                printf("[**************************]\n");

                ERR("[AND_THEN_THE_SUN_FELL:2021]");
            };;
        };;

    #undef  NUM_TES 
    #undef  NUM_COL 
    }
    
    E_V
    aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC4( void )
    {

        ERR("[TODO:MOCK_UP:https://i.imgur.com/NBzWjgd.png]");
    }

    E_V 
    aac2020_fragcom_UTC_rec_src_MAP_rec_dst( void )
    {
    #define NUM_TES (46 ) /** Number Of Tests            **/
    #define NUM_COL (12 ) /** Number Of Columns Per Test **/
         
        //:OUTPUT_VARIABLE_FOR_EACH_TEST:
        IV2     dst; //:<-- DESTINATION.

        //:SOURCE:          DEST:
        I32     s_x;        I32     d_x; //:<--COORD:X
        I32     s_y;        I32     d_y; //:<--COORD:Y

        I32     sx0;        I32     dx0; //:RECT_BOUNDS:LEF
        I32     sx1;        I32     dx1; //:RECT_BOUNDS:RIG
        I32     sy0;        I32     dy0; //:RECT_BOUNDS:TOP
        I32     sy1;        I32     dy1; //:RECT_BOUNDS:BOT

        I32 t_i; //:Test index
        I32 mti; //:Max_Test_Index
        I32 bas; //:Base address of current test data.

        I32 tab_utc[ NUM_TES * NUM_COL ]={
    //: 001 002   003 004 005 006   007 008 009 010   011 012    
    //: 000 001   002 003 004 005   006 007 008 009   010 011 
    //: s_x,s_y   sx0,sy0,sx1,sy1   dx0,dy0,dx1,dy1   d_x d_y
        0x0,0x0 , 0x0,0x0,0x0,0x0 , 0x0,0x0,0x0,0x0 , 0x0,0x0
               //:LOW|LOW|UPP|UPP | LOW|LOW|UPP|UPP ://

        //:2_Basic_Cases:X_AND_Y_IDENTICAL:   t_i==[ 1, 2   ]://
    ,   0x0,0x0 , 0x0,0x0,511,511 , 0x0,0x0,511,511 , 0x0,0x0
    ,   256,256 , 0x0,0x0,511,511 , 0x0,0x0,511,511 , 256,256

        //:2_Basic_Cases:ISOLATE_X:           t_i==[ 3, 4   ]://
    ,   0x0,0x0 , 0x0,0x0,511,0x0 , 0x0,0x0,511,0x0 , 0x0,0x0
    ,   256,0x0 , 0x0,0x0,511,222 , 0x0,0x0,511,222 , 256,0x0

        //:2_Basic_Cases:ISOLATE_Y:           t_i==[ 5, 6   ]://
    ,   0x0,0x0 , 0x0,0x0,511,511 , 0x0,0x0,0x0,511 , 0x0,0x0
    ,   0x0,256 , 0x0,0x0,222,511 , 0x0,0x0,222,511 , 0x0,256

        //:ORG_ZER:ORiGin_is_ZERo:
        //:Remap_Using_1X1_Rectangles:ORG_ZER:t_i==[ 7, 8, 9]://
    ,   0x0,0x0 , 0x0,0x0,0x0,0x0 , 511,511,511,511 , 511,511
    ,   0x0,0x0 , 0x0,0x0,0x0,0x0 , 511,0x0,511,0x0 , 511,0x0
    ,   0x0,0x0 , 0x0,0x0,0x0,0x0 , 0x0,511,0x0,511 , 0x0,511

        //:NOZ_REC:NOnZero_RECts:
        //:Remap_Using_1X1_Rectangles:NOZ_REC:t_i==[10,11,12]://
    ,   111,222 , 111,111,222,222 , 333,333,444,444 , 333,444
    ,   222,333 , 222,222,333,333 , 444,444,555,555 , 444,555
    ,   333,444 , 333,333,444,444 , 555,555,666,666 , 555,666

        //:Squash_Stretch_But_Both_Rects_At_Zero_Comma_Zero:
        //:      INN
        //:[ 0 ][ 1 ][ 2 ]           
        //:[ 0 ][ 1 ][ 2 ]   [ 3 ]  [ 4 ][ 5 ][ 6 ]
        //:                   OUT             t_i==[13,14,15]://
        //:       sx0,sy0,sx1,sy1   dx0,dy0,dx1,dy1   d_x,d_y
    ,     1,  1 , 0x0,0x0,  2,  2 , 0x0,0x0,  6,  6 ,   3,  3
    ,     1,  1 , 0x0,0x0,  2,  2 , 0x0,0x0,  6,  6 ,   3,  3
    ,     1,  1 , 0x0,0x0,  2,  2 , 0x0,0x0,  6,  6 ,   3,  3

        //:Final_Test_Using_Current_Use_Case:(2020_02_15):
        //:@VID_IID[ 0136 ]TIME[ 00:26:00 ] 
        //:                                         t_i==[16]://
    ,   0x0,0x0 , 0x0,0x0,511,511 , 416,384,447,415 , 416,384
     
        /** @_PAIRED_COMMENT_@ ............. **/
        /** @VID_IID[ 0136 ]TIME[ 00:53:23 ] **/    
        /** #_PARCOM_2021_GPUVIEW_ASSERTS_#  **/
        //:TESTS[ T_L , T_R , B_R , B_L ]  t_i==[17,18,19,20]://
    ,   0x0,0x0 , 0x0,0x0,511,511 , 416,384,447,415 , 416,384
    ,   511,0x0 , 0x0,0x0,511,511 , 416,384,447,415 , 447,384
    ,   0x0,511 , 0x0,0x0,511,511 , 416,384,447,415 , 416,415
    ,   511,511 , 0x0,0x0,511,511 , 416,384,447,415 , 447,415

    //:BEGIN::MAP_001_MAP_002_MAP_003:- - - - - - - - - - - -://
        /** ************************************************ **/
        /** @VID_IID[ 0136 ]TIME[ 06:11:42 ]FIGURE_IT_OUT!   **/
        /** Need to make sure that:                          **/
        /**#MAP_001#: SMALL range to LARGE range.( STRETCH)  **/
        /**#MAP_002#: LARGE range to SMALL range.(   SQUASH) **/
        /**#MAP_003#:  SAME range to  SAME range.(TRANSLATE) **/
        /** ************************************************ **/

        //:#MAP_001#: ........................t_i==[ 21,22,23 ]
        //:[ 7]                    [ 8]                    [ 9]
        //:[11][12][13][14][15][16][17][18][19][20][21][22][23]
    ,     7,  7 ,   7,  7,  9,  9 ,  11, 11, 23, 23 ,  11, 11  
    ,     8,  8 ,   7,  7,  9,  9 ,  11, 11, 23, 23 ,  17, 17  
    ,     9,  9 ,   7,  7,  9,  9 ,  11, 11, 23, 23 ,  23, 23  
    //: s_x,s_y | sx0,sy0,sx1,sy1 | dx0,dy0,dx1,dy1 | d_x d_y

        //:#MAP_002#: ........................t_i==[ 24,25,26 ]
        //:[11][12][13][14][15][16][17][18][19][20][21][22][23]
        //:[ 7]                    [ 8]                    [ 9]
    ,    11, 11 ,  11, 11, 23, 23 ,   7,  7,  9,  9 ,   7,  7  
    ,    17, 17 ,  11, 11, 23, 23 ,   7,  7,  9,  9 ,   8,  8  
    ,    23, 23 ,  11, 11, 23, 23 ,   7,  7,  9,  9 ,   9,  9  
    //: s_x,s_y | sx0,sy0,sx1,sy1 | dx0,dy0,dx1,dy1 | d_x d_y

        //:#MAP_003#: ........................t_i==[ 27,28,29 ]
        //:[11][12][13][14][15][16][17][18][19][20][21][22][23]
        //:[11][12][13][14][15][16][17][18][19][20][21][22][23]
    ,    11, 11 ,  11, 11, 23, 23 ,  11, 11, 23, 23 ,  11, 11  
    ,    17, 17 ,  11, 11, 23, 23 ,  11, 11, 23, 23 ,  17, 17  
    ,    23, 23 ,  11, 11, 23, 23 ,  11, 11, 23, 23 ,  23, 23  
    //: s_x,s_y | sx0,sy0,sx1,sy1 | dx0,dy0,dx1,dy1 | d_x d_y
    //:- - - - - - - - - - - -:END::::MAP_001_MAP_002_MAP_003://

        /** ************************************************ ***
        //+ @VID_IID[ 0136 ]TIME[ 05:00:32 ]                 +//
        //+ Try our ACTUAL scenario with easy to comprehend  +//
        //+ numbers first.                                   +//
        //+                                                  +//
        //+ SCREEN_SIZE ==> 900 x 900 pixels                 +//
        //+ MAPPING__TO ==> A 100x100 block in dead center   +//
        //+ ------------------------------------------------ +//
        //| We want to sample each pixel of the 900x900      |//
        //| screen and figure out what pixel of the          |//
        //| 100x100 texture memory subsection at             |//
        //| [400,400]-to-[499,499]to render at that pixel    |//
        //| coordinate.                                      |//    
        //|                                                  |//
        //| Trying to create a zoom-in effect.               |//
        *** ************************************************ **/
        /** ************************************************ ***
        INN:            OUT:
        [000]           [400]
                        
    +400[400]           [444] <--400+(400/9)  
                        
        [449].5         [449].5 <-- dead center of both.
        [450]>>>>>>>>>>>[449|450]        
                  
    +500[500]>>>>>>>>>>>[455] <--400+(500/9)                        
                        
        [899]           [499]

        Divide by 9 because the destination (OUT) is 1/9th
        the range of the input and thus [travels/scales]
        at 1/9th of the input.
        *** ************************************************ **/
        /** ************************************************ ***
        //+ ------------------------------------------------ +//
        //+       [1][2][3]   [ 4 ][ 5 ][ 6 ]   [7][8][9]    +//
        //+                         ^^^                      +//
        //+                          |                       +//
        //+ |<------- 100 -------->| |  <-- TEXTURE:WID      +//
        //+ |<-- 50 -->|           | |                       +//
        //+ |   ____   |    ____   |_|                       +//
        //+ [30]    [31][34]    [35] |                       +//
        //+ |          ||          | |                       +//
        //+ |   T__L   ||   T__R   | |                       +//
        //+ |          ||          | |                       +//
        //+ [32]____[33][36]____[37]  [ 5 ]starts at: 400    +//
        //+ [38]    [39][42]    [43]  [ 5 ]ends   at: 499    +//
        //+ |          ||          | |                       +//
        //+ |   B__L   ||   B__R   | |                       +//
        //+ |          ||          | |                       +//
        //+ [40]____[41][44]____[45]_|                       +//
        //+ |<--450--->|             |                       +//
        //+ |<---------900---------->|  <-- STRETCHED:WID    +//
        *** ************************************************ **/

        //+     ____    :::::::::::::::::::::::::::::::::::::+//
        //+ [30]    [31]                                     +//
        //+ |          |                                     +//
        //+ |   T__L   | TOP_LEF:          t_i[ 30,31,32,33 ]+//
        //+ |          |                                     +//
        //+ [32]____[33]                                     +//
        //+::::::::::::::::::::::::::::::::::::::::::::::::::+//
    ,     0,  0 , 0x0,0x0,899,899 , 400,400,499,499 , 400,400
    ,   449,  0 , 0x0,0x0,899,899 , 400,400,499,499 , 449,400
    ,     0,449 , 0x0,0x0,899,899 , 400,400,499,499 , 400,449
    ,   449,449 , 0x0,0x0,899,899 , 400,400,499,499 , 449,449

        //+     ____    :::::::::::::::::::::::::::::::::::::+//
        //+ [34]    [35]                                     +//
        //+ |          |                                     +//
        //+ |   T__R   | TOP_RIG:          t_i[ 34,35,36,37 ]+//
        //+ |          |                                     +//
        //+ [36]____[37]                                     +//
        //+::::::::::::::::::::::::::::::::::::::::::::::::::+//
    ,   450,  0 , 0x0,0x0,899,899 , 400,400,499,499 , 450,400
    ,   899,  0 , 0x0,0x0,899,899 , 400,400,499,499 , 499,400
    ,   500,449 , 0x0,0x0,899,899 , 400,400,499,499 , 455,449
    ,   899,449 , 0x0,0x0,899,899 , 400,400,499,499 , 499,449

        //+     ____    :::::::::::::::::::::::::::::::::::::+//
        //+ [38]    [39]                                     +//
        //+ |          |                                     +//
        //+ |   B__L   | BOT_LEF:          t_i[ 38,39,40,41 ]+//
        //+ |          |                                     +//
        //+ [40]____[41]                                     +//
        //+::::::::::::::::::::::::::::::::::::::::::::::::::+//
    ,     0,450 , 0x0,0x0,899,899 , 400,400,499,499 , 400,450
    ,   449,450 , 0x0,0x0,899,899 , 400,400,499,499 , 449,450
    ,     0,899 , 0x0,0x0,899,899 , 400,400,499,499 , 400,499
    ,   449,899 , 0x0,0x0,899,899 , 400,400,499,499 , 449,499

        //+     ____    :::::::::::::::::::::::::::::::::::::+//
        //+ [42]    [43]                                     +//
        //+ |          |                                     +//
        //+ |   B__R   | BOT_RIG:          t_i[ 42,43,44,45 ]+//
        //+ |          |                                     +//
        //+ [44]____[45]                                     +//
        //+::::::::::::::::::::::::::::::::::::::::::::::::::+//
    ,   450,450 , 0x0,0x0,899,899 , 400,400,499,499 , 450,450
    ,   899,450 , 0x0,0x0,899,899 , 400,400,499,499 , 499,450
    ,   450,899 , 0x0,0x0,899,899 , 400,400,499,499 , 450,499
    ,   899,899 , 0x0,0x0,899,899 , 400,400,499,499 , 499,499

        //:--------------------------------------------------://
        //: @VID_IID[ 0137 ]TIME[ 02:14:00 ]                 ://
        //: Removed 20 tests for specific case because they  ://
        //: were getting out of control. The specific        ://
        //: two most important edge cases of that test set   ://
        //: have been moved into:                            ://
        //: aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC1      ://
        //:                                                  ://
        //: For deleted code see:                            ://
        //: SEE:[ DOC/TRASH/001._ ]                          ://
        //:--------------------------------------------------://

        };;
        /** ************************************************ ***
        rbsrbs: happy little diagrams widepeepoHappy
        rbsrbs: uff prime sizes
        rbsrbs: oh ok, it's a test
        kanjicoder: Odd Sizes Are For Tests, 
                    Not Final Rendering Logic.
        rbsrbs: good good

        I : input  XY coordinate on REC_SRC bounds
        O : output XY coordinate on REC_DST bounds

        REC_SRC:      REC_DST:
        [ ][ ][ ]     [ ][ ][ ][ ][ ][ ][ ] 
        [ ][I][ ]     [ ][ ][ ][ ][ ][ ][ ] 
        [ ][ ][ ]     [ ][ ][ ][ ][ ][ ][ ] 
                      [ ][ ][ ][O][ ][ ][ ] 
                      [ ][ ][ ][ ][ ][ ][ ]
                      [ ][ ][ ][ ][ ][ ][ ]
                      [ ][ ][ ][ ][ ][ ][ ]
    
        *** ************************************************ **/
        mti=( (NUM_TES - 1) );
        for( t_i = 0 ; t_i <= mti ; t_i++ ){

            bas=( t_i * NUM_COL );

            s_x=tab_utc[ bas + 0 ];
            s_y=tab_utc[ bas + 1 ];

            sx0=tab_utc[ bas + 2 ]; //: SRC : LOW : XXX
            sy0=tab_utc[ bas + 3 ]; //: SRC : LOW : YYY
            sx1=tab_utc[ bas + 4 ]; //: SRC : UPP : XXX
            sy1=tab_utc[ bas + 5 ]; //: SRC : UPP : YYY

            dx0=tab_utc[ bas + 6 ]; //: DST : LOW : XXX
            dy0=tab_utc[ bas + 7 ]; //: DST : LOW : YYY
            dx1=tab_utc[ bas + 8 ]; //: DST : UPP : XXX
            dy1=tab_utc[ bas + 9 ]; //: DST : UPP : YYY

            d_x=tab_utc[ bas +10 ];
            d_y=tab_utc[ bas +11 ];

            dst=(
            AAC2020_FRAGCOM_rec_src_MAP_rec_dst(
            /**/    s_x
            ,       s_y
            /**/       
            ,       sx0
            ,       sy0
            ,       sx1
            ,       sy1
            /**/       
            ,       dx0
            ,       dy0
            ,       dx1
            ,       dy1
            ));;

            if( dst.x != d_x
            ||  dst.y != d_y 
            ){
                printf("[*******************************]\n\n");

                printf("[::t_i]:%d\n",   t_i); printf("\n");
                                         
                printf("[::s_x]:%d\n",   s_x);  
                printf("[::s_y]:%d\n",   s_y); printf("\n");
                                         
                printf("[::sx0]:%d\n",   sx0);  
                printf("[::sy0]:%d\n",   sy0);  
                printf("[::sx1]:%d\n",   sx1);  
                printf("[::sy1]:%d\n",   sy1); printf("\n");
                                         
                printf("[::dx0]:%d\n",   dx0);  
                printf("[::dy0]:%d\n",   dy0);  
                printf("[::dx1]:%d\n",   dx1);  
                printf("[::dy1]:%d\n",   dy1); printf("\n");
                                         
                printf("[::d_x]:%d\n",   d_x);  
                printf("[::d_y]:%d\n",   d_y); printf("\n");

                printf("[dst.x]:%d\n", dst.x);  
                printf("[dst.y]:%d\n", dst.y); printf("\n");

                printf("[*******************************]\n\n");
                ERR("[TEST_FAIL:FRAGCOM_rec_src_MAP_rec_dst]");
            };;

        };;
                                                    
    #undef  NUM_TES
    #undef  NUM_COL
    }

#undef  U32  //:----------------------------------------: 01 ://
#undef  I32  //:----------------------------------------: 02 ://
#undef  F32  //:----------------------------------------: 03 ://
#undef  ERR  //:----------------------------------------: 04 ://
#undef  E_V  //:----------------------------------------: 05 ://
#undef  LOG  //:----------------------------------------: 06 ://
#undef  IV2  //:----------------------------------------: 07 ://
#undef  FV4  //:----------------------------------------: 08 ://
//:========================================:UNIT_TEST_SECTION://