//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://
    void 
    aac2020_fragcom_Halt( const char* msg_err )
    {
        printf("[FATAL_ERROR:aac2020_fragcom]:%s\n", msg_err );
        fflush(stdout);
        exit( 123 );
    }
//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:LOG_AFTER_HALT:===========================================://
    void
    aac2020_fragcom_Info_any(
        const char* str_fmt
    ,   void*       dat_any   
    )
    { if( AAC2020_SILENCE.FRAGCOM <= 0 ){

        /** Same Line As Next Printf **/
        printf("[fragcom_log]....(   " ); fflush( stdout );
        printf( str_fmt , dat_any      ); fflush( stdout );
        printf(               "   )\n" ); fflush( stdout );

    };; }
//:===========================================:LOG_AFTER_HALT://
//:INIT_NONE:================================================://
#define U32 uint32_t /** GCC: <stdint.h> **/
    U32
    AAC2020_FRAGCOM_InitNone( U32 u32 ){
        if( u32 ){ /** reserved for future use **/ };

        if(     aac2020_fragcom_unit_test_ran_or_running <= 0 ){
            U32 AAC2020_FRAGCOM_UnitTest( U32 );
                AAC2020_FRAGCOM_UnitTest( 0x0 );
        };;
        return( 0x00 );
    }
#undef  U32
//:================================================:INIT_NONE://
//:UNIT_TEST_HELPER_FUNCTIONS:===============================://
#define I32 int32_t /** GCC: <stdint.h> **/

    I32
    AAC2020_FRAGCOM_abs(
        I32 delta
    )
    {
        if( delta <= 0 ){ delta = 0 - delta; };
        return( delta );
    } 

#undef  I32
//:===============================:UNIT_TEST_HELPER_FUNCTIONS://
//:UNIT_TEST_SECTION:========================================://
#define U32 uint32_t /** GCC: <stdint.h> **/  //:-------: 01 ://
#define I32  int32_t /** GCC: <stdint.h> **/  //:-------: 02 ://
#define F32 float                             //:-------: 03 ://
#define ERR aac2020_fragcom_Halt              //:-------: 04 ://
#define E_V extern void                       //:-------: 05 ://
#define LOG aac2020_fragcom_Info_any          //:-------: 06 ://
#define IV2 struct AAC2020_POLYOGL_IV2        //:-------: 07 ://
#define FV4 struct AAC2020_POLYOGL_FV4        //:-------: 08 ://

    U32
    AAC2020_FRAGCOM_UnitTest( U32 u32 ){
        LOG("[AAC2020_FRAGCOM_UnitTest:BEG]",((void*)0));

        if( u32 ){ /**Reserved_For_Future_Use**/ };
        aac2020_fragcom_unit_test_ran_or_running=( 1 );

        //:RECT_MAPPING:-------------------------------------://
        #define V void

            /** REMOVED: Rectangle Mapping Unit Tests. **/
            /** R:\G\AAC2020\DOC\TRASH\004._           **/
            /** @VID_IID[ 0145 ]TIME[ 02:42:12 ]       **/

            E_V aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC5(V);
                aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC5( );

        #undef  V
        //:-------------------------------------:RECT_MAPPING://

        //+ NO SUCH THING. @VID_IID[ 0136 ]TIME[ 03:44:23 ]  +//
        //- AAC2020_FRAGCOM_Main( fv4 );-------------------- -//

        LOG("[AAC2020_FRAGCOM_UnitTest:END]",((void*)0));
        return( 0x00 );
    }

    /** **************************************************** **/
    /** REMOVED: R:\G\AAC2020\DOC\TRASH\003._ ************** **/
    /** Unit Tests For AAC2020_FRAGCOM_rec_src_MAP_rec_dst   **/
    /** and similiar functions. **************************** **/
    /** @VID_IID[ 0145 ]TIME[ 02:36:13 ] ******************* **/
    /** RANGE_MAPPING_DISCRETE_UNITS_IS_NOT_A_SIMPLE_PROBLEM **/

    E_V
    aac2020_fragcom_UTC_res_src_MAP_rec_dst_SC5( void )
    {
    /** **************************************************** ***
    @VID_IID[ 0142 ]TIME[ 00:06:06 ]RENAMED_TO[ SC5 ]
    We need a simpler test that is written in the same manner
    as this test to come BEFORE this test. Something with
    a small enough range of values that we can graph it out
    on paper.

    
        |<--- SOURCE / FRAG --->|         @VID_IID[ 0140 ]
        |<-------- 512 -------->|         TIME[ 00:11:11 ]
    -=- +---+---+  ...  +---+---+         
     |  | 0 |   |       | A |   |         |<---- 32 ----->|
     |  +---+---+  ...  +---+---+         +---------------+
     |  |   |31 |       |   | B |         [0][ ]     [A][ ]
     |  +---+---+  ...  +---+---+         [ ][1]     [ ][B]
     |                                    |               |
    512 |   |   |  ...  |   |   | >>>>>>  |               |
     |                                    |               |
     |  +---+---+  ...  +---+---+         [C][ ]   [30][  ]
     |  | C |   |       |480|   |         [ ][D]   [  ][31]
     |  +---+---+  ...  +---+---+         +---------------+ 
     |  |   | D |       |   |511|          
    -=- +---+---+  ...  +---+---+          
        
    MAPING_OF[ https://i.imgur.com/NBzWjgd.png ]
    *** **************************************************** **/
    #define NUM_TES ( 16 )
    #define NUM_COL (  6 )

        I32 tab_utc[ NUM_TES * NUM_COL ]={

        //:<------- SOURCE ---->|<-- DEST -->|
        //: x_0,y_0  | x_1,y_1  | d_x,d_y    |
        /**/  0,  0  ,  15, 15  ,   0,  0 //:  T_L:CELL[ 0 ]
        ,    16,  0  ,  31, 15  ,   1,  0 //:  T_L:CELL[ 1 ]
        ,     0, 16  ,  15, 31  ,   0,  1 //:  T_L:CELL[ 2 ]
        ,    16, 16  ,  31, 31  ,   1,  1 //:  T_L:CELL[ 3 ]

        //:<------- SOURCE ---->|<-- DEST -->|
        //: x_0,y_0  | x_1,y_1  | d_x,d_y    | T_L+480==>T_R
        ,   480,  0  , 495, 15  ,  30,  0 //:  T_R:CELL[ 0 ]
        ,   496,  0  , 511, 15  ,  31,  0 //:  T_R:CELL[ 1 ]
        ,   480, 16  , 495, 31  ,  30,  1 //:  T_R:CELL[ 2 ]
        ,   496, 16  , 511, 31  ,  31,  1 //:  T_R:CELL[ 3 ]

        //:<------- SOURCE ---->|<-- DEST -->|
        //: x_0,y_0  | x_1,y_1  | d_x,d_y    | T_L+480==>B_L
        ,     0,480  ,  15,495  ,   0, 30 //:  B_L:CELL[ 0 ]
        ,    16,480  ,  31,495  ,   1, 30 //:  B_L:CELL[ 1 ]
        ,     0,496  ,  15,511  ,   0, 31 //:  B_L:CELL[ 2 ]
        ,    16,496  ,  31,511  ,   1, 31 //:  B_L:CELL[ 3 ]

        //:<------- SOURCE ---->|<-- DEST -->|
        //: x_0,y_0  | x_1,y_1  | d_x,d_y    | T_L+480==>B_R
        ,   480,480  , 495,495  ,  30, 30 //:  B_R:CELL[ 0 ]
        ,   496,480  , 511,495  ,  31, 30 //:  B_R:CELL[ 1 ]
        ,   480,496  , 495,511  ,  30, 31 //:  B_R:CELL[ 2 ]
        ,   496,496  , 511,511  ,  31, 31 //:  B_R:CELL[ 3 ]
        };;


        I32 x_0 ; //:TEST_TABLE_DATA: INPUT_RANGE: LOW_BOU:X
        I32 y_0 ; //:TEST_TABLE_DATA: INPUT_RANGE: LOW_BOU:Y
          
        I32 x_1 ; //:TEST_TABLE_DATA: INPUT_RANGE: HIG_BOU:X
        I32 y_1 ; //:TEST_TABLE_DATA: INPUT_RANGE: HIG_BOU:Y
          
        I32 d_x ; //:TEST_TABLE_DATA:    ONE_OUTPUT_COORD: X
        I32 d_y ; //:TEST_TABLE_DATA:    ONE_OUTPUT_COORD: Y

        I32 s_x ; //:SOURCE_X:
        I32 s_y ; //:SOURCE_Y:

        IV2 dst ; //:DESTINATION: X & Y

        I32 bas ; /** Base offset to first element of test. **/
        I32 t_i ; /** Test Index **/
        I32 m_i =( (NUM_TES)-1 );
        I32 m_g ;

        for( m_g = 1 ; m_g <= (1) ; m_g ++ ){
        for( t_i = 0 ; t_i <= m_i ; t_i ++ ){

            bas =( t_i * ( NUM_COL ) );

            x_0 = tab_utc[ bas + 0 ]; //:INPUT_RANGE: LOW_BOU:X
            y_0 = tab_utc[ bas + 1 ]; //:INPUT_RANGE: LOW_BOU:Y

            x_1 = tab_utc[ bas + 2 ]; //:INPUT_RANGE: HIG_BOU:X
            y_1 = tab_utc[ bas + 3 ]; //:INPUT_RANGE: HIG_BOU:Y

            d_x = tab_utc[ bas + 4 ]; //:   ONE_OUTPUT_COORD: X
            d_y = tab_utc[ bas + 5 ]; //:   ONE_OUTPUT_COORD: Y

            
            for( s_y = y_0 ; s_y <= y_1 ; s_y ++ ){
            for( s_x = x_0 ; s_x <= x_1 ; s_x ++ ){


                if( 1 == m_g ){

                    dst=(
                    AAC2020_FRAGCOM_big_MAP_lit( 
                        s_x,s_y //:<--Source XY Location To Map
                        //:INN__RANGE    OUT___RANGE
                    ,   0x0,0x0,511,511,   0x0,0x0,31,31
                    ));;
                }else
                if( 2 == m_g ){

                    //:NOT TESTING ANY OTHER FUNCTIONS
                    ERR("[M_G:OOB:2021_02_19]");

                };;


                if( dst.x != d_x
                ||  dst.y != d_y
                ){
                #define PAD printf("\n");

                    printf("[************************]\n");
                    PAD
                    printf("[::inn:t_i]:%d\n",   t_i );
                    PAD                                      
                    printf("[::inn:s_x]:%d\n",   s_x );
                    printf("[::inn:s_y]:%d\n",   s_y );
                    PAD                         
                    printf("[::exp:d_x]:%d\n",   d_x );
                    printf("[::exp:d_y]:%d\n",   d_y );
                    PAD
                    printf("[got:dst.x]:%d\n", dst.x );
                    printf("[got:dst.y]:%d\n", dst.y );
                    PAD   
                    printf("[************************]\n");

                    ERR("[IMGUR_GETTING_CLOSER:FAIL:2021]");
                #undef  PAD
                };;

            };;};; //:NEXT[ s_x , s_y ]::::::::::::::::::::::://
        };;};; //:::::NEXT[ m_g , t_i ](MetaGroup,TestIndex):://

    #undef  NUM_TES 
    #undef  NUM_COL 
    }


#undef  U32  //:----------------------------------------: 01 ://
#undef  I32  //:----------------------------------------: 02 ://
#undef  F32  //:----------------------------------------: 03 ://
#undef  ERR  //:----------------------------------------: 04 ://
#undef  E_V  //:----------------------------------------: 05 ://
#undef  LOG  //:----------------------------------------: 06 ://
#undef  IV2  //:----------------------------------------: 07 ://
#undef  FV4  //:----------------------------------------: 08 ://
//:========================================:UNIT_TEST_SECTION://