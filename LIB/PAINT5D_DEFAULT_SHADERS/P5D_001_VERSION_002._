//:AAC2020_PAINT5D_DEFAULT_001:==============================://
const char* AAC2020_PAINT5D_DEFAULT_001=( //:////////////////://
//://////////////////////////////////////////////////////////://
"#version 330 core                           \n"//://////////://
"#define AAC2020_MACRO_THIS_IS_OPEN_GL (1)   \n"//://////////://
//://////////////////////////////////////////////////////////://
//|Everything Below Is Cut+Pasted From       |////://////////://
//|The C99 File: P5D_OGL._                   |////://////////://
//://////////////////////////////////////////////////////////://

"   //:P5D_001____AAC2020_PAINT5D_DEFAULT_001:===========:// \n"
"   //:glsl_file_scope_stuff:----------------------------:// \n"
"   #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //:#_KEEP_USAMPLER_HIGH_#          ://     //[ x ]// \n"
"       //:#_SAM_PRECISION_BEFORE_SAM_VAR_#://     //[ x ]// \n"
"       precision highp usampler2D;                //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //|(( UNI ))____________________________|////[ x ]// \n"
"       //[:::::::SHADERTOY_COMPATIBILITY:::::::]////[ x ]// \n"
"       #define fragCoord gl_FragCoord             //[ x ]// \n"
"       uniform vec3 iResolution;                  //[ x ]// \n"
"       uniform usampler2D taudepo;                //[ x ]// \n"
"       uniform usampler2D paint5d;                //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //|(( INN ))____________________________|////[ x ]// \n"
"       //:     fag_tec:FrAGshaderTExtureCoord  :////[ x ]// \n"
"       in vec2 fag_tec;                           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //|(( OUT ))____________________________|////[ x ]// \n"
"       out vec4 FragColor;                        //[ x ]// \n"
"                                                  //[ x ]// \n"
"   #endif                                         //[ x ]// \n"
"   //:----------------------------:glsl_file_scope_stuff:// \n"
"   //:type_macros:--------------------------------------:// \n"
"   #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       /** When Running As GLSL Code. **/         //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #define U32         uint    //:  01  ://   //[ x ]// \n"
"       #define I32          int    //:  02  ://   //[ x ]// \n"
"       #define IV2        ivec2    //:  03  ://   //[ x ]// \n"
"       #define UV4        uvec4    //:  04  ://   //[ x ]// \n"
"       #define T_F   texelFetch    //:  05  ://   //[ x ]// \n"
"       #define P5D      paint5d    //:  06  ://   //[ x ]// \n"
"       #define SAM   usampler2D    //:  07  ://   //[ x ]// \n"
"       #define U00    uint( 0 )    //:  08  ://   //[ x ]// \n"
"       #define I00     int( 0 )    //:  09  ://   //[ x ]// \n"
"       #define B_3    uint( 3 )    //:  10  ://   //[ x ]// \n"
"       #define V_A                 //:  11  ://   //[ x ]// \n"
"       #define FV4         vec4    //:  12  ://   //[ x ]// \n"
"   #else                                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"       /** When Running As C99/C11 Code. **/      //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #define U32   uint32_t                     //[ x ]// \n"
"       #define I32    int32_t                     //[ x ]// \n"
"       #define IV2   struct AAC2020_OPEN_GL_IV2   //[ x ]// \n"
"       #define UV4   struct AAC2020_OPEN_GL_UV4   //[ x ]// \n"
"       #define T_F   aac2020_polyfill_texel_fetch //[ x ]// \n"
"       #define P5D   ( 0 )                        //[ x ]// \n"
"       #define SAM    int                         //[ x ]// \n"
"       #define U00    0x00                        //[ x ]// \n"
"       #define I00   ( 0 )                        //[ x ]// \n"
"       #define B_3   ( 3 )                        //[ x ]// \n"
"       #define V_A   void                         //[ x ]// \n"
"       #define FV4   struct AAC2020_OPEN_GL_FV4   //[ x ]// \n"
"   #endif                                         //[ x ]// \n"
"   //:--------------------------------------:type_macros:// \n"
"   //:constructor_macros:-------------------------------:// \n"
"   #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL                     \n"
"                                                            \n"
"       #define FV4_MAK vec4                                 \n"
"                                                            \n"
"   #else                                                    \n"
"                                                            \n"
"       #define FV4_MAK aac2020_polyfill_GLSL_MakeVec4       \n"
"                                                            \n"
"   #endif                                                   \n"
"   //:-------------------------------:constructor_macros:// \n"
"   //:main_shim_macros:---------------------------------:// \n"
"   #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL                     \n"
"                                                            \n"
"       #define RET_MAIN void /** <-- GLSL     code **/      \n"
"       #define FUN_MAIN main /** <-- GLSL     code **/      \n"
"                                                            \n"
"   #else                                                    \n"
"                                                            \n"
"       #define RET_MAIN FV4 /** <-- [C99/C11] code **/      \n"
"       #define FUN_MAIN OPEN_GL_PAINT5D_Main                \n"
"                                                            \n"
"   #endif                                                   \n"
"   //:---------------------------------:main_shim_macros:// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       U32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_TexelFetch_U32(            //[ x ]// \n"
"           SAM u32_sam  //:<-- GLSL only.......:////[ x ]// \n"
"       ,   IV2 glo                                //[ x ]// \n"
"       ,   I32 levodet_ALWAYS_ZERO                //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"           U32 u32_var; /** Output/Return **/     //[ x ]// \n"
"                                                  //[ x ]// \n"
"           //:TEXEL_FETCH_RETURNS_XYZW_U08:-------------:// \n"
"           /** GET: [ x,y,z,w ] / [r,g,b,a]  **/  //[ x ]// \n"
"           /**      texel As a uvec 4 type.  **/  //[ x ]// \n"
"               UV4 uv4=(                          //[ x ]// \n"
"                   T_F(                           //[ x ]// \n"
"                       u32_sam                    //[ x ]// \n"
"                   ,   glo                        //[ x ]// \n"
"                   ,   levodet_ALWAYS_ZERO        //[ x ]// \n"
"                   ));;                           //[ x ]// \n"
"                                                  //[ x ]// \n"
"           //:-------------:TEXEL_FETCH_RETURNS_XYZW_U08:// \n"
"           //:BIT_PACK_YOUR_PIXEL:----------------------:// \n"
"           #define CPU_PIX AAC2020_PIXNAME_paint5d_cpu_pix  \n"
"           /** **************************************** *** \n"
"               @VID_IID[ 0086 ]TIME[ 01:29:10 ]   //[ x ]// \n"
"               Bit shifting code copied directly  //[ x ]// \n"
"               from                               //[ x ]// \n"
"               aac2020_paint5d_UTC_BitPack_Get 's //[ x ]// \n"
"               bitshift code because we are       //[ x ]// \n"
"               really good at fucking up          //[ x ]// \n"
"               trivial bit shifting code.         //[ x ]// \n"
"                                                  //[ x ]// \n"
"               @VID_IID[ 0092 ]TIME[ 00:32:23 ]   //[ x ]// \n"
"               Code relocated to here because we  //[ x ]// \n"
"               mistakenly thought native GLSL     //[ x ]// \n"
"               texelFetch returned a unit32 but   //[ x ]// \n"
"               actually                           //[ x ]// \n"
"               returns a [ uvec4 / UV4 ]          //[ x ]// \n"
"           *** **************************************** **/ \n"
"                                                  //[ x ]// \n"
"               u32_var=( U00 /** 0x00 **/         //[ x ]// \n"
"               | ( uv4.x << 24 ) //: R ://        //[ x ]// \n"
"               | ( uv4.y << 16 ) //: G ://        //[ x ]// \n"
"               | ( uv4.z <<  8 ) //: B ://        //[ x ]// \n"
"               | ( uv4.w <<  0 ) //: A ://        //[ x ]// \n"
"               );;  /** @PAIR_CODE_2021_01_14@ **///[ x ]// \n"
"                                                  //[ x ]// \n"
"           #undef  CPU_PIX                        //[ x ]// \n"
"           //:----------------------:BIT_PACK_YOUR_PIXEL:// \n"
"           return( u32_var );                     //[ x ]// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       U32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_BitPack_Get(               //[ x ]// \n"
"           IV2     glo                            //[ x ]// \n"
"       ,   I32 aus_dex                            //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"       #define BIN_011 ( B_3 )                    //[ x ]// \n"
"                                                  //[ x ]// \n"
"           U32 u32_var ;                          //[ x ]// \n"
"           U32 til_val ;                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"           u32_var =(                             //[ x ]// \n"
"               OPEN_GL_PAINT5D_TexelFetch_U32(    //[ x ]// \n"     
"                   P5D //:texture_to_sample    :////[ x ]// \n"
"               ,   glo //:integer_texel_coord  :////[ x ]// \n"
"               ,   I00 //:level_of_detail_zero :////[ x ]// \n"
"               ));;                               //[ x ]// \n"
"                                                  //[ x ]// \n"
"           til_val =(                             //[ x ]// \n"
"               ( u32_var >> (aus_dex*2) )         //[ x ]// \n"
"               &                                  //[ x ]// \n"
"               BIN_011                            //[ x ]// \n"
"           );;                                    //[ x ]// \n"
"                                                  //[ x ]// \n"
"           return( til_val );                     //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #undef  BIN_011                            //[ x ]// \n"
"       }                                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       I32                                        //[ - ]// \n"
"       OPEN_GL_PAINT5D_til_exp_CTO_max_cor(       //[ - ]// \n"
"           I32         til_exp                    //[ - ]// \n"
"       )                                          //[ - ]// \n"
"       {                                          //[ - ]// \n"
"       #define T_E til_exp                        //[ - ]// \n"
"       #define M_C max_cor                        //[ - ]// \n"
"                                                  //[ - ]// \n"
"           I32 max_cor;                           //[ - ]// \n"
"           if( 0 == T_E ){ M_C = ( 128 - 1 ); };  //[ 1 ]// \n"
"           if( 1 == T_E ){ M_C = (  64 - 1 ); };  //[ 2 ]// \n"
"           if( 2 == T_E ){ M_C = (  32 - 1 ); };  //[ 3 ]// \n"
"           if( 3 == T_E ){ M_C = (  16 - 1 ); };  //[ 4 ]// \n"
"           if( 4 == T_E ){ M_C = (   8 - 1 ); };  //[ 5 ]// \n"
"           if( 5 == T_E ){ M_C = (   4 - 1 ); };  //[ 6 ]// \n"
"           if( 6 == T_E ){ M_C = (   2 - 1 ); };  //[ 7 ]// \n"
"           if( 7 == T_E ){ M_C = (   1 - 1 ); };  //[ 8 ]// \n"
"                                                  //[ - ]// \n"
"                                                  //[ - ]// \n"
"           return( max_cor );                     //[ - ]// \n"
"                                                  //[ - ]// \n"
"       #undef  T_E                                //[ - ]// \n"
"       #undef  M_C                                //[ - ]// \n"
"       }                                          //[ - ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       I32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_til_exp_CTO_diagpix(       //[ x ]// \n"
"           I32         til_exp                    //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"       #define T til_exp                          //[ x ]// \n"
"       #define D diagpix                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"           I32 diagpix =( 9999 );                 //[ x ]// \n"
"                                                  //[ x ]// \n"
"           //:@VID_IID[ 0085 ]TIME[ 01:53:00 ] :////[ x ]// \n"
"           //:TODO: Make into lookup table:    :////[ x ]// \n"
"           //:BUT MUST GET WORKING IN OPENGL   :////[ x ]// \n"
"           //:BEFORE YOU DO SUCH REFACTOR!     :////[ x ]// \n"
"           if( 0 == T ){ D = 0   ; }else          //[ x ]// \n"
"           if( 1 == T ){ D = 128 ; }else          //[ x ]// \n"
"           if( 2 == T ){ D = 192 ; }else          //[ x ]// \n"
"           if( 3 == T ){ D = 224 ; }else          //[ x ]// \n"
"           if( 4 == T ){ D = 240 ; }else          //[ x ]// \n"
"           if( 5 == T ){ D = 248 ; }else          //[ x ]// \n"
"           if( 6 == T ){ D = 252 ; }else          //[ x ]// \n"
"           if( 7 == T ){ D = 254 ; }else{         //[ x ]// \n"
"                                                  //[ x ]// \n"
"               /// if out of range, ///           //[ x ]// \n"
"               /// set to invalid   ///           //[ x ]// \n"
"               /// config pixel.    ///           //[ x ]// \n"
"               D = 9001 ;                         //[ x ]// \n"
"                                                  //[ x ]// \n"
"           };;                                    //[ x ]// \n"
"                                                  //[ x ]// \n"
"           return( diagpix );                     //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #undef  T                                  //[ x ]// \n"
"       #undef  D                                  //[ x ]// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       IV2                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_painpix_CTO_glocpix(       //[ x ]// \n"
"           I32 til_qua                            //[ x ]// \n"
"       ,   I32 til_exp                            //[ x ]// \n"
"       ,   I32 til_lay                            //[ x ]// \n"
"       ,   I32 loc_t_x                            //[ x ]// \n"
"       ,   I32 loc_t_y                            //[ x ]// \n"
"       ){                                         //[ x ]// \n"
"       //:declare__variables: . . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           IV2 glo; /** glo_t_x & glo_t_y **/     //[ x ]// \n"
"           IV2 tem; /** tempi_x & tempi_y **/     //[ x ]// \n"
"           IV2 qua; /** o_x_qua & o_y_qua **/     //[ x ]// \n"
"           IV2 lay; /** o_x_lay & o_y_lay **/     //[ x ]// \n"
"                                                  //[ x ]// \n"
"           I32 dia; /** diagpix **/               //[ x ]// \n"
"           I32 m_c; /** max_cor **/               //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . . :declare__variables:// \n"
"       //:CALCULATE::painpix_CTO_glocpix: . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           m_c =(                                 //[ x ]// \n"
"           OPEN_GL_PAINT5D_til_exp_CTO_max_cor(   //[ x ]// \n"
"                           til_exp ));;           //[ x ]// \n"
"           dia =(                                 //[ x ]// \n"
"           OPEN_GL_PAINT5D_til_exp_CTO_diagpix(   //[ x ]// \n"
"                           til_exp ));;           //[ x ]// \n"
"                                                  //[ x ]// \n"
"           tem.x =  til_qua       % ( 2 ) ;       //[ x ]// \n"
"           tem.y = (til_qua-tem.x)/ ( 2 ) ;       //[ x ]// \n"
"                                                  //[ x ]// \n"
"           qua.x = ( tem.x * 256 );               //[ x ]// \n"
"           qua.y = ( tem.y * 256 );               //[ x ]// \n"
"                                                  //[ x ]// \n"
"           tem.x =  til_lay          % (  2  ) ;  //[ x ]// \n"
"           tem.y = (til_lay - tem.x) / (  2  ) ;  //[ x ]// \n"
"                                                  //[ x ]// \n"
"           lay.x = ( tem.x * ( m_c + 1 ) ) ;      //[ x ]// \n"
"           lay.y = ( tem.y * ( m_c + 1 ) ) ;      //[ x ]// \n"
"                                                  //[ x ]// \n"
"           glo.x=( qua.x +dia+ lay.x + loc_t_x ); //[ x ]// \n"
"           glo.y=( qua.y +dia+ lay.y + loc_t_y ); //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . :CALCULATE::painpix_CTO_glocpix:// \n"
"       //:return_from_function: . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           /** glo == glo_t_x & glo_t_y **/       //[ x ]// \n"
"           return( glo );                         //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . :return_from_function:// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       U32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_Get(                       //[ x ]// \n"
"           I32  til_qua                           //[ x ]// \n"
"       ,   I32  til_exp                           //[ x ]// \n"
"       ,   I32  til_lay                           //[ x ]// \n"
"       ,   I32  loc_t_x                           //[ x ]// \n"
"       ,   I32  loc_t_y                           //[ x ]// \n"
"       ,   I32  aus_dex                           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"       //:declare__variables: . . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           U32 til_val =( U00 );                  //[ x ]// \n"
"                                                  //[ x ]// \n"
"           /** glo == glo_t_x & glo_t_y  **/      //[ x ]// \n"
"           IV2 glo    ;                           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . . :declare__variables:// \n"
"       //:get_pixel_and_extract_tile_value: . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           glo=(                                  //[ x ]// \n"
"           OPEN_GL_PAINT5D_painpix_CTO_glocpix(   //[ x ]// \n"
"               til_qua                            //[ x ]// \n"
"           ,   til_exp                            //[ x ]// \n"
"           ,   til_lay                            //[ x ]// \n"
"           ,   loc_t_x                            //[ x ]// \n"
"           ,   loc_t_y                            //[ x ]// \n"
"           ));;                                   //[ x ]// \n"
"                                                  //[ x ]// \n"
"           til_val=(                              //[ x ]// \n"
"           OPEN_GL_PAINT5D_BitPack_Get(           //[ x ]// \n"
"               glo                                //[ x ]// \n"
"           ,   aus_dex                            //[ x ]// \n"
"           ));;                                   //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . :get_pixel_and_extract_tile_value:// \n"
"       //:return_from_function: . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           return( til_val );                     //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . :return_from_function:// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       RET_MAIN                                             \n"
"       FUN_MAIN(                                            \n"
"           V_A /** V_A: Void_Argument **/                   \n"
"       ){                                                   \n"
"                                                            \n"
"           /** @VID_IID[ 0093 ]TIME[ 00:21:10 ] **/         \n"
"           #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL            \n"
"               FV4 FragColor; /** <-- C99 Code  **/         \n"
"           #endif                                           \n"
"                                                            \n"
"           FragColor = FV4_MAK(                             \n"
"               1.0                                          \n"
"           ,   0.0                                          \n"
"           ,   1.0                                          \n"
"           ,   1.0 //:Alpha                                 \n"
"           );;                                              \n"
"                                                            \n"
"                                                            \n"
"           #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL            \n"
"                                                            \n"
"               /** ************************** ***           \n"
"               If [C99/C11] code, return the                \n"
"               fragment color here.                         \n"
"               @VID_IID[ 0093 ]TIME[ 00:51:30 ]             \n"
"               *** ************************** **/           \n"
"                                                            \n"
"               return( FragColor ); /**<-- C99**/           \n"
"                                                            \n"
"           #endif                                           \n"
"                                                            \n"
"       }                                                    \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"   //:type_macros:--------------------------------------:// \n"
"                                                  //[ x ]// \n"
"       #undef U32      //:  01  ://               //[ x ]// \n"
"       #undef I32      //:  02  ://               //[ x ]// \n"
"       #undef IV2      //:  03  ://               //[ x ]// \n"
"       #undef UV4      //:  04  ://               //[ x ]// \n"
"       #undef T_F      //:  05  ://               //[ x ]// \n"
"       #undef P5D      //:  06  ://               //[ x ]// \n"
"       #undef SAM      //:  07  ://               //[ x ]// \n"
"       #undef U00      //:  08  ://               //[ x ]// \n"
"       #undef I00      //:  09  ://               //[ x ]// \n"
"       #undef B_3      //:  10  ://               //[ x ]// \n"
"       #undef V_A      //:  11  ://               //[ x ]// \n"
"       #undef FV4      //:  12  ://               //[ x ]// \n"
"                                                  //[ x ]// \n"
"   //:--------------------------------------:type_macros:// \n"
"   //:constructor_macros:-------------------------------:// \n"
"   /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/ \n"
"   /** Decided on [MAK] for [MAKE] as our constructor   **/ \n"
"   /** postfix ........................................ **/ \n"
"                                                            \n"
"       #undef FV4_MAK                                       \n"
"                                                            \n"
"   //:-------------------------------:constructor_macros:// \n"
"   //:main_shim_macros:---------------------------------:// \n"
"                                                            \n"
"       #undef RET_MAIN                                      \n"
"       #undef FUN_MAIN                                      \n"
"                                                            \n"
"   //:---------------------------------:main_shim_macros:// \n"
"   //:===========:P5D_001____AAC2020_PAINT5D_DEFAULT_001:// \n"                                          

); //:///////////////////////////////////////////////////////://
//:==============================:AAC2020_PAINT5D_DEFAULT_001://
