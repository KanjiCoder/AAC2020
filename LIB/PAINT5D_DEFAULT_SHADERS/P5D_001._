
 
#if( AAC2020_CRASH_ON_VITAL_TODO >= 1 )

    #error TODO: Alter this once we get project running again.

#endif

//:AAC2020_PAINT5D_DEFAULT_001:==============================://
    const char* AAC2020_PAINT5D_DEFAULT_001=(
                    //|(( VER ))_____________________________|//
                    "#version 330 core                       \n"
                    "//:#_KEEP_USAMPLER_HIGH_#://            \n"
                    "//:#_SAM_PRECISION_BEFORE_SAM_VAR_#://  \n"
                    "precision highp usampler2D;             \n"
    
                  "#define AAC2020_MACRO_THIS_IS_OPEN_GL (1) \n"

                    //|(( UNI ))_____________________________|//
                        //[:::::SHADERTOY__COMPATIBILITY:::::]//
                        "#define fragCoord gl_FragCoord      \n"
                        "uniform vec3 iResolution;           \n"
                        "uniform usampler2D taudepo;         \n"
                        "uniform usampler2D paint5d;         \n"
                                        
                    //|(( INN ))_____________________________|//
                    //:      fag_tec:FrAG_shader_TExture_Coord
                    "in vec2 fag_tec;                        \n"    
                                                              
                    //|(( OUT ))_____________________________|//
                    "out vec4 FragColor;                     \n"

//://////////////////////////////////////////////////////////://
//:OPEN_GL_PAINT5D_Get:--------------------------------------://

//:******************************:DO_NOT_PASTE_INTO_GLSL_CODE://
//:*******************************************:GLSL_POLYFILLS://
//:OPEN_GL_PAINT5D_Get:======================================://
//:OPEN_GL_PAINT5D_painpix_CTO_glocpix:======================://

"   //:OPEN_GL_PAINT5D_Get:==============================:// \n"
"   //:type_macros:--------------------------------------:// \n"
"   #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       /** When Running As GLSL Code. **/         //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #define U32         uint    //:  01  ://   //[ x ]// \n"
"       #define I32          int    //:  02  ://   //[ x ]// \n"
"       #define IV2        ivec2    //:  03  ://   //[ x ]// \n"
"       #define UV4        uvec4    //:  04  ://   //[ x ]// \n"
"       #define T_F   texelFetch    //:  05  ://   //[ x ]// \n"
"       #define P5D      paint5d    //:  06  ://   //[ x ]// \n"
"       #define SAM   usampler2D    //:  07  ://   //[ x ]// \n"
"       #define U00    uint( 0 )    //:  08  ://   //[ x ]// \n"
"       #define I00     int( 0 )    //:  09  ://   //[ x ]// \n"
"       #define B_3    uint( 3 )    //:  10  ://             \n"
"   #else                                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"       /** When Running As C99/C11 Code. **/      //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #define U32   uint32_t                     //[ x ]// \n"
"       #define I32    int32_t                     //[ x ]// \n"
"       #define IV2   struct AAC2020_OPEN_GL_IV2   //[ x ]// \n"
"       #define UV4   struct AAC2020_OPEN_GL_UV4   //[ x ]// \n"
"       #define T_F   aac2020_polyfill_texel_fetch //[ x ]// \n"
"       #define P5D   ( 0 )                        //[ x ]// \n"
"       #define SAM    int                         //[ x ]// \n"
"       #define U00    0x00                        //[ x ]// \n"
"       #define I00   ( 0 )                        //[ x ]// \n"
"       #define B_3   ( 3 )                        //[ x ]// \n"
"   #endif                                         //[ x ]// \n"
"   //:--------------------------------------:type_macros:// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       U32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_TexelFetch_U32(            //[ x ]// \n"
"           SAM u32_sam  //:<-- GLSL only.......:////[ x ]// \n"
"       ,   IV2 glo                                //[ x ]// \n"
"       ,   I32 levodet_ALWAYS_ZERO                //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"           U32 u32_var; /** Output/Return **/     //[ x ]// \n"
"                                                  //[ x ]// \n"
"           //:TEXEL_FETCH_RETURNS_XYZW_U08:-------------:// \n"
"           /** GET: [ x,y,z,w ] / [r,g,b,a]  **/  //[ x ]// \n"
"           /**      texel As a uvec 4 type.  **/  //[ x ]// \n"
"               UV4 uv4=(                          //[ x ]// \n"
"                   T_F(                           //[ x ]// \n"
"                       u32_sam                    //[ x ]// \n"
"                   ,   glo                        //[ x ]// \n"
"                   ,   levodet_ALWAYS_ZERO        //[ x ]// \n"
"                   ));;                           //[ x ]// \n"
"                                                  //[ x ]// \n"
"           //:-------------:TEXEL_FETCH_RETURNS_XYZW_U08:// \n"
"           //:BIT_PACK_YOUR_PIXEL:----------------------:// \n"
"           #define CPU_PIX AAC2020_PIXNAME_paint5d_cpu_pix  \n"
"           /** **************************************** *** \n"
"               @VID_IID[ 0086 ]TIME[ 01:29:10 ]   //[ x ]// \n"
"               Bit shifting code copied directly  //[ x ]// \n"
"               from                               //[ x ]// \n"
"               aac2020_paint5d_UTC_BitPack_Get 's //[ x ]// \n"
"               bitshift code because we are       //[ x ]// \n"
"               really good at fucking up          //[ x ]// \n"
"               trivial bit shifting code.         //[ x ]// \n"
"                                                  //[ x ]// \n"
"               @VID_IID[ 0092 ]TIME[ 00:32:23 ]   //[ x ]// \n"
"               Code relocated to here because we  //[ x ]// \n"
"               mistakenly thought native GLSL     //[ x ]// \n"
"               texelFetch returned a unit32 but   //[ x ]// \n"
"               actually                           //[ x ]// \n"
"               returns a [ uvec4 / UV4 ]          //[ x ]// \n"
"           *** **************************************** **/ \n"
"                                                  //[ x ]// \n"
"               u32_var=( U00 /** 0x00 **/         //[ x ]// \n"
"               | ( uv4.x << 24 ) //: R ://        //[ x ]// \n"
"               | ( uv4.y << 16 ) //: G ://        //[ x ]// \n"
"               | ( uv4.z <<  8 ) //: B ://        //[ x ]// \n"
"               | ( uv4.w <<  0 ) //: A ://        //[ x ]// \n"
"               );;  /** @PAIR_CODE_2021_01_14@ **///[ x ]// \n"
"                                                  //[ x ]// \n"
"           #undef  CPU_PIX                        //[ x ]// \n"
"           //:----------------------:BIT_PACK_YOUR_PIXEL:// \n"
"           return( u32_var );                     //[ x ]// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       U32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_BitPack_Get(               //[ x ]// \n"
"           IV2     glo                            //[ x ]// \n"
"       ,   I32 aus_dex                            //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"       #define BIN_011 ( B_3 )                    //[ x ]// \n"
"                                                  //[ x ]// \n"
"           U32 u32_var ;                          //[ x ]// \n"
"           U32 til_val ;                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"           u32_var =(                             //[ x ]// \n"
"               OPEN_GL_PAINT5D_TexelFetch_U32(    //[ x ]// \n"   
"                   P5D //:texture_to_sample    :////[ x ]// \n"
"               ,   glo //:integer_texel_coord  :////[ x ]// \n"
"               ,   I00 //:level_of_detail_zero :////[ x ]// \n"
"               ));;                               //[ x ]// \n"
"                                                  //[ x ]// \n"
"           til_val =(                             //[ x ]// \n"
"               ( u32_var >> (aus_dex*2) )         //[ x ]// \n"
"               &                                  //[ x ]// \n"
"               BIN_011                            //[ x ]// \n"
"           );;                                    //[ x ]// \n"
"                                                  //[ x ]// \n"
"           return( til_val );                     //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #undef  BIN_011                            //[ x ]// \n"
"       }                                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       I32                                        //[ - ]// \n"
"       OPEN_GL_PAINT5D_til_exp_CTO_max_cor(       //[ - ]// \n"
"           I32         til_exp                    //[ - ]// \n"
"       )                                          //[ - ]// \n"
"       {                                          //[ - ]// \n"
"       #define T_E til_exp                        //[ - ]// \n"
"       #define M_C max_cor                        //[ - ]// \n"
"                                                  //[ - ]// \n"
"           I32 max_cor;                           //[ - ]// \n"
"           if( 0 == T_E ){ M_C = ( 128 - 1 ); };  //[ 1 ]// \n"
"           if( 1 == T_E ){ M_C = (  64 - 1 ); };  //[ 2 ]// \n"
"           if( 2 == T_E ){ M_C = (  32 - 1 ); };  //[ 3 ]// \n"
"           if( 3 == T_E ){ M_C = (  16 - 1 ); };  //[ 4 ]// \n"
"           if( 4 == T_E ){ M_C = (   8 - 1 ); };  //[ 5 ]// \n"
"           if( 5 == T_E ){ M_C = (   4 - 1 ); };  //[ 6 ]// \n"
"           if( 6 == T_E ){ M_C = (   2 - 1 ); };  //[ 7 ]// \n"
"           if( 7 == T_E ){ M_C = (   1 - 1 ); };  //[ 8 ]// \n"
"                                                  //[ - ]// \n"
"                                                  //[ - ]// \n"
"           return( max_cor );                     //[ - ]// \n"
"                                                  //[ - ]// \n"
"       #undef  T_E                                //[ - ]// \n"
"       #undef  M_C                                //[ - ]// \n"
"       }                                          //[ - ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       I32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_til_exp_CTO_diagpix(       //[ x ]// \n"
"           I32         til_exp                    //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"       #define T til_exp                          //[ x ]// \n"
"       #define D diagpix                          //[ x ]// \n"
"                                                  //[ x ]// \n"
"           I32 diagpix =( 9999 );                 //[ x ]// \n"
"                                                  //[ x ]// \n"
"           //:@VID_IID[ 0085 ]TIME[ 01:53:00 ] :////[ x ]// \n"
"           //:TODO: Make into lookup table:    :////[ x ]// \n"
"           //:BUT MUST GET WORKING IN OPENGL   :////[ x ]// \n"
"           //:BEFORE YOU DO SUCH REFACTOR!     :////[ x ]// \n"
"           if( 0 == T ){ D = 0   ; }else          //[ x ]// \n"
"           if( 1 == T ){ D = 128 ; }else          //[ x ]// \n"
"           if( 2 == T ){ D = 192 ; }else          //[ x ]// \n"
"           if( 3 == T ){ D = 224 ; }else          //[ x ]// \n"
"           if( 4 == T ){ D = 240 ; }else          //[ x ]// \n"
"           if( 5 == T ){ D = 248 ; }else          //[ x ]// \n"
"           if( 6 == T ){ D = 252 ; }else          //[ x ]// \n"
"           if( 7 == T ){ D = 254 ; }else{         //[ x ]// \n"
"                                                  //[ x ]// \n"
"               /// if out of range, ///           //[ x ]// \n"
"               /// set to invalid   ///           //[ x ]// \n"
"               /// config pixel.    ///           //[ x ]// \n"
"               D = 9001 ;                         //[ x ]// \n"
"                                                  //[ x ]// \n"
"           };;                                    //[ x ]// \n"
"                                                  //[ x ]// \n"
"           return( diagpix );                     //[ x ]// \n"
"                                                  //[ x ]// \n"
"       #undef  T                                  //[ x ]// \n"
"       #undef  D                                  //[ x ]// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       IV2                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_painpix_CTO_glocpix(       //[ x ]// \n"
"           I32 til_qua                            //[ x ]// \n"
"       ,   I32 til_exp                            //[ x ]// \n"
"       ,   I32 til_lay                            //[ x ]// \n"
"       ,   I32 loc_t_x                            //[ x ]// \n"
"       ,   I32 loc_t_y                            //[ x ]// \n"
"       ){                                         //[ x ]// \n"
"       //:declare__variables: . . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           IV2 glo; /** glo_t_x & glo_t_y **/     //[ x ]// \n"
"           IV2 tem; /** tempi_x & tempi_y **/     //[ x ]// \n"
"           IV2 qua; /** o_x_qua & o_y_qua **/     //[ x ]// \n"
"           IV2 lay; /** o_x_lay & o_y_lay **/     //[ x ]// \n"
"                                                  //[ x ]// \n"
"           I32 dia; /** diagpix **/               //[ x ]// \n"
"           I32 m_c; /** max_cor **/               //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . . :declare__variables:// \n"
"       //:CALCULATE::painpix_CTO_glocpix: . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           m_c =(                                 //[ x ]// \n"
"           OPEN_GL_PAINT5D_til_exp_CTO_max_cor(   //[ x ]// \n"
"                           til_exp ));;           //[ x ]// \n"
"           dia =(                                 //[ x ]// \n"
"           OPEN_GL_PAINT5D_til_exp_CTO_diagpix(   //[ x ]// \n"
"                           til_exp ));;           //[ x ]// \n"
"                                                  //[ x ]// \n"
"           tem.x =  til_qua       % ( 2 ) ;       //[ x ]// \n"
"           tem.y = (til_qua-tem.x)/ ( 2 ) ;       //[ x ]// \n"
"                                                  //[ x ]// \n"
"           qua.x = ( tem.x * 256 );               //[ x ]// \n"
"           qua.y = ( tem.y * 256 );               //[ x ]// \n"
"                                                  //[ x ]// \n"
"           tem.x =  til_lay          % (  2  ) ;  //[ x ]// \n"
"           tem.y = (til_lay - tem.x) / (  2  ) ;  //[ x ]// \n"
"                                                  //[ x ]// \n"
"           lay.x = ( tem.x * ( m_c + 1 ) ) ;      //[ x ]// \n"
"           lay.y = ( tem.y * ( m_c + 1 ) ) ;      //[ x ]// \n"
"                                                  //[ x ]// \n"
"           glo.x=( qua.x +dia+ lay.x + loc_t_x ); //[ x ]// \n"
"           glo.y=( qua.y +dia+ lay.y + loc_t_y ); //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . :CALCULATE::painpix_CTO_glocpix:// \n"
"       //:return_from_function: . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           /** glo == glo_t_x & glo_t_y **/       //[ x ]// \n"
"           return( glo );                         //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . :return_from_function:// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"       U32                                        //[ x ]// \n"
"       OPEN_GL_PAINT5D_Get(                       //[ x ]// \n"
"           I32  til_qua                           //[ x ]// \n"
"       ,   I32  til_exp                           //[ x ]// \n"
"       ,   I32  til_lay                           //[ x ]// \n"
"       ,   I32  loc_t_x                           //[ x ]// \n"
"       ,   I32  loc_t_y                           //[ x ]// \n"
"       ,   I32  aus_dex                           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       )                                          //[ x ]// \n"
"       {                                          //[ x ]// \n"
"       //:declare__variables: . . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           U32 til_val =( U00 );                  //[ x ]// \n"
"                                                  //[ x ]// \n"
"           /** glo == glo_t_x & glo_t_y  **/      //[ x ]// \n"
"           IV2 glo    ;                           //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . . :declare__variables:// \n"
"       //:get_pixel_and_extract_tile_value: . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           glo=(                                  //[ x ]// \n"
"           OPEN_GL_PAINT5D_painpix_CTO_glocpix(   //[ x ]// \n"
"               til_qua                            //[ x ]// \n"
"           ,   til_exp                            //[ x ]// \n"
"           ,   til_lay                            //[ x ]// \n"
"           ,   loc_t_x                            //[ x ]// \n"
"           ,   loc_t_y                            //[ x ]// \n"
"           ));;                                   //[ x ]// \n"
"                                                  //[ x ]// \n"
"           til_val=(                              //[ x ]// \n"
"           OPEN_GL_PAINT5D_BitPack_Get(           //[ x ]// \n"
"               glo                                //[ x ]// \n"
"           ,   aus_dex                            //[ x ]// \n"
"           ));;                                   //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . :get_pixel_and_extract_tile_value:// \n"
"       //:return_from_function: . . . . . . . . . . . . :// \n"
"                                                  //[ x ]// \n"
"           return( til_val );                     //[ x ]// \n"
"                                                  //[ x ]// \n"
"       //: . . . . . . . . . . . . :return_from_function:// \n"
"       }                                          //[ x ]// \n"
"       //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"   //:type_macros:--------------------------------------:// \n"
"                                                  //[ x ]// \n"
"       #undef U32      //:  01  ://               //[ x ]// \n"
"       #undef I32      //:  02  ://               //[ x ]// \n"
"       #undef IV2      //:  03  ://               //[ x ]// \n"
"       #undef UV4      //:  04  ://               //[ x ]// \n"
"       #undef T_F      //:  05  ://               //[ x ]// \n"
"       #undef P5D      //:  06  ://               //[ x ]// \n"
"       #undef SAM      //:  07  ://               //[ x ]// \n"
"       #undef U00      //:  08  ://               //[ x ]// \n"
"       #undef I00      //:  09  ://               //[ x ]// \n"
"       #undef B_3      //:  10  ://               //[ x ]// \n"
"                                                  //[ x ]// \n"
"   //:--------------------------------------:type_macros:// \n"
"   //:==============================:OPEN_GL_PAINT5D_Get:// \n"


//:--------------------------------------:OPEN_GL_PAINT5D_Get://
//://////////////////////////////////////////////////////////://
                                                                  
                    //|(( FUN ))_____________________________|//
                    "void main()                             \n"
                    "{                                       \n"
                                                                                                    
                    " //:tic:texture_integer_color           \n"
                    "uvec4 tic;                              \n"

        //|ARRAY_SPELLING_OUT_TEXT:__________________________|//
    "   #define U08 unsigned char                            \n"
    "   #define _ 0                                          \n"
    "   #define X 1                                          \n"
    "   U08 msg_arr[ 25 * 7 ]=U08[ 25 * 7 ](                 \n"
    //:                  10                  20        25    ://
    //: 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5    ://
    "   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,X,_,_,   \n"
    "   _,X,X,X,_,X,X,X,_,X,X,_,_,_,_,_,_,_,_,_,_,X,X,_,_,   \n"
    "   _,X,_,X,_,X,_,_,_,X,_,X,_,_,_,_,_,_,_,_,_,_,X,_,_,   \n"
    "   _,X,X,X,_,X,X,X,_,X,_,X,_,X,X,X,_,X,X,X,_,_,X,_,_,   \n"
    "   _,X,_,_,_,_,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,_,X,_,_,   \n"
    "   _,X,_,_,_,X,X,X,_,X,X,_,_,X,X,X,_,X,X,X,_,_,X,_,_,   \n"
    "   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,X,X,X,_    \n"
    //: DEF001:Default_001                                   ://
    "  );;                                                   \n"
    "  #undef  _                                             \n"
    "  #undef  X                                             \n"
    "  #undef  U08                                           \n"

//: #error "[TODO:UseTileMapMathToDraw:SYNERR:Message]"

    //| gfc: gl_FragCoord , but top-left origin is [0,0] ___ |//
    "   vec2 gfc = vec2(                                     \n"
    "       0             + gl_FragCoord.x                   \n"
    "   ,   iResolution.y - gl_FragCoord.y                   \n"
    "   );;                                                  \n"

    //| Normalized_UV_Screen_Coord:__________________________|//
    "   vec2 u_v = gfc.xy / iResolution.xy;                  \n"
                
    //| Calculate_Tile_Coordinate:___________________________|//
    "   //: tpW : tile_wid_in_pixels                         \n"
    "   //: tpH : tile_hig_in_pixels                         \n"
    "   int ntX    = 25; //:Number_Of_Tiles:X-axis           \n"
    "   int ntY    =  7; //:Number_Of_tiles:Y-axis           \n"
    "   int tpW    = int( iResolution.x / ntX    );          \n"
    "   int tpH    = int( iResolution.y / ntY    );          \n"
    "   int tile_x = int( gfc.x / float( tpW )  );           \n"
    "   int tile_y = int( gfc.y / float( tpH )  );           \n"

    //| Get 1D index of tile:(dex_til):______________________|//
    "   int dex_til = tile_x + ( ntX * tile_y);              \n"

    //| Get tile Value:______________________________________|//
    "   uint tile_value = msg_arr[ dex_til ];                \n"

    //| Draw_Tile_Or_Background_Gradient:____________________|//
    "   if( tile_value > uint(0) ){                          \n"
            //|Set output pixel color:_______________________|//
            //[USING_A_TEXEL_FETCH_OF_PAINT5D:_______________]//
        
            "   #define    USE_TEXEL_FETCH ( 1 )             \n"
            "                                                \n"
            "   #define    ARG_001 ( paint5d )               \n"
            "   ivec2      arg_002 = ivec2(   //             \n"
            "   /**/       int( gfc.x - 0.5 ) //             \n"
            "   ,          int( gfc.y - 0.5 ) //             \n"
            "   );;                          ;//             \n"
            "   int        arg_003 = int( 0 );//             \n"
            "                                                \n"
            "   if( 1 != 1 ){                                \n"
            "                                                \n"
            "       //:Error: Failed To Set Sampler:         \n"
            "       FragColor=vec4(0.5,0.2,0.0,1.0);         \n"
            "                                                \n"
            "   }else                                        \n"
            "   if( USE_TEXEL_FETCH >= 1 ){                  \n"
            "       FragColor = vec4(                        \n"
            "           texelFetch(                          \n"
            "           /**/ARG_001 // Texture_To_Sample     \n"
            "           ,   arg_002 // Texel_Coordinates     \n"
            "           ,   arg_003 // Level_Of_Detail       \n"
            "           )                                    \n"
            "       );;                                      \n"
            "   }else{                                       \n"
            "       /** Because I have no fucking clue **/   \n"
            "       /** What I am doing apparently.    **/   \n"
            "       FragColor = vec4(                        \n"
            "           texture(                             \n"
            "           /**/ARG_001   // Texture_To_Sample   \n"
            "           ,  (vec2(arg_002)+0.5) / 512.0       \n"
            "           )                                    \n"
            "       );;                                      \n"
            "                                                \n"
            "   };;                                          \n"
            "   #undef     ARG_001                           \n"
            "   #undef     USE_TEXEL_FETCH                   \n"  

    "   }else{                                               \n"
    "                                                        \n"
                        //|Set output pixel color:___________|//
        "   if( gfc.x-0.5 < 512.0 && gfc.y-0.5 < 512.0 ){      "
        "                                                      "
        "       FragColor = texelFetch(                        "
        "           taudepo                /** sampler **/     "
        "       ,   ivec2( gfc.xy - 0.5 )  /** pixel   **/     "
        "       ,   int( 0 )               /** L.O.D.  **/     "
        "       );;                                            "
        "                                                      "
        "   }else{                                             "
        "       FragColor = vec4(                              "
        "       /**/0.0                                        "
        "       ,  (u_v.x/2.0)                                 "
        "       ,   u_v.x                                      "
        "       ,   1.0f                                       "
        "       );;                                            "
        "   };;                                                "

    "   };;                                                  \n"
    "} //:main://                                          \n\0"
    ); /////////////////////////////////////////////////////////
//:==============================:AAC2020_PAINT5D_DEFAULT_001://
