//:FOR_FUTURE_IF_THINGS_GET_TOO_GRANULAR:====================://

    //: 1: DRAGCOM: Common click+drag helper functions.
    //: 2: ZOOMCOM: Common zoom       helper functions.

    //: 3: CLICKOM: Don't do this one.

//:==========================================================://
//:AAC2020_SUBLIBRARY_BOILERPLATE:===========================://
#define SIL AAC2020_SILENCE                           //: 01 ://
#define U32 uint32_t /** GCC: <stdint.h> **/          //: 02 ://
#define P_F printf                                    //: 03 ://
    //:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=================://
        void 
        aac2020_editcam_Halt( const char* msg_err )
        {
            P_F("[FATAL_ERROR:aac2020_editcam]:%s\n", msg_err );
            fflush(stdout);
            exit( 123 );
        }
    //:=================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
    //:LOG_AFTER_HALT:=======================================://
        void
        aac2020_editcam_Info_any( //:FUNC:::Info , OVERLOAD:any
            const char* str_fmt   //:GENERAL:str , SPECIFIC:fmt
        ,   void*       dat_any   //:GENERAL:dat , SPECIFIC:any
        )
        {                            int say=( 0 );
            if( SIL.EDITCAM <=(  0  ) ){ say=( 1 ); };
            if( SIL.SILENCE <=( 0-1 ) ){ say=( 1 ); };
            if( SIL.SILENCE >=( 0+1 ) ){ say=( 0 ); };
            if( say >= 1 ){
                P_F("[editcam_log]....(   " ); fflush( stdout );
                P_F( str_fmt , dat_any      ); fflush( stdout );
                P_F(               "   )\n" ); fflush( stdout );
            };;
        }
    //:=======================================:LOG_AFTER_HALT://
    //:INIT_NONE:============================================://
        U32
        AAC2020_EDITCAM_InitNone( U32 u32 ){
            if( u32 ){ /** reserved for future use **/ };
            return( 0x00 );
        }
    //:============================================:INIT_NONE://
#undef  SIL  //:----------------------------------------: 01 ://
#undef  U32  //:----------------------------------------: 02 ://
#undef  P_F  //:----------------------------------------: 03 ://
//:===========================:AAC2020_SUBLIBRARY_BOILERPLATE://
//:Snap_CameraSpan_To_Nearest_Power_Of_2:====================://

    //[ ************************************************ ]//
    //[WRONG: Snap To Nearest Value In:                  ]//
    //[       AAC2020_EDITCAM_tab_zom_san                ]//
    //[ ************************************************ ]//

//:====================:Snap_CameraSpan_To_Nearest_Power_Of_2://
//:CAMERA_SNAP_HELPER_FUNCS:=================================://
#define I32 int32_t /** GCC: <stdint.h> **/           //: 01 ://
#define ERR aac2020_editcam_Halt

    I32
    aac2020_editcam_cam_san_SNA_min_san_max_san(
    /**/I32 zom_i32 //:<--[ ZOOM_DIRECTION_TIE_BREAKER ]
    ,           I32 cam_san
    ,           I32             min_san
    ,           I32                     max_san
    )
    {
        /** OLD_PHONE_NUMBER: 586-214-3958 **/
        I32 out_san =( 0 - 586214 /** output_span **/ );

        if( 1
        && ( max_san >= min_san )
        && ( min_san <= max_san )
        && (       1 == 1       )
        && ( cam_san >= min_san )
        && ( cam_san <= max_san )
        ){
            /** OKAY. Valid Values. **/
        }else{
            printf("\n\n");
            printf("[cam_san]:%d\n", cam_san );
            printf("[min_san]:%d\n", min_san );
            printf("[max_san]:%d\n", max_san );
            ERR("[EDITCAM_BAD_INPUTS:YEAR_2021]");
        };;

        I32 min_del=( cam_san - min_san );
        I32 max_del=( max_san - cam_san );

        assert( min_del >= 0 );
        assert( max_del >= 0 );

        /** Snap to whatever you are closest to. **/
        if( min_del < max_del ){ 
            //:SUBTRACT_DOWN_TO[ min_san ]:
            out_san = ( cam_san - min_del ); 
            assert( out_san == min_san );
        }else
        if( max_del < min_del ){
            //:ADDITION_UPPP_TO[ max_san ]:
            out_san = ( cam_san + max_del ); 
            assert( out_san == max_san );
        }else{
            /** ******************************************** ***
            @VID_IID[ 0160 ]TIME[ 00:19:32 ]BEGIN_EXPLAINING
            @VID_IID[ 0160 ]TIME[ 00:22:23 ]DONE__EXPLAINING
            There is a rare case that when we are exactly
            between the values to snap between that the
            camera may appear to do[ TWO(2)ZOOMS:INN ]or
            [ TWO(2)ZOOMS:OUT ]in a row. For now I don't care
            about this. It is a RARE thing to happen and
            doesn't seem like something that will detract
            from the user expierence that much.
    
            Possible Fix: SWAP THE SNAPPING CHOICES TO
                          CANCEL OUT THE DOUBLE ZOOM EFFECT.
            *** ******************************************** **/

            //:Use tie breaker to select correct camera size:
            if( zom_i32 < 0 ){ //:NEG==OUT (ZoomOut,BiggerRect)
    
                out_san =( max_san /**BIGGER==ZOOM_OUT **/ );

            }else
            if( zom_i32 > 0 ){ //:POS==INN (ZoomInn,SmallerRect)

                out_san =( min_san /**SMALLER==ZOOM_INN**/ );

            }else{
                ERR("[BAD_TIE_BREAKER_FLAG:YEAR_2021]");
            };;

        };;

        return( out_san );
    }

#undef  I32  //:----------------------------------------: 01 ://
#undef  ERR  //:----------------------------------------: 02 ://
//:=================================:CAMERA_SNAP_HELPER_FUNCS://
//:Snap_Camera_To_PresetValues:==============================://
#define TAB AAC2020_EDITCAM_tab_zom_san               //: 01 ://
#define I32 int32_t /** GCC: <stdint.h> **/           //: 02 ://
#define I08  int8_t /** GCC: <stdint.h> **/           //: 03 ://
#define ERR aac2020_editcam_Halt

    void
    aac2020_editcam_Snap_cam_san(
    /**/    I32          zom_i32 //:<--[ZOOM_DIR_TIE_BREAKER ]
    ,       I32          cam_san //:<--[ inn_san / old_san ]
    ,       I32   *BYREF_out_san //:<--OUTPUT_PARAM:SPAN
    ,       I32   *BYREF_out_dex //:<--OUTPUT_PARAM:inDEX
    )
    {
        //:declare_variables:--------------------------------://

            I32 out_san =( 0 - 666 ); //:output span.
            I32 out_dex =( 0 - 777 ); //:output index accessor
                                      //:to table[ TAB ].

        //:--------------------------------:declare_variables://
        //:MAIN_FUNCTION_LOGIC:==============================://
        if( cam_san >= TAB[ 0 ]  //:EXAMPLE: 512
        &&  cam_san >  TAB[ 1 ]  //:EXAMPLE: 448
        ){
            //:Way too high, take largest value we allow
            //:for the camera span. (cam_san/out_san).
            out_san=( TAB[ 0 ] );
            out_dex=(      0   );
        }else{

            I08   found =(    0   ); //:value_found?
            I32     dex =(  0 - 1 ); //:TAB[ dex ]

            while( 1==1 ){
                dex++ ; //:<===[ First_Used_Value == 0 ]

                /** hit null terminator in list. **/
                if( 0x0 == TAB[ dex+1 ] ){ break; };

                if( cam_san <= TAB[ dex+0 ]  //: UPPER_BOUND ://
                &&  cam_san >= TAB[ dex+1 ]  //: LOWER_BOUND ://
                ){
                    found =( 1 );
                    I32 max_san = TAB[ dex+0 ];
                    I32 min_san = TAB[ dex+1 ];
                    out_san=(
                    aac2020_editcam_cam_san_SNA_min_san_max_san(
                            zom_i32,cam_san  ,  min_san,max_san
                    ));;

                    if( (out_san+0) == (max_san+0) ){
                         out_dex=( dex+0 );
                    }else
                    if( (out_san+0) == (min_san+0) ){
                         out_dex=( dex+1 );
                    }else{
                        printf("\n\n");
                        printf("[INN:cam_san]:%d\n", cam_san  );
                        printf("[INN:min_san]:%d\n", min_san  );
                        printf("[INN:max_san]:%d\n", max_san  );
                        printf("[OUT:out_san]:%d\n", out_san  );
                        ERR("[NEITHER_MAX_NOR_MIN_MATCH:2021]");
                    };;
                };;

            };;

            if( found <= 0 ){
                /** Take last entry before the null **/
                /** terminator in the list.         **/
                out_san=( TAB[ dex - 1 ] );
                out_dex=(    ( dex - 1 ) );
            };;

        };;
        //:==============================:MAIN_FUNCTION_LOGIC://
        //:return_via_output_param:--------------------------://

            assert( out_san <= 512 && out_san >= 2 );
            assert( out_dex >=( 0 )&& out_dex <=( 26-1 ) );

            //: Make absolutely sure the value we fetched    ://
            //: can be retrieved using the index output.     ://
            assert( 
                (AAC2020_EDITCAM_tab_zom_san[ out_dex ]+0)
                ==
                (out_san+0)
            );;

            (*BYREF_out_san)=( out_san );
            (*BYREF_out_dex)=( out_dex );

        //:--------------------------:return_via_output_param://
      
    }

#undef  TAB  //:----------------------------------------: 01 ://
#undef  I32  //:----------------------------------------: 02 ://
#undef  I08  //:----------------------------------------: 03 ://
#undef  ERR
//:==============================:Snap_Camera_To_PresetValues://
//:CameraSizeExponent_TO_PixelStep_ForPushPull:==============://
#define I32 int32_t /** GCC: <stdint.h> **/ //:---------: 01 ://
#define ERR aac2020_editcam_Halt            //:---------: 02 ://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    I32
    aac2020_editcam_cam_exp_CTO_pixstep_UPP(
                I32 cam_exp
    )
    { 
        ERR("[NOT_NEEDED:SEE( TRASH/008._ )UPP]");
        return( cam_exp /**NOOP**/ );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    I32
    aac2020_editcam_cam_exp_CTO_pixstep_DOW(
                I32 cam_exp
    )
    {
        ERR("[NOT_NEEDED:SEE( TRASH/008._ )DOW]");
        return( cam_exp /**NOOP**/ );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
#undef  I32  //:----------------------------------------: 01 ://
#undef  ERR  //:----------------------------------------: 02 ://
//:==============:CameraSizeExponent_TO_PixelStep_ForPushPull://
//:CameraSpan_TO_PixelStep_ForPushPull:======================://
#define I32 int32_t /** GCC: <stdint.h> **/ //:---------: 01 ://
#define ERR aac2020_editcam_Halt            //:---------: 02 ://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    I32
    aac2020_editcam_cam_san_CTO_pixstep_UPP(
                I32 cam_san
    )
    {
        if( cam_san ){ /** NOOP **/ };
        /** ************************************************ **/
        /** First snap the camera to an acceptable power of  **/
        /** two, and then figure out the pixel step needed   **/
        /** for that camera size.                            **/
        /** ************************************************ **/
        ERR("[DONT_DO_THIS_USE:cam_exp_CTO_pixstep_UPP");
        return( 0 - 666 );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    I32
    aac2020_editcam_cam_san_CTO_pixstep_DOW(
                I32 cam_san
    )
    {
        if( cam_san ){ /** NOOP **/ };
        /** ************************************************ **/
        /** First snap the camera to an acceptable power of  **/
        /** two, and then figure out the pixel step needed   **/
        /** for that camera size.                            **/
        /** ************************************************ **/
        ERR("[DONT_DO_THIS_USE:cam_exp_CTO_pixstep_DOW");
        return( 0 - 666 );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
#undef  I32  //:----------------------------------------: 01 ://
#undef  ERR  //:----------------------------------------: 02 ://
//:======================:CameraSpan_TO_PixelStep_ForPushPull://