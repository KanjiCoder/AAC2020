//: PAINT5D: ( .F._ : FuncFile )
//: #NAMESPACE_PATTERN_BREAKER_PAINT5D#

//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://

    void
    aac2020_paint5d_Halt( const char* msg_err )
    {

        printf("[FATAL_2020_12_04_076PM]:%s\n", msg_err );
        fflush(stdout);exit(  11 /** 4*20-69 **/ );         

    }

//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:OKAY_STATUS_INFO_MESSAGE:=================================://

    void
    aac2020_paint5d_Okay( const char* msg_o_k )
    {   if( AAC2020_SILENCE.PAINT5D <= 0 ){
        printf("[aac2020_paint5d_Okay]:%s\n", msg_o_k );
        fflush(stdout);    
    };;}

//:=================================:OKAY_STATUS_INFO_MESSAGE://
//:INFO_STATUS_INFO_MESSAGE:=================================://
#define I32 int32_t /** GCC: <stdint.h> **/

    void
    aac2020_paint5d_Info( const char* msg_inf )
    {   if( AAC2020_SILENCE.PAINT5D <= 0 ){
        printf("[aac2020_paint5d_Info]:%s\n", msg_inf );
        fflush(stdout);    
    };;}

    void
    aac2020_paint5d_Info_dec( 
        const char* str_fmt
    ,   I32         val_dec
    )
    {   if( AAC2020_SILENCE.PAINT5D <= 0 ){
        printf( "[aac2020_paint5d_Info_dec]...\n");
        fflush( stdout            ); //:@SAFETY_DOUBLE_FLUSH@://
        printf( str_fmt , val_dec );
        fflush( stdout            );    
    };;}

#undef  I32
//:=================================:INFO_STATUS_INFO_MESSAGE://
//:INITIALIZE_PAINT5D:=======================================://
#define U32  uint32_t /** GCC: <stdint.h> **/         //: 01 ://
#define I32   int32_t /** GCC: <stdint.h> **/         //: 02 ://
#define ERR   aac2020_paint5d_Halt                    //: 03 ://
#define O_K   aac2020_paint5d_Okay                    //: 04 ://
#define I_D   aac2020_paint5d_Info_dec                //: 05 ://
#define INF   aac2020_paint5d_Info                    //: 06 ://

    U32
    AAC2020_PAINT5D_Init( U32 u32 )
    {
        if( u32 ){ /** Reserved for future use **/ };

        //:#_INI_SPAM_AND_RECURSION_GAURD_#:-----------------://

        /** Hackishly debug what is going on. **/
        AAC2020_PAINT5D_init_call_count++;
        I_D("[AAC2020_PAINT5D_init_call_count]:%d\n"
                ,AAC2020_PAINT5D_init_call_count       );;

        if( AAC2020_CEDITOR_dex_ing == 
            AAC2020_CEDITOR_paint5d
        ){  
            /** If not recursion, it might be being called   **/
            /** rapidly from another thread. Re-entering     **/
            /** before it is exiting. But that seems         **/
            /** unlikely. I think that would require         **/
            /** more than one thread to call this function.  **/

            ERR("[LIKELY_UNINTENTIONAL_RECURSION]"); 
        };;

            /** #_EDITOR_INIT_SPAM_GAURD_# **/
            if( AAC2020_CEDITOR_nex_edi 
            ==  AAC2020_CEDITOR_dex_edi
            ){
                O_K("[PAINT5D:Init_Already_Up_To_Date]");
            };;

        /** We are now initilaizing paint5d **/
        AAC2020_CEDITOR_dex_ing=( 
        AAC2020_CEDITOR_paint5d  );;

        //:-----------------:#_INI_SPAM_AND_RECURSION_GAURD_#://

        /** Early Exit Will Trigger Recursion Guard Error **/
        O_K( "[OH_FUCK...Code_Below_Was_Never_Ran_Before]" );;

        //:ALL_MEMBERS_OF_PAINT5D:---------------------------://

            //:#_PAINT5D_DATA_IS_A_TEMPORARY_CONTAINER_NOW_#://

        //:---------------------------:ALL_MEMBERS_OF_PAINT5D://
        //:ALLOCATES_OPEN_GL_TEXTURE:------------------------://
    
            //+ #GPUDATA_IS_NOW_A_TEMPORARY_CONTAINER# + + + +//
            //- AAC2020_GPUDATA_InitInstance(  - - - - - - - -//
            //-     ACC2020_PAINT5D_dat      );; - - - - - - -//

        //:------------------------:ALLOCATES_OPEN_GL_TEXTURE://
        //:LOAD_INITIAL_TEXTURE_DATA:------------------------://
        #define DAT gpudata_paint5d
        #define F_S( name ) AAC2020_PIXNAME_##name

            /** #_TODOS_CAN_BREAK_COLUMN_LIMIT_# **/
            /** For now just load a test pattern to confirm we    * * * * * **/
            /** have data. But once that is done, we will want to * * * * * **/
            /** load from a save file on disk on startup.         * * * * * **/
            AAC2020_VITAL_TODO("[Eventually_This_Should_Load_Save_File_Data]");



            struct AAC2020_GPUDATA gpudata_paint5d ={ 0 };



            if( strcmp( &(F_S( paint5d )[0]) ,"paint5d" )!= 0 ){
                aac2020_paint5d_Halt("[BAD_NAME_2020]");
            };;


            
            //: FILE_SCOPE(  F_S  ) --> TEMP_STRUCT(  DAT  );
            DAT.tex_lot =    F_S( paint5d_tex_lot          );
            DAT.tex_han =    F_S( paint5d_tex_han          ); 
            DAT.sam_loc =    F_S( paint5d_tex_sam.sam_loc  );
            DAT.sam_val =    F_S( paint5d_tex_sam.sam_val  );
            DAT.sam_has =    F_S( paint5d_tex_sam_HAS      );
            DAT.pix_wid =  ( 512                           );
            DAT.pix_hig =  ( 512                           );
            DAT.pix_nam = &( F_S( paint5d )[0]             );

            DAT.cpu_pix =&( 
                AAC2020_PIXNAME_paint5d_cpu_pix[0] 
            );;



            AAC2020_PIXLOAD_TestPattern(   &( DAT ) );
            AAC2020_PIXLOAD_UploadTexture( &( DAT ) );
            

            //:get_paint5d_sampler_location:-----------------://
            #define HAS_CHK AAC2020_PIXLOAD_HasSampler
            #define INF_DEC aac2020_paint5d_Info_dec

                //:#_GPUDATA_INPUT_OBJECT_IS_OUTPUT_OBJECT_#://
                AAC2020_PIXLOAD_sam_has    ( &( DAT ) );
                AAC2020_PIXLOAD_sam_loc    ( &( DAT ) );
                AAC2020_PIXLOAD_sam_val_PUT( &( DAT ) );

                if( DAT.sam_has >= 1 && DAT.sam_loc <=(0 - 1) ){
                    ERR("[FULL_OF_LIES:@VDAWEA@:001]");
                }else 
                if( DAT.sam_has <= 0 && DAT.sam_loc >=(  0  ) ){
                    ERR("[FULL_OF_LIES:@VDAWEA@:002]");
                };;

                /** Keep the error prone way of doing this   **/
                /** As a redundancy to check for agreement.  **/

                I32 has = HAS_CHK( "paint5d" );
                if( DAT.sam_has != has ){ ERR("[WTF:0433AM]");};

                INF_DEC( "[DAT.sam_loc]:%d\n" , DAT.sam_loc );
                INF_DEC( "[DAT.sam_val]:%d\n" , DAT.sam_val );

            #undef  HAS_CHK
            #undef  INF_DEC
            //:-----------------:get_paint5d_sampler_location://

            if( has >= 1 ){

                /** Update Texture Sampler Uniform On GPU **/

                aac2020_pixload_PushSampler(  &( DAT ) );

                /** Persist Changes: **/

                //: TEMP_STRUCT(  DAT  ) --> FILE_SCOPE(  F_S  )
                F_S( paint5d_tex_lot         ) = DAT.tex_lot ;
                F_S( paint5d_tex_han         ) = DAT.tex_han ;
                F_S( paint5d_tex_sam.sam_loc ) = DAT.sam_loc ;
                F_S( paint5d_tex_sam.sam_val ) = DAT.sam_val ;
                F_S( paint5d_tex_sam_HAS     ) = DAT.sam_has ;
                //:                    ( 512 ) = DAT.pix_wid ://
                //:                    ( 512 ) = DAT.pix_hig ://
                //:                 "paint5d" ~=~DAT.pix_nam ://
    
                aac2020_paint5d_Okay("[HAS_TEXTURE_SAMPLER]");
            }else{

                /** Whether this is a good or bad message **/
                /** depends on you looking at code and    **/
                /** deciding.                             **/
                INF("[NO_TEXTURE_SAMPLER:PAINT5D]");
    
            };;
           
        #undef DAT
        #undef F_S
        //:------------------------:LOAD_INITIAL_TEXTURE_DATA://
        //:ERROR_CHECK:--------------------------------------://

            //:#_PAINT5D_DATA_ERROR_CHECK_NOW_POINTLESS_#://
            

        //:--------------------------------------:ERROR_CHECK://


        //:#_INI_SPAM_AND_RECURSION_GAURD_#:-----------------://

            /** DONE initializing. **/

            AAC2020_CEDITOR_dex_ini=( 
            AAC2020_CEDITOR_paint5d  );;

            /** No editor initializ-ING now. **/
            AAC2020_CEDITOR_dex_ing=( 0xFFFFFFFF );

        //:-----------------:#_INI_SPAM_AND_RECURSION_GAURD_#://

        return( 0x00 );

    }

#undef  U32                                           //: 01 ://
#undef  I32                                           //: 02 ://
#undef  ERR                                           //: 03 ://
#undef  O_K                                           //: 04 ://
#undef  I_D                                           //: 05 ://
#undef  INF                                           //: 06 ://
//:=======================================:INITIALIZE_PAINT5D://
//:KEYBOARD_HANDLER:(KeyInn):================================://
#define I32 int32_t /** GCC: <stdint.h> **/
#define DEX_EDI_paint5d ( 1 )
#define KEY_P5D ( AAC2020_KEYBIND.PAINT5D )
    
    I32
    aac2020_paint5d_KeyInn( signed char chr_key )
    {
        I32 res_var =( 0 );

        //:MOVE:---------------------------------------------://

            if( chr_key == KEY_P5D.p5d_lef ){

            }else
            if( chr_key == KEY_P5D.p5d_rig ){

            }else
            if( chr_key == KEY_P5D.p5d_upp ){

            }else
            if( chr_key == KEY_P5D.p5d_dow ){

            };;

        //:---------------------------------------------:MOVE://
        //:TILE_VALUE:---------------------------------------://

            if( chr_key == KEY_P5D.p5d_v_n ){ //:n:NEXT

            }else
            if( chr_key == KEY_P5D.p5d_v_b ){ //:b:BACK

            };;

        //:---------------------------------------:TILE_VALUE://
        //:TILE_TOGGLE:--------------------------------------://

            if( chr_key == KEY_P5D.p5d_tog ){ //:toggle

            };;

        //:--------------------------------------:TILE_TOGGLE://
        //:TILE_EXPONENT:------------------------------------://

            if( chr_key == KEY_P5D.p5d_e_n ){ //:n:NEXT

            }else
            if( chr_key == KEY_P5D.p5d_e_b ){ //:b:BACK

            };;

        //:------------------------------------:TILE_EXPONENT://
        //:ZOOM_IN_OR_OUT:-----------------------------------://

            if( chr_key == KEY_P5D.p5d_z_o ){ //: o:OUT

            }else
            if( chr_key == KEY_P5D.p5d_z_i ){ //: i:INN

            };;

        //:------------------------------------:ZOOM_IN_OR_OUT://

        return( res_var );
    }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    I32
    PAINT5D_KeyInn( signed char chr_key )
    {
        I32 res_var=( 0 );

        /** @VID_IID[ 0066 ]TIME[ 0H 19M 48S ] ............. **/
        /** PAINT5D is ALWAYS sub-system #1 which            **/
        /** Is assigned to the number 1, both in code        **/
        /** and in the key on the numpad it corresponds to   **/
        assert( DEX_EDI_paint5d == AAC2020_CEDITOR_paint5d );;
        if(     DEX_EDI_paint5d == AAC2020_CEDITOR_dex_edi ){

            res_var = aac2020_paint5d_KeyInn( chr_key );

        };;
    
        /** @IMPLICIT_INTERFACE[ KeyInn ] ****************** **/
        /** @VID_IID[ 0066 ]TIME[ 0H 30M 30S ] ..............**/
        /** Don't have a use for return code yet.    ........**/
        /** but we should be consistent with all of  ........**/
        /** our different keyboard handlers.         ........**/
        /** ************************************************ **/
        return( res_var );
    }

#undef  DEX_EDI_paint5d
#undef  I32
#undef  KEY_P5D
//:================================:KEYBOARD_HANDLER:(KeyInn)://