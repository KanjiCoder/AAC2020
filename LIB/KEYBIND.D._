//: KEYBIND.D._

/** KEYBOARD BINDINGS FOR EACH SUB SYSTEM ARE INTENTIONALLY  **/
/** LOOSELY COUPLED. Each sub system's keyboard bindings     **/
/** should be an instance of a UNIQUE TYPE                   **/
/** (not a common key bindings struct.                       **/
/** If two editors have common key bindings, we manually     **/
/** copy over the relevant data when switching between       **/
/** those two editors.                                       **/
/**                                                          **/
/** PROBLEM: say editor 1 & 3 have things in common and      **/
/**          we switch from: 1 --> 2 --> 3 so                **/
/**          settings from 1 are never copied to 3.          **/
/**          How do we solve this?                           **/
/**                                                          **/
/**          ANSWER: ( TOO COMPLEX. DO NOT DO THIS )         **/
/**          You keep a list of previously visited editors   **/
/**          and each editor gets a chance to copy over      **/
/**          settings with priority based on how recently    **/
/**          they were visited.                              **/
/**          BAD! TOO MANY PERMUTATIONS AND EXECUTION PATHS. **/
/**                                                          **/
/**          ANSWER #2: ( VALID SOLUTION #1 )                **/
/**          Any settings that are common between any        **/
/**          two editors are put into a "COMMON_BINDINGS"    **/
/**          struct. The COMON_BINDINGS struct is            **/
/**          persistent. And it is WRITTEN TO and READ FROM  **/
/**          when switching from one editor to another.      **/
/**                                                          **/
/**          ANSWER #3: ( VALID SOLUTION #2 )                **/
/**          FUCK THIS, JUST DON'T WRITE ANY CODE.           **/
/**          DONT SHARE SETTINGS BETWEEN EDITORS.            **/
/**                                                          **/

//:LIBRARY_STRUCT:===========================================://
#define U08 uint8_t /** GCC: <stdint.h> **/
#define CHR char   

    struct AAC2020_KEYBIND_PUBLIC_LIBRARY_STRUCT{

        /** ALL BINDINGS SHOULD BE UPPER CASE!!! **/
        
        U08 syntax_lax_comma_hack;

        struct AAC2020_KEYBIND_fragbed_is_always_listening{
            CHR xxxxxxx ;  //: #LAX_COMMA_HACK#

            /** ******************************************** **/
            /** These keys control which fragment shader in  **/
            /** FRAGBED is active. It also controls which    **/
            /** [ EDITOR (example:PAINT5D) ] is active.      **/
            /** There is a tight 1:1 coupling between        **/
            /** fragment shader # and editor #               **/    
            /**                                              **/
            /** fragment shader #1 is used for editor #1     **/
            /** fragment shader #2 is used for editor #2     **/
            /** fragment shader #3 is used for editor #3  ETC**/
            /** ******************************************** **/

            CHR bed_000 ; //:Shader Slot 0 (IREADY     shader)
            CHR bed_001 ; //:Shader Slot 1 (PAINT5D overrides)
            CHR bed_002 ; //:Shader Slot 2 <-- Available 
            CHR bed_003 ; //:Shader Slot 3 <-- Available 
            CHR bed_004 ; //:Shader Slot 4 <-- Available 
            CHR bed_005 ; //:Shader Slot 5 <-- Available 
            CHR bed_006 ; //:Shader Slot 6 <-- Available 
            CHR bed_007 ; //:Shader Slot 7 <-- Available 
            CHR bed_008 ; //:Shader Slot 8 <-- Available 
            CHR bed_009 ; //:Shader Slot 9 <-- Available 

        }FRAGBED;
        struct AAC2020_KEYBIND_number_key_to_press_0{ 

            /** NO MEMBERS. Only Sub Editors Get Keybindings.**/

            CHR keep_this_struct_empty;

        }TAUDEPO;
        struct AAC2020_KEYBIND_number_key_to_press_1{
        //[    AAC2020_KEYBIND.PAINT5D.p5d_***    .......... ]//

            /** ******************************************** ***

            @VID_IID[ 0066 ]TIME[ 1H 57M 28S ] ................. 
            "number_key_to_press_1" means.......................

            NumberKey == 1 == Paint5D == FragShader #1    
            We must FIRST PRESS numkey "1" to make 
            paint5D active (subsystem #1). Then the 
            bindings for[ subsytem #1 / paint5D ]will work

            ** ********************************************* **/

            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR xxxxxxx  ;  //: #LAX_COMMA_HACK#
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_bug      ;  //: Invoke Debugging Variable
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_out      ;  //: [OUTPUT/SAVE]:USES:PIXSAVE
            CHR p5d_pat      ;  //: PATTERN: DrawDefaultAuset
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            //:@VID_IID[ 0129 ]TIME[ 04:07:13 ]ADDED
            //:ADDED_FOR_SEEING[ AYAYA ]CROSS_SECTIONS
            CHR p5d_a_n ;  //:Auset_NEXT (higher value)
            CHR p5d_a_s ;  //:Auset_Snap_To_Viewport_Extent
            CHR p5d_a_b ;  //:Auset_BACK (lower value )
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_vp1_lef  ;  //: CAMERA_CONTROL          LEFT
            CHR p5d_vp1_rig  ;  //: CAMERA_CONTROL         RIGHT
            CHR p5d_vp1_upp  ;  //: CAMERA_CONTROL            UP
            CHR p5d_vp1_dow  ;  //: CAMERA_CONTROL          DOWN
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_vp1_z_o  ;  //: CAMERA_CONTROL           OUT
            CHR p5d_vp1_z_i  ;  //: CAMERA_CONTROL           INN
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_bru_lef  ;  //: MOVE_BUSH               LEFT
            CHR p5d_bru_rig  ;  //: MOVE_BUSH              RIGHT
            CHR p5d_bru_upp  ;  //: MOVE_BUSH                 UP
            CHR p5d_bru_dow  ;  //: MOVE_BUSH               DOWN
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_v_n  ;  //: TILE_VALUE                  NEXT
            CHR p5d_v_b  ;  //: TILE_VALUE                  BACK
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_tog  ;  //: TILE_TOGGLE              ADD_SUB
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_e_n  ;  //: TILE_EXPONENT(til_exp)      NEXT
            CHR p5d_e_b  ;  //: TILE_EXPONENT(til_exp)      BACK
            //: - - - - - - - - - - - -- - - - - - - - - - - ://

            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            CHR p5d_l_n  ;  //: LAYER_INDEX_0_TO_2          NEXT
            CHR p5d_l_b  ;  //: LAYER_INDEX_0_TO_2          BACK
            //: - - - - - - - - - - - -- - - - - - - - - - - ://
            /** Next to layer key... I am thinking somehow   **/
            /** layer related or maybe editing some type     **/
            /** of display or rendering mode for             **/
            /** the paint5d editor.                          **/
            CHR p5d_a_key_not_used_but_i_want_to ;
            //: - - - - - - - - - - - -- - - - - - - - - - - ://


        }PAINT5D;
        struct AAC2020_KEYBIND_number_key_to_press_2{
            CHR xxxxxxx  ;  //: #LAX_COMMA_HACK#
        }TODO_02;
        struct AAC2020_KEYBIND_number_key_to_press_3{
            CHR xxxxxxx  ;  //: #LAX_COMMA_HACK#
        }TODO_03;


    }AAC2020_KEYBIND={
        .syntax_lax_comma_hack = 0
    ,   .TAUDEPO={ .keep_this_struct_empty = '_' }
    ,   .FRAGBED={
             .xxxxxxx =( 0 )//:#_MINIMAL_MENTAL_INDIRECTION_#://
            ,.bed_000 = '0'
            ,.bed_001 = '1'
            ,.bed_002 = '2'
            ,.bed_003 = '3'
            ,.bed_004 = '4'
            ,.bed_005 = '5'
            ,.bed_006 = '6'
            ,.bed_007 = '7'
            ,.bed_008 = '8'
            ,.bed_009 = '9'
        }
    ,   .PAINT5D={
             .xxxxxxx =( 0 )  //:#_PAINT5D_BINDING_CHOICES_#://

            /** @VID_IID[ 0135 ]TIME[ 01:17:00 ]DEBUG_VARS   **/
                ,.p5d_bug = 'U'   //: p5d_d_1
                                  //: p5d_d_2
                                  //: p5d_d_3
                                  //: p5d_d_4
                                 
            /** ******************************************** ***
                @VID_IID[ 0095 ]TIME[ 02:09:30 ] 
                @VID_IID[ 0095 ]TIME[ 02:11:10 ]DONE

                Binding save of paint5d data to "O" key.
                "O" is for "Ouput". We use "O" because it
                is on the RIGHT hand and is something we
                think we will use LESS FREQUENTLY.
                Also... "S" key is already used.

                Press[ '0' ]==> AAC2020_PIXSAVE_SaveFile_paint5d

            *** ******************************************** **/

                ,.p5d_out = 'O'

            /** ******************************************** ***
                @VID_IID[ 0094 ]TIME[ 01:27:40 ]
                @VID_IDD[ 0094 ]TIME[ 01:30:10 ]DONE

                Draw default auset pattern (pat==pattern)
                using the "P" key. Call the fuction:
                aac2020_paint5d_DrawDefaultAuset_001

                Be careful, this will nuke your work!
                TODO: Press it 3 times in a row to make
                      it work. Make a "key combos"
                      sub library for that.
            *** ******************************************** **/

                ,.p5d_pat = 'P' //:P for PATTERN

                /** @VID_IID[ 0129 ]TIME[ 04:14:23 ]  ****** **/
                /** If you give a renderer a pattern, ****** **/
                /** it's going to ask to seek through the    **/
                /** cross sections and snap the camera. **** **/
                /** #_GIVE_A_MOOSE_A_MUFFIN_# ************** **/
                /** https://i.imgur.com/gW87tl5.jpg ******** **/
                /** **************************************** **/

                ,.p5d_a_n = 'Y'
                ,.p5d_a_s = 'H' //:Auset_Snap_To_Viewport_Extent
                ,.p5d_a_b = 'N'

            /** ******************************************** ***
                @VID_IID[ 0066 ]TIME[ 2H 51M 20S ] 
                Made variables a bit longer so we can
                distinguish between CAMERA(cam) variables
                and BRUSH(bru) variables.
            *** ******************************************** **/

                /** #_VP1_IS_WHAT_USER_THINKS_OF_AS_CAMERA_# **/

                ,.p5d_vp1_lef = 'J' //: CAMERA_CONTROL : LEFT  
                ,.p5d_vp1_rig = 'L' //: CAMERA_CONTROL : RIGHT 
                ,.p5d_vp1_upp = 'I' //: CAMERA_CONTROL : UPP   
                ,.p5d_vp1_dow = 'K' //: CAMERA_CONTROL : DOWN  
                                    
                ,.p5d_vp1_z_o = 'R' //: CAMERA_CONTROL : ZOOM  
                ,.p5d_vp1_z_i = 'V' //: CAMERA_CONTROL : ZOOM  

            /** ******************************************** **/
            /** ******************************************** ***
                @VID_IID[ 0066 ]TIME[ 2H 39M 51S ]

                THIS WILL CHANGE WHERE YOUR BRUSH IS.
                Camera will change automatically if you move
                your brush outside of the current viewport
                rectangle.
            *** ******************************************** **/

                ,.p5d_bru_lef = 'S'   //: MOVE_BRUSH  : LEFT    
                ,.p5d_bru_rig = 'F'   //: MOVE_BRUSH  : RIGHT   
                ,.p5d_bru_upp = 'E'   //: MOVE_BRUSH  : UPP     
                ,.p5d_bru_dow = 'D'   //: MOVE_BRUSH  : DOWN    

            /** ******************************************** **/

                ,.p5d_v_n = 'T'   //: VALUE:NEXT ( tile type )
                ,.p5d_v_b = 'B'   //: VALUE:BACK ( tile type )
                ,.p5d_tog = 'G'   //: TOGGLE (set or unset tile)
                ,.p5d_e_n = 'W'   //: TILE_EXPONENT(til_exp)NEXT
                ,.p5d_e_b = 'X'   //: TILE_EXPONENT(til_exp)BACK

                ,.p5d_l_n = 'Q' /** lay_nex **/
                ,.p5d_l_b = 'Z' /** lay_bak **/

                ,.p5d_a_key_not_used_but_i_want_to = 'A'
        }
    ,   .TODO_02={
            .xxxxxxx =( 0 )
        }
    ,   .TODO_03={
            .xxxxxxx =( 0 )
        }
    };

#undef  U08 
#undef  CHR 
//:===========================================:LIBRARY_STRUCT://
//:#CONTROL_F_HELP#==========================================://
/** ******************************************************** ***

    @VID_IID[ 0094 ]TIME[ 01:47:00 ]
    [ p5d_sav | p5d_save ] ======> [ p5d_out ]
    "Out" for "Output" rather than "Sav" for "Save"
    so that we can more easily associate with the "O"
    key on the RIGHT hand instead of the "S" key on the
    LEFT hand.

*** ******************************************************** **/
//:=========================================:#CONTROL_F_HELP#://