

    //:TODO: REWORK THIS CODE INTO NEW SHADER

    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//
    //[AAC2020_FRAGCOM_DEFAULT_001:======================]//
    //[PASTE_INTO_FILE[ COM_001._ ]:=====================]//
    //:COM_001____AAC2020_FRAGCOM_DEFAULT_001:===========://
    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//
    //:always_exists_error_string_macros:----------------://
                                                   //| # |//
        /** ******************************** ***   //| # |//
        @VID_IID[ 0112 ]TIME[ 00:56:50 ]           //| # |//
        Get rid of quote marks in the source       //| # |//
        So we can wrap entire thing into a         //| # |//
        very large multi-line string.              //| # |//
        *** ******************************** **/   //| # |//
                                                   //| # |//
        #define            E_S_private( e_m ) #e_m //| # |//
        #define E_S( e_m ) E_S_private( e_m )      //| # |//
                                                   //| # |//
    //:----------------:always_exists_error_string_macros://
    //:type_macros:--------------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //| # |//
        /** When Running As GLSL Code. **/         //| # |//
                                                   //| # |//
        #define F32        float    //:  01  ://   //| # |//
        #define U32         uint    //:  02  ://   //| # |//
        #define I32          int    //:  03  ://   //| # |//
        #define IV2        ivec2    //:  04  ://   //| # |//
        #define UV4        uvec4    //:  05  ://   //| # |//
        #define T_F   texelFetch    //:  06  ://   //| # |//
        #define TAU      taudepo    //:  07  ://   //| # |//
        #define P5D      paint5d    //:  08  ://   //| # |//
        #define SAM   usampler2D    //:  09  ://   //| # |//
        #define UFF    uint(0xFF)   //:  10  ://   //| # |//
        #define U00    uint( 0  )   //:  11  ://   //| # |//
        #define I00     int( 0  )   //:  12  ://   //| # |//
        #define U03    uint( 3  )   //:  13  ://   //| # |//
        #define B_3    uint( 3  )   //:  14  ://   //| # |//
        #define B11    uint( 3  )   //:  15  ://   //| # |//
        #define H55    uint(0x55)   //:  16  ://   //| # |//
        #define V_A                 //:  17  ://   //| # |//
        #define FV4         vec4    //:  18  ://   //| # |//
        #define ASS  /**NOTHING**/  //:  19  ://   //| # |//
        #define ERR  /**NOTHING**/  //:  20  ://   //| # |//
        #define TRU  trunc          //:  21  ://   //| # |//
    #else                                          //| # |//
                                                   //| # |//
        /** When Running As C99/C11 Code. **/      //| # |//
                                                   //| # |//
        #define F32      float      //:  01  ://   //| # |//
        #define U32   uint32_t      //:  02  ://   //| # |//
        #define I32    int32_t      //:  03  ://   //| # |//
        #define IV2   struct AAC2020_POLYOGL_IV2   //| # |//
        #define UV4   struct AAC2020_POLYOGL_UV4   //| # |//
        #define T_F   AAC2020_POLYOGL_tex_fet      //| # |//
        #define TAU   ( 0 )         //:  07  ://   //| # |//
        #define P5D   ( 1 )         //:  08  ://   //| # |//
        #define SAM    int          //:  09  ://   //| # |//
        #define UFF    0xFF         //:  10  ://   //| # |//
        #define U00    0x00         //:  11  ://   //| # |//
        #define I00   ( 0 )         //:  12  ://   //| # |//
        #define U03   ( 3 )         //:  13  ://   //| # |//
        #define B_3   ( 3 )         //:  14  ://   //| # |//
        #define B11   ( 3 )         //:  15  ://   //| # |//
        #define H55    0x55         //:  16  ://   //| # |//
        #define V_A   void          //:  17  ://   //| # |//
        #define FV4   struct AAC2020_POLYOGL_FV4   //| # |//
        #define ASS   assert        //:  19  ://   //| # |//
        #define ERR   aac2020_p5d1ogl_Halt         //| # |//
        #define TRU   AAC2020_POLYOGL_Trunc        //| # |//
    #endif                                         //| # |//
    //:--------------------------------------:type_macros://
    //:seven_letter_macros:------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //|---|//
        #define MAK_FV4      vec4                  //| 1 |//
        #define MAK_IV2     ivec2                  //| 2 |//
        #define MAK_U32      uint                  //| 3 |//
        #define MAK_I32       int                  //| 4 |//
        #define MAK_F32     float                  //| 5 |//
        #define BIN_011 uint( 3 )                  //| 6 |//
        #define TYP_F_C /** nothing **/            //| 7 |//
        #define INN_F_C /** nothing **/            //| 8 |//
        #define ROU_NAT round /** round NATIVE **/ //| 9 |//
        #define ROU_F32 AAC2020_FRAGCOM_ROU_F32    //|10 |//
        #define CEL_NAT ceil                       //|11 |//
        #define CEL_F32 AAC2020_FRAGCOM_CEL_F32    //|12 |//
    #else                                          //|---|//
        #define MAK_FV4 AAC2020_POLYOGL_MAK_FV4    //| 1 |//
        #define MAK_IV2 AAC2020_POLYOGL_MAK_IV2    //| 2 |//
        #define MAK_U32 AAC2020_POLYOGL_MAK_U32    //| 3 |//
        #define MAK_I32 AAC2020_POLYOGL_MAK_I32    //| 4 |//
        #define MAK_F32 AAC2020_POLYOGL_MAK_F32    //| 5 |//
        #define BIN_011 ((U32)3 )                  //| 6 |//
        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //| 7 |//
        #define INN_F_C F_C                        //| 8 |//
        #define ROU_NAT AAC2020_POLYOGL_ROU_NAT    //| 9 |//
        #define ROU_F32 AAC2020_POLYOGL_ROU_F32    //|10 |//
        #define CEL_NAT AAC2020_POLYOGL_CEL_NAT    //| 9 |//
        #define CEL_F32 AAC2020_POLYOGL_CEL_F32    //|10 |//
    #endif                                         //|---|//
    //:------------------------------:seven_letter_macros://
    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//

        I32
        AAC2020_FRAGCOM_CEL_F32(
            F32 f32
        )  
        {   
            return( MAK_I32( CEL_NAT( f32 ) ) );
        }

        I32
        AAC2020_FRAGCOM_ROU_F32(
            F32 f32
        )
        {
            return( MAK_I32( ROU_NAT( f32 ) ) );
        }

        I32 
        AAC2020_FRAGCOM_rv0_CTO_rv1(
            I32 r_0 //:X-or-Y axis: INNPUT: range ( LARGER)
        ,   I32 v_0 //:X-or-Y axis: INNPUT: value
        ,   I32 r_1 //:X-or-Y axis: OUTPUT: range (SMALLER)
        //: RET v_1 <-- Return output value
        )
        {
            /** **************************************** **/
            /** This mapping is designed for mapping     **/
            /** from large range of values to a          **/
            /** smaller range of values.                 **/
            /** **************************************** **/
            ASS( r_1 <= r_0 );

        //| |<---------------  12  --------------->|<-R_0|//    
        //| [0][1][2][3]  [4][5][6][7]  [8][9][A][B]<-V_0|//
        //| |<-- c_s ->|                            <-   |//
        //|                                         <-   |//
        //|     [00]          [01]          [02]    <-V_1|//
        //|     |<------------ 03 ------------>|    <-R_1|//

            I32 c_s =( r_0 / r_1 ); //:Cluster_Size
            I32 d_p =( v_0 / c_s ); //:Destination_Pixel
            return( d_p /** v_1 == d_p **/ );
        }

        /** One axis version of:         **/
        /** AAC2020_FRAGCOM_big_MAP_lit  **/
        /** ONE_AXE == One Axis          **/
        I32
        AAC2020_FRAGCOM_big_MAP_lit_ONE_AXE(
            I32 s_i

        ,   I32 s_0
        ,   I32 s_1

        ,   I32 d_0
        ,   I32 d_1
        )
        {
            I32 d_p =(
                ( //:<---------------- d_p : dest_pixel
                    s_i //:<------------------- v_0 : input_val
                    / 
                    (   //:<------------------- c_s : cluster_size
                        ( (s_1-s_0) +1 ) //:<-- r_0 : RANGE_SOURCE
                    /   ( (d_1-d_0) +1 ) //:<-- r_1 : RANGE_DEST
                    )
                )
                +d_0 //:Add_New_Origin
            );;
            return( d_p );
        }
    

        IV2
        AAC2020_FRAGCOM_big_MAP_lit(
            I32 big_s_x  //: BIG: source(value)x
        ,   I32 big_s_y  //: BIG: source(value)y
                                                   //: m ://
        ,   I32 big_sx0  //:rec_src: BOUND_LEF     //: m ://
        ,   I32 big_sy0  //:rec_src: BOUND_RIG     //: m ://
        ,   I32 big_sx1  //:rec_src: BOUND_TOP     //: m ://
        ,   I32 big_sy1  //:rec_src: BOUND_BOT     //: m ://
                                                   //: m ://
        ,   I32 lit_dx0  //:rec_dst: BOUND_LEF     //: m ://
        ,   I32 lit_dy0  //:rec_dst: BOUND_RIG     //: m ://
        ,   I32 lit_dx1  //:rec_dst: BOUND_TOP     //: m ://
        ,   I32 lit_dy1  //:rec_dst: BOUND_BOT     //: m ://
        )                                          //: m ://
        {
            /** FUNCTION_SUMMARY[ big_MAP_lit ] ******** **/
            /** @VID_IID[ 0142 ]TIME[ 01:34:32 ] ******* **/
            /** Map a value on one range to a value on   **/
            /** another range. Written assuming the      **/
            /** destination range is same size or smaller**/
            /** than the input range. Have no clue how   **/
            /** this will work if that logic is flipped. **/
            /** **************************************** **/
            //:output_xy_coord_var:----------------------://
            
                IV2 dst;

            //:----------------------:output_xy_coord_var://
            //:No_Concept_Of_Offset_In_Here:-------------://
                dst.x=(
                AAC2020_FRAGCOM_rv0_CTO_rv1(
                    ( (big_sx1-big_sx0) +1 ) //:RANGE:INN
                ,   (          big_s_x     ) //:VALUE:INN
                ,   ( (lit_dx1-lit_dx0) +1 ) //:range:out
                ));;
                
                dst.y=(
                AAC2020_FRAGCOM_rv0_CTO_rv1(
                    ( (big_sy1-big_sy0) +1 ) //:RANGE:INN
                ,   (          big_s_y     ) //:VALUE:INN
                ,   ( (lit_dy1-lit_dy0) +1 ) //:range:out
                ));;
            //:-------------:No_Concept_Of_Offset_In_Here://

            /** Un-Zero out the output coordinate **/
            dst.x =( dst.x + lit_dx0 );
            dst.y =( dst.y + lit_dy0 );

            return( dst );
        }

         
        /** USE[ AAC2020_FRAGCOM_big_MAP_lit ]           **/
        /** FIXED:Broken_Version_In[ DOC/TRASH/002._ ]   **/
        /** FIXED:@VID_IID[ 0142 ]TIME[ 02:22:42     ]   **/
        IV2 //:<-- OUT[ d_x , d_y ]                //: m ://
        AAC2020_FRAGCOM_rec_src_MAP_rec_dst(       //: m ://
            I32 s_x                                //: m ://
        ,   I32 s_y                                //: m ://
                                                   //: m ://
        ,   I32 sx0  //:rec_src: BOUND_LEF         //: m ://
        ,   I32 sy0  //:rec_src: BOUND_RIG         //: m ://
        ,   I32 sx1  //:rec_src: BOUND_TOP         //: m ://
        ,   I32 sy1  //:rec_src: BOUND_BOT         //: m ://
                                                   //: m ://
        ,   I32 dx0  //:rec_dst: BOUND_LEF         //: m ://
        ,   I32 dy0  //:rec_dst: BOUND_RIG         //: m ://
        ,   I32 dx1  //:rec_dst: BOUND_TOP         //: m ://
        ,   I32 dy1  //:rec_dst: BOUND_BOT         //: m ://
        )                                          //: m ://
        {                                          //: m ://
        #define F MAK_F32 //:<<<<<<<<<:HACKISH_FLOAT_CAST://
            //:#_FUCK_THIS_REMAPPING_FORMULA_REMOVED_# m ://

            #error TODO:MAKE_FLOOR_OR_CEIL_DEPEND_ON_UPSCALE_OR_DOWNSCALE


            IV2 dst; //:OUTPUT_DESTINATION---------------://
                                                   //:   ://
            dst.x =CEL_F32(( //:<----------- d_p : dst_pix://
            F(s_x-sx0)   //:<------------------- v_0 : inn_val://
                /                                  //:   ://
                (   //:<------------------- c_s : clu_siz://
                    F( (sx1-sx0) +1 ) //:<-- r_0 : rng_src://
                /   F( (dx1-dx0) +1 ) //:<-- r_1 : rng_dst://
                )                                  //:   ://
            )+F(dx0)); //:<-- Add_New_Origin
                                                   //:   ://
            dst.y =CEL_F32(( //:<------------------ d_p : dst_pix://
            F(s_y-sy0)//:<------------------- v_0 : inn_val://
                /                                  //:   ://
                (   //:<------------------- c_s : clu_siz://
                    F( (sy1-sy0) +1 ) //:<-- r_0 : rng_src://
                /   F( (dy1-dy0) +1 ) //:<-- r_1 : rng_dst://
                )                                  //:   ://
            )+F(dy0)); //:<-- Add_New_Origin
            return( dst );

        #undef  F //:<<<<<<<<<<<<<<<<<:HACKISH_FLOAT_CAST://
        }

        //:- - - - - - - - - - - -- - - - - - - - - - - -://  
    //:always_exists_error_string_macros:----------------://
                                                   //[ x ]//
        #undef  E_S_private                        //[ x ]//
        #undef  E_S                                //[ x ]//
                                                   //[ x ]//
    //:----------------:always_exists_error_string_macros://
    //:type_macros:--------------------------------------://
                                                   //[ x ]//
        #undef  F32      //:  01  ://              //[ x ]//
        #undef  U32      //:  02  ://              //[ x ]//
        #undef  I32      //:  03  ://              //[ x ]//
        #undef  IV2      //:  04  ://              //[ x ]//
        #undef  UV4      //:  05  ://              //[ x ]//
        #undef  T_F      //:  06  ://              //[ x ]//
        #undef  TAU      //:  07  ://              //[ x ]//
        #undef  P5D      //:  08  ://              //[ x ]//
        #undef  SAM      //:  09  ://              //[ x ]//
        #undef  UFF      //:  10  ://              //[ x ]//
        #undef  U00      //:  11  ://              //[ x ]//
        #undef  I00      //:  12  ://              //[ x ]//
        #undef  U03      //:  13  ://              //[ x ]//
        #undef  B_3      //:  14  ://              //[ x ]//
        #undef  B11      //:  15  ://              //[ x ]//
        #undef  H55      //:  16  ://              //[ x ]//
        #undef  V_A      //:  17  ://              //[ x ]//
        #undef  FV4      //:  18  ://              //[ x ]//
        #undef  ASS      //:  19  ://              //[ x ]//
        #undef  ERR      //:  20  ://              //[ x ]//
                                                   //[ x ]//
    //:--------------------------------------:type_macros://
    //:seven_letter_macros:------------------------------://
    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/
    /** Decided on [MAK] for [MAKE] as our constructor   **/
    /** postfix ........................................ **/
                                                   //[ x ]//
        #undef  MAK_FV4                            //[ 1 ]//
        #undef  MAK_IV2                            //[ 2 ]//
        #undef  MAK_I32                            //[ 3 ]//
        #undef  MAK_F32                            //[ 4 ]//
        #undef  BIN_011                            //[ 5 ]//
        #undef  CUVIPIX                            //[ 6 ]//
        #undef  TYP_F_C                            //[ 7 ]//
        #undef  INN_F_C                            //[ 8 ]//
        #undef  ROU_NAT                            //[ 9 ]//
        #undef  ROU_F32                            //[10 ]//
        #undef  CEL_NAT                            //[11 ]//
        #undef  CEL_F32                            //[12 ]//
                                                   //[ x ]//
    //:------------------------------:seven_letter_macros://
    //:===========:COM_001____AAC2020_FRAGCOM_DEFAULT_001://  
    //[=====================:PASTE_INTO_FILE[ COM_001._ ]]//
    //[======================:AAC2020_FRAGCOM_DEFAULT_001]//
    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//