

    //:TODO: REWORK THIS CODE INTO NEW SHADER

    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//
    //[AAC2020_FRAGCOM_DEFAULT_001:======================]//
    //[PASTE_INTO_FILE[ COM_001._ ]:=====================]//
    //:COM_001____AAC2020_FRAGCOM_DEFAULT_001:===========://
    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//
    //:always_exists_error_string_macros:----------------://
                                                   //| # |//
        /** ******************************** ***   //| # |//
        @VID_IID[ 0112 ]TIME[ 00:56:50 ]           //| # |//
        Get rid of quote marks in the source       //| # |//
        So we can wrap entire thing into a         //| # |//
        very large multi-line string.              //| # |//
        *** ******************************** **/   //| # |//
                                                   //| # |//
        #define            E_S_private( e_m ) #e_m //| # |//
        #define E_S( e_m ) E_S_private( e_m )      //| # |//
                                                   //| # |//
    //:----------------:always_exists_error_string_macros://
    //:type_macros:--------------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //| # |//
        /** When Running As GLSL Code. **/         //| # |//
                                                   //| # |//
        #define F32        float    //:  01  ://   //| # |//
        #define U32         uint    //:  02  ://   //| # |//
        #define I32          int    //:  03  ://   //| # |//
        #define IV2        ivec2    //:  04  ://   //| # |//
        #define UV4        uvec4    //:  05  ://   //| # |//
        #define T_F   texelFetch    //:  06  ://   //| # |//
        #define TAU      taudepo    //:  07  ://   //| # |//
        #define P5D      paint5d    //:  08  ://   //| # |//
        #define SAM   usampler2D    //:  09  ://   //| # |//
        #define UFF    uint(0xFF)   //:  10  ://   //| # |//
        #define U00    uint( 0  )   //:  11  ://   //| # |//
        #define I00     int( 0  )   //:  12  ://   //| # |//
        #define U03    uint( 3  )   //:  13  ://   //| # |//
        #define B_3    uint( 3  )   //:  14  ://   //| # |//
        #define B11    uint( 3  )   //:  15  ://   //| # |//
        #define H55    uint(0x55)   //:  16  ://   //| # |//
        #define V_A                 //:  17  ://   //| # |//
        #define FV4         vec4    //:  18  ://   //| # |//
        #define ASS  /**NOTHING**/  //:  19  ://   //| # |//
        #define ERR  /**NOTHING**/  //:  20  ://   //| # |//
        #define TRU  trunc          //:  21  ://   //| # |//
    #else                                          //| # |//
                                                   //| # |//
        /** When Running As C99/C11 Code. **/      //| # |//
                                                   //| # |//
        #define F32      float      //:  01  ://   //| # |//
        #define U32   uint32_t      //:  02  ://   //| # |//
        #define I32    int32_t      //:  03  ://   //| # |//
        #define IV2   struct AAC2020_POLYOGL_IV2   //| # |//
        #define UV4   struct AAC2020_POLYOGL_UV4   //| # |//
        #define T_F   AAC2020_POLYOGL_tex_fet      //| # |//
        #define TAU   ( 0 )         //:  07  ://   //| # |//
        #define P5D   ( 1 )         //:  08  ://   //| # |//
        #define SAM    int          //:  09  ://   //| # |//
        #define UFF    0xFF         //:  10  ://   //| # |//
        #define U00    0x00         //:  11  ://   //| # |//
        #define I00   ( 0 )         //:  12  ://   //| # |//
        #define U03   ( 3 )         //:  13  ://   //| # |//
        #define B_3   ( 3 )         //:  14  ://   //| # |//
        #define B11   ( 3 )         //:  15  ://   //| # |//
        #define H55    0x55         //:  16  ://   //| # |//
        #define V_A   void          //:  17  ://   //| # |//
        #define FV4   struct AAC2020_POLYOGL_FV4   //| # |//
        #define ASS   assert        //:  19  ://   //| # |//
        #define ERR   aac2020_p5d1ogl_Halt         //| # |//
        #define TRU   AAC2020_POLYOGL_Trunc        //| # |//
    #endif                                         //| # |//
    //:--------------------------------------:type_macros://
    //:seven_letter_macros:------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//
                                                   //|---|//
        #define MAK_FV4      vec4                  //| 1 |//
        #define MAK_IV2     ivec2                  //| 2 |//
        #define MAK_U32      uint                  //| 3 |//
        #define MAK_I32       int                  //| 4 |//
        #define MAK_F32     float                  //| 5 |//
        #define BIN_011 uint( 3 )                  //| 6 |//
        #define TYP_F_C /** nothing **/            //| 7 |//
        #define INN_F_C /** nothing **/            //| 8 |//
        //:-------------------------------------:////|---|//
        #define FLO_NAT floor                      //| 9 |//
        #define FLO_F32 AAC2020_FRAGCOM_FLO_F32    //|10 |//
        #define ROU_NAT round /** round NATIVE **/ //|11 |//
        #define ROU_F32 AAC2020_FRAGCOM_ROU_F32    //|12 |//
        #define CEL_NAT ceil                       //|13 |//
        #define CEL_F32 AAC2020_FRAGCOM_CEL_F32    //|14 |//
        #define COF_F32 AAC2020_FRAGCOM_COF_F32    //|15 |//
    #else                                          //|---|//
        #define MAK_FV4 AAC2020_POLYOGL_MAK_FV4    //[ 1 ]//
        #define MAK_IV2 AAC2020_POLYOGL_MAK_IV2    //[ 2 ]//
        #define MAK_U32 AAC2020_POLYOGL_MAK_U32    //[ 3 ]//
        #define MAK_I32 AAC2020_POLYOGL_MAK_I32    //[ 4 ]//
        #define MAK_F32 AAC2020_POLYOGL_MAK_F32    //[ 5 ]//
        #define BIN_011 ((U32)3 )                  //[ 6 ]//
        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //[ 7 ]//
        #define INN_F_C F_C                        //[ 8 ]//
        //:-------------------------------------:////[---]//
        #define FLO_NAT AAC2020_POLYOGL_ROU_NAT    //[ 9 ]//      
        #define FLO_F32 AAC2020_POLYOGL_ROU_F32    //[10 ]//
        #define ROU_NAT AAC2020_POLYOGL_ROU_NAT    //[11 ]//
        #define ROU_F32 AAC2020_POLYOGL_ROU_F32    //[12 ]//
        #define CEL_NAT AAC2020_POLYOGL_CEL_NAT    //[13 ]//
        #define CEL_F32 AAC2020_POLYOGL_CEL_F32    //[14 ]//
        #define COF_F32 AAC2020_POLYOGL_COF_F32    //[15 ]//
    #endif                                         //[---]//
    //:------------------------------:seven_letter_macros://
    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//

    //:Floor_Round_Ceil:---------------------------------://
        I32                                           //:://
        AAC2020_FRAGCOM_FLO_F32(                      //:://
            F32 f32                                   //:://
        )                                             //:://
        {                                             //:://
            return( MAK_I32( FLO_NAT( f32 ) ) );      //:://
        }                                             //:://
        I32                                           //:://
        AAC2020_FRAGCOM_ROU_F32(                      //:://
            F32 f32                                   //:://
        )                                             //:://
        {                                             //:://
            return( MAK_I32( ROU_NAT( f32 ) ) );      //:://
        }                                             //:://
        I32                                           //:://
        AAC2020_FRAGCOM_CEL_F32(                      //:://
            F32 f32                                   //:://
        )                                             //:://
        {                                             //:://
            return( MAK_I32( CEL_NAT( f32 ) ) );      //:://
        }                                             //:://
    //:---------------------------------:Floor_Round_Ceil://
    //:Ceil_Or_Floor:------------------------------------://
    /** TRASHED. SEE[ DOC/TRASH/006._ ] **************** **/
        
        //: DO_NOT_USE_THIS_FUNCTION.                    ://
        //: You are doing something very wrong in your   ://
        //: code if you need branching like this.        ://
        #define AAC2020_FRAGCOM_COF_F32 0000

    //:------------------------------------:Ceil_Or_Floor://

        /** TRASHED: AAC2020_FRAGCOM_rv0_CTO_rv1         **/
        /** TRASHED: AAC2020_FRAGCOM_big_MAP_lit_ONE_AXE **/
        /** SEE[ DOC/TRASH/007._ ]                       **/
        /** VID_IID[ 0145 ]T[ 03:07:44 ]                 **/

        IV2
        AAC2020_FRAGCOM_big_MAP_lit(
            I32 big_s_x  //: BIG: source(value)x
        ,   I32 big_s_y  //: BIG: source(value)y
                                                   //: m ://
        ,   I32 big_sx0  //:rec_src: BOUND_LEF     //: m ://
        ,   I32 big_sy0  //:rec_src: BOUND_RIG     //: m ://
        ,   I32 big_sx1  //:rec_src: BOUND_TOP     //: m ://
        ,   I32 big_sy1  //:rec_src: BOUND_BOT     //: m ://
                                                   //: m ://
        ,   I32 lit_dx0  //:rec_dst: BOUND_LEF     //: m ://
        ,   I32 lit_dy0  //:rec_dst: BOUND_RIG     //: m ://
        ,   I32 lit_dx1  //:rec_dst: BOUND_TOP     //: m ://
        ,   I32 lit_dy1  //:rec_dst: BOUND_BOT     //: m ://
        )                                          //: m ://
        {
            /** FUNCTION_SUMMARY[ big_MAP_lit ] ******** **/
            /** @VID_IID[ 0142 ]TIME[ 01:34:32 ] ******* **/
            /** Map a value on one range to a value on   **/
            /** another range. Written assuming the      **/
            /** destination range is same size or smaller**/
            /** than the input range. Have no clue how   **/
            /** this will work if that logic is flipped. **/
            /** **************************************** **/
            //:output_xy_coord_var:----------------------://
            
                IV2 dst;

            //:----------------------:output_xy_coord_var://
            //:INTEGER_DOWNSCALE_FORMULA:----------------://
            #define NOT_CTF /** NOT_Convert_To_Float **/

                #define S_I big_s_x
                #define S_0 big_sx0
                #define S_1 big_sx1
                #define D_0 lit_dx0
                #define D_1 lit_dx1
                #define D_P dst.x
                D_P =(
                    (  
                        NOT_CTF(S_I - S_0)
                        / 
                        (   
                            NOT_CTF( (S_1 - S_0) +1 )  
                        /   NOT_CTF( (D_1 - D_0) +1 )  
                        )
                    )
                    +D_0 //:Add_New_Origin
                );;
                #undef  S_I 
                #undef  S_0 
                #undef  S_1 
                #undef  D_0 
                #undef  D_1 
                #undef  D_P 

                #define S_I big_s_y
                #define S_0 big_sy0
                #define S_1 big_sy1
                #define D_0 lit_dy0
                #define D_1 lit_dy1
                #define D_P dst.y
                D_P =(
                    (  
                        NOT_CTF(S_I - S_0)
                        / 
                        (   
                            NOT_CTF( (S_1 - S_0) +1 )  
                        /   NOT_CTF( (D_1 - D_0) +1 )  
                        )
                    )
                    +D_0 //:Add_New_Origin
                );;
                #undef  S_I 
                #undef  S_0 
                #undef  S_1 
                #undef  D_0 
                #undef  D_1 
                #undef  D_P 
                
            #undef  NOT_CTF
            //:----------------:INTEGER_DOWNSCALE_FORMULA://        

            return( dst );
        }

        /** TRASHED:AAC2020_FRAGCOM_rec_src_MAP_rec_dst  **/
        /** SEE[ DOC/TRASH/005._ ]                       **/
        /** VID_IID[ 0145 ]TIME[ 02:43:23 ]              **/



        //:- - - - - - - - - - - -- - - - - - - - - - - -://  
    //:always_exists_error_string_macros:----------------://
                                                   //[ x ]//
        #undef  E_S_private                        //[ x ]//
        #undef  E_S                                //[ x ]//
                                                   //[ x ]//
    //:----------------:always_exists_error_string_macros://
    //:type_macros:--------------------------------------://
                                                   //[ x ]//
        #undef  F32      //:  01  ://              //[ x ]//
        #undef  U32      //:  02  ://              //[ x ]//
        #undef  I32      //:  03  ://              //[ x ]//
        #undef  IV2      //:  04  ://              //[ x ]//
        #undef  UV4      //:  05  ://              //[ x ]//
        #undef  T_F      //:  06  ://              //[ x ]//
        #undef  TAU      //:  07  ://              //[ x ]//
        #undef  P5D      //:  08  ://              //[ x ]//
        #undef  SAM      //:  09  ://              //[ x ]//
        #undef  UFF      //:  10  ://              //[ x ]//
        #undef  U00      //:  11  ://              //[ x ]//
        #undef  I00      //:  12  ://              //[ x ]//
        #undef  U03      //:  13  ://              //[ x ]//
        #undef  B_3      //:  14  ://              //[ x ]//
        #undef  B11      //:  15  ://              //[ x ]//
        #undef  H55      //:  16  ://              //[ x ]//
        #undef  V_A      //:  17  ://              //[ x ]//
        #undef  FV4      //:  18  ://              //[ x ]//
        #undef  ASS      //:  19  ://              //[ x ]//
        #undef  ERR      //:  20  ://              //[ x ]//
                                                   //[ x ]//
    //:--------------------------------------:type_macros://
    //:seven_letter_macros:------------------------------://
    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/
    /** Decided on [MAK] for [MAKE] as our constructor   **/
    /** postfix ........................................ **/
                                                   //[ x ]//
        #undef  MAK_FV4                            //[ 1 ]//
        #undef  MAK_IV2                            //[ 2 ]//
        #undef  MAK_I32                            //[ 3 ]//
        #undef  MAK_F32                            //[ 4 ]//
        #undef  BIN_011                            //[ 5 ]//
        #undef  CUVIPIX                            //[ 6 ]//
        #undef  TYP_F_C                            //[ 7 ]//
        #undef  INN_F_C                            //[ 8 ]//
        //:----------------------------------------------://
        #undef  FLO_NAT  //:.........................[ 9 ]//
        #undef  FLO_F32  //:.........................[10 ]//
        #undef  ROU_NAT  //:.........................[11 ]//
        #undef  ROU_F32  //:.........................[12 ]//
        #undef  CEL_NAT  //:.........................[13 ]//
        #undef  CEL_F32  //:.........................[14 ]//
        #undef  COF_F32  //:.........................[15 ]//
                     
    //:------------------------------:seven_letter_macros://
    //:===========:COM_001____AAC2020_FRAGCOM_DEFAULT_001://  
    //[=====================:PASTE_INTO_FILE[ COM_001._ ]]//
    //[======================:AAC2020_FRAGCOM_DEFAULT_001]//
    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//