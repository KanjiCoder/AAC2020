"//:THIS_FILE[ tilodat_CTO_tilpixu._ ]\n"
"//:U32_VERSION_IN_TRASH[ R:/AAC/AAC2020/DOC/000/TRASH/015._ ]\n"
"    //# DO_NOT_PUT_DOUBLE_OR_SINGLE_QUOTES_IN_THIS_FILE! #//\n"
"    //[ The shader pipeline pre-processes this file by   ]//\n"
"    //[ quoting it. Back slash characters can also lead  ]//\n"
"    //[ to problems as wel. -John Mark Isaac Madison     ]//        \n"
"    //# BACK_SLASHES_ARE_ALSO_A_VERY_BAD_IDEA_TOO!!!!!!! #//\n"
"    /** ************************************************ ***\n"
"    @param aus_dex : AUtotileSet_inDEX\n"
"                     Maybe you want to use a different\n"
"                     pallet for different auto tile sets.\n"
"                     aus_dex range: 0 to 15 inclusive\n"
"    @param til_lay : TILe_LAYer\n"
"                     There are 3 layers for an auto tile\n"
"                     set design. [ 0 | 1 | 2 ]\n"
"    @param til_exp : TILe_EXPonent\n"
"                     A number[ 0 -to- 7 ]inclusive.\n"
"                     Tells us the relative size of the tile.\n"
"                     0 == 2^0 ==  1 (  1 pebble(s) in size)\n"
"                     1 == 2^1 ==  2 (  2 pebble(s) in size)\n"
"                     2 == 2^2 ==  4 (  4 pebble(s) in size)\n"
"                     3 == 2^3 ==  8 (  8 pebble(s) in size)\n"
"                     4 == 2^4 == 16 ( 16 pebble(s) in size)\n"
"                     5 == 2^5 == 32 ( 32 pebble(s) in size)\n"
"                     6 == 2^6 == 64 ( 64 pebble(s) in size)\n"
"                     7 == 2^7 ==128 (128 pebble(s) in size)\n"
"    @param til_val : TILe_VALue\n"
"                     A number[ 0 -to- 3 ]inclusive.\n"
"                     0 is used for[ nothingness ]by \n"
"                     convention. But nothing is stopping \n"
"                     you from doing something different\n"
"                     with it. Value[ 0 ]will still auto\n"
"                     tile like any other tile value.\n"
"    @param tou_val : TOUching_VALue\n"
"                     A number[ 0 -to- 15 ]inclusive.        \n"
"                     Tells us what conceptual[ sub tile ]\n"
"                     to grab. Since we are doing auto \n"
"                     tiling with shaders and __NOT__ with\n"
"                     oldschool bitmap graphics... there is\n"
"                     no physical sub tile to grab. But\n"
"                     you still need this value if you \n"
"                     are implementing auto-tile style\n"
"                     rendering for the different \n"
"                     tile values.\n"
"    @param tilop_x : Tile_Internal_LOcal_Percentage_X\n"
"                     A percent coorinate from -1.0 to +1.0\n"
"                     used to map a fragment coordinate to\n"
"                     the interior of tile being rendered.\n"
"                     0.0 is the dead center.\n"
"    @param tilop_y : Tile_Internal_LOcal_Percentage_Y\n"
"                     Same as [ tilop_x ]but Y-axis.\n"
"                     IMPORTANT!!!:\n"
"                     Graphical top-left origin.\n"
"                     Top    of tile == -1.0\n"
"                     Bottom of tile == +1.0\n"
"    *** ************************************************ **/\n"
"    FV4\n"
"    AAC2020_PAINT5D_RENCORE_tilodat_CTO_tilpixu(\n"
"        I32 aus_dex //:AKA[ aus_dex / a_d ]\n"
"    ,   I32 til_lay //:AKA[ til_lay / t_l ] \n"
"    ,   I32 til_exp //:AKA[ til_exp / t_e ] \n"
"    ,   U32 til_val //:AKA[ til_val / t_v ] \n"
"    ,   U32 tou_val //:AKA[ tou_val / tou ]\n"
"    ,   F32 tilop_x //:AKA[ tilop_x / p_x ]\n"
"    ,   F32 tilop_y //:AKA[ tilop_y / p_y ] \n"
"    )\n"
"    {\n"
"        FV4 tilpixu;\n"
"        if( aus_dex >       0  ){ /** NOOP **/ };\n"
"        if( til_lay >       0  ){ /** NOOP **/ };\n"
"        if( til_exp >       0  ){ /** NOOP **/ };\n"
"        if( til_val > U32_000  ){ /** NOOP **/ };\n"
"        if( tou_val > U32_000  ){ /** NOOP **/ };\n"
"        if( tilop_x >     0.0  ){ /** NOOP **/ };\n"
"        if( tilop_y >     0.0  ){ /** NOOP **/ };\n"
"        F32\n"
"        f32_gra=( /** Float32_GRAdient **/\n"
"        MAX_F32( ABS_F32( tilop_x ) , ABS_F32( tilop_y ) )\n"
"        );;\n"
"        if( U32_000 == til_val ){\n"
"            //:Transparent Black Makes The Most Sense\n"
"            //:for nothingness\n"
"            tilpixu.x =( 0.0 );\n"
"            tilpixu.y =( 0.0 );\n"
"            tilpixu.z =( 0.0 );\n"
"            tilpixu.w =( 0.0 );\n"
"        }else{\n"
"            //:Keep it simple. Lets do a different base\n"
"            //:Color for each layer.\n"
"            if( 0 == til_lay ){\n"
"                //:Background is white or gray layer:\n"
"                tilpixu.x =( 1.0 ); //:RED://\n"
"                tilpixu.y =( 1.0 ); //:GRE://\n"
"                tilpixu.z =( 1.0 ); //:BLU://\n"
"                tilpixu.w =( 1.0 ); //:ALP://\n"
"            }else\n"
"            if( 1 == til_lay ){\n"
"                //:EarthTone Red:\n"
"                tilpixu.x =( 0.5 ); //:RED://\n"
"                tilpixu.y =( 0.4 ); //:GRE://\n"
"                tilpixu.z =( 0.4 ); //:BLU://\n"
"                tilpixu.w =( 1.0 ); //:ALP://\n"
"            }else\n"
"            if( 2 == til_lay ){\n"
"                //:Decently saturated orange:\n"
"                tilpixu.x =( 1.0 ); //:RED://\n"
"                tilpixu.y =( 0.5 ); //:GRE://\n"
"                tilpixu.z =( 0.1 ); //:BLU://\n"
"                tilpixu.w =( 1.0 ); //:ALP://\n"
"            };;\n"
"        };;\n"
"        //: Add 0.25 red or blue for certain tile values:\n"
"        if( U32_000 == til_val ){\n"
"            /** Do nothing. Empty Space Tile **/\n"
"        }else\n"
"        if( U32_001 == til_val ){\n"
"            /** Do nothing. Keep base color. **/\n"
"        }else\n"
"        if( U32_002 == til_val ){\n"
"            tilpixu.z += 0.25 ;\n"
"        }else\n"
"        if( U32_003 == til_val ){\n"
"            tilpixu.z += 0.50 ;\n"
"        };;\n"
"        //:Multiply with the auto tiling gradient to\n"
"        //:get our gradient ramping effects:\n"
"        //:TODO: We need TWO auto tile gradients...\n"
"        //:      AUTO_GRAD_001: Defines shading.\n"
"        //:      AUTO_GRAD_002: Defines alpha masking.\n"
"        tilpixu.x =( f32_gra * tilpixu.x );\n"
"        tilpixu.y =( f32_gra * tilpixu.y );\n"
"        tilpixu.z =( f32_gra * tilpixu.z );\n"
"        tilpixu.w =(   1.0   * tilpixu.w );\n"
"        return( tilpixu );\n"
"    }\n"
"    //# DO_NOT_PUT_DOUBLE_OR_SINGLE_QUOTES_IN_THIS_FILE! #//\n"
"    //[ The shader pipeline pre-processes this file by   ]//\n"
"    //[ quoting it. Back slash characters can also lead  ]//\n"
"    //[ to problems as wel. -John Mark Isaac Madison     ]//        \n"
"    //# BACK_SLASHES_ARE_ALSO_A_VERY_BAD_IDEA_TOO!!!!!!! #//\n"
