#include "./POLYOGL.___.LIBCHAN_ORDER_ENFORCER._"
//:GLSL_POLYFILLS_GAURD:*************************************://
    #ifdef MACRO_THIS_IS_GLSL
        #error THIS_IS_NOT_GLSL_CODE_2021
    #endif
//:*************************************:GLSL_POLYFILLS_GAURD://
//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://
    void 
    aac2020_polyogl_Halt( const char* msg_err )
    {
        printf("[FATAL_ERROR:aac2020_polyogl]:%s\n", msg_err );
        fflush(stdout);
        exit( 114 /** 11:46 PM RIGHT NOW **/ );
    }
//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:INIT_NONE:================================================://
#define U32 uint32_t /** GCC: <stdint.h> **/
    U32 AAC2020_POLYOGL_InitNone( U32 u32 ){
        if( u32 ){  };return( 0x00 ); /** #_INIT_NONE_HOW_# **/
    }
#undef  U32
//:================================================:INIT_NONE://
//:DO_NOT_PASTE_INTO_GLSL_CODE:******************************://
#define     U08  uint8_t /** GCC: <stdint.h> **/      //: 01 ://
                                                      //: -- ://
#define     F32   float                               //: 02 ://
#define     U32 uint32_t /** GCC: <stdint.h> **/      //: 03 ://
#define     I32  int32_t /** GCC: <stdint.h> **/      //: 04 ://
                                                      //: -- ://
#define     FV2   struct AAC2020_POLYOGL_FV2          //: 05 ://
#define     FV3   struct AAC2020_POLYOGL_FV3          //: 06 ://
#define     FV4   struct AAC2020_POLYOGL_FV4          //: 07 ://
                                                      //: -- ://
#define     UV2   struct AAC2020_POLYOGL_UV2          //: 08 ://
#define     UV3   struct AAC2020_POLYOGL_UV3          //: 09 ://
#define     UV4   struct AAC2020_POLYOGL_UV4          //: 10 ://
                                                      //: -- ://
#define     IV2   struct AAC2020_POLYOGL_IV2          //: 11 ://
#define     IV3   struct AAC2020_POLYOGL_IV3          //: 12 ://
#define     IV4   struct AAC2020_POLYOGL_IV4          //: 13 ://
                                                      //: -- ://
#define     FM2   struct AAC2020_POLYOGL_FM2          //: 14 ://
#define     FM3   struct AAC2020_POLYOGL_FM3          //: 15 ://
#define     FM4   struct AAC2020_POLYOGL_FM4          //: 16 ://
                                                      //: -- ://
#define FLO_F32   AAC2020_POLYOGL_FLO_F32             //: 17 ://
#define ROU_F32   AAC2020_POLYOGL_ROU_F32             //: 18 ://
#define CEL_F32   AAC2020_POLYOGL_CEL_F32             //: 19 ://
#define COF_F32   AAC2020_POLYOGL_COF_F32             //: 20 ://                  
                                                      //: -- ://
#define     SAM      int /** IGNORED IN [C99/C11] **/ //: 21 ://
#define     ERR   aac2020_polyogl_Halt                //: 22 ://
            
    //:LINEAR_ALGEBRA_FUNCTIONS:=============================://

        F32
        AAC2020_POLYOGL_DOT_FV2(
            FV2 aye
        ,   FV2 bee
        )
        {
            F32 dot_f32 =( 0
                    + (aye.x*bee.x) //:X_COMPONENTS
                    + (aye.y*bee.y) //:Y_COMPONENTS
                    );;
            return( dot_f32 );
        }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
        F32
        AAC2020_POLYOGL_DOT_FV3(
            FV3 aye
        ,   FV3 bee
        )
        {
            F32 dot_f32 =( 0
                    + (aye.x*bee.x) //:X_COMPONENTS
                    + (aye.y*bee.y) //:Y_COMPONENTS
                    + (aye.z*bee.z) //:Z_COMPONENTS
                    );;
            return( dot_f32 );
        }

    //:=============================:LINEAR_ALGEBRA_FUNCTIONS://
    //:TRIG_FUNCTIONS:=======================================://

        //:PARAMETRIC_CIRCLE: @VID_IID[0296]TIME[00:07:32 ] :://
        //:  x =( origin + ( cos(ang) * rad ) )             :://
        //:  y =( origin + ( sin(ang) * rad ) )             :://

        F32
        AAC2020_POLYOGL_COS_F32( 
            F32 f32
        )
        {
            return( cosf( f32 ) );
        }

        F32
        AAC2020_POLYOGL_SIN_F32(
            F32 f32
        )
        {
            return( sinf( f32 ) );
        }

    //:=======================================:TRIG_FUNCTIONS://
    //:GLSL_POLYFILL:MAX_MIN_ABS:============================://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        F32
        AAC2020_POLYOGL_ABS_F32(
            F32 f32
        )
        {
            F32 out_f32 ; 

            if( f32 < 0 ){
                out_f32 =( 0 - f32 );
            }else{
                out_f32 =( 0 + f32 );
            };;

            return( out_f32 );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        F32
        AAC2020_POLYOGL_MAX_F32(
            F32 aye
        ,   F32 bee
        )
        {
            F32 f32=( 0 );
            if( aye > bee ){ f32=( aye ); };
            if( bee > aye ){ f32=( bee ); };
            return( f32 );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        I32
        AAC2020_POLYOGL_MAX_I32(
            I32 aye
        ,   I32 bee
        )
        {
            I32 i32=( 0 );
            if( aye > bee ){ i32=( aye ); };
            if( bee > aye ){ i32=( bee ); };
            return( i32 );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        F32
        AAC2020_POLYOGL_MIN_F32(
            F32 aye
        ,   F32 bee
        )
        {
            F32 f32=( 0 );
            if( aye < bee ){ f32=( aye ); };
            if( bee < aye ){ f32=( bee ); };
            return( f32 );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        I32
        AAC2020_POLYOGL_MIN_I32(
            I32 aye
        ,   I32 bee
        )
        {
            I32 i32=( 0 );
            if( aye < bee ){ i32=( aye ); };
            if( bee < aye ){ i32=( bee ); };
            return( i32 );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    //:============================:GLSL_POLYFILL:MAX_MIN_ABS://
    //:GLSL_POLYFILL:FLOOR_ROUND_CEIL:=======================://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
            //:GLSL_POLYFILL:FLOOR:==========================://
                //:GLSL_POLYFILL:FLOOR_Native:---------------://
                    F32
                    AAC2020_POLYOGL_FLO_NAT(
                        F32 f32
                    )
                    {
                        /**     floor: found in <math.h> **/
                        return( floorf( f32 ) );
                    }
                //:---------------:GLSL_POLYFILL:FLOOR_Native://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
                //:GLSL_POLYFILL:FLOOR_Float32:--------------://
                    I32
                    AAC2020_POLYOGL_FLO_F32(
                        F32 f32
                    )
                    {
                        I32 i32=((I32)(  
                            AAC2020_POLYOGL_FLO_NAT( f32 ) 
                        ));;
                        return( i32 );
                    }
                //:--------------:GLSL_POLYFILL:FLOOR_Float32://
            //:==========================:GLSL_POLYFILL:FLOOR://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
            //:GLSL_POLYFILL:ROUND:==========================://
                //:GLSL_POLYFILL:Round_Native:---------------://
                    F32
                    AAC2020_POLYOGL_ROU_NAT(
                        F32 f32
                    )
                    {
                        /**     round: found in <math.h> **/
                        return( round( f32 ) );
                    }
                //:---------------:GLSL_POLYFILL:Round_Native://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
                //:GLSL_POLYFILL:Round_Float32:--------------://
                    I32
                    AAC2020_POLYOGL_ROU_F32(
                        F32 f32
                    )
                    {
                        I32 i32=((I32)(  
                            AAC2020_POLYOGL_ROU_NAT( f32 ) 
                        ));;
                        return( i32 );
                    }
                //:--------------:GLSL_POLYFILL:Round_Float32://
            //:==========================:GLSL_POLYFILL:ROUND://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
            //:GLSL_POLYFILL:CEIL:===========================://
                //:GLSL_POLYFILL:Ceil_Native:----------------://
                    F32
                    AAC2020_POLYOGL_CEL_NAT(
                        F32 f32
                    )
                    {
                        /**     ceil: found in <math.h> **/
                        return( ceilf( f32 ) );
                    }
                //:----------------:GLSL_POLYFILL:Ceil_Native://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
                //:GLSL_POLYFILL:Ceil_Float32:---------------://
                    I32
                    AAC2020_POLYOGL_CEL_F32(
                        F32 f32
                    )
                    {
                        I32 i32=((I32)(  
                            AAC2020_POLYOGL_CEL_NAT( f32 ) 
                        ));;
                        return( i32 );
                    }
                //:---------------:GLSL_POLYFILL:Ceil_Float32://
            //:===========================:GLSL_POLYFILL:CEIL://

    //:=======================:GLSL_POLYFILL:FLOOR_ROUND_CEIL://
    //:HACKISH_CEIL_OR_FLOOR_DEPENDING:======================://

        I32                                           //:://
        AAC2020_POLYOGL_COF_F32(                      //:://
        /**/I32 i32 //:<--  upscaling?                //:://
        ,   F32 f32 //:<--[ value ].                  //:://
        )                                             //:://
        {                                             //:://
            /** i32 ==  ((d_1-d_0)>(s_1-s_0)) **/     //:://
            I32 cof_res; //:Ceil_Or_Floor:RESult      //:://
                                                      //:://
            if( i32 >= 1 ){                           //:://
                cof_res = CEL_F32( f32 );             //:://
            }else{                                    //:://
                cof_res = FLO_F32( f32 );             //:://
            };;                                       //:://
            return( cof_res );                        //:://
        }                                             //:://

    //:======================:HACKISH_CEIL_OR_FLOOR_DEPENDING://
    //:MULTIPLY_FUNCTIONS:===================================://
        FV2
        AAC2020_POLYOGL_MUL_FV2_FV2(
            FV2 aye
        ,   FV2 bee
        ){
            FV2 res ={ 0 };

            res.x =( aye.x * bee.x );
            res.y =( aye.y * bee.y );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_MUL_FV3_FV3(
            FV3 aye
        ,   FV3 bee
        ){
            FV3 res ={ 0 };

            res.x =( aye.x * bee.x );
            res.y =( aye.y * bee.y );
            res.z =( aye.z * bee.z );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV4
        AAC2020_POLYOGL_MUL_FV4_FV4(
            FV4 aye
        ,   FV4 bee
        ){
            FV4 res ={ 0 };

            res.x =( aye.x * bee.x );
            res.y =( aye.y * bee.y );
            res.z =( aye.z * bee.z );
            res.w =( aye.w * bee.w );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_MUL_FV3_F32(
            FV3 fv3
        ,   F32 f32
        ){
            FV3 res ={ 0 };

            res.x =( fv3.x * f32 );
            res.y =( fv3.y * f32 );
            res.z =( fv3.z * f32 );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_MUL_F32_FV3(
            F32 f32
        ,   FV3 fv3
        ){
            FV3 res ={ 0 };

            res.x =( fv3.x * f32 );
            res.y =( fv3.y * f32 );
            res.z =( fv3.z * f32 );

            return( res );
        }
    //:===================================:MULTIPLY_FUNCTIONS://
    //:DIVIDE_FUNCTIONS:=====================================://
        FV2
        AAC2020_POLYOGL_DIV_FV2_FV2(
            FV2 aye
        ,   FV2 bee
        ){
            FV2 res ={ 0 };

            res.x =( aye.x / bee.x );
            res.y =( aye.y / bee.y );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_DIV_FV3_FV3(
            FV3 aye
        ,   FV3 bee
        ){
            FV3 res ={ 0 };

            res.x =( aye.x / bee.x );
            res.y =( aye.y / bee.y );
            res.z =( aye.z / bee.z );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV4
        AAC2020_POLYOGL_DIV_FV4_FV4(
            FV4 aye
        ,   FV4 bee
        ){
            FV4 res ={ 0 };

            res.x =( aye.x / bee.x );
            res.y =( aye.y / bee.y );
            res.z =( aye.z / bee.z );
            res.w =( aye.w / bee.w );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_DIV_FV3_F32(
            FV3 fv3
        ,   F32 f32
        ){
            FV3 res ={ 0 };

            res.x =( fv3.x / f32 );
            res.y =( fv3.y / f32 );
            res.z =( fv3.z / f32 );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_DIV_F32_FV3(
            F32 f32
        ,   FV3 fv3
        ){
            FV3 res ={ 0 };

            res.x =( f32 / fv3.x );
            res.y =( f32 / fv3.y );
            res.z =( f32 / fv3.z );

            return( res );
        }
    //:=====================================:DIVIDE_FUNCTIONS://
    //:ADDITION_FUNCTIONS:===================================://
        FV2
        AAC2020_POLYOGL_ADD_FV2_FV2(
            FV2 aye
        ,   FV2 bee
        ){
            FV2 res ={ 0 };

            res.x =( aye.x + bee.x );
            res.y =( aye.y + bee.y );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_ADD_FV3_FV3(
            FV3 aye
        ,   FV3 bee
        ){
            FV3 res ={ 0 };

            res.x =( aye.x + bee.x );
            res.y =( aye.y + bee.y );
            res.z =( aye.z + bee.z );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV4
        AAC2020_POLYOGL_ADD_FV4_FV4(
            FV4 aye
        ,   FV4 bee
        ){
            FV4 res ={ 0 };

            res.x =( aye.x + bee.x );
            res.y =( aye.y + bee.y );
            res.z =( aye.z + bee.z );
            res.w =( aye.w + bee.w );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_ADD_FV3_F32(
            FV3 fv3
        ,   F32 f32
        ){
            FV3 res ={ 0 };

            res.x =( fv3.x + f32 );
            res.y =( fv3.y + f32 );
            res.z =( fv3.z + f32 );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_ADD_F32_FV3(
            F32 f32
        ,   FV3 fv3
        ){
            FV3 res ={ 0 };

            res.x =( f32 + fv3.x );
            res.y =( f32 + fv3.y );
            res.z =( f32 + fv3.z );

            return( res );
        }
    //:===================================:ADDITION_FUNCTIONS://
    //:SUBTRACT_FUNCTIONS:===================================://
        FV2
        AAC2020_POLYOGL_SUB_FV2_FV2(
            FV2 aye
        ,   FV2 bee
        ){
            FV2 res ={ 0 };

            res.x =( aye.x - bee.x );
            res.y =( aye.y - bee.y );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_SUB_FV3_FV3(
            FV3 aye
        ,   FV3 bee
        ){
            FV3 res ={ 0 };

            res.x =( aye.x - bee.x );
            res.y =( aye.y - bee.y );
            res.z =( aye.z - bee.z );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV4
        AAC2020_POLYOGL_SUB_FV4_FV4(
            FV4 aye
        ,   FV4 bee
        ){
            FV4 res ={ 0 };

            res.x =( aye.x - bee.x );
            res.y =( aye.y - bee.y );
            res.z =( aye.z - bee.z );
            res.w =( aye.w - bee.w );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_SUB_FV3_F32(
            FV3 fv3
        ,   F32 f32
        ){
            FV3 res ={ 0 };

            res.x =( fv3.x - f32 );
            res.y =( fv3.y - f32 );
            res.z =( fv3.z - f32 );

            return( res );
        }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
        FV3
        AAC2020_POLYOGL_SUB_F32_FV3(
            F32 f32
        ,   FV3 fv3
        ){
            FV3 res ={ 0 };

            res.x =( f32 - fv3.x );
            res.y =( f32 - fv3.y );
            res.z =( f32 - fv3.z );

            return( res );
        }
    //:===================================:SUBTRACT_FUNCTIONS://
    //:MISC_MATH_FUNCTIONS:==================================://

        //:natural_eulers_exponent:--------------------------://
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            F32
            AAC2020_POLYOGL_EXP_F32(
                F32 f32
            ){
                return( expf( f32 ) );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FV2
            AAC2020_POLYOGL_EXP_FV2(
                FV2 fv2
            ){
                FV2 res={0};
                    res.x=AAC2020_POLYOGL_EXP_F32( fv2.x );
                    res.y=AAC2020_POLYOGL_EXP_F32( fv2.y );
                return( res );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FV3
            AAC2020_POLYOGL_EXP_FV3(
                FV3 fv3
            ){
                FV3 res={0};
                    res.x=AAC2020_POLYOGL_EXP_F32( fv3.x );
                    res.y=AAC2020_POLYOGL_EXP_F32( fv3.y );
                    res.z=AAC2020_POLYOGL_EXP_F32( fv3.z );
                return( res );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FV4
            AAC2020_POLYOGL_EXP_FV4(
                FV4 fv4
            ){
                FV4 res={0};
                    res.x=AAC2020_POLYOGL_EXP_F32( fv4.x );
                    res.y=AAC2020_POLYOGL_EXP_F32( fv4.y );
                    res.z=AAC2020_POLYOGL_EXP_F32( fv4.z );
                    res.w=AAC2020_POLYOGL_EXP_F32( fv4.w );
                return( res );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
        //:--------------------------:natural_eulers_exponent://
        //:power_functions:----------------------------------://
            F32
            AAC2020_POLYOGL_POW_F32(
                F32 bas
            ,   F32 exp
            ){
                return( powf( bas , exp ) );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FV2
            AAC2020_POLYOGL_POW_FV2(
                FV2 bas
            ,   FV2 exp
            ){
                
                FV2 res={0};
                res.x=AAC2020_POLYOGL_POW_F32( bas.x , exp.x );
                res.y=AAC2020_POLYOGL_POW_F32( bas.y , exp.y );
                return( res );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FV3
            AAC2020_POLYOGL_POW_FV3(
                FV3 bas
            ,   FV3 exp
            ){
                
                FV3 res={0};
                res.x=AAC2020_POLYOGL_POW_F32( bas.x , exp.x );
                res.y=AAC2020_POLYOGL_POW_F32( bas.y , exp.y );
                res.z=AAC2020_POLYOGL_POW_F32( bas.z , exp.z );
                return( res );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FV4
            AAC2020_POLYOGL_POW_FV4(
                FV4 bas
            ,   FV4 exp
            ){
                
                FV4 res={0};
                res.x=AAC2020_POLYOGL_POW_F32( bas.x , exp.x );
                res.y=AAC2020_POLYOGL_POW_F32( bas.y , exp.y );
                res.z=AAC2020_POLYOGL_POW_F32( bas.z , exp.z );
                res.w=AAC2020_POLYOGL_POW_F32( bas.w , exp.w );
                return( res );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            U32
            AAC2020_POLYOGL_POW_U32(
                U32 bas
            ,   U32 exp
            ){  /**@VID_IID[ 0296 ]TIME[ 07:25:00 ] ---------**/
                /**NEVER_USE_THIS_FUNCTION_YOU_FOOL!         **/
                /**thebookofshaders.com/glossary/?search=pow **/
                ERR("[GLSL_HAS_NO_SUCH_OVERLOAD:POW_U32]");
                if( bas + exp > 0 ){ /**NOOP**/ };
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            I32
            AAC2020_POLYOGL_POW_I32(
                I32 bas
            ,   I32 exp
            ){  /**@VID_IID[ 0296 ]TIME[ 07:25:42 ] ---------**/
                /**NEVER_USE_THIS_FUNCTION_YOU_FOOL!         **/
                /**thebookofshaders.com/glossary/?search=pow **/
                ERR("[GLSL_HAS_NO_SUCH_OVERLOAD:POW_I32]");
                if( bas + exp > 0 ){ /**NOOP**/ };
            }
        //:----------------------------------:power_functions://
        //:fractional_part_functions:------------------------://
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            F32
            AAC2020_POLYOGL_FRA_F32( /** GLSL's[ fract ]Func **/
                F32 f32_inn
            ){
            /** ************************************************
            GLSL Documentation Says:
            fract returns the fractional part of x. 
            This is calculated as x - floor(x).
            *** ***********************************************/

                return( f32_inn - FLO_F32( f32_inn ) );
            }
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            FV2
            AAC2020_POLYOGL_FRA_FV2( /** GLSL's[ fract ]Func **/
                FV2 fv2
            ){
                FV2 res ={ 0 };
                    res.x =( AAC2020_POLYOGL_FRA_F32( fv2.x ));
                    res.y =( AAC2020_POLYOGL_FRA_F32( fv2.y ));
                return( res );
            }
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            FV3
            AAC2020_POLYOGL_FRA_FV3( /** GLSL's[ fract ]Func **/
                FV3 fv3
            ){
                FV3 res ={ 0 };
                    res.x =( AAC2020_POLYOGL_FRA_F32( fv3.x ));
                    res.y =( AAC2020_POLYOGL_FRA_F32( fv3.y ));
                    res.z =( AAC2020_POLYOGL_FRA_F32( fv3.z ));
                return( res );
            }
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            FV4
            AAC2020_POLYOGL_FRA_FV4( /** GLSL's[ fract ]Func **/
                FV4 fv4
            ){
                FV4 res ={ 0 };
                    res.x =( AAC2020_POLYOGL_FRA_F32( fv4.x ));
                    res.y =( AAC2020_POLYOGL_FRA_F32( fv4.y ));
                    res.z =( AAC2020_POLYOGL_FRA_F32( fv4.z ));
                    res.w =( AAC2020_POLYOGL_FRA_F32( fv4.w ));
                return( res );
            }
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
        //:------------------------:fractional_part_functions://
        //:distance_formulas:--------------------------------://
        #define X_0 ( aye.x )
        #define X_1 ( bee.x )
        #define Y_0 ( aye.y )
        #define Y_1 ( bee.y )
        #define Z_0 ( aye.z )
        #define Z_1 ( bee.z )
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            F32
            AAC2020_POLYOGL_DIS_FV2(
                FV2 aye //:[ X_0 & Y_0 ]://
            ,   FV2 bee //:[ X_1 & Y_1 ]://
            ){
                F32 dist_2d;
                    dist_2d=(sqrtf( 0.0
                          +powf((X_1-X_0),2.0)
                          +powf((Y_1-Y_0),2.0)
                        ));;
                return( dist_2d );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            F32
            AAC2020_POLYOGL_DIS_FV3(
                FV3 aye //:[ X_0 & Y_0 & Z_0 ]://
            ,   FV3 bee //:[ X_1 & Y_1 & Z_1 ]://
            ){
                F32 dist_3d;
                    dist_3d=(sqrtf( 0.0
                          +powf((X_1-X_0),2.0)
                          +powf((Y_1-Y_0),2.0)
                          +powf((Z_1-Z_0),2.0)
                        ));;
                return( dist_3d );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
        #undef  X_0  //:--------------------------------: 01 ://
        #undef  X_1  //:--------------------------------: 02 ://
        #undef  Y_0  //:--------------------------------: 03 ://
        #undef  Y_1  //:--------------------------------: 04 ://
        #undef  Z_0  //:--------------------------------: 05 ://
        #undef  Z_1  //:--------------------------------: 06 ://
        //:--------------------------------:distance_formulas://
        //:normalization:------------------------------------://
        #define DIS_FV2 AAC2020_POLYOGL_DIS_FV2 //:----------://
        #define DIS_FV3 AAC2020_POLYOGL_DIS_FV3 //:----------://

            FV3 
            AAC2020_POLYOGL_NOR_FV3(
                FV3 vec
            ){
                //: @VID_IID[0297]T[02:20:10]DISTANCE_FUNC  :://
                //: IS_OVERKILL_BECAUSE_YOU_PRETEND_VECTOR  :://
                //: IS_A_LINE_SEGMENT_AT_ORIGIN[ 0,0 ]      :://
                F32 dist_3d;
                    dist_3d=(sqrtf( 0.0
                          +powf((vec.x),2.0)
                          +powf((vec.y),2.0)
                          +powf((vec.z),2.0)
                        ));;

                FV3 res={0};
                    res.x=( vec.x / dist_3d );
                    res.y=( vec.y / dist_3d );
                    res.z=( vec.z / dist_3d );
                return( res );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FV2 
            AAC2020_POLYOGL_NOR_FV2(
                FV2 vec
            ){
                //: @VID_IID[0297]T[02:20:10]DISTANCE_FUNC  :://
                //: IS_OVERKILL_BECAUSE_YOU_PRETEND_VECTOR  :://
                //: IS_A_LINE_SEGMENT_AT_ORIGIN[ 0,0 ]      :://
                F32 dist_2d;
                    dist_2d=(sqrtf( 0.0
                          +powf((vec.x),2.0)
                          +powf((vec.y),2.0)
                        ));;

                FV2 res={0};
                    res.x=( vec.x / dist_2d );
                    res.y=( vec.y / dist_2d );
                return( res );
            }

        #undef  DIS_FV2  //:---------------------------------://
        #undef  DIS_FV3  //:---------------------------------://
        //:------------------------------------:normalization://

        F32
        AAC2020_POLYOGL_Trunc( /** GLSL's[ trunc ]Func ------**/
            F32 f32_inn
        ){
            F32 f32_out; //:Float32_OUTPUT         
            I32 i32_out; //:INT32___OUTPUT
        
            i32_out=( (I32)f32_inn );
            f32_out=( (F32)i32_out );

            return( f32_out );
        }


    //:==================================:MISC_MATH_FUNCTIONS://
    //:GLSL_POLYFILL_Get_IResolution:========================://
    
        //:@VID_IID[ 0116 ]TIME[ 00:12:32 ] **************** ://
        //:ACTUALLY. Not a polyfill. But a wrapper function  ://
        //:that needs two different implementations depending://
        //:on if it is running as [C99/C11] or GLSL.         ://
        //: ************************************************ ://
        FV2 
        AAC2020_POLYOGL_Get_iResolution( void ){
            /**   DNMF: Dont_Make_This_Function **/
            ERR("[DNMF:AAC2020_POLYOGL_Get_iResolution]");
            /**   USE[ P5D1OGL_GET_res_wid ] ........... **/
            /**   USE[ P5D1OGL_GET_res_hig ] ........... **/
            FV2 fv2 ={ 0-666 , 0-666 };
            return( fv2 );
        } 
        F32 
        AAC2020_POLYOGL_Get_iResolution_X( void ){
            /**   DNMF: Dont_Make_This_Function **/
            ERR("[DNMF:AAC2020_POLYOGL_Get_iResolution_X]");
            /**   USE[ P5D1OGL_GET_res_wid ] ........... **/
            return( (F32)0-666 );
        } 
        F32
        AAC2020_POLYOGL_Get_iResolution_Y( void ){
            /**  @CTRL_F_HELP@ : Get_Res_Y | Get_Res_Hig **/
            /**   DNMF: Dont_Make_This_Function          **/
            /**   USE[ P5D1OGL_GET_res_hig ] ........... **/
            ERR("[DNMF:AAC2020_POLYOGL_Get_iResolution_Y]");
            return( (F32)0-666 );
        } 
    //:========================:GLSL_POLYFILL_Get_IResolution://
    //:GLSL_POLYFILL_Get_iTime:==============================://

        F32
        AAC2020_POLYOGL_GET_iTime( void )
        {
            return( AAC2020_CPUNIFO_iTime );
        }

    //:==============================:GLSL_POLYFILL_Get_iTime://
    //:GLSL_POLYFILL_Get_IMouse:=============================://
    //:GLSL_POLYFILL_Get_iMouse:=============================://
    /** @VID_IID[ 0250 ]TIME[ 01:43:23 ]STUBBED_IN ********* **/
        
        F32 AAC2020_POLYOGL_Get_iMouse_X( void ){

            AAC2020_TODOMAN_Vital("[Get_iMouse_X]");
            return( 0 /** TODO: Do For Real. **/ );
        }
        F32 AAC2020_POLYOGL_Get_iMouse_Y( void ){

            AAC2020_TODOMAN_Vital("[Get_iMouse_Y]");
            return( 0 /** TODO: Do For Real. **/ );
        }

    //:=============================:GLSL_POLYFILL_Get_iMouse://
    //:=============================:GLSL_POLYFILL_Get_IMouse://
    //:GLSL_POLYFILL_TexelFetch:=============================://

        #if( AAC2020_CRASH_ON_VITAL_TODO >= 1 ) //:##########://

            /** @VID_IID[ 0116 ]TIME[ 00:44:10 ] **/
            #error "[IMPLEMENT:u32_sam:ON_CPU_C99_SIDE]"

        #endif //:###########################################://

        UV4
        AAC2020_POLYOGL_tex_fet(
            SAM u32_sam //:<--GLSL only. Zero For [C99/C11]  ://
        ,   IV2 glo
        ,   I32 levodet_ALWAYS_ZERO
        )
        {
            /** @VID_IID[ 0085 ]TIME[ 02:40:05 ] ******* **/
            /** @VID_IID[ 0092 ]TIME[ 01:06:40 ] ******* **/
            if(   u32_sam             ){ /** NOOP **/ };
            if(   levodet_ALWAYS_ZERO ){ /** NOOP **/ };
            /** **************************************** **/

            UV4 uv4; /** Output 32 bit pixel value. **/

            I32 glo_dex; /** Global Pixel Index **/
            I32 glo_com; /** Global Comp. Index **/
            glo_dex = glo.x + ( glo.y  *  512 );
            glo_com =( glo_dex * 4  );

            //:PICK_YOUR_MEMORY_BLOCK:-----------------------://
            #define TAU ( 0 ) /** SYSTEM 0 ==> TextureSlot 0 **/
            #define P5D ( 1 ) /** SYSTEM 1 ==> TextureSlot 1 **/

                U08* cpu_pix =((U08*)0);

                switch( u32_sam ){
                case ( TAU ) :{
                    cpu_pix = AAC2020_PIXNAME_taudepo_cpu_pix ;
                };;break;
                case ( P5D ) :{
                    cpu_pix = AAC2020_PIXNAME_paint5d_cpu_pix ;
                };;break;
                default:{
                    ERR("[BAD_TEXTURE_MEMORY_ENUM]");
                };;};;

            #undef  TAU  //: TAU == taudepo :-----------: 01 ://
            #undef  P5D  //: P5D == paint5d :-----------: 02 ://
            //:-----------------------:PICK_YOUR_MEMORY_BLOCK://
            //:NO_LONGER_BIT_PACKED:-------------------------://
            #define     CPU_PIX  cpu_pix
                    //: CPU_PIX ://
                uv4.x = CPU_PIX[ glo_com + 0 ] ; //:RED
                uv4.y = CPU_PIX[ glo_com + 1 ] ; //:GREEN
                uv4.z = CPU_PIX[ glo_com + 2 ] ; //:BLUE
                uv4.w = CPU_PIX[ glo_com + 3 ] ; //:ALPHA
                    //: CPU_PIX ://
            #undef      CPU_PIX
            //:-------------------------:NO_LONGER_BIT_PACKED://
           
            return( uv4 );
        }
    //:=============================:GLSL_POLYFILL_TexelFetch://
    //:MAK_***:||||||||||||||||||||||||||||||||||||||||||||||://
        //:MAKE_FV4_FV3_FV2:=================================://
            FV4
            AAC2020_POLYOGL_MAK_FV4(
                F32 f_x
            ,   F32 f_y
            ,   F32 f_z
            ,   F32 f_w
            )
            {
                FV4 fv4;
                fv4.x = ( f_x );
                fv4.y = ( f_y );
                fv4.z = ( f_z );
                fv4.w = ( f_w );
                return( fv4 );
            }
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            FV3
            AAC2020_POLYOGL_MAK_FV3(
                F32 f_x
            ,   F32 f_y
            ,   F32 f_z
            )
            {
                FV3 fv3;
                fv3.x = ( f_x );
                fv3.y = ( f_y );
                fv3.z = ( f_z );
                return( fv3 );
            }
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            FV2
            AAC2020_POLYOGL_MAK_FV2(
                F32 f_x
            ,   F32 f_y
            )
            {
                FV2 fv2;
                fv2.x = ( f_x );
                fv2.y = ( f_y );
                return( fv2 );
            }
        //:=================================:MAKE_FV4_FV3_FV2://
        //:GLSL_POLYFILL_Make_IV2:===========================://
            IV2
            AAC2020_POLYOGL_MAK_IV2(
                I32 i_x
            ,   I32 i_y
            )
            {
                IV2 iv2;
                iv2.x = ( i_x );
                iv2.y = ( i_y );
                return( iv2 );
            }
        //:===========================:GLSL_POLYFILL_Make_IV2://
        //:GLSL_POLYFILL_Make_U32:===========================://
            U32
            AAC2020_POLYOGL_MAK_U32(
                I32 i32
            )
            {
                U32 u32 =( (U32)i32 );
                return( u32 );
            }
        //:===========================:GLSL_POLYFILL_Make_U32://
        //:GLSL_POLYFILL_Make_I32:===========================://
            I32
            AAC2020_POLYOGL_MAK_I32(
                F32 f32
            )
            {
                I32 i32 =( (I32)f32 );
                return( i32 );
            }
        //:===========================:GLSL_POLYFILL_Make_I32://
        //:GLSL_POLYFILL_Make_F32:===========================://
            F32
            AAC2020_POLYOGL_MAK_F32(
                I32 i32
            )
            {
                F32 f32 =( (F32)i32 );
                return( f32 );
            }
        //:===========================:GLSL_POLYFILL_Make_F32://
        //:Make_Float_Matrixes:==============================://
        /** ************************************************ ***
        C99 NESTED ARRAY MEMORY LAYOUT:
            beginnersbook.com/2014/01/2d-arrays-in-c-example/
        *** ************************************************ **/
            FM2
            AAC2020_POLYOGL_MAK_FM2(
                F32 a_1 //:Top    of first  column
            ,   F32 a_2 //:Bottom of first  column

            ,   F32 b_1 //:Top    of second column
            ,   F32 b_2 //:Bottom of second column
            )
            {
                FM2     fm2={0};

                        fm2.col[0][0] =( a_1 );
                        fm2.col[0][1] =( a_2 );

                        fm2.col[1][0] =( b_1 );
                        fm2.col[1][1] =( b_2 );
                return( fm2 );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FM3
            AAC2020_POLYOGL_MAK_FM3(
                F32 a_1   //:Top    of 1st  column
            ,   F32 a_2   //:Middle of 1st  column
            ,   F32 a_3   //:Bottom of 1st  column

            ,   F32 b_1   //:Top    of 2nd  column
            ,   F32 b_2   //:Middle of 2nd  column
            ,   F32 b_3   //:Bottom of 2nd  column

            ,   F32 c_1   //:Top    of 3rd  column
            ,   F32 c_2   //:Middle of 3rd  column
            ,   F32 c_3   //:Bottom of 3rd  column
            )
            {
                FM3     fm3={0};

                        fm3.col[0][0] =( a_1 );
                        fm3.col[0][1] =( a_2 );
                        fm3.col[0][2] =( a_3 );

                        fm3.col[1][0] =( b_1 );
                        fm3.col[1][1] =( b_2 );
                        fm3.col[1][2] =( b_3 );

                        fm3.col[2][0] =( c_1 );
                        fm3.col[2][1] =( c_2 );
                        fm3.col[2][2] =( c_3 );

                return( fm3 );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
            FM4
            AAC2020_POLYOGL_MAK_FM4(
                F32 a_1   //: 1st_Column
            ,   F32 a_2   //: 1st_Column
            ,   F32 a_3   //: 1st_Column
            ,   F32 a_4   //: 1st_Column

            ,   F32 b_1   //: 2nd_Column
            ,   F32 b_2   //: 2nd_Column
            ,   F32 b_3   //: 2nd_Column
            ,   F32 b_4   //: 2nd_Column

            ,   F32 c_1   //: 3rd_Column
            ,   F32 c_2   //: 3rd_Column
            ,   F32 c_3   //: 3rd_Column
            ,   F32 c_4   //: 3rd_Column

            ,   F32 d_1   //: 4th_Column
            ,   F32 d_2   //: 4th_Column
            ,   F32 d_3   //: 4th_Column
            ,   F32 d_4   //: 4th_Column
            )
            {
                FM4     fm4={0};

                        fm4.col[0][0] =( a_1 );
                        fm4.col[0][1] =( a_2 );
                        fm4.col[0][2] =( a_3 );
                        fm4.col[0][3] =( a_4 );

                        fm4.col[1][0] =( b_1 );
                        fm4.col[1][1] =( b_2 );
                        fm4.col[1][2] =( b_3 );
                        fm4.col[1][3] =( b_4 );

                        fm4.col[2][0] =( c_1 );
                        fm4.col[2][1] =( c_2 );
                        fm4.col[2][2] =( c_3 );
                        fm4.col[2][3] =( c_4 );

                        fm4.col[3][0] =( d_1 );
                        fm4.col[3][1] =( d_2 );
                        fm4.col[3][2] =( d_3 );
                        fm4.col[3][3] =( d_4 );

                return( fm4 );
            }
        //: - - - - - - - - - - - -- - - - - - - - - - - - - ://
        //:==============================:Make_Float_Matrixes://
    //:||||||||||||||||||||||||||||||||||||||||||||||:MAK_***://
    //:MATRIX_OPERATIONS:====================================://

        

    //:====================================:MATRIX_OPERATIONS://
    //:MODULUS:==============================================://

        I32
        AAC2020_POLYOGL_MOD_I32(
            I32 inn_i32
        ,   I32 divisor
        )
        {
            return( inn_i32 % divisor );
        }

    //:==============================================:MODULUS://
    //:CONVERT_TO:(CTO_*):===================================://
        //:Convert_To_DEPRECATED_Longhanded:-----------------://

            F32
            AAC2020_POLYOGL_U32_cto_F32( //#@DEPRECATED@#//
                U32 u32
            ){
                return( (F32)u32 );
            }

            I32
            AAC2020_POLYOGL_U32_cto_I32( //#@DEPRECATED@#//
                U32 u32
            ){
                return( (I32)u32 );
            }

        //:-----------------:Convert_To_DEPRECATED_Longhanded://
        //:Convert_To_Shorthanded:---------------------------://

            U32
            AAC2020_POLYOGL_I32_U32(
            I32             i32
            ){  return((U32)i32 ); }

            I32
            AAC2020_POLYOGL_U32_I32(    
            U32             u32
            ){  return((I32)u32 ); }

            I32
            AAC2020_POLYOGL_F32_I32(
            F32             f32
            ){  return((I32)f32 ); }

        //:---------------------------:Convert_To_Shorthanded://

    //:===================================:(CTO_*):CONVERT_TO://

#undef      U08  //:------------------------------------: 01 ://
                 //:------------------------------------: -- ://
#undef      F32  //:------------------------------------: 02 ://
#undef      U32  //:------------------------------------: 03 ://
#undef      I32  //:------------------------------------: 04 ://
                 //:------------------------------------: -- ://
#undef      FV2  //:------------------------------------: 05 ://
#undef      FV3  //:------------------------------------: 06 ://
#undef      FV4  //:------------------------------------: 07 ://
                 //:------------------------------------: -- ://
#undef      UV2  //:------------------------------------: 08 ://
#undef      UV3  //:------------------------------------: 09 ://
#undef      UV4  //:------------------------------------: 10 ://
                 //:------------------------------------: -- ://
#undef      IV2  //:------------------------------------: 11 ://
#undef      IV3  //:------------------------------------: 12 ://
#undef      IV4  //:------------------------------------: 13 ://
                 //:------------------------------------: -- ://

#undef      FM2  //:------------------------------------: 14 ://
#undef      FM3  //:------------------------------------: 15 ://
#undef      FM4  //:------------------------------------: 16 ://

#undef  FLO_F32  //:------------------------------------: 17 ://
#undef  ROU_F32  //:------------------------------------: 18 ://
#undef  CEL_F32  //:------------------------------------: 19 ://
#undef  COF_F32  //:------------------------------------: 20 ://                  
                 //:------------------------------------: -- ://
#undef      SAM  //:------------------------------------: 21 ://
#undef      ERR  //:------------------------------------: 22 ://
//:******************************:DO_NOT_PASTE_INTO_GLSL_CODE://
//:*******************************************:GLSL_POLYFILLS://









