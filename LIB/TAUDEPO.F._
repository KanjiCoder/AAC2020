/** ******************************************************** ***

USAGE: PUT:

        AAC2020_TAUDEPO_Put( 
            AAC2020_TAUDEPO.TAU_015 //:DEX_TAU
        ,   AAC2020_TAUDEPO.PAINT5D //:DEX_SUB
        ,   AAC2020_TAUDEPO.P5D_VP1 //:DEX_VAR
        ,   x_0,x_1,y_0,y_1
        );;

USAGE: GET:

        AAC2020_TAUDEPO_Get( 
            AAC2020_TAUDEPO.TAU_015 //:DEX_TAU
        ,   AAC2020_TAUDEPO.PAINT5D //:DEX_SUB
        ,   AAC2020_TAUDEPO.P5D_VP1 //:DEX_VAR
        ,  &(x_0),&(x_1),&(y_0),&(y_1)
        );;

*** ******************************************************** **/
//:LOGGING_AND_HALTING:======================================://

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    void
    aac2020_taudepo_Info_any(
        const char* str_fmt
    ,   void*       poi_dat
    ){ if( AAC2020_SILENCE.TAUDEPO <= 0 ){
    
        printf("[AAC2020_TAUDEPO_Info_any]...\n");
        fflush(stdout);
        printf( str_fmt , poi_dat );
        printf("\n");
        fflush(stdout);

    };;}

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    void 
    aac2020_taudepo_Halt( const char* msg_err ){
        printf("[AAC2020_TAUDEPO_Halt:msg_err]:%s\n",msg_err);
        fflush(stdout);
        exit( 123 );
    }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

//:======================================:LOGGING_AND_HALTING://
//:COM:======================================================://
#define I32  int32_t      /** GCC: <stdint.h> **/     //: 01 ://
#define U08  uint8_t      /** GCC: <stdint.h> **/     //: 02 ://

    I32
    aac2020_taudepo_pix_dex(
        U08 DEX_TAU_000_015 //:EX: AAC2020_TAUDEPO_TAU_015
    ,   U08 DEX_SUB_000_015 //:EX: AAC2020_TAUDEPO_PAINT5D
    ,   U08 DEX_VAR_000_255 //:EX: AAC2020_TAUDEPO_P5D_VP0
    )
    {
        /** ************************************************ ***
        Use this as a template to write the GLSL equivalent.    
        This code reads+writes on the CPU side. We need a       
        version of this transcribed to GLSL to __read_only__    
        from the GPU side. ---------------------------------    
        *** ************************************************ **/

        I32 pix_dex=( 0 - 404 ); //:Return:Variable

        //:error_check_range_of_inputs:----------------------://

            assert( DEX_TAU_000_015 <=  15 );
            assert( DEX_SUB_000_015 <=  15 );
            
        /// assert( DEX_VAR_000_255 <= 255 );
            assert( sizeof( DEX_VAR_000_255 ) == 1 );

        //:----------------------:error_check_range_of_inputs://
        //:local_subcell_xy(s):------------------------------://

            //: dex_tau's cell location: SEE[ #DIA_TAU_CEL# ]
            I32 t_x =  DEX_TAU_000_015       %   4 ;
            I32 t_y = (DEX_TAU_000_015 - t_x)/   4 ;

            //: dex_sub's cell location: SEE[ #DIA_SUB_CEL# ]
            I32 s_x =  DEX_SUB_000_015       %   4 ;
            I32 s_y = (DEX_SUB_000_015 - s_x)/   4 ;

            //: dex_var's cell location: SEE[ #DIA_VAR_CEL# ]
            I32 v_x =  DEX_VAR_000_255       %  16 ;
            I32 v_y = (DEX_VAR_000_255 - v_x)/  16 ;

        //:------------------------------:local_subcell_xy(s)://
        //:check_our_math:-----------------------------------://
        #define ASS assert

            ASS( 512 / 4 == 128 ); //: 128x128_tau_cells 
            ASS( 128 / 4 ==  32 ); //: 032x032_sub_cells 
             
            ASS( 16 * 16 == 256 ); //:256 unique variables 
            ASS(  2 * 2  ==   4 ); //:  4 pixels per variable 
            ASS( 32 / 16 ==   2 ); //: 16 cells per sub-division    
            ASS( 32*32/256 == 4 ); //:  4_pixels_per_variable

        #undef  ASS
        //:-----------------------------------:check_our_math://
        //:global_pixel_xy_on_512x512:-----------------------://

            I32 p_x =( 0
            +  (t_x * (512 / 4) ) //: 128x128_tau_cells
            +  (s_x * (128 / 4) ) //: 032x032_sub_cells
            +  (v_x * (    2  ) ) //: 002x002 pixels per var
            );;                   //:(002x002:4_pixels_per_var)

            I32 p_y =( 0
            +  (t_y * (512 / 4) ) //: 128x128_tau_cells
            +  (s_y * (128 / 4) ) //: 032x032_sub_cells
            +  (v_y * (    2  ) ) //: 002x002 pixels per var 
            );;                   //:(002x002:4_pixels_per_var)

        //:-----------------------:global_pixel_xy_on_512x512://

        //:We are trying to return a 2x2 cluster of
        //:pixels sliced out from the texture. Thus
        //:the upper-left corner pixel should always
        //:be evenly divisible by 2 on both axis.
        assert( p_x % 2 == 0 ); //:<-- @UPPER_LEFT_PIXEL@
        assert( p_y % 2 == 0 ); //:<-- @UPPER_LEFT_PIXEL@

                //:XY_TO_INDEX_FORMULA_FOR_TOP_LEFT_PIXEL
                //:OF_OUR_2X2_CLUSTER_OF_PIXELS_REPRESENTING
                //:A_SINGLE_VARIABLE.
                pix_dex = p_x + ( 512 * p_y);
        return( pix_dex );
    }

#undef  I32                                           //: 01 ://
#undef  U08                                           //: 02 ://
//:======================================================:COM://
//:PUT:======================================================://
#define PUT AAC2020_TAUDEPO_Put /** @TAU_PUT@ **/     //: 01 ://
#define I32  int32_t      /** GCC: <stdint.h> **/     //: 02 ://
#define U32 uint32_t      /** GCC: <stdint.h> **/     //: 03 ://
#define U08  uint8_t      /** GCC: <stdint.h> **/     //: 04 ://
#define PIX AAC2020_PIXNAME_taudepo_cpu_pix           //: 05 ://
#define ERR aac2020_taudepo_Halt                      //: 06 ://

    /** #_CONSISTENT_SIGNATURES_TRUMP_PARANOID_ERROR_CHECKS_#**/

    U08
    AAC2020_TAUDEPO_Put( 
        U08 DEX_TAU_000_015 //:EX: AAC2020_TAUDEPO_TAU_015
    ,   U08 DEX_SUB_000_015 //:EX: AAC2020_TAUDEPO_PAINT5D
    ,   U08 DEX_VAR_000_255 //:EX: AAC2020_TAUDEPO_P5D_VP0

    ,   U32 val_001 //:<-- Data Slot #1, offset index == 0
    ,   U32 val_002 //:<-- Data Slot #2, offset index == 1
    ,   U32 val_003 //:<-- Data Slot #3, offset index == 2
    ,   U32 val_004 //:<-- Data Slot #4, offset index == 3
    )
    {
        aac2020_taudepo_CAT_BUG_Put++;

        //:error_check_inputs:-------------------------------://
            
            if( 0
            ||        DEX_TAU_000_015    >=  16 
            ||        DEX_SUB_000_015    >=  16 
            ||  ((I32)DEX_VAR_000_255)+0 >= 256 /**@STFU_GCC@**/
            ){
                /** @VID_IID[ 0054 ]TIME[ 3H 21M 41S ] **/
                ERR("[TAUDEPO:ARGUMENTS_ARE_OUT_OF_BOUNDS]");
            };;

        //:-------------------------------:error_check_inputs://
        //:DIRTY_SECTOR_MANAGEMENT:--------------------------://

            /** #_FIRST_TAUDIRT_ATTEMPT_WAS_WRONG_# **/
            
            aac2020_taudirt_DirtySectorUpdate(
                DEX_TAU_000_015  //: l_A (level: A)
            ,   DEX_SUB_000_015  //: l_B (level: B)
            ,   DEX_VAR_000_255  //: l_C (level: C)
            );;

        //:--------------------------:DIRTY_SECTOR_MANAGEMENT://

        I32 pix_dex = aac2020_taudepo_pix_dex(
            DEX_TAU_000_015
        ,   DEX_SUB_000_015        
        ,   DEX_VAR_000_255    
        );;

        //:      |<-------COMPONENT_INDEX-------->|
        //:      |    |<----- PIXEL_INDEX ------->|
        I32 c_1 = 4 * ( ( pix_dex +   0  +   0 ) );  //:TOP_LEF
        I32 c_2 = 4 * ( ( pix_dex +   1  +   0 ) );  //:TOP_RIG
        I32 c_3 = 4 * ( ( pix_dex +   0  + 512 ) );  //:BOT_LEF
        I32 c_4 = 4 * ( ( pix_dex +   1  + 512 ) );  //:BOT_RIG
        //:.........................| X |+| Y |..............://

        PIX[ c_1 + 0 ]=(U08)( ( val_001 >> 24 ) & 0xFF );
        PIX[ c_1 + 1 ]=(U08)( ( val_001 >> 16 ) & 0xFF );
        PIX[ c_1 + 2 ]=(U08)( ( val_001 >>  8 ) & 0xFF );
        PIX[ c_1 + 3 ]=(U08)( ( val_001 >>  0 ) & 0xFF );

        PIX[ c_2 + 0 ]=(U08)( ( val_002 >> 24 ) & 0xFF );
        PIX[ c_2 + 1 ]=(U08)( ( val_002 >> 16 ) & 0xFF );
        PIX[ c_2 + 2 ]=(U08)( ( val_002 >>  8 ) & 0xFF );
        PIX[ c_2 + 3 ]=(U08)( ( val_002 >>  0 ) & 0xFF );

        PIX[ c_3 + 0 ]=(U08)( ( val_003 >> 24 ) & 0xFF );
        PIX[ c_3 + 1 ]=(U08)( ( val_003 >> 16 ) & 0xFF );
        PIX[ c_3 + 2 ]=(U08)( ( val_003 >>  8 ) & 0xFF );
        PIX[ c_3 + 3 ]=(U08)( ( val_003 >>  0 ) & 0xFF );

        PIX[ c_4 + 0 ]=(U08)( ( val_004 >> 24 ) & 0xFF );
        PIX[ c_4 + 1 ]=(U08)( ( val_004 >> 16 ) & 0xFF );
        PIX[ c_4 + 2 ]=(U08)( ( val_004 >>  8 ) & 0xFF );
        PIX[ c_4 + 3 ]=(U08)( ( val_004 >>  0 ) & 0xFF );

       
        AAC2020_TODOMAN_Maybe("[Return_Bitmask_OfChangedVars]");
        return( 0x00 );
    }

#undef  PUT                                           //: 01 ://
#undef  I32                                           //: 02 ://
#undef  U32                                           //: 03 ://
#undef  U08                                           //: 04 ://
#undef  PIX                                           //: 05 ://
#undef  ERR                                           //: 06 ://
//:======================================================:PUT://
//:GET:======================================================://
#define GET AAC2020_TAUDEPO_Get /** @TAU_GET@ **/     //: 01 ://
#define I32  int32_t      /** GCC: <stdint.h> **/     //: 02 ://
#define U32 uint32_t      /** GCC: <stdint.h> **/     //: 03 ://
#define U08  uint8_t      /** GCC: <stdint.h> **/     //: 04 ://
#define PIX AAC2020_PIXNAME_taudepo_cpu_pix           //: 05 ://

    /** #_CONSISTENT_SIGNATURES_TRUMP_PARANOID_ERROR_CHECKS_#**/

    void /** #_KEEP_TAUGET_VOID_TO_AVOID_CONFUSION_# **/
    AAC2020_TAUDEPO_Get( 
        U08 DEX_TAU_000_015 //:EX: AAC2020_TAUDEPO.TAU_015
    ,   U08 DEX_SUB_000_015 //:EX: AAC2020_TAUDEPO.PAINT5D
    ,   U08 DEX_VAR_000_255 //:EX: AAC2020_TAUDEPO.P5D_VP0

        //:RETURN_VALUE_USING_UP_TO_FOUR_OUTPUT_PARAMETERS:
    ,   U32* val_001 //:<-- Data Slot #1, offset index == 0
    ,   U32* val_002 //:<-- Data Slot #1, offset index == 1
    ,   U32* val_003 //:<-- Data Slot #1, offset index == 2
    ,   U32* val_004 //:<-- Data Slot #1, offset index == 3
    )
    {
        I32 pix_dex = aac2020_taudepo_pix_dex(
            DEX_TAU_000_015
        ,   DEX_SUB_000_015        
        ,   DEX_VAR_000_255    
        );;

        //:      |<-------COMPONENT_INDEX-------->|
        //:      |    |<----- PIXEL_INDEX ------->|
        I32 c_1 = 4 * ( ( pix_dex +   0  +   0 ) );  //:TOP_LEF
        I32 c_2 = 4 * ( ( pix_dex +   1  +   0 ) );  //:TOP_RIG
        I32 c_3 = 4 * ( ( pix_dex +   0  + 512 ) );  //:BOT_LEF
        I32 c_4 = 4 * ( ( pix_dex +   1  + 512 ) );  //:BOT_RIG
        //:.........................| X |+| Y |..............://

        assert( sizeof( PIX[0] ) == 1 /** 1 byte **/ );

        (*val_001)=( 0x00
        |   ((PIX[ c_1 + 0 ]) << 24)
        |   ((PIX[ c_1 + 1 ]) << 16)
        |   ((PIX[ c_1 + 2 ]) <<  8)
        |   ((PIX[ c_1 + 3 ]) <<  0)
        );;

        (*val_002)=( 0x00
        |   ((PIX[ c_2 + 0 ]) << 24)
        |   ((PIX[ c_2 + 1 ]) << 16)
        |   ((PIX[ c_2 + 2 ]) <<  8)
        |   ((PIX[ c_2 + 3 ]) <<  0)
        );;

        (*val_003)=( 0x00
        |   ((PIX[ c_3 + 0 ]) << 24)
        |   ((PIX[ c_3 + 1 ]) << 16)
        |   ((PIX[ c_3 + 2 ]) <<  8)
        |   ((PIX[ c_3 + 3 ]) <<  0)
        );;

        (*val_004)=( 0x00
        |   ((PIX[ c_4 + 0 ]) << 24)
        |   ((PIX[ c_4 + 1 ]) << 16)
        |   ((PIX[ c_4 + 2 ]) <<  8)
        |   ((PIX[ c_4 + 3 ]) <<  0)
        );;
    }

#undef  GET                                           //: 01 ://
#undef  I32                                           //: 02 ://
#undef  U32                                           //: 03 ://
#undef  U08                                           //: 04 ://
#undef  PIX                                           //: 05 ://
//:======================================================:GET://
//:INIT:=====================================================://
#define U32 uint32_t /** GCC: <stdint.h> **/
#define I32  int32_t /** GCC: <stdint.h> **/
#define DAT gpudata_taudepo
#define F_S( name ) AAC2020_PIXNAME_##name
#define CMP strcmp
#define LOG aac2020_taudepo_Info_any
#define ERR aac2020_taudepo_Halt
#define V_P void*
#define I64  int64_t

    U32
    AAC2020_TAUDEPO_Init( U32 u32 ){
        if( u32 ){ /** Reserved for future use **/ };

        if( aac2020_taudepo_UTF_ROR <= 0 ){
                                                  
            /** ******************************************** **/
            /** @VID_IID[ 0054 ]TIME[ 3H 34M 58S ]           **/
            /**                                              **/
            /** Avoid accidential recursion. Technically     **/
            /** Setting this flag here is not logically      **/
            /** 100% true to the variable name,              **/
            /** but if we set it at the END of the function, **/
            /** there is the chance that we could            **/
            /** accidentially LAZILY CALL this               **/
            /** unit test again while it is still            **/
            /** running.                                     **/    
            /** ******************************************** **/
            aac2020_taudepo_UTF_ROR=( 77077 );

            /** AFD: Allow Forward Declaration. **/
            extern U32 aac2020_taudepo_UnitTest_AFD( U32  );
                       aac2020_taudepo_UnitTest_AFD( 0x00 );
        };;

        /** When fragment shader changes (dex_edi) the    **/
        /** TAUDEPO must re-wire up it's texture samplers **/
        /** to the new shader program. This is the reason **/
        /** for the INITED_WITH variable below.           **/
        AAC2020_TAUDEPO_dex_edi_INITED_WITH=( 
        AAC2020_CEDITOR_dex_edi              );;



        LOG("\t\t[NOTE:taudepo_texture_init_here...]\n"
            "\t\t[NOTE::::::GPUDATA_InitInstanceAll]\n" , 0 );

        AAC2020_TODOMAN_Vital("[THIS_SHOULD_RE_INIT_EVERY_TIME_WE_SWITCH_EDITORS]");

        //:LOAD_INITIAL_TEXTURE_DATA:------------------------://


            /** #_TODOS_CAN_BREAK_COLUMN_LIMIT_# **/
            /** For now just load a test pattern to confirm we    * * * * * **/
            /** have data. But once that is done, we will want to * * * * * **/
            /** load from a save file on disk on startup.         * * * * * **/
            AAC2020_VITAL_TODO("[Eventually_This_Should_Load_Save_File_Data]");



            struct AAC2020_GPUDATA gpudata_taudepo ={ 0 };


            if( CMP( &(F_S( taudepo )[0]) ,"taudepo" )!= 0 ){
                aac2020_taudepo_Halt("[TAU_BAD_NAME_2020]");
            };;


            //: FILE_SCOPE(  F_S  ) --> TEMP_STRUCT(  DAT  );
            DAT.tex_lot =    F_S( taudepo_tex_lot          );
            DAT.tex_han =    F_S( taudepo_tex_han          ); 
            DAT.sam_loc =    F_S( taudepo_tex_sam.sam_loc  );
            DAT.sam_val =    F_S( taudepo_tex_sam.sam_val  );
            DAT.sam_has =    F_S( taudepo_tex_sam_HAS      );
            DAT.pix_wid =  ( 512                           );
            DAT.pix_hig =  ( 512                           );
            DAT.pix_nam = &( F_S( taudepo )[0]             );

            DAT.cpu_pix =&( 
                AAC2020_PIXNAME_taudepo_cpu_pix[0] 
            );;

            //- AAC2020_TODOMAN_Vital("[REMOVEBELOW]");      -//
            //- AAC2020_PIXPUSH_TestPattern(   &( DAT ) );   -//

            //:Upload Texture As Is. Do not put any test
            //:patterns on it, that will corrupt your 
            //:texture_as_uniform values.
            AAC2020_PIXPUSH_UploadTexture( &( DAT ) );
            
            //:get_taudepo_sampler_location:-----------------://
            #define HAS_CHK AAC2020_PIXPUSH_HasSampler

                //:#_GPUDATA_INPUT_OBJECT_IS_OUTPUT_OBJECT_#://
                AAC2020_PIXPUSH_sam_has    ( &( DAT ) );
                AAC2020_PIXPUSH_sam_loc    ( &( DAT ) );
                AAC2020_PIXPUSH_sam_val_PUT( &( DAT ) );

                if( DAT.sam_has >= 1 && DAT.sam_loc <=(0 - 1) ){
                    ERR("[FULL_OF_LIES:@VDAWEA@:001]");
                }else 
                if( DAT.sam_has <= 0 && DAT.sam_loc >=(  0  ) ){
                    ERR("[FULL_OF_LIES:@VDAWEA@:002]");
                };;

                /** Keep the error prone way of doing this   **/
                /** As a redundancy to check for agreement.  **/

                I32 has = HAS_CHK( "taudepo" );
                if( DAT.sam_has != has ){ ERR("[WTF:0433AM]");};

                LOG( "[DAT.sam_loc]:%d\n" , (V_P)(I64)DAT.sam_loc );
                LOG( "[DAT.sam_val]:%d\n" , (V_P)(I64)DAT.sam_val );

            #undef  HAS_CHK
            //:-----------------:get_taudepo_sampler_location://

            if( has >= 1 ){

                /** Update Texture Sampler Uniform On GPU **/

                aac2020_PIXPUSH_PushSampler(  &( DAT ) );

                /** Persist Changes: **/

                //: TEMP_STRUCT(  DAT  ) --> FILE_SCOPE(  F_S  )
                F_S( taudepo_tex_lot         ) = DAT.tex_lot ;
                F_S( taudepo_tex_han         ) = DAT.tex_han ;
                F_S( taudepo_tex_sam.sam_loc ) = DAT.sam_loc ;
                F_S( taudepo_tex_sam.sam_val ) = DAT.sam_val ;
                F_S( taudepo_tex_sam_HAS     ) = DAT.sam_has ;
                //:                    ( 512 ) = DAT.pix_wid ://
                //:                    ( 512 ) = DAT.pix_hig ://
                //:                 "taudepo" ~=~DAT.pix_nam ://
    
                LOG("[HAS_TEXTURE_SAMPLER]",((void*)0));
            }else{

                /** Whether this is a good or bad message **/
                /** depends on you looking at code and    **/
                /** deciding.                             **/
                LOG("[NO_TEXTURE_SAMPLER:TAUDEPO]",((void*)0));
    
            };;
           
        
        //:------------------------:LOAD_INITIAL_TEXTURE_DATA://

        aac2020_taudepo_UTF_ROR=( 1 /** YES **/ );
        return( 0x00 );
    }

#undef  U32
#undef  I32
#undef  DAT
#undef  F_S
#undef  CMP
#undef  LOG 
#undef  ERR 
#undef  V_P
#undef  I64
//:=====================================================:INIT://
//:LOOP_TICK:================================================://
#define LOG aac2020_taudepo_Info_any
#define U32 uint32_t /** GCC: <stdint.h> **/

    U32
    AAC2020_TAUDEPO_LoopTick( U32 u32 ){
        if( u32 ){ /** reserved for future use **/ };

        /** ************************************************ **/
        /** Part of SPRINT#003. Video: IID:0041              **/
        /**             Recorded Date: 2020_12_13            **/
        /**             @2 hours 55 minutes                  **/
        /**                                                  **/
        /** Every time we switch editors a new fragment      **/
        /** shader is loaded (used as rendering code)        **/
        /** (for active editor). And we need to re-wire      **/
        /** the TAUDEPO texture sampler. Thus RE-INIT.       **/
        /** ************************************************ **/

        if( AAC2020_TAUDEPO_dex_edi_INITED_WITH
        !=  AAC2020_CEDITOR_dex_edi
        ){
            LOG("[RE_INITING_TAUDEPO]",((void*)0));

            AAC2020_TAUDEPO_Init( 0x00 );
        };;

        return( 0x00 );
    }

#undef  LOG 
#undef  U32 
//:================================================:LOOP_TICK://
//:UNIT_TEST:================================================://
#define U64 uint64_t /** GCC: <stdint.h> **/
#define U08  uint8_t /** GCC: <stdint.h> **/
#define I32  int32_t /** GCC: <stdint.h> **/
#define U32 uint32_t /** GCC: <stdint.h> **/
#define INF aac2020_taudepo_Info_any
#define ERR aac2020_taudepo_Halt
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    U32
    AAC2020_TAUDEPO_UnitTest_pix_dex( U32 u32 ){
        if( u32 ){ /** reserved for future use **/ };

        I32 pix_dex; /** Pixel index we are testing.   **/
        U32 com_dex; /** For whiping memory before use.**/
        U32 com_val; /** Component value. **/
        U08 val_255; /** value in range 0 to 255 **/

        /** Loop Variables **/
        U32 tau; /** tau == DEX_TAU_000_015 **/ 
        U32 sub; /** sub == DEX_SUB_000_015 **/
        U32 var; /** var == DEX_VAR_000_255 **/

        /** Erase all taudepo texture memory on CPU side. **/
        for( com_dex = 0 ; com_dex <= (512*512*4) ; com_dex++ ){
            AAC2020_PIXNAME_taudepo_cpu_pix[ com_dex ]=( 0x00 );
        };;

        U32 loops_put=( 0 );
        U32 loops_got=( 0 );

        //:PUT:GENERATED_VALUE_EACH_ARRAY_SLOT:--------------://
            com_val=( 0 ); //:RESET_BEFORE_EACH_LOOP
            for( tau = 0 ; tau <=  15 ; tau ++ ){
            for( sub = 0 ; sub <=  15 ; sub ++ ){
            for( var = 0 ; var <= 255 ; var ++ ){

                pix_dex = aac2020_taudepo_pix_dex(
                    tau  //: DEX_TAU_000_015  
                ,   sub  //: DEX_SUB_000_015  
                ,   var  //: DEX_VAR_000_255  
                );;

                if( pix_dex < 0 || pix_dex >= (512*512) ){
                    ERR("[PIX_DEX_OOB:SECTION:PUT]");
                };;

                /** PUT:Generated_Value **/
                val_255=(U08)( (++com_val)%256 );
                AAC2020_PIXNAME_taudepo_cpu_pix[ 
                                    4 * pix_dex ]=( val_255 );
            loops_put++;
            };;};;};;
        //:--------------:PUT:GENERATED_VALUE_EACH_ARRAY_SLOT://
        //:GET:GENERATED_VALUE_EACH_ARRAY_SLOT:--------------://
            com_val=( 0 ); //:RESET_BEFORE_EACH_LOOP
            for( tau = 0 ; tau <=  15 ; tau ++ ){
            for( sub = 0 ; sub <=  15 ; sub ++ ){
            for( var = 0 ; var <= 255 ; var ++ ){

                pix_dex = aac2020_taudepo_pix_dex(
                    tau  //: DEX_TAU_000_015  
                ,   sub  //: DEX_SUB_000_015  
                ,   var  //: DEX_VAR_000_255  
                );;

                if( pix_dex < 0 || pix_dex >= (512*512) ){
                    ERR("[PIX_DEX_OOB:SECTION:GET]");
                };;
    
                /** GET:Generated_Value **/
                val_255=( 
                AAC2020_PIXNAME_taudepo_cpu_pix[ 4 * pix_dex ]);
                if( val_255 != ((U08)( (++com_val)%256 )) ){
                    ERR("[TAUDEPO_PIX_DEX_TEST_FAIL_2020]");
                };;
    
            loops_got++;
            };;};;};;
        //:--------------:GET:GENERATED_VALUE_EACH_ARRAY_SLOT://

        if( loops_put != loops_got ){
            ERR("[WEVE_GOT_SERIOUS_PROBLEMS_2020]");
        };;

        /** Erase all taudepo texture memory on CPU side. **/
        for( com_dex = 0 ; com_dex <= (512*512*4) ; com_dex++ ){
            AAC2020_PIXNAME_taudepo_cpu_pix[ com_dex ]=( 0x00 );
        };;

        INF("[AAC2020_TAUDEPO_UnitTest_pix_dex:PASSED!]",0);
        INF("[loops_put]:%d\n",(void*)(U64)loops_put);
        INF("[loops_got]:%d\n",(void*)(U64)loops_got);
        return( 0x00 );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    U32
    AAC2020_TAUDEPO_UnitTest_Get_Put( U32 u32 ){

        if( u32 ){ /** reserved for future use **/ };

        I32 loop_pass_times=( 0 );

        /** Variable Values To Set Inside taudepo's texture **/
        U32 v_1; U32 v_2; U32 v_3; U32 v_4; //:PUT:EXPECTED
        U32 g_1; U32 g_2; U32 g_3; U32 g_4; //:GET:GOTTEN
        v_1 = v_2 = v_3 = v_4 =( 0 );
        g_1 = g_2 = g_3 = g_4 =( 0 );

        /// DEX_TAU_000_015 ; //: EX: AAC2020_TAUDEPO.TAU_015 ;
        /// DEX_SUB_000_015 ; //: EX: AAC2020_TAUDEPO.TAUDEPO ;
        /// DEX_VAR_000_255 ; //: EX: ( 127 );

        /** Loop Variables **/
        U32 tau; /** tau == DEX_TAU_000_015 **/ 
        U32 sub; /** sub == DEX_SUB_000_015 **/
        U32 var; /** var == DEX_VAR_000_255 **/

        //:Test_My_Understanding_Of_Bit_Packing:-------------://
        #define PIX pix_arr

                    //:Defined Elsewhere, but double-check:
                    #define U32 uint32_t /** GCC: <stdint.h> **/
                    #define I32  int32_t /** GCC: <stdint.h> **/
                    #define U08  uint8_t /** GCC: <stdint.h> **/

            U32 val_001=( 0xFFFFFFFF );
            U32 got_001=( 0 );
            U08 pix_arr[4];
            I32 c_1 = 0;

            PIX[ c_1 + 0 ]=(U08)( ( val_001 >> 24 ) & 0xFF );
            PIX[ c_1 + 1 ]=(U08)( ( val_001 >> 16 ) & 0xFF );
            PIX[ c_1 + 2 ]=(U08)( ( val_001 >>  8 ) & 0xFF );
            PIX[ c_1 + 3 ]=(U08)( ( val_001 >>  0 ) & 0xFF );


            got_001=( (U32)0x00000000
            |   ((    (U32)    PIX[ c_1 + 0 ]    )<<24)
            |   ((    (U32)    PIX[ c_1 + 1 ]    )<<16)
            |   ((    (U32)    PIX[ c_1 + 2 ]    )<< 8)
            |   ((    (U32)    PIX[ c_1 + 3 ]    )<< 0)
            );;

            if( got_001 != val_001 ){
                printf("[got]:%0x\n",got_001);
                printf("[val]:%0x\n",val_001);
                ERR("[YOU_DONT_KNOW_JACK_ABOUT_BIT_SHIFT]");
            }else{
                INF("[You_Know_A_Bit_About_Bit_Shift]",0);
            };;

        #undef  PIX
        //:-------------:Test_My_Understanding_Of_Bit_Packing://

        //:MINI_TEST_ON_ONE_LOCATION:------------------------://

            //:- - - - - - - - - - - -- - - - - - - - - - - -://

            v_1=(0x0000000); g_1=(v_1);
            v_2=(0x0000000); g_2=(v_2);
            v_3=(0x0000000); g_3=(v_3); 
            v_4=(0x0000000); g_4=(v_4); 
   
            AAC2020_TAUDEPO_Put( 0,0,0
            ,    (v_1), (v_2), (v_3), (v_4)
            );;
            AAC2020_TAUDEPO_Get( 0,0,0
            ,   &(g_1),&(g_2),&(g_3),&(g_4)
            );;

            if( v_1!=g_1 || v_2!=g_2 || v_3!=g_3 || v_4!=g_4 ){

                

                printf("\n\n\n");
                printf("[g_1:v_1]:((%0x):(%0x)):\n",g_1,v_1);
                printf("[g_2:v_2]:((%0x):(%0x)):\n",g_2,v_2);
                printf("[g_3:v_3]:((%0x):(%0x)):\n",g_3,v_3);
                printf("[g_4:v_4]:((%0x):(%0x)):\n",g_4,v_4);
                printf("\n\n\n");
                ERR("[FUCKED_UP_ON_THE_FIRST_TRY:001]");
            };;

            //:- - - - - - - - - - - -- - - - - - - - - - - -://

            v_1=(0xFFFFFFFF); g_1=(v_1);
            v_2=(0x00000000); g_2=(v_2);
            v_3=(0x00000000); g_3=(v_3); 
            v_4=(0x00000000); g_4=(v_4); 
   
            AAC2020_TAUDEPO_Put( 0,0,0
            ,    (v_1), (v_2), (v_3), (v_4)
            );;
            AAC2020_TAUDEPO_Get( 0,0,0
            ,   &(g_1),&(g_2),&(g_3),&(g_4)
            );;

            if( v_1!=g_1 || v_2!=g_2 || v_3!=g_3 || v_4!=g_4 ){

                printf("\n\n\n");
                printf("[g_1:v_1]:((%0x):(%0x)):\n",g_1,v_1);
                printf("[g_2:v_2]:((%0x):(%0x)):\n",g_2,v_2);
                printf("[g_3:v_3]:((%0x):(%0x)):\n",g_3,v_3);
                printf("[g_4:v_4]:((%0x):(%0x)):\n",g_4,v_4);
                printf("\n\n\n");
                ERR("[RED_LOBSTER_VS_JOE_CRAB_SHACK:002]");
            };;

            //:- - - - - - - - - - - -- - - - - - - - - - - -://

            v_1=(0xFFFFFFFF); g_1=(v_1);
            v_2=(0xFFFFFFFF); g_2=(v_2);
            v_3=(0xFFFFFFFF); g_3=(v_3); 
            v_4=(0xFFFFFFFF); g_4=(v_4); 
   
            AAC2020_TAUDEPO_Put( 0,0,0
            ,    (v_1), (v_2), (v_3), (v_4)
            );;
            AAC2020_TAUDEPO_Get( 0,0,0
            ,   &(g_1),&(g_2),&(g_3),&(g_4)
            );;

            if( v_1!=g_1 || v_2!=g_2 || v_3!=g_3 || v_4!=g_4 ){

                printf("\n\n\n");
                printf("[g_1:v_1]:((%0x):(%0x)):\n",g_1,v_1);
                printf("[g_2:v_2]:((%0x):(%0x)):\n",g_2,v_2);
                printf("[g_3:v_3]:((%0x):(%0x)):\n",g_3,v_3);
                printf("[g_4:v_4]:((%0x):(%0x)):\n",g_4,v_4);
                printf("\n\n\n");
                ERR("[PURPLE_PENGUINS_ON_PARADE:003]");
            };;

            //:- - - - - - - - - - - -- - - - - - - - - - - -://

            v_1=(0xFF000000); g_1=(v_1);
            v_2=(0x00FF0000); g_2=(v_2);
            v_3=(0x0000FF00); g_3=(v_3); 
            v_4=(0x000000FF); g_4=(v_4); 
   
            
            AAC2020_TAUDEPO_Put( 0,0,0
            ,    (v_1), (v_2), (v_3), (v_4)
            );;
            AAC2020_TAUDEPO_Get( 0,0,0
            ,   &(g_1),&(g_2),&(g_3),&(g_4)
            );;

            if( v_1!=g_1 || v_2!=g_2 || v_3!=g_3 || v_4!=g_4 ){

                printf("\n\n\n");
                printf("[g_1:v_1]:((%d):(%d)):\n",g_1,v_1);
                printf("[g_2:v_2]:((%d):(%d)):\n",g_2,v_2);
                printf("[g_3:v_3]:((%d):(%d)):\n",g_3,v_3);
                printf("[g_4:v_4]:((%d):(%d)):\n",g_4,v_4);
                printf("\n\n\n");
                ERR("[FUCKED_UP_ON_THE_FIRST_TRY:004]");
            };;

            //:- - - - - - - - - - - -- - - - - - - - - - - -://

            v_1=(1); v_2=(2); v_3=(3); v_4=(4);
            g_1=(1); g_2=(2); g_3=(3); g_4=(4);
            
            AAC2020_TAUDEPO_Put( 0,0,0
            ,    (v_1), (v_2), (v_3), (v_4)
            );;
            AAC2020_TAUDEPO_Get( 0,0,0
            ,   &(g_1),&(g_2),&(g_3),&(g_4)
            );;

            if( v_1!=g_1 || v_2!=g_2 || v_3!=g_3 || v_4!=g_4 ){

                printf("\n\n\n");
                printf("[g_1:v_1]:((%d):(%d)):\n",g_1,v_1);
                printf("[g_2:v_2]:((%d):(%d)):\n",g_2,v_2);
                printf("[g_3:v_3]:((%d):(%d)):\n",g_3,v_3);
                printf("[g_4:v_4]:((%d):(%d)):\n",g_4,v_4);
                printf("\n\n\n");
                ERR("[FUCKED_UP_ON_THE_FIRST_TRY:005]");
            };;

        //:------------------------:MINI_TEST_ON_ONE_LOCATION://

        for( tau = 0 ; tau <=  15 ; tau ++ ){
        for( sub = 0 ; sub <=  15 ; sub ++ ){
        for( var = 0 ; var <= 255 ; var ++ ){

            //#PAIRED_IDENTICAL_BLOCKS_OF_4_LINES#//
            v_1 = (( tau + sub + var ) * 1) % 255;
            v_2 = (( tau + sub + var ) * 3) % 255;
            v_3 = (( tau + sub + var ) * 5) % 255;
            v_4 = (( tau + sub + var ) * 7) % 255;

            AAC2020_TAUDEPO_Put( 
                tau //: DEX_TAU_000_015 ://
            ,   sub //: DEX_SUB_000_015 ://
            ,   var //: DEX_VAR_000_255 ://
            ,    (v_1), (v_2), (v_3), (v_4)
            );;

        };;};;};;
        for( tau = 0 ; tau <=  15 ; tau ++ ){
        for( sub = 0 ; sub <=  15 ; sub ++ ){
        for( var = 0 ; var <= 255 ; var ++ ){

            //#PAIRED_IDENTICAL_BLOCKS_OF_4_LINES#//
            v_1 = (( tau + sub + var ) * 1) % 255;
            v_2 = (( tau + sub + var ) * 3) % 255;
            v_3 = (( tau + sub + var ) * 5) % 255;
            v_4 = (( tau + sub + var ) * 7) % 255;

            AAC2020_TAUDEPO_Get( 
                tau //: DEX_TAU_000_015 ://
            ,   sub //: DEX_SUB_000_015 ://
            ,   var //: DEX_VAR_000_255 ://
            ,   &(g_1),&(g_2),&(g_3),&(g_4)
            );;

    
            if( g_1 != v_1
            ||  g_2 != v_2
            ||  g_3 != v_3
            ||  g_4 != v_4
            ){
            #define P printf
            #define E aac2020_taudepo_Halt

                P("\n\n\n");
                P("[loop_pass_times]:%d\n",loop_pass_times);
                P("\n\n\n");
                P("[g_1:v_1]:((%d):(%d)):\n",g_1,v_1);
                P("[g_2:v_2]:((%d):(%d)):\n",g_2,v_2);
                P("[g_3:v_3]:((%d):(%d)):\n",g_3,v_3);
                P("[g_4:v_4]:((%d):(%d)):\n",g_4,v_4);
                E("[TAUDEPO_GET_PUT_TEST_FAIL_YEAR_2020]");

            #undef  P
            #undef  E
            }else{
                loop_pass_times++;
            };;

        };;};;};;
        
        return( 0x00 );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    U32                  /**@AFD@ : Allow_Forward_Declaration**/
    aac2020_taudepo_UnitTest_AFD( U32 u32 ){
        if( u32 ){ /** reserved for future use **/ };

            AAC2020_TAUDEPO_UnitTest_pix_dex( 0x00 );
            AAC2020_TAUDEPO_UnitTest_Get_Put( 0x00 );

        if( AAC2020_SILENCE.TAUDEPO <= 0 ){
        #define P printf 

            P("[taudirt_DirtySectorUpdate_call_times]:%d\n"
            ,aac2020_taudirt_DirtySectorUpdate_call_times );

        #undef  P
        };;

        INF("[O_K:UNIT_TEST_PASSED_2020]", ((void*)0) );
        return( 0x00 );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
#undef  U64
#undef  U08   
#undef  I32 
#undef  U32 
#undef  INF 
#undef  ERR 
//:================================================:UNIT_TEST://