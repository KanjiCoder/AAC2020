//://////////////////////////////////////////////////////////://
//:                                                          ://
//:         UICLICK.F._ : Functions For UICLICK              ://
//:                                                          ://
//://////////////////////////////////////////////////////////://
//:INCLUDE_EDITOR_SPECIFIC_CODE:=============================://

    #if( AAC2020_INCLUDE_PAINT5D >= 1 ) //:##################://

        #include "./UICLICK.F.PAINT5D._"  
        
    #endif

//:=============================:INCLUDE_EDITOR_SPECIFIC_CODE://
//:AAC2020_SUBLIBRARY_BOILERPLATE:===========================://
#define SIL AAC2020_SILENCE                           //: 01 ://
#define U32 uint32_t /** GCC: <stdint.h> **/          //: 02 ://
#define P_F printf                                    //: 03 ://
#define I32 int32_t /** GCC: <stdint.h> **/           //: 04 ://
#define CHR const char                                //: 05 ://
#define I_P intmax_t /** GCC: <stdint.h> **/          //: 06 ://
#define ERR aac2020_rencore_Halt                      //: 07 ://

    //:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=================://
        void 
        aac2020_uiclick_Halt( const char* msg_err )
        {
            P_F("[FATAL_ERROR:aac2020_uiclick]:%s\n", msg_err );
            fflush(stdout);
            exit( 123 );
        }
    //:=================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
    //:IS_LOGGING_ON:========================================://
        I32
        aac2020_uiclick_GET_logison( void )
        {
            I32 say=( 0 );

            if( SIL.UICLICK <=(  0  ) ){ say=( 1 ); };
            if( SIL.SILENCE <=( 0-1 ) ){ say=( 1 ); };
            if( SIL.SILENCE >=( 0+1 ) ){ say=( 0 ); };

            return( say /** say == logison **/ );
        }
    //:========================================:IS_LOGGING_ON://
    //:LOG_AFTER_HALT:=======================================://
        void
        aac2020_uiclick_Info_any( //:FUNC:::Info , OVERLOAD:any
            const char* str_fmt   //:GENERAL:str , SPECIFIC:fmt
        ,   void*       dat_any   //:GENERAL:dat , SPECIFIC:any
        )
        {       
            I32 say=( aac2020_uiclick_GET_logison() );
            if( say >= 1 ){
                P_F("[uiclick_log]....(   " ); fflush( stdout );
                P_F( str_fmt , dat_any      ); fflush( stdout );
                P_F(               "   )\n" ); fflush( stdout );
            };;
        }
    //:=======================================:LOG_AFTER_HALT://
    //:INFO_PRINT_SIGNED_32_BIT_INT:=========================://
        void
        aac2020_uiclick_Info_i32( 
            CHR* msg_fmt /** Format String **/
        ,   I32  msg_inf /** Information String **/
        )
        {
            if( ((CHR*)0) == msg_fmt ){ ERR("[20210507]"); };
        //- if( ((I32 )0) == msg_inf ) -//
            
            aac2020_uiclick_Info_any(
                            msg_fmt
            ,   (void*)(I_P)msg_inf
            );;
        }
    //:=========================:INFO_PRINT_SIGNED_32_BIT_INT://
    //:INIT_NONE:============================================://
        U32
        AAC2020_UICLICK_InitNone( U32 u32 ){
            if( u32 ){ /** reserved for future use **/ };
            return( 0x00 );
        }
    //:============================================:INIT_NONE://
#undef  SIL  //:----------------------------------------: 01 ://
#undef  U32  //:----------------------------------------: 02 ://
#undef  P_F  //:----------------------------------------: 03 ://
#undef  I32  //:----------------------------------------: 04 ://
#undef  CHR  //:----------------------------------------: 05 ://
#undef  I_P  //:----------------------------------------: 06 ://
#undef  ERR  //:----------------------------------------: 07 ://
//:===========================:AAC2020_SUBLIBRARY_BOILERPLATE://
//:LOAD_GLOBAL_MOUSE_STATE_IF_NONE_PROVIDED:=================://
#define MOU      struct AAC2020_MOUTEMP               //: 01 ://
#define U32 uint32_t /** GCC: <stdint.h> **/          //: 02 ://
#define ERR aac2020_uiclick_Halt                      //: 03 ://

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    void
    aac2020_uiclick_LoadGlobals_Mouse(
        MOU* mou
    )
    {
    /** **************************************************** ***
    @VID_IID[ 0249 ]TIME[ 04:06:55 ]
    Same logic as[ AAC2020_AACMAIN_LoadGlobals_Mouse ]
    *** **************************************************** **/
        _Static_assert(     
            AAC2020_INCLUDE_UICLICK
        >   AAC2020_INCLUDE_MOUTEMP
        , "[DONT_VIOLATE_THE_LIBCHAN:2021_04_07]"
        );;

        if( ((MOU*)0) == mou ){
            //:NMI_TLG:NULL_MOUSE_INPUTTED_TO_LOAD_GLOBALS
            ERR("[UICLICK.F:NMI_TLG:2021]");
        };;
        AAC2020_MOUTEMP_CopyIfTrue_LoadIfFalse(
            mou //:<-- COPY_INTO_THIS_OBJECT
        ,    1  //:<-- TRUE(1)COPY_FILE_SCOPE_VARS_INTO[ mou ]
        );;
    }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    MOU*
    aac2020_uiclick_GetMouseState(
        MOU* inn_mou_ptr
    ,   U32  inn_mou_has
    ){

        MOU* out_mou_ptr=((MOU*)0);

        if( ((MOU*)0)==inn_mou_ptr && (0 == inn_mou_has ) ){
        
            //:USE GLOBAL MOUSE STATE:

            aac2020_uiclick_LoadGlobals_Mouse( 
                          &( AAC2020_UICLICK_mou ) );;
            out_mou_ptr=( &( AAC2020_UICLICK_mou ) );
        
        }else
        if( ((MOU*)0)!=inn_mou_ptr && (1 == inn_mou_has ) ){
            
            //:USE INJECTED MOUSE STATE:

            out_mou_ptr=( inn_mou_ptr );

        }else{
            ERR("[BAD_COMBINATION_OF_INPUTS:2021]");
        };;

        return( out_mou_ptr );
    }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

#undef  MOU  //:----------------------------------------: 01 ://
#undef  U32  //:----------------------------------------: 02 ://
#undef  ERR  //:----------------------------------------: 03 ://
//:=================:LOAD_GLOBAL_MOUSE_STATE_IF_NONE_PROVIDED://
//:UI_BOUNDS_DETECTION_HELPERS:==============================://
#define TAU_015 (      15 )                             //:01://
#define TAU_TAU ( TAU_015 )                             //:02://
#define SUB_P5D (       1 )                             //:03://
#define P5D_UR0 ( AAC2020_TAUDEPO_SUB_PAINT5D_VAR_UR0 ) //:04://
#define P5D_VU0 ( AAC2020_TAUDEPO_SUB_PAINT5D_VAR_VU0 ) //:05://
#define     REC  struct AAC2020_POLYOGL_REC             //:06://
#define     I32  int32_t /** GCC: <stdint.h> **/        //:07://
#define     U32 uint32_t /** GCC: <stdint.h> **/        //:08://
#define     ERR aac2020_uiclick_Halt                    //:09://

    void
    aac2020_uiclick_Get_rec_uin_REC(
        I32         dex_edi
    ,   I32         lis_dex
    ,   REC  *BYREF_rec_uin
    )
    {
        //:input_checking:-----------------------------------://
            if( dex_edi >= 1 && dex_edi <= 9  ){
                /** Do nothing. Valid Editor Index **/
            }else{
                /** Acheivement Unlocked: 10+ editors. **/
                //:RMT9_EDIT:ReallyMoreThan9_EDITors?
                ERR("[RMT9_EDIT?(#REDC#)]");
            };;
            assert( lis_dex >= 0 && lis_dex <=(8-1) );
        //:-----------------------------------:input_checking://

        /** @VID_IID[ 0252 ]TIME[ 04:34:42 ]**************** **/
        /** Get first user interface rectangle variable      **/
        /** [ handle / 1D taudepo pixel cluster location]    **/
        /** to help us procedurally calculate the user       **/
        /** interface rectangle (rec_uin) to fetch.          **/
        /** ************************************************ **/
        I32 edi_ur0 =( 0 - 222 );

        if( 1 == dex_edi ){
            edi_ur0 = ( P5D_UR0 );
        }else
        if( 2 == dex_edi ){
            ERR("[TODO:2]");
        }else
        { ERR("[TODO:NEW_CHOICE]"); };

        REC STACK_COPY_rec_uin ={ 0 };
        STACK_COPY_rec_uin=(
            aac2020_taufrag_Get_REC(
                TAU_TAU //:<------------ dex_tau
            ,   dex_edi //:<------------ dex_sub
            ,   edi_ur0 + lis_dex //:<-- dex_var
            ));;

        //:MANUALLY_COPY_OVER_DATA:--------------------------://

            (*BYREF_rec_uin).x_0 =( STACK_COPY_rec_uin.x_0 );
            (*BYREF_rec_uin).x_1 =( STACK_COPY_rec_uin.x_1 );
            (*BYREF_rec_uin).y_0 =( STACK_COPY_rec_uin.y_0 );
            (*BYREF_rec_uin).y_1 =( STACK_COPY_rec_uin.y_1 );

        //:--------------------------:MANUALLY_COPY_OVER_DATA://
    }
    I32
    aac2020_uiclick_Get_rec_uin_VIS(
        I32         dex_edi
    ,   I32         lis_dex
    //- I32  *BYREF_rec_vis -//
    )
    {
        //:input_checking:-----------------------------------://
            if( dex_edi >= 1 && dex_edi <= 9  ){
                /** Do nothing. Valid Editor Index **/
            }else{
                /** Acheivement Unlocked: 10+ editors. **/
                //:RMT9_EDIT:ReallyMoreThan9_EDITors?
                ERR("[RMT9_EDIT?(#VIS#)]");
            };;
            assert( lis_dex >= 0 && lis_dex <=(8-1) );
        //:-----------------------------------:input_checking://
        //:CORE_FUNCTION_LOGIC:------------------------------://

            I32 edi_vu0 =( 0 - 666 );
            if( 1 == dex_edi /** EDITOR_NAME: PAINT5D **/ ){
                edi_vu0 = ( P5D_VU0 );
            }else
            if( 2 == dex_edi /** EDITOR_NAME: TODO_02 **/ ){
                ERR("[TODO:2021_04_10:233PM]");
            }else
            { ERR("[TODO:NEW_CHOICE:2021_04_10:233PM]"); };
            
            U32 user_interface_is_visible=( 
                aac2020_taufrag_Get_U32(
                    TAU_TAU           //:<--[ dex_tau ]
                ,   dex_edi           //:<--[ dex_sub ]
                ,   edi_vu0 + lis_dex //:<--[ dex_var ]
                ));;

        //:------------------------------:CORE_FUNCTION_LOGIC://
        //:Return_Via_Output_Param:--------------------------://

            //- (*BYREF_rec_vis)=(user_interface_is_visible);-//

        //:--------------------------:Return_Via_Output_Param://
        //:Return_Like_Normal_Human_Being:-------------------://

            return( (I32)user_interface_is_visible );

        //:-------------------:Return_Like_Normal_Human_Being://
    }
            

    I32
    aac2020_uiclick_InBounds(
        I32 dex_edi //:<--User Interfaces for WHICH editor?
    ,   I32 lis_dex //:<--User Interface List Index (HandleToList)
    ,   I32 mou_i_x //:<--[ Mouse_Integer_X / mou.m_x ]
    ,   I32 mou_i_y //:<--[ Mouse_Integer_Y / mou.m_x ]
    )
    {
        //:#_GET_USER_INTERFACE_RECTANGLE_BOUNDS_#://

        REC rec_uin={0};

        aac2020_uiclick_Get_rec_uin_REC(
            dex_edi
        ,   lis_dex
        , &(rec_uin)
        );;
            
        I32 is_the_mouse_inside_user_interface=(0-666);

        if( 1
        &&  mou_i_x >= rec_uin.x_0
        &&  mou_i_x <= rec_uin.x_1
        &&  mou_i_y >= rec_uin.y_0
        &&  mou_i_y <= rec_uin.y_1
        ){
            is_the_mouse_inside_user_interface=( 1 );
        }else{
            is_the_mouse_inside_user_interface=( 0 );
        };;

        return( is_the_mouse_inside_user_interface );
    }

    I32
    aac2020_uiclick_InBounds_AND_Visible(
        I32 dex_edi //:<--User Interfaces for WHICH editor?
    ,   I32 lis_dex //:<--User Interface List Index (HandleToList)
    ,   I32 mou_i_x //:<--[ Mouse_Integer_X / mou.m_x ]
    ,   I32 mou_i_y //:<--[ Mouse_Integer_Y / mou.m_x ]
    )
    {
        I32 in_bounds=(
            aac2020_uiclick_InBounds(
                dex_edi,lis_dex,mou_i_x,mou_i_y ));;

        I32 visible=(
            aac2020_uiclick_Get_rec_uin_VIS(
                dex_edi,lis_dex ));;

        I32 in_bounds_AND_visible=(
            in_bounds  && visible  );;

        return( in_bounds_AND_visible );

    }

#undef  TAU_015  //:--------------------------------------:01://
#undef  TAU_TAU  //:--------------------------------------:02://
#undef  SUB_P5D  //:--------------------------------------:03://
#undef  P5D_UR0  //:--------------------------------------:04://
#undef  P5D_VU0  //:--------------------------------------:05://
#undef      REC  //:--------------------------------------:06://
#undef      I32  //:--------------------------------------:07://
#undef      U32  //:--------------------------------------:08://
#undef      ERR  //:--------------------------------------:09://
//:UI_BOUNDS_DETECTION_HELPERS:==============================://
//:UICLICK_FOR_SPECIFIC_EDITORS:=============================://
#define MOU      struct AAC2020_MOUTEMP               //: 01 ://
#define U32 uint32_t /** GCC: <stdint.h> **/          //: 02 ://
#define I32  int32_t /** GCC: <stdint.h> **/          //: 03 ://
#define GET aac2020_uiclick_GetMouseState             //: 04 ://
#define LOG aac2020_uiclick_Info_any                  //: 05 ://
#define LOI aac2020_uiclick_Info_i32                  //: 06 ://
#define NCC char                                      //: 07 ://
#define REC struct AAC2020_POLYOGL_REC                //: 08 ://
#define ERR aac2020_uiclick_Halt                      //: 09 ://

    void
    aac2020_uiclick_PAINT5D_uin_001(
        MOU* mou
    )
    {
        //:declare_vars_like_its_c89:------------------------://

            REC rec_uin={  0     }; //: uin=="User_INterface

            I32     g_x=(0 - 666 ); //: Global Mouse X
            I32     g_y=(0 - 666 ); //: Global Mouse Y

            I32     l_x=(0 - 666 ); //: Local  Mouse X
            I32     l_y=(0 - 666 ); //: Local  Mouse Y

            I32     t_x=(0 - 666 ); //: [GLYPH/BUTTON]TILE:X
            I32     t_y=(0 - 666 ); //: [GLYPH/BUTTON]TILE:Y

            NCC            but_tex[8]={0}; //:MUST_BE_ZEROED_OUT
            U32     UNUSED_but_typ   =(0); //:MUST_BE_ZEROED_OUT
            U32     UNUSED_but_val   =(0); //:MUST_BE_ZEROED_OUT

        //:------------------------:declare_vars_like_its_c89://
        //:extract_global_mouse_pos:-------------------------://

            g_x =( mou -> pix_m_x );
            g_y =( mou -> pix_m_y );

        //:-------------------------:extract_global_mouse_pos://
        //:get_user_interface_rectangle:---------------------://

            aac2020_uiclick_Get_rec_uin_REC(
                   1 //:<--[ dex_edi == PAINT5D ]
            ,      1 //:<--[ lis_dex == (  1  ) ]
            , &(rec_uin)
            );;

        //:---------------------:get_user_interface_rectangle://
        //:Calculate_Local_Mouse:----------------------------://

            l_x = ( g_x - rec_uin.x_0 );
            l_y = ( g_y - rec_uin.y_0 );

        //:----------------------------:Calculate_Local_Mouse://
        //:Get_UI_Button_Index:------------------------------://
        /** @VID_IID[ 0253 ]TIME[ 00:41:23 ]TILEMAP_COLLISION**/
        #define TIL_WID ( 8 /** 8 Pixels In A Glyph Tile **/ )
        #define TIL_HIG ( 8 /** Buttons are 8 pixels tall**/ )

            t_x = ( l_x / TIL_WID ); //:Locates_Button_Glyph
            t_y = ( l_y / TIL_HIG ); //:Locates_Button
            
        #undef  TIL_WID  //:----------------------------: 01 ://
        #undef  TIL_HIG  //:----------------------------: 02 ://
        //:------------------------------:Get_UI_Button_Index://
        //:Get_Name_Of_Button_Text:--------------------------://
        //:#_GET_BUTTON_NAME_#:------------------------------://

            AAC2020_UILISTS_Get_ButMai(
                1 //:<--[ sub_dex / dex_sub ]==[ PAINT5D ]
            ,   1 //:<--[ lis_dex ]==[ uin_001 ]
            , t_y //:<--[ but_dex ]==[     t_y ]
            
            ,          but_tex
            , &(UNUSED_but_typ)
            , &(UNUSED_but_val)
            );;

            printf( "[but_tex]:%s\n"      , but_tex      );
            printf( "[but_tex.char]:%c\n" , but_tex[t_x] );
            fflush( stdout );

        //:------------------------------:#_GET_BUTTON_NAME_#://
        //:--------------------------:Get_Name_Of_Button_Text://
        //:CALL_FUNCTION_ASSOCIATED_WITH_BUTTON:=============://
        #if( AAC2020_INCLUDE_PAINT5D > 0 ) //:###############://

            aac2020_uiclick_paint5d_CallFunctionUsing_but_tex(
                but_tex
            );;

        #else //:############################################://

            /** ******************************************** **/
            /** @VID_IID[ 0253 ]TIME[ 02:26:50 ]             **/
            /** If paint5D does not exist, then how the      **/
            /** hell did you render the UI for the user to   **/
            /** click and invoke the functions that got us   **/
            /** to this point?                               **/
            /** ******************************************** **/

            ERR("[HOW_DID_YOU_GET_HERE?]");

        #endif
        //:=============:CALL_FUNCTION_ASSOCIATED_WITH_BUTTON://
    }

    void
    aac2020_uiclick_PAINT5D( 
        MOU* inn_mou_ptr //:<--[       allowed_to_be_null ]
    ,   U32  inn_mou_has //:<--[ but_must_declare_as_null ]
    ){
        MOU* mou=( GET( inn_mou_ptr, inn_mou_has ));;

        I32 pix_m_x=( mou -> pix_m_x ); /** CLICK_X **/
        I32 pix_m_y=( mou -> pix_m_y ); /** CLICK_Y **/

        I32 in_bounds_of_ui_list_001 /** uin_001 **/ =(
            aac2020_uiclick_InBounds_AND_Visible(
                1  //:PAINT5D SYSTEM
            ,   1  //:User Interface List #1
            ,   pix_m_x //:AKA[ mou_i_x | mou -> clk_c_x ]
            ,   pix_m_y //:AKA[ mou_i_y | mou -> clk_c_y ]
            ));;

        if( in_bounds_of_ui_list_001 > 0 /** uin_001 **/ ){

            LOG("[CLICKYFUCKINCLICKACLACK]",0);
            aac2020_uiclick_PAINT5D_uin_001( mou );
                
        }else{
 
            /// #define L_I void*)(intmax_t

            LOG("[NO_CLACKS_GIVEN]",0);

            if( aac2020_uiclick_GET_logison() >= 1 ){
                LOI("[OOB:pix_m_x]:%d", pix_m_x );
                LOI("[OOB:pix_m_y]:%d", pix_m_y );
            };;

            //:          LOG("[OOB:pix_m_x]%d",
            //:   (void*)(intmax_t)pix_m_y);
            //:
            //:          LOG("[OOB:pix_m_x]%d",
            //:   (void*)(intmax_t)pix_m_y);

            /// #undef  L_I 
        };;
    }

#undef MOU  //:-----------------------------------------: 01 ://
#undef U32  //:-----------------------------------------: 02 ://
#undef I32  //:-----------------------------------------: 03 ://
#undef GET  //:-----------------------------------------: 04 ://
#undef LOG  //:-----------------------------------------: 05 ://
#undef LOI  //:-----------------------------------------: 06 ://
#undef NCC  //:-----------------------------------------: 07 ://
#undef REC  //:-----------------------------------------: 08 ://
#undef ERR  //:-----------------------------------------: 09 ://
//:=============================:UICLICK_FOR_SPECIFIC_EDITORS://
//:UICLICK_LOOP_TICK:========================================://
#define U32 uint32_t /** GCC: <stdint.h> **/          //: 01 ://
#define ERR aac2020_uiclick_Halt                      //: 02 ://
#define MOU struct AAC2020_MOUTEMP                    //: 03 ://

    void
    aac2020_uiclick_LoopTick_RouteToActiveEditor( void ){

        //:--------------------------------------------------://
        //:For now, I want the active editor to directly     ://
        //:call the[ UICLICK ][ LoopTick ]function. Because  ://
        //:why[ RE-WRITE ]the logic for finding or picking   ://
        //:the active editor?                                ://
        //:                                                  ://
        //:Seems like using this function could lead to      ://
        //:getting[ incoherent / unaligned ]code.            ://
        //:                                                  ://
        //:( Two sections of code in engine may not )        ://
        //:( agree on the STATE OF THE GAME because )        ://
        //:( they both independently calculated the )        ://
        //:( state and came to different conclusions)        ://
        //:                                                  ://
        //:--------------------------------------------------://
        ERR("[PROBABLY_SHOULDNT_DO_THIS_FUNCTION_2021_04_07]");
    }

    U32
    AAC2020_UICLICK_LoopTick( 
        U32 called_from_where  //:<--[ AAC2020_CALFROM ]VALUE
    ){

        #define S_A _Static_assert
        S_A( 1001 == AAC2020_CALFROM_Main        ,"[[A]]");
        S_A( 1002 == AAC2020_CALFROM_HandleInput ,"[[B]]");
        S_A(    1 == AAC2020_CALFROM_paint5d     ,"[[1]]");
 

        //:EARLY_EXIT:=======================================://

            //: AAC2020_UICLICK_called_from_HandleInput
            if( AAC2020_CALFROM_HandleInput
            ==  called_from_where
            ){

                //:#_UICLICK_PAPER_TRAIL_#://
                return( 0x00 ); //:<-- Call Ignored

            };;

            //: AAC2020_UICLICK_called_from_Main
            if( AAC2020_CALFROM_Main
            == called_from_where
            ){

                //:#_UICLICK_PAPER_TRAIL_#://
                return( 0x00 );

            };;
        
        //:=======================================:EARLY_EXIT://
        //:Route_To_Invoking_Editor_If_We_Know:==============://
        if( (0+called_from_where)==AAC2020_CALFROM_paint5d ){

            aac2020_uiclick_PAINT5D( ((MOU*)0) , 0 );;

        }else
        
        {  //:********** UN_SUPPORTED_CALLED_FROM: **********://

            ERR("[THIS_ROUTE_NOT_SUPPORTED_AT_THIS_TIME]");
            aac2020_uiclick_LoopTick_RouteToActiveEditor( );

        };;//:********** UN_SUPPORTED_CALLED_FROM: **********://

        //:==============:Route_To_Invoking_Editor_If_We_Know://


        AAC2020_TODOMAN_Vital("[HANDLE_CLICKS_FOR_PAINT5D]");
        return( 0x00 );
    } 

#undef  U32  //:----------------------------------------: 01 ://
#undef  ERR  //:----------------------------------------: 02 ://
#undef  MOU  //:----------------------------------------: 03 ://
//:========================================:UICLICK_LOOP_TICK://