"    //:TODO: REWORK THIS CODE INTO NEW SHADER\n"
"    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//\n"
"    //[AAC2020_FRAGCOM_DEFAULT_001:======================]//\n"
"    //[PASTE_INTO_FILE[ COM_001._ ]:=====================]//\n"
"    //:COM_001____AAC2020_FRAGCOM_DEFAULT_001:===========://\n"
"    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//\n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //| # |//\n"
"        /** ******************************** ***   //| # |//\n"
"        @VID_IID[ 0112 ]TIME[ 00:56:50 ]           //| # |//\n"
"        Get rid of quote marks in the source       //| # |//\n"
"        So we can wrap entire thing into a         //| # |//\n"
"        very large multi-line string.              //| # |//\n"
"        *** ******************************** **/   //| # |//\n"
"                                                   //| # |//\n"
"        #define            E_S_private( e_m ) #e_m //| # |//\n"
"        #define E_S( e_m ) E_S_private( e_m )      //| # |//\n"
"                                                   //| # |//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As GLSL Code. **/         //| # |//\n"
"                                                   //| # |//\n"
"        #define F32        float    //:  01  ://   //| # |//\n"
"        #define U32         uint    //:  02  ://   //| # |//\n"
"        #define I32          int    //:  03  ://   //| # |//\n"
"        #define IV2        ivec2    //:  04  ://   //| # |//\n"
"        #define UV4        uvec4    //:  05  ://   //| # |//\n"
"        #define T_F   texelFetch    //:  06  ://   //| # |//\n"
"        #define TAU      taudepo    //:  07  ://   //| # |//\n"
"        #define P5D      paint5d    //:  08  ://   //| # |//\n"
"        #define SAM   usampler2D    //:  09  ://   //| # |//\n"
"        #define UFF    uint(0xFF)   //:  10  ://   //| # |//\n"
"        #define U00    uint( 0  )   //:  11  ://   //| # |//\n"
"        #define I00     int( 0  )   //:  12  ://   //| # |//\n"
"        #define U03    uint( 3  )   //:  13  ://   //| # |//\n"
"        #define B_3    uint( 3  )   //:  14  ://   //| # |//\n"
"        #define B11    uint( 3  )   //:  15  ://   //| # |//\n"
"        #define H55    uint(0x55)   //:  16  ://   //| # |//\n"
"        #define V_A                 //:  17  ://   //| # |//\n"
"        #define FV4         vec4    //:  18  ://   //| # |//\n"
"        #define ASS  /**NOTHING**/  //:  19  ://   //| # |//\n"
"        #define ERR  /**NOTHING**/  //:  20  ://   //| # |//\n"
"        #define TRU  trunc          //:  21  ://   //| # |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As C99/C11 Code. **/      //| # |//\n"
"                                                   //| # |//\n"
"        #define F32      float      //:  01  ://   //| # |//\n"
"        #define U32   uint32_t      //:  02  ://   //| # |//\n"
"        #define I32    int32_t      //:  03  ://   //| # |//\n"
"        #define IV2   struct AAC2020_POLYOGL_IV2   //| # |//\n"
"        #define UV4   struct AAC2020_POLYOGL_UV4   //| # |//\n"
"        #define T_F   AAC2020_POLYOGL_tex_fet      //| # |//\n"
"        #define TAU   ( 0 )         //:  07  ://   //| # |//\n"
"        #define P5D   ( 1 )         //:  08  ://   //| # |//\n"
"        #define SAM    int          //:  09  ://   //| # |//\n"
"        #define UFF    0xFF         //:  10  ://   //| # |//\n"
"        #define U00    0x00         //:  11  ://   //| # |//\n"
"        #define I00   ( 0 )         //:  12  ://   //| # |//\n"
"        #define U03   ( 3 )         //:  13  ://   //| # |//\n"
"        #define B_3   ( 3 )         //:  14  ://   //| # |//\n"
"        #define B11   ( 3 )         //:  15  ://   //| # |//\n"
"        #define H55    0x55         //:  16  ://   //| # |//\n"
"        #define V_A   void          //:  17  ://   //| # |//\n"
"        #define FV4   struct AAC2020_POLYOGL_FV4   //| # |//\n"
"        #define ASS   assert        //:  19  ://   //| # |//\n"
"        #define ERR   aac2020_p5d1ogl_Halt         //| # |//\n"
"        #define TRU   AAC2020_POLYOGL_Trunc        //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //|---|//\n"
"        #define MAK_FV4      vec4                  //| 1 |//\n"
"        #define MAK_IV2     ivec2                  //| 2 |//\n"
"        #define MAK_U32      uint                  //| 3 |//\n"
"        #define MAK_I32       int                  //| 4 |//\n"
"        #define MAK_F32     float                  //| 5 |//\n"
"        #define BIN_011 uint( 3 )                  //| 6 |//\n"
"        #define TYP_F_C /** nothing **/            //| 7 |//\n"
"        #define INN_F_C /** nothing **/            //| 8 |//\n"
"    #else                                          //|---|//\n"
"        #define MAK_FV4 AAC2020_POLYOGL_MAK_FV4    //| 1 |//\n"
"        #define MAK_IV2 AAC2020_POLYOGL_MAK_IV2    //| 2 |//\n"
"        #define MAK_U32 AAC2020_POLYOGL_MAK_U32    //| 3 |//\n"
"        #define MAK_I32 AAC2020_POLYOGL_MAK_I32    //| 4 |//\n"
"        #define MAK_F32 AAC2020_POLYOGL_MAK_F32    //| 5 |//\n"
"        #define BIN_011 ((U32)3 )                  //| 6 |//\n"
"        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //| 7 |//\n"
"        #define INN_F_C F_C                        //| 8 |//\n"
"    #endif                                         //|---|//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//\n"
"        IV2 //:<-- OUT[ d_x , d_y ]                //: m ://\n"
"        AAC2020_FRAGCOM_rec_src_MAP_rec_dst(       //: m ://\n"
"            I32 s_x                                //: m ://\n"
"        ,   I32 s_y                                //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 sx0  //:rec_src: BOUND_LEF         //: m ://\n"
"        ,   I32 sy0  //:rec_src: BOUND_RIG         //: m ://\n"
"        ,   I32 sx1  //:rec_src: BOUND_TOP         //: m ://\n"
"        ,   I32 sy1  //:rec_src: BOUND_BOT         //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 dx0  //:rec_dst: BOUND_LEF         //: m ://\n"
"        ,   I32 dy0  //:rec_dst: BOUND_RIG         //: m ://\n"
"        ,   I32 dx1  //:rec_dst: BOUND_TOP         //: m ://\n"
"        ,   I32 dy1  //:rec_dst: BOUND_BOT         //: m ://\n"
"        )                                          //: m ://\n"
"        {                                          //: m ://\n"
"            //:#_FUCK_THIS_REMAPPING_FORMULA_REMOVED_# m ://\n"
"                                                   //: m ://\n"
"            F32 SX0 = MAK_F32( sx0 );              //: m ://\n"
"            F32 SX1 = MAK_F32( sx1 );              //: m ://\n"
"            F32 SY0 = MAK_F32( sy0 );              //: m ://\n"
"            F32 SY1 = MAK_F32( sy1 );              //: m ://\n"
"                                                   //: m ://\n"
"            F32 DX0 = MAK_F32( dx0 );              //: m ://\n"
"            F32 DX1 = MAK_F32( dx1 );              //: m ://\n"
"            F32 DY0 = MAK_F32( dy0 );              //: m ://\n"
"            F32 DY1 = MAK_F32( dy1 );              //: m ://\n"
"                                                   //: m ://\n"
"            F32 S_X = MAK_F32( s_x );              //: m ://\n"
"            F32 S_Y = MAK_F32( s_y );              //: m ://\n"
"                                                   //: m ://\n"
"            I32 d_x ; //:DEST:X                    //: m ://\n"
"            I32 d_y ; //:DEST:Y                    //: m ://\n"
"                                                   //: m ://\n"
"                                                   //: m ://\n"
"            //:Use_Percent_Along_Path_Remapping:---------://\n"
"                                                   //: m ://\n"
"                //: 3 == number of[ iths ]         //: m ://\n"
"                //: 0/3  1/3   2/3  3/3            //: m ://\n"
"                //: [0][1][2][3]                   //: m ://\n"
"                //: |<-- 4 --->|                   //: m ://\n"
"                                                   //: m ://\n"
"                if( 0.0 == (SX1-SX0) ){            //: m ://\n"
"                    //: [0][1]  [2]   [3][4]       //: m ://\n"
"                    //:|<------- 5 -------->|      //: m ://\n"
"                    d_x = MAK_I32( DX0 + ((DX1-DX0)/2.0 ) );\n"
"                    //:Arbitrarily pick center because   ://\n"
"                    //:cannot figure out where you are   ://\n"
"                    //:relatively when viewport is 1x1   ://\n"
"                    //: pixel in size.                   ://\n"
"                }else{                             //: m ://\n"
"                    d_x=MAK_I32(                   //: m ://\n"
"                    DX0 +                          //: m ://\n"
"                    (                              //: m ://\n"
"                        ( //:Input % along path:   //: m ://\n"
"                            (S_X-SX0) / (SX1-SX0)  //: m ://\n"
"                        )                          //: m ://\n"
"                        *                          //: m ://\n"
"                        ( //:Max possible zeroed out   //://\n"
"                          //:coord in the destination. //://\n"
"                            1.0 * ( DX1 - DX0 )        //://\n"
"                        )                              //://\n"
"                    ));;                               //://\n"
"                                                       //://\n"
"                };;                                    //://\n"
"                if( 0.0 == (SY1-SY0) ){                //://\n"
"                    d_y = MAK_I32( DY0 + ((DY1-DY0)/2.0) );\n"
"                }else{                                 //://\n"
"                    d_y=MAK_I32(                       //://\n"
"                    DY0 +                              //://\n"
"                    (                                  //://\n"
"                        ( //:Input percent along path:   ://\n"
"                            (S_Y-SY0) / (SY1-SY0)      //://\n"
"                        )                              //://\n"
"                        *                              //://\n"
"                        ( //:Max possible zeroed out   //://\n"
"                          //:coord in the destination. //://\n"
"                            1.0 * ( DY1 - DY0 )        //://\n"
"                        )                              //://\n"
"                    ));;                               //://\n"
"                };;                                    //://\n"
"            //:---------:Use_Percent_Along_Path_Remapping://\n"
"            IV2     rec_dst;\n"
"                    rec_dst.x =( d_x );\n"
"                    rec_dst.y =( d_y );\n"
"            return( rec_dst );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://  \n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //[ x ]//\n"
"        #undef  E_S_private                        //[ x ]//\n"
"        #undef  E_S                                //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"                                                   //[ x ]//\n"
"        #undef  F32      //:  01  ://              //[ x ]//\n"
"        #undef  U32      //:  02  ://              //[ x ]//\n"
"        #undef  I32      //:  03  ://              //[ x ]//\n"
"        #undef  IV2      //:  04  ://              //[ x ]//\n"
"        #undef  UV4      //:  05  ://              //[ x ]//\n"
"        #undef  T_F      //:  06  ://              //[ x ]//\n"
"        #undef  TAU      //:  07  ://              //[ x ]//\n"
"        #undef  P5D      //:  08  ://              //[ x ]//\n"
"        #undef  SAM      //:  09  ://              //[ x ]//\n"
"        #undef  UFF      //:  10  ://              //[ x ]//\n"
"        #undef  U00      //:  11  ://              //[ x ]//\n"
"        #undef  I00      //:  12  ://              //[ x ]//\n"
"        #undef  U03      //:  13  ://              //[ x ]//\n"
"        #undef  B_3      //:  14  ://              //[ x ]//\n"
"        #undef  B11      //:  15  ://              //[ x ]//\n"
"        #undef  H55      //:  16  ://              //[ x ]//\n"
"        #undef  V_A      //:  17  ://              //[ x ]//\n"
"        #undef  FV4      //:  18  ://              //[ x ]//\n"
"        #undef  ASS      //:  19  ://              //[ x ]//\n"
"        #undef  ERR      //:  20  ://              //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/\n"
"    /** Decided on [MAK] for [MAKE] as our constructor   **/\n"
"    /** postfix ........................................ **/\n"
"                                                   //[ x ]//\n"
"        #undef  MAK_FV4                            //[ 1 ]//\n"
"        #undef  MAK_IV2                            //[ 2 ]//\n"
"        #undef  MAK_I32                            //[ 3 ]//\n"
"        #undef  MAK_F32                            //[ 4 ]//\n"
"        #undef  BIN_011                            //[ 5 ]//\n"
"        #undef  CUVIPIX                            //[ 6 ]//\n"
"        #undef  TYP_F_C                            //[ 7 ]//\n"
"        #undef  INN_F_C                            //[ 8 ]//\n"
"                                                   //[ x ]//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //:===========:COM_001____AAC2020_FRAGCOM_DEFAULT_001://  \n"
"    //[=====================:PASTE_INTO_FILE[ COM_001._ ]]//\n"
"    //[======================:AAC2020_FRAGCOM_DEFAULT_001]//\n"
"    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//\n"
