"    //:TODO: REWORK THIS CODE INTO NEW SHADER\n"
"    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//\n"
"    //[AAC2020_FRAGCOM_DEFAULT_001:======================]//\n"
"    //[PASTE_INTO_FILE[ COM_001._ ]:=====================]//\n"
"    //:COM_001____AAC2020_FRAGCOM_DEFAULT_001:===========://\n"
"    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//\n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //| # |//\n"
"        /** ******************************** ***   //| # |//\n"
"        @VID_IID[ 0112 ]TIME[ 00:56:50 ]           //| # |//\n"
"        Get rid of quote marks in the source       //| # |//\n"
"        So we can wrap entire thing into a         //| # |//\n"
"        very large multi-line string.              //| # |//\n"
"        *** ******************************** **/   //| # |//\n"
"                                                   //| # |//\n"
"        #define            E_S_private( e_m ) #e_m //| # |//\n"
"        #define E_S( e_m ) E_S_private( e_m )      //| # |//\n"
"                                                   //| # |//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As GLSL Code. **/         //| # |//\n"
"                                                   //| # |//\n"
"        #define F32        float    //:  01  ://   //| # |//\n"
"        #define U32         uint    //:  02  ://   //| # |//\n"
"        #define I32          int    //:  03  ://   //| # |//\n"
"        #define IV2        ivec2    //:  04  ://   //| # |//\n"
"        #define UV4        uvec4    //:  05  ://   //| # |//\n"
"        #define T_F   texelFetch    //:  06  ://   //| # |//\n"
"        #define TAU      taudepo    //:  07  ://   //| # |//\n"
"        #define P5D      paint5d    //:  08  ://   //| # |//\n"
"        #define SAM   usampler2D    //:  09  ://   //| # |//\n"
"        #define UFF    uint(0xFF)   //:  10  ://   //| # |//\n"
"        #define U00    uint( 0  )   //:  11  ://   //| # |//\n"
"        #define I00     int( 0  )   //:  12  ://   //| # |//\n"
"        #define U03    uint( 3  )   //:  13  ://   //| # |//\n"
"        #define B_3    uint( 3  )   //:  14  ://   //| # |//\n"
"        #define B11    uint( 3  )   //:  15  ://   //| # |//\n"
"        #define H55    uint(0x55)   //:  16  ://   //| # |//\n"
"        #define V_A                 //:  17  ://   //| # |//\n"
"        #define FV4         vec4    //:  18  ://   //| # |//\n"
"        #define ASS  /**NOTHING**/  //:  19  ://   //| # |//\n"
"        #define ERR  /**NOTHING**/  //:  20  ://   //| # |//\n"
"        #define TRU  trunc          //:  21  ://   //| # |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As C99/C11 Code. **/      //| # |//\n"
"                                                   //| # |//\n"
"        #define F32      float      //:  01  ://   //| # |//\n"
"        #define U32   uint32_t      //:  02  ://   //| # |//\n"
"        #define I32    int32_t      //:  03  ://   //| # |//\n"
"        #define IV2   struct AAC2020_POLYOGL_IV2   //| # |//\n"
"        #define UV4   struct AAC2020_POLYOGL_UV4   //| # |//\n"
"        #define T_F   AAC2020_POLYOGL_tex_fet      //| # |//\n"
"        #define TAU   ( 0 )         //:  07  ://   //| # |//\n"
"        #define P5D   ( 1 )         //:  08  ://   //| # |//\n"
"        #define SAM    int          //:  09  ://   //| # |//\n"
"        #define UFF    0xFF         //:  10  ://   //| # |//\n"
"        #define U00    0x00         //:  11  ://   //| # |//\n"
"        #define I00   ( 0 )         //:  12  ://   //| # |//\n"
"        #define U03   ( 3 )         //:  13  ://   //| # |//\n"
"        #define B_3   ( 3 )         //:  14  ://   //| # |//\n"
"        #define B11   ( 3 )         //:  15  ://   //| # |//\n"
"        #define H55    0x55         //:  16  ://   //| # |//\n"
"        #define V_A   void          //:  17  ://   //| # |//\n"
"        #define FV4   struct AAC2020_POLYOGL_FV4   //| # |//\n"
"        #define ASS   assert        //:  19  ://   //| # |//\n"
"        #define ERR   aac2020_p5d1ogl_Halt         //| # |//\n"
"        #define TRU   AAC2020_POLYOGL_Trunc        //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //|---|//\n"
"        #define MAK_FV4      vec4                  //| 1 |//\n"
"        #define MAK_IV2     ivec2                  //| 2 |//\n"
"        #define MAK_U32      uint                  //| 3 |//\n"
"        #define MAK_I32       int                  //| 4 |//\n"
"        #define MAK_F32     float                  //| 5 |//\n"
"        #define BIN_011 uint( 3 )                  //| 6 |//\n"
"        #define TYP_F_C /** nothing **/            //| 7 |//\n"
"        #define INN_F_C /** nothing **/            //| 8 |//\n"
"        #define ROU_NAT round /** round NATIVE **/ //| 9 |//\n"
"        #define ROU_F32 AAC2020_FRAGCOM_ROU_F32    //|10 |//\n"
"        #define CEL_NAT ceil                       //|11 |//\n"
"        #define CEL_F32 AAC2020_FRAGCOM_CEL_F32    //|12 |//\n"
"    #else                                          //|---|//\n"
"        #define MAK_FV4 AAC2020_POLYOGL_MAK_FV4    //| 1 |//\n"
"        #define MAK_IV2 AAC2020_POLYOGL_MAK_IV2    //| 2 |//\n"
"        #define MAK_U32 AAC2020_POLYOGL_MAK_U32    //| 3 |//\n"
"        #define MAK_I32 AAC2020_POLYOGL_MAK_I32    //| 4 |//\n"
"        #define MAK_F32 AAC2020_POLYOGL_MAK_F32    //| 5 |//\n"
"        #define BIN_011 ((U32)3 )                  //| 6 |//\n"
"        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //| 7 |//\n"
"        #define INN_F_C F_C                        //| 8 |//\n"
"        #define ROU_NAT AAC2020_POLYOGL_ROU_NAT    //| 9 |//\n"
"        #define ROU_F32 AAC2020_POLYOGL_ROU_F32    //|10 |//\n"
"        #define CEL_NAT AAC2020_POLYOGL_CEL_NAT    //| 9 |//\n"
"        #define CEL_F32 AAC2020_POLYOGL_CEL_F32    //|10 |//\n"
"    #endif                                         //|---|//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//\n"
"        I32\n"
"        AAC2020_FRAGCOM_CEL_F32(\n"
"            F32 f32\n"
"        )  \n"
"        {   \n"
"            return( MAK_I32( CEL_NAT( f32 ) ) );\n"
"        }\n"
"        I32\n"
"        AAC2020_FRAGCOM_ROU_F32(\n"
"            F32 f32\n"
"        )\n"
"        {\n"
"            return( MAK_I32( ROU_NAT( f32 ) ) );\n"
"        }\n"
"        I32 \n"
"        AAC2020_FRAGCOM_rv0_CTO_rv1(\n"
"            I32 r_0 //:X-or-Y axis: INNPUT: range ( LARGER)\n"
"        ,   I32 v_0 //:X-or-Y axis: INNPUT: value\n"
"        ,   I32 r_1 //:X-or-Y axis: OUTPUT: range (SMALLER)\n"
"        //: RET v_1 <-- Return output value\n"
"        )\n"
"        {\n"
"            /** **************************************** **/\n"
"            /** This mapping is designed for mapping     **/\n"
"            /** from large range of values to a          **/\n"
"            /** smaller range of values.                 **/\n"
"            /** **************************************** **/\n"
"            ASS( r_1 <= r_0 );\n"
"        //| |<---------------  12  --------------->|<-R_0|//    \n"
"        //| [0][1][2][3]  [4][5][6][7]  [8][9][A][B]<-V_0|//\n"
"        //| |<-- c_s ->|                            <-   |//\n"
"        //|                                         <-   |//\n"
"        //|     [00]          [01]          [02]    <-V_1|//\n"
"        //|     |<------------ 03 ------------>|    <-R_1|//\n"
"            I32 c_s =( r_0 / r_1 ); //:Cluster_Size\n"
"            I32 d_p =( v_0 / c_s ); //:Destination_Pixel\n"
"            return( d_p /** v_1 == d_p **/ );\n"
"        }\n"
"        /** One axis version of:         **/\n"
"        /** AAC2020_FRAGCOM_big_MAP_lit  **/\n"
"        /** ONE_AXE == One Axis          **/\n"
"        I32\n"
"        AAC2020_FRAGCOM_big_MAP_lit_ONE_AXE(\n"
"            I32 s_i\n"
"        ,   I32 s_0\n"
"        ,   I32 s_1\n"
"        ,   I32 d_0\n"
"        ,   I32 d_1\n"
"        )\n"
"        {\n"
"            I32 d_p =(\n"
"                ( //:<---------------- d_p : dest_pixel\n"
"                    s_i //:<------------------- v_0 : input_val\n"
"                    / \n"
"                    (   //:<------------------- c_s : cluster_size\n"
"                        ( (s_1-s_0) +1 ) //:<-- r_0 : RANGE_SOURCE\n"
"                    /   ( (d_1-d_0) +1 ) //:<-- r_1 : RANGE_DEST\n"
"                    )\n"
"                )\n"
"                +d_0 //:Add_New_Origin\n"
"            );;\n"
"            return( d_p );\n"
"        }\n"
"        IV2\n"
"        AAC2020_FRAGCOM_big_MAP_lit(\n"
"            I32 big_s_x  //: BIG: source(value)x\n"
"        ,   I32 big_s_y  //: BIG: source(value)y\n"
"                                                   //: m ://\n"
"        ,   I32 big_sx0  //:rec_src: BOUND_LEF     //: m ://\n"
"        ,   I32 big_sy0  //:rec_src: BOUND_RIG     //: m ://\n"
"        ,   I32 big_sx1  //:rec_src: BOUND_TOP     //: m ://\n"
"        ,   I32 big_sy1  //:rec_src: BOUND_BOT     //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 lit_dx0  //:rec_dst: BOUND_LEF     //: m ://\n"
"        ,   I32 lit_dy0  //:rec_dst: BOUND_RIG     //: m ://\n"
"        ,   I32 lit_dx1  //:rec_dst: BOUND_TOP     //: m ://\n"
"        ,   I32 lit_dy1  //:rec_dst: BOUND_BOT     //: m ://\n"
"        )                                          //: m ://\n"
"        {\n"
"            /** FUNCTION_SUMMARY[ big_MAP_lit ] ******** **/\n"
"            /** @VID_IID[ 0142 ]TIME[ 01:34:32 ] ******* **/\n"
"            /** Map a value on one range to a value on   **/\n"
"            /** another range. Written assuming the      **/\n"
"            /** destination range is same size or smaller**/\n"
"            /** than the input range. Have no clue how   **/\n"
"            /** this will work if that logic is flipped. **/\n"
"            /** **************************************** **/\n"
"            //:output_xy_coord_var:----------------------://\n"
"                IV2 dst;\n"
"            //:----------------------:output_xy_coord_var://\n"
"            //:No_Concept_Of_Offset_In_Here:-------------://\n"
"                dst.x=(\n"
"                AAC2020_FRAGCOM_rv0_CTO_rv1(\n"
"                    ( (big_sx1-big_sx0) +1 ) //:RANGE:INN\n"
"                ,   (          big_s_x     ) //:VALUE:INN\n"
"                ,   ( (lit_dx1-lit_dx0) +1 ) //:range:out\n"
"                ));;\n"
"                dst.y=(\n"
"                AAC2020_FRAGCOM_rv0_CTO_rv1(\n"
"                    ( (big_sy1-big_sy0) +1 ) //:RANGE:INN\n"
"                ,   (          big_s_y     ) //:VALUE:INN\n"
"                ,   ( (lit_dy1-lit_dy0) +1 ) //:range:out\n"
"                ));;\n"
"            //:-------------:No_Concept_Of_Offset_In_Here://\n"
"            /** Un-Zero out the output coordinate **/\n"
"            dst.x =( dst.x + lit_dx0 );\n"
"            dst.y =( dst.y + lit_dy0 );\n"
"            return( dst );\n"
"        }\n"
"        /** USE[ AAC2020_FRAGCOM_big_MAP_lit ]           **/\n"
"        /** FIXED:Broken_Version_In[ DOC/TRASH/002._ ]   **/\n"
"        /** FIXED:@VID_IID[ 0142 ]TIME[ 02:22:42     ]   **/\n"
"        IV2 //:<-- OUT[ d_x , d_y ]                //: m ://\n"
"        AAC2020_FRAGCOM_rec_src_MAP_rec_dst(       //: m ://\n"
"            I32 s_x                                //: m ://\n"
"        ,   I32 s_y                                //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 sx0  //:rec_src: BOUND_LEF         //: m ://\n"
"        ,   I32 sy0  //:rec_src: BOUND_RIG         //: m ://\n"
"        ,   I32 sx1  //:rec_src: BOUND_TOP         //: m ://\n"
"        ,   I32 sy1  //:rec_src: BOUND_BOT         //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 dx0  //:rec_dst: BOUND_LEF         //: m ://\n"
"        ,   I32 dy0  //:rec_dst: BOUND_RIG         //: m ://\n"
"        ,   I32 dx1  //:rec_dst: BOUND_TOP         //: m ://\n"
"        ,   I32 dy1  //:rec_dst: BOUND_BOT         //: m ://\n"
"        )                                          //: m ://\n"
"        {                                          //: m ://\n"
"        #define F MAK_F32 //:<<<<<<<<<:HACKISH_FLOAT_CAST://\n"
"            //:#_FUCK_THIS_REMAPPING_FORMULA_REMOVED_# m ://\n"
"            IV2 dst; //:OUTPUT_DESTINATION---------------://\n"
"                                                   //:   ://\n"
"            dst.x =CEL_F32(( //:<----------- d_p : dst_pix://\n"
"            F(s_x-sx0)   //:<------------------- v_0 : inn_val://\n"
"                /                                  //:   ://\n"
"                (   //:<------------------- c_s : clu_siz://\n"
"                    F( (sx1-sx0) +1 ) //:<-- r_0 : rng_src://\n"
"                /   F( (dx1-dx0) +1 ) //:<-- r_1 : rng_dst://\n"
"                )                                  //:   ://\n"
"            )+F(dx0)); //:<-- Add_New_Origin\n"
"                                                   //:   ://\n"
"            dst.y =CEL_F32(( //:<------------------ d_p : dst_pix://\n"
"            F(s_y-sy0)//:<------------------- v_0 : inn_val://\n"
"                /                                  //:   ://\n"
"                (   //:<------------------- c_s : clu_siz://\n"
"                    F( (sy1-sy0) +1 ) //:<-- r_0 : rng_src://\n"
"                /   F( (dy1-dy0) +1 ) //:<-- r_1 : rng_dst://\n"
"                )                                  //:   ://\n"
"            )+F(dy0)); //:<-- Add_New_Origin\n"
"            return( dst );\n"
"        #undef  F //:<<<<<<<<<<<<<<<<<:HACKISH_FLOAT_CAST://\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://  \n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //[ x ]//\n"
"        #undef  E_S_private                        //[ x ]//\n"
"        #undef  E_S                                //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"                                                   //[ x ]//\n"
"        #undef  F32      //:  01  ://              //[ x ]//\n"
"        #undef  U32      //:  02  ://              //[ x ]//\n"
"        #undef  I32      //:  03  ://              //[ x ]//\n"
"        #undef  IV2      //:  04  ://              //[ x ]//\n"
"        #undef  UV4      //:  05  ://              //[ x ]//\n"
"        #undef  T_F      //:  06  ://              //[ x ]//\n"
"        #undef  TAU      //:  07  ://              //[ x ]//\n"
"        #undef  P5D      //:  08  ://              //[ x ]//\n"
"        #undef  SAM      //:  09  ://              //[ x ]//\n"
"        #undef  UFF      //:  10  ://              //[ x ]//\n"
"        #undef  U00      //:  11  ://              //[ x ]//\n"
"        #undef  I00      //:  12  ://              //[ x ]//\n"
"        #undef  U03      //:  13  ://              //[ x ]//\n"
"        #undef  B_3      //:  14  ://              //[ x ]//\n"
"        #undef  B11      //:  15  ://              //[ x ]//\n"
"        #undef  H55      //:  16  ://              //[ x ]//\n"
"        #undef  V_A      //:  17  ://              //[ x ]//\n"
"        #undef  FV4      //:  18  ://              //[ x ]//\n"
"        #undef  ASS      //:  19  ://              //[ x ]//\n"
"        #undef  ERR      //:  20  ://              //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/\n"
"    /** Decided on [MAK] for [MAKE] as our constructor   **/\n"
"    /** postfix ........................................ **/\n"
"                                                   //[ x ]//\n"
"        #undef  MAK_FV4                            //[ 1 ]//\n"
"        #undef  MAK_IV2                            //[ 2 ]//\n"
"        #undef  MAK_I32                            //[ 3 ]//\n"
"        #undef  MAK_F32                            //[ 4 ]//\n"
"        #undef  BIN_011                            //[ 5 ]//\n"
"        #undef  CUVIPIX                            //[ 6 ]//\n"
"        #undef  TYP_F_C                            //[ 7 ]//\n"
"        #undef  INN_F_C                            //[ 8 ]//\n"
"        #undef  ROU_NAT                            //[ 9 ]//\n"
"        #undef  ROU_F32                            //[10 ]//\n"
"        #undef  CEL_NAT                            //[11 ]//\n"
"        #undef  CEL_F32                            //[12 ]//\n"
"                                                   //[ x ]//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //:===========:COM_001____AAC2020_FRAGCOM_DEFAULT_001://  \n"
"    //[=====================:PASTE_INTO_FILE[ COM_001._ ]]//\n"
"    //[======================:AAC2020_FRAGCOM_DEFAULT_001]//\n"
"    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//\n"
