"    //:TODO: REWORK THIS CODE INTO NEW SHADER\n"
"    //:ALL_SHADERS_KNOW_ABOUT_ALL_MEMORY:----------------://\n"
"    //:glsl_file_scope_stuff:----------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        //:#_KEEP_USAMPLER_HIGH_#          ://     //| # |//\n"
"        //:#_SAM_PRECISION_BEFORE_SAM_VAR_#://     //| # |//\n"
"        precision highp usampler2D;                //| # |//\n"
"                                                   //| # |//\n"
"        //|(( UNI ))____________________________|////| # |//\n"
"        //[:::::::SHADERTOY_COMPATIBILITY:::::::]////| # |//\n"
"        #define fragCoord gl_FragCoord             //| # |//\n"
"        #define       F_C gl_FragCoord             //| # |//\n"
"        uniform vec3 iResolution;                  //| # |//\n"
"        uniform usampler2D taudepo;                //| # |//\n"
"        uniform usampler2D paint5d;                //| # |//\n"
"                                                   //| # |//\n"
"        //|(( INN ))____________________________|////| # |//\n"
"        //:     fag_tec:FrAGshaderTExtureCoord  :////| # |//\n"
"        in vec2 fag_tec;                           //| # |//\n"
"                                                   //| # |//\n"
"        //|(( OUT ))____________________________|////| # |//\n"
"        out vec4 FragColor;                        //| # |//\n"
"                                                   //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:----------------------------:glsl_file_scope_stuff://\n"
"    //:----------------:ALL_SHADERS_KNOW_ABOUT_ALL_MEMORY://\n"
"    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//\n"
"    //[AAC2020_FRAGCOM_DEFAULT_001:======================]//\n"
"    //[PASTE_INTO_FILE[ COM_001._ ]:=====================]//\n"
"    //:COM_001____AAC2020_FRAGCOM_DEFAULT_001:===========://\n"
"    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//\n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //| # |//\n"
"        /** ******************************** ***   //| # |//\n"
"        @VID_IID[ 0112 ]TIME[ 00:56:50 ]           //| # |//\n"
"        Get rid of quote marks in the source       //| # |//\n"
"        So we can wrap entire thing into a         //| # |//\n"
"        very large multi-line string.              //| # |//\n"
"        *** ******************************** **/   //| # |//\n"
"                                                   //| # |//\n"
"        #define            E_S_private( e_m ) #e_m //| # |//\n"
"        #define E_S( e_m ) E_S_private( e_m )      //| # |//\n"
"                                                   //| # |//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As GLSL Code. **/         //| # |//\n"
"                                                   //| # |//\n"
"        #define F32        float    //:  01  ://   //| # |//\n"
"        #define U32         uint    //:  02  ://   //| # |//\n"
"        #define I32          int    //:  03  ://   //| # |//\n"
"        #define IV2        ivec2    //:  04  ://   //| # |//\n"
"        #define UV4        uvec4    //:  05  ://   //| # |//\n"
"        #define T_F   texelFetch    //:  06  ://   //| # |//\n"
"        #define TAU      taudepo    //:  07  ://   //| # |//\n"
"        #define P5D      paint5d    //:  08  ://   //| # |//\n"
"        #define SAM   usampler2D    //:  09  ://   //| # |//\n"
"        #define UFF    uint(0xFF)   //:  10  ://   //| # |//\n"
"        #define U00    uint( 0  )   //:  11  ://   //| # |//\n"
"        #define I00     int( 0  )   //:  12  ://   //| # |//\n"
"        #define U03    uint( 3  )   //:  13  ://   //| # |//\n"
"        #define B_3    uint( 3  )   //:  14  ://   //| # |//\n"
"        #define B11    uint( 3  )   //:  15  ://   //| # |//\n"
"        #define H55    uint(0x55)   //:  16  ://   //| # |//\n"
"        #define V_A                 //:  17  ://   //| # |//\n"
"        #define FV4         vec4    //:  18  ://   //| # |//\n"
"        #define ASS  /**NOTHING**/  //:  19  ://   //| # |//\n"
"        #define ERR  /**NOTHING**/  //:  20  ://   //| # |//\n"
"        #define TRU  trunc          //:  21  ://   //| # |//\n"
"        #define REC  struct AAC2020_FRAGCOM_REC   //| 22 |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As C99/C11 Code. **/      //| # |//\n"
"                                                   //| # |//\n"
"        #define F32      float      //:  01  ://   //| # |//\n"
"        #define U32   uint32_t      //:  02  ://   //| # |//\n"
"        #define I32    int32_t      //:  03  ://   //| # |//\n"
"        #define IV2   struct AAC2020_POLYOGL_IV2   //| # |//\n"
"        #define UV4   struct AAC2020_POLYOGL_UV4   //| # |//\n"
"        #define T_F   AAC2020_POLYOGL_tex_fet      //| # |//\n"
"        #define TAU   ( 0 )         //:  07  ://   //| # |//\n"
"        #define P5D   ( 1 )         //:  08  ://   //| # |//\n"
"        #define SAM    int          //:  09  ://   //| # |//\n"
"        #define UFF    0xFF         //:  10  ://   //| # |//\n"
"        #define U00    0x00         //:  11  ://   //| # |//\n"
"        #define I00   ( 0 )         //:  12  ://   //| # |//\n"
"        #define U03   ( 3 )         //:  13  ://   //| # |//\n"
"        #define B_3   ( 3 )         //:  14  ://   //| # |//\n"
"        #define B11   ( 3 )         //:  15  ://   //| # |//\n"
"        #define H55    0x55         //:  16  ://   //| # |//\n"
"        #define V_A   void          //:  17  ://   //| # |//\n"
"        #define FV4   struct AAC2020_POLYOGL_FV4   //| # |//\n"
"        #define ASS   assert        //:  19  ://   //| # |//\n"
"        #define ERR   aac2020_p5d1ogl_Halt         //| # |//\n"
"        #define TRU   AAC2020_POLYOGL_Trunc        //| # |//\n"
"        #define REC  struct AAC2020_POLYOGL_REC   //| 22 |//\n"
"    #endif                                         //| # |//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //|---|//\n"
"        #define MAK_FV4      vec4                  //| 1 |//\n"
"        #define MAK_IV2     ivec2                  //| 2 |//\n"
"        #define MAK_U32      uint                  //| 3 |//\n"
"        #define MAK_I32       int                  //| 4 |//\n"
"        #define MAK_F32     float                  //| 5 |//\n"
"        #define BIN_011 uint( 3 )                  //| 6 |//\n"
"        #define TYP_F_C /** nothing **/            //| 7 |//\n"
"        #define INN_F_C /** nothing **/            //| 8 |//\n"
"        //:-------------------------------------:////|---|//\n"
"        #define FLO_NAT floor                      //| 9 |//\n"
"        #define FLO_F32 AAC2020_FRAGCOM_FLO_F32    //|10 |//\n"
"        #define ROU_NAT round /** round NATIVE **/ //|11 |//\n"
"        #define ROU_F32 AAC2020_FRAGCOM_ROU_F32    //|12 |//\n"
"        #define CEL_NAT ceil                       //|13 |//\n"
"        #define CEL_F32 AAC2020_FRAGCOM_CEL_F32    //|14 |//\n"
"        #define COF_F32 AAC2020_FRAGCOM_COF_F32    //|15 |//\n"
"    #else                                          //|---|//\n"
"        #define MAK_FV4 AAC2020_POLYOGL_MAK_FV4    //[ 1 ]//\n"
"        #define MAK_IV2 AAC2020_POLYOGL_MAK_IV2    //[ 2 ]//\n"
"        #define MAK_U32 AAC2020_POLYOGL_MAK_U32    //[ 3 ]//\n"
"        #define MAK_I32 AAC2020_POLYOGL_MAK_I32    //[ 4 ]//\n"
"        #define MAK_F32 AAC2020_POLYOGL_MAK_F32    //[ 5 ]//\n"
"        #define BIN_011 ((U32)3 )                  //[ 6 ]//\n"
"        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //[ 7 ]//\n"
"        #define INN_F_C F_C                        //[ 8 ]//\n"
"        //:-------------------------------------:////[---]//\n"
"        #define FLO_NAT AAC2020_POLYOGL_ROU_NAT    //[ 9 ]//      \n"
"        #define FLO_F32 AAC2020_POLYOGL_ROU_F32    //[10 ]//\n"
"        #define ROU_NAT AAC2020_POLYOGL_ROU_NAT    //[11 ]//\n"
"        #define ROU_F32 AAC2020_POLYOGL_ROU_F32    //[12 ]//\n"
"        #define CEL_NAT AAC2020_POLYOGL_CEL_NAT    //[13 ]//\n"
"        #define CEL_F32 AAC2020_POLYOGL_CEL_F32    //[14 ]//\n"
"        #define COF_F32 AAC2020_POLYOGL_COF_F32    //[15 ]//\n"
"    #endif                                         //[---]//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//\n"
"    //:COMMON_DATA_TYPES_USED_IN_SHADERS:================://\n"
"        //:INTEGER_RECTANGLE:----------------------------://\n"
"            struct AAC2020_FRAGCOM_REC{\n"
"                //:X_BOUNDS:\n"
"                I32 x_0 ; //:<--@_NEVER_NEGATIVE_@.\n"
"                I32 x_1 ; //:   But use signed for ease of\n"
"                          //:   use as well as underflow\n"
"                          //:   detection.\n"
"                          //:   @_SHOULD_NOT_BE_NEGATIVE_@\n"
"                //:Y_BOUNDS:\n"
"                I32 y_0 ; //:<--@_NEVER_NEGATIVE_@.\n"
"                I32 y_1 ; //:   But use signed for ease of\n"
"                          //:   use as well as underflow\n"
"                          //:   detection.\n"
"                          //:   @_SHOULD_NOT_BE_NEGATIVE_@\n"
"            };\n"
"        //:----------------------------:INTEGER_RECTANGLE://\n"
"    //:================:COMMON_DATA_TYPES_USED_IN_SHADERS://\n"
"    //:Floor_Round_Ceil:---------------------------------://\n"
"        I32                                           //:://\n"
"        AAC2020_FRAGCOM_FLO_F32(                      //:://\n"
"            F32 f32                                   //:://\n"
"        )                                             //:://\n"
"        {                                             //:://\n"
"            return( MAK_I32( FLO_NAT( f32 ) ) );      //:://\n"
"        }                                             //:://\n"
"        I32                                           //:://\n"
"        AAC2020_FRAGCOM_ROU_F32(                      //:://\n"
"            F32 f32                                   //:://\n"
"        )                                             //:://\n"
"        {                                             //:://\n"
"            return( MAK_I32( ROU_NAT( f32 ) ) );      //:://\n"
"        }                                             //:://\n"
"        I32                                           //:://\n"
"        AAC2020_FRAGCOM_CEL_F32(                      //:://\n"
"            F32 f32                                   //:://\n"
"        )                                             //:://\n"
"        {                                             //:://\n"
"            return( MAK_I32( CEL_NAT( f32 ) ) );      //:://\n"
"        }                                             //:://\n"
"    //:---------------------------------:Floor_Round_Ceil://\n"
"    //:Ceil_Or_Floor:------------------------------------://\n"
"    /** TRASHED. SEE[ DOC/TRASH/006._ ] **************** **/\n"
"        //: DO_NOT_USE_THIS_FUNCTION.                    ://\n"
"        //: You are doing something very wrong in your   ://\n"
"        //: code if you need branching like this.        ://\n"
"        #define AAC2020_FRAGCOM_COF_F32 0000\n"
"    //:------------------------------------:Ceil_Or_Floor://\n"
"        /** TRASHED: AAC2020_FRAGCOM_rv0_CTO_rv1         **/\n"
"        /** TRASHED: AAC2020_FRAGCOM_big_MAP_lit_ONE_AXE **/\n"
"        /** SEE[ DOC/TRASH/007._ ]                       **/\n"
"        /** VID_IID[ 0145 ]T[ 03:07:44 ]                 **/\n"
"                                                   //: m ://\n"
"        IV2                                        //: m ://\n"
"        AAC2020_FRAGCOM_big_MAP_lit(               //: m ://\n"
"            I32 big_s_x  //:BIG:source(value)x     //: m ://\n"
"        ,   I32 big_s_y  //:BIG:source(value)y     //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 big_sx0  //:rec_src: BOUND_MIN     //: m ://\n"
"        ,   I32 big_sy0  //:rec_src: BOUND_MIN     //: m ://\n"
"        ,   I32 big_sx1  //:rec_src: BOUND_MAX     //: m ://\n"
"        ,   I32 big_sy1  //:rec_src: BOUND_MAX     //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 lit_dx0  //:rec_dst: BOUND_MIN     //: m ://\n"
"        ,   I32 lit_dy0  //:rec_dst: BOUND_MIN     //: m ://\n"
"        ,   I32 lit_dx1  //:rec_dst: BOUND_MAX     //: m ://\n"
"        ,   I32 lit_dy1  //:rec_dst: BOUND_MAX     //: m ://\n"
"        )                                          //: m ://\n"
"        {\n"
"            /** FUNCTION_SUMMARY[ big_MAP_lit ] ******** **/\n"
"            /** @VID_IID[ 0142 ]TIME[ 01:34:32 ] ******* **/\n"
"            /** Map a value on one range to a value on   **/\n"
"            /** another range. Written assuming the      **/\n"
"            /** destination range is same size or smaller**/\n"
"            /** than the input range. Have no clue how   **/\n"
"            /** this will work if that logic is flipped. **/\n"
"            /** **************************************** **/\n"
"            //:output_xy_coord_var:----------------------://\n"
"                IV2 dst;\n"
"            //:----------------------:output_xy_coord_var://\n"
"            //:INTEGER_DOWNSCALE_FORMULA:----------------://\n"
"            #define NOT_CTF /** NOT_Convert_To_Float **/\n"
"            #define NO_CAST /** No casting logic needed **/\n"
"                #define S_I big_s_x\n"
"                #define S_0 big_sx0\n"
"                #define S_1 big_sx1\n"
"                #define D_0 lit_dx0\n"
"                #define D_1 lit_dx1\n"
"                #define D_P dst.x\n"
"                D_P =NO_CAST(\n"
"                    (  \n"
"                        NOT_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            NOT_CTF( (S_1 - S_0) +1 )  \n"
"                        /   NOT_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +NOT_CTF( D_0 ) //:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"                #define S_I big_s_y\n"
"                #define S_0 big_sy0\n"
"                #define S_1 big_sy1\n"
"                #define D_0 lit_dy0\n"
"                #define D_1 lit_dy1\n"
"                #define D_P dst.y\n"
"                D_P =NO_CAST(\n"
"                    (  \n"
"                        NOT_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            NOT_CTF( (S_1 - S_0) +1 )  \n"
"                        /   NOT_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +NOT_CTF( D_0 ) //:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"            #undef  NOT_CTF\n"
"            #undef  NO_CAST\n"
"            //:----------------:INTEGER_DOWNSCALE_FORMULA://        \n"
"            return( dst );\n"
"        }\n"
"        IV2                                         \n"
"        AAC2020_FRAGCOM_fic_MAP_cuv(       \n"
"            IV2 fic      //:fic:Fragment_Integer_Coord       \n"
"        ,   REC p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]\n"
"        ,   REC p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]\n"
"        )                                           \n"
"        {\n"
"            /** **************************************** ***\n"
"                @VID_IID[ 0151 ]TIME[ 04:51:23 ]\n"
"                Designed to scan over the on-screen\n"
"                viewport (p5d_vp0) and map to the\n"
"                offscreen data (p5d_vp1).\n"
"                p5d_vp0 == ON SCREEN SUB AREA OF CLIENT\n"
"                p5d_vp1 == OFF SCREEN DATA TO SAMPLE\n"
"                fic: Fragment_Integer_Coordinate  \n"
"                cuv: Canvas_User_View             \n"
"            *** **************************************** **/\n"
"            //:output_xy_coord_var:----------------------://\n"
"                IV2 dst;\n"
"            //:----------------------:output_xy_coord_var://\n"
"            //:INTEGER_DOWNSCALE_FORMULA:----------------://\n"
"            #define NOT_CTF /** NOT_Convert_To_Float **/\n"
"            #define YES_CTF MAK_F32\n"
"                #define S_I     fic.x   //: big_s_x\n"
"                #define S_0 p5d_vp0.x_0 //: big_sx0\n"
"                #define S_1 p5d_vp0.x_1 //: big_sx1\n"
"                #define D_0 p5d_vp1.x_0 //: lit_dx0\n"
"                #define D_1 p5d_vp1.x_1 //: lit_dx1\n"
"                #define D_P dst.x\n"
"                D_P =MAK_I32(\n"
"                    (  \n"
"                        YES_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            YES_CTF( (S_1 - S_0) +1 )  \n"
"                        /   YES_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +YES_CTF( D_0 )//:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"                #define S_I     fic.y   //: big_s_y\n"
"                #define S_0 p5d_vp0.y_0 //: big_sy0\n"
"                #define S_1 p5d_vp0.y_1 //: big_sy1\n"
"                #define D_0 p5d_vp1.y_0 //: lit_dy0\n"
"                #define D_1 p5d_vp1.y_1 //: lit_dy1\n"
"                #define D_P dst.y\n"
"                D_P =MAK_I32(\n"
"                    (  \n"
"                        YES_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            YES_CTF( (S_1 - S_0) +1 )  \n"
"                        /   YES_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +YES_CTF( D_0 )//:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"            #undef  NOT_CTF\n"
"            #undef  YES_CTF\n"
"            //:----------------:INTEGER_DOWNSCALE_FORMULA://        \n"
"            return( dst );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://  \n"
"        /** TRASHED:AAC2020_FRAGCOM_rec_src_MAP_rec_dst  **/\n"
"        /** SEE[ DOC/TRASH/005._ ]                       **/\n"
"        /** VID_IID[ 0145 ]TIME[ 02:43:23 ]              **/\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://  \n"
"        U32                                       //[ TF ]//\n"
"        AAC2020_FRAGCOM_TexelFetch_U32(           //[ TF ]//\n"
"            SAM u32_sam //:<-[C99/C11]AND[GLSL]:////[ TF ]//\n"
"        ,   IV2 glo                               //[ TF ]//\n"
"        ,   I32 levodet_ALWAYS_ZERO               //[ TF ]//\n"
"        )                                         //[ TF ]//\n"
"        {                                         //[ TF ]//\n"
"            U32 u32_var; /** Output/Return **/    //[ TF ]//\n"
"                                                  //[ TF ]//\n"
"            //:TEXEL_FETCH_RETURNS_XYZW_U08:-------------://     \n"
"            /** GET: [ x,y,z,w ] / [r,g,b,a]  **/ //[ TF ]//\n"
"            /**      texel As a uvec 4 type.  **/ //[ TF ]//\n"
"                UV4 uv4=(                         //[ TF ]//\n"
"                    T_F(                          //[ TF ]//\n"
"                        u32_sam                   //[ TF ]//\n"
"                    ,   glo                       //[ TF ]//\n"
"                    ,   levodet_ALWAYS_ZERO       //[ TF ]//\n"
"                    ));;                          //[ TF ]//\n"
"                                                  //[ TF ]//\n"
"            //:-------------:TEXEL_FETCH_RETURNS_XYZW_U08://\n"
"            //:BIT_PACK_YOUR_PIXEL:----------------------://\n"
"            #define CPU_PIX AAC2020_PIXNAME_paint5d_cpu_pix\n"
"            /** **************************************TF *** \n"
"                @VID_IID[ 0177 ]TIME[ 01:05:33 ]  //[ TF ]//\n"
"                #_EXT_COM_2021_03_13_313PM_#      //[ TF ]//\n"
"            *** **************************************TF **/ \n"
"                                                  //[ TF ]//\n"
"                u32_var=( U00 /** 0x00 **/        //[ TF ]//\n"
"                | ( uv4.x << 24 ) //: R ://       //[ TF ]//\n"
"                | ( uv4.y << 16 ) //: G ://       //[ TF ]//\n"
"                | ( uv4.z <<  8 ) //: B ://       //[ TF ]//\n"
"                | ( uv4.w <<  0 ) //: A ://       //[ TF ]//\n"
"                );;  /**@PAIR_CODE_2021_01_14@ **///[ TF ]//\n"
"                                                  //[ TF ]//\n"
"            #undef  CPU_PIX                       //[ TF ]//\n"
"            //:----------------------:BIT_PACK_YOUR_PIXEL://\n"
"            return( u32_var );                    //[ TF ]//\n"
"        }                                         //[ TF ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                       //[ TF ]//\n"
"        AAC2020_FRAGCOM_TexelFetch_U32XY(         //[ TF ]//\n"
"            SAM u32_sam //:<-[C99/C11]AND[GLSL]:////[ TF ]//\n"
"        ,   I32 g_x                               //[ TF ]//\n"
"        ,   I32 g_y                               //[ TF ]//\n"
"        ,   I32 levodet_ALWAYS_ZERO               //[ TF ]//\n"
"        )                                         //[ TF ]//\n"
"        {                                         //[ TF ]//\n"
"            /** #_EXT_COM_2020_03_13_315PM_# **/  //[ TF ]//\n"
"            return(                               //[ TF ]//\n"
"            AAC2020_FRAGCOM_TexelFetch_U32(       //[ TF ]//\n"
"                u32_sam                           //[ TF ]//\n"
"            ,   MAK_IV2( g_x , g_y )              //[ TF ]//\n"
"            ,   levodet_ALWAYS_ZERO               //[ TF ]//\n"
"            ));;                                  //[ TF ]//\n"
"        }                                         //[ TF ]//\n"
"                                                  //[ TF ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://  \n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //[ x ]//\n"
"        #undef  E_S_private                        //[ x ]//\n"
"        #undef  E_S                                //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"                                                   //[ x ]//\n"
"        #undef  F32      //:  01  ://              //[ x ]//\n"
"        #undef  U32      //:  02  ://              //[ x ]//\n"
"        #undef  I32      //:  03  ://              //[ x ]//\n"
"        #undef  IV2      //:  04  ://              //[ x ]//\n"
"        #undef  UV4      //:  05  ://              //[ x ]//\n"
"        #undef  T_F      //:  06  ://              //[ x ]//\n"
"        #undef  TAU      //:  07  ://              //[ x ]//\n"
"        #undef  P5D      //:  08  ://              //[ x ]//\n"
"        #undef  SAM      //:  09  ://              //[ x ]//\n"
"        #undef  UFF      //:  10  ://              //[ x ]//\n"
"        #undef  U00      //:  11  ://              //[ x ]//\n"
"        #undef  I00      //:  12  ://              //[ x ]//\n"
"        #undef  U03      //:  13  ://              //[ x ]//\n"
"        #undef  B_3      //:  14  ://              //[ x ]//\n"
"        #undef  B11      //:  15  ://              //[ x ]//\n"
"        #undef  H55      //:  16  ://              //[ x ]//\n"
"        #undef  V_A      //:  17  ://              //[ x ]//\n"
"        #undef  FV4      //:  18  ://              //[ x ]//\n"
"        #undef  ASS      //:  19  ://              //[ x ]//\n"
"        #undef  ERR      //:  20  ://              //[ x ]//\n"
"        #undef  TRU      //:  21  ://              //[ x ]//\n"
"        #undef  REC      //:  22  ://              //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/\n"
"    /** Decided on [MAK] for [MAKE] as our constructor   **/\n"
"    /** postfix ........................................ **/\n"
"                                                   //[ x ]//\n"
"        #undef  MAK_FV4                            //[ 1 ]//\n"
"        #undef  MAK_IV2                            //[ 2 ]//\n"
"        #undef  MAK_I32                            //[ 3 ]//\n"
"        #undef  MAK_F32                            //[ 4 ]//\n"
"        #undef  BIN_011                            //[ 5 ]//\n"
"        #undef  CUVIPIX                            //[ 6 ]//\n"
"        #undef  TYP_F_C                            //[ 7 ]//\n"
"        #undef  INN_F_C                            //[ 8 ]//\n"
"        //:----------------------------------------------://\n"
"        #undef  FLO_NAT  //:.........................[ 9 ]//\n"
"        #undef  FLO_F32  //:.........................[10 ]//\n"
"        #undef  ROU_NAT  //:.........................[11 ]//\n"
"        #undef  ROU_F32  //:.........................[12 ]//\n"
"        #undef  CEL_NAT  //:.........................[13 ]//\n"
"        #undef  CEL_F32  //:.........................[14 ]//\n"
"        #undef  COF_F32  //:.........................[15 ]//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //:===========:COM_001____AAC2020_FRAGCOM_DEFAULT_001://  \n"
"    //[=====================:PASTE_INTO_FILE[ COM_001._ ]]//\n"
"    //[======================:AAC2020_FRAGCOM_DEFAULT_001]//\n"
"    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//\n"
