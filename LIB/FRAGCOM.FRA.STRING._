"    //:FILESEC[ FRAGCOM.FRA._ ]//////////////////////////://\n"
"    //+//////////////////////////////////////////////////+//\n"
"    //#HOW_IS_THIS_HEADER_ALLOWED_IN_THIS_FILE           #//\n"
"    //#The precision and iResolution and what not?       #//\n"
"    //[I think it is allowed because the declarations    ]//\n"
"    //[are identical to previous ones?                   ]//\n"
"    //+ WRONG... We moved all of the common fragment     +//\n"
"    //+ shader code into here a while ago. This          +//\n"
"    //+ prelude ONLY OCCURES HERE NOW and thus           +//\n"
"    //+ [FRAGCOM.FRA._] must be included by other        +//\n"
"    //+ shaders, such as file[ P5D_001._ ]               +//\n"
"    //+ @VID_IID[ 0250 ]TIME[ 01:07:07 ]ITS_OKAY         +//\n"
"    //[//////////////////////////////////////////////////]//\n"
"    //:ALL_SHADERS_KNOW_ABOUT_ALL_MEMORY:----------------://\n"
"    //:glsl_file_scope_stuff:----------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        //:#_KEEP_USAMPLER_HIGH_#          ://     //| # |//\n"
"        //:#_SAM_PRECISION_BEFORE_SAM_VAR_#://     //| # |//\n"
"        precision highp usampler2D;                //| # |//\n"
"                                                   //| # |//\n"
"        //|(( UNI ))____________________________|////| # |//\n"
"        //[:::::::SHADERTOY_COMPATIBILITY:::::::]////| # |//\n"
"        #define fragCoord gl_FragCoord             //| # |//\n"
"        #define       F_C gl_FragCoord             //| # |//\n"
"                                                   //| # |//\n"
"        uniform vec3  iResolution;                 //| # |//\n"
"        uniform float iTime      ;                 //| # |//\n"
"        uniform vec4  iMouse     ;                 //| # |//\n"
"                                                   //| # |//\n"
"        uniform usampler2D taudepo;                //| # |//\n"
"        uniform usampler2D paint5d;                //| # |//\n"
"                                                   //| # |//\n"
"        //|(( INN ))____________________________|////| # |//\n"
"        //:     fag_tec:FrAGshaderTExtureCoord  :////| # |//\n"
"        in vec2 fag_tec;                           //| # |//\n"
"                                                   //| # |//\n"
"        //|(( OUT ))____________________________|////| # |//\n"
"        out vec4 FragColor;                        //| # |//\n"
"                                                   //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:----------------------------:glsl_file_scope_stuff://\n"
"    //:----------------:ALL_SHADERS_KNOW_ABOUT_ALL_MEMORY://\n"
"    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//\n"
"    //[AAC2020_FRAGCOM_DEFAULT_001:======================]//\n"
"    //[PASTE_INTO_FILE[ COM_001._ ]:=====================]//\n"
"    //:COM_001____AAC2020_FRAGCOM_DEFAULT_001:===========://\n"
"    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//\n"
"    //:FRAGCOM_FRA_FILE_MACROS:==========================://\n"
"    /** @VID_IID[ 0112 ]T[ 00:56:50 ]ORIGINAL   **///:---://\n"
"    /** @VID_IID[ 0292 ]T[ 02:53:23 ]GUTTED     **///:---://\n"
"    /** SEE[ AAC2020/LIB/MAC/FRA/TOP._ ] ****** **///:---://\n"
"    /** SEE[ AAC2020/LIB/MAC/FRA/BOT._ ]******* **///:---://\n"
"                                                   //:---://\n"
"    #if( AAC2020_MACRO_THIS_IS_OPEN_GL >= 1 )      //:---://\n"
"        #define     ERR /** nothing **/            //:---://\n"
"        #define TYP_F_C /** nothing **/            //:---://\n"
"        #define INN_F_C /** nothing **/            //:---://\n"
"    #else                                          //:---://\n"
"        #define     ERR aac2020_fragcom_Halt_FRAG  //:---://\n"
"        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //:---://\n"
"        #define INN_F_C F_C                        //:---://\n"
"    #endif                                         //:---://\n"
"    //:==========================:FRAGCOM_FRA_FILE_MACROS://\n"
"    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//\n"
"    //+C99_FRAG_SHADER_ONLY:=============================+//\n"
"    #if !defined( AAC2020_MACRO_THIS_IS_OPEN_GL ) // NOTGLSL\n"
"        void\n"
"     //-aac2020_fragcom_Halt_GLSL-//\n"
"        aac2020_fragcom_Halt_FRAG(\n"
"            const char* msg_err\n"
"        )\n"
"        {\n"
"        /** ******************************************** ***\n"
"        @VID_IID[ 0250 ]TIME[ 05:16:00 ]                 ***\n"
"        Fragment shader code doesn't know about the      ***\n"
"        CPU-side code. So if we want to invoke an[ ERR ] ***\n"
"        function from this code. We need to create one   ***\n"
"        in this file.                                    ***\n"
"        *** ******************************************** **/\n"
"            printf( E_S([fragcom_Halt_FRAG]:%s),msg_err );\n"
"            fflush(stdout);\n"
"            exit( 232 );\n"
"        }\n"
"    #endif // ////////////////////////////////////// NOTGLSL\n"
"    //+=============================:C99_FRAG_SHADER_ONLY+//\n"
"    //:COMMON_DATA_TYPES_USED_IN_SHADERS:================://\n"
"        //:INTEGER_RECTANGLE:----------------------------://\n"
"            struct AAC2020_FRAGCOM_REC{\n"
"                //:X_BOUNDS:\n"
"                I32 x_0 ; //:<--@_NEVER_NEGATIVE_@.\n"
"                I32 x_1 ; //:   But use signed for ease of\n"
"                          //:   use as well as underflow\n"
"                          //:   detection.\n"
"                          //:   @_SHOULD_NOT_BE_NEGATIVE_@\n"
"                //:Y_BOUNDS:\n"
"                I32 y_0 ; //:<--@_NEVER_NEGATIVE_@.\n"
"                I32 y_1 ; //:   But use signed for ease of\n"
"                          //:   use as well as underflow\n"
"                          //:   detection.\n"
"                          //:   @_SHOULD_NOT_BE_NEGATIVE_@\n"
"            };\n"
"        //:----------------------------:INTEGER_RECTANGLE://\n"
"    //:================:COMMON_DATA_TYPES_USED_IN_SHADERS://\n"
"    //:MULTIPLY_FUNCTIONS:===============================://\n"
"        F32 AAC2020_FRAGCOM_MUL_F32_F32( F32 a , F32 b ){\n"
"                                return(      a *     b );}\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV2\n"
"        AAC2020_FRAGCOM_MUL_FV2_FV2(\n"
"            FV2 aye\n"
"        ,   FV2 bee\n"
"        ){          //:@VID_IID[0301]T[07:16:50]:::::::::://    \n"
"            FV2 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x * bee.x );\n"
"            res.y =( aye.y * bee.y );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_MUL_FV3_FV3(\n"
"            FV3 aye\n"
"        ,   FV3 bee\n"
"        ){          //:@VID_IID[0301]T[07:17:23]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x * bee.x );\n"
"            res.y =( aye.y * bee.y );\n"
"            res.z =( aye.z * bee.z );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV4\n"
"        AAC2020_FRAGCOM_MUL_FV4_FV4(\n"
"            FV4 aye\n"
"        ,   FV4 bee\n"
"        ){          //:@VID_IID[0301]T[07:17:42]:::::::::://\n"
"            FV4 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x * bee.x );\n"
"            res.y =( aye.y * bee.y );\n"
"            res.z =( aye.z * bee.z );\n"
"            res.w =( aye.w * bee.w );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_MUL_FV3_F32(\n"
"            FV3 fv3\n"
"        ,   F32 f32\n"
"        ){          //:@VID_IID[0301]T[07:18:10]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( fv3.x * f32 );\n"
"            res.y =( fv3.y * f32 );\n"
"            res.z =( fv3.z * f32 );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_MUL_F32_FV3(\n"
"            F32 f32\n"
"        ,   FV3 fv3\n"
"        ){          //:@VID_IID[0301]T[07:18:42]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( fv3.x * f32 );\n"
"            res.y =( fv3.y * f32 );\n"
"            res.z =( fv3.z * f32 );\n"
"            return( res );\n"
"        }\n"
"    //:===============================:MULTIPLY_FUNCTIONS://\n"
"    //:DIVIDE_FUNCTIONS:=================================://\n"
"        F32 AAC2020_FRAGCOM_DIV_F32_F32( F32 a , F32 b ){\n"
"                                return(      a /     b );}\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV2\n"
"        AAC2020_FRAGCOM_DIV_FV2_FV2(\n"
"            FV2 aye\n"
"        ,   FV2 bee\n"
"        ){          //:@VID_IID[0301]T[07:19:00]:::::::::://\n"
"            FV2 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x / bee.x );\n"
"            res.y =( aye.y / bee.y );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_DIV_FV3_FV3(\n"
"            FV3 aye\n"
"        ,   FV3 bee\n"
"        ){          //:@VID_IID[0301]T[07:19:23]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x / bee.x );\n"
"            res.y =( aye.y / bee.y );\n"
"            res.z =( aye.z / bee.z );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV4\n"
"        AAC2020_FRAGCOM_DIV_FV4_FV4(\n"
"            FV4 aye\n"
"        ,   FV4 bee\n"
"        ){          //:@VID_IID[0301]T[07:19:42]:::::::::://    \n"
"            FV4 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x / bee.x );\n"
"            res.y =( aye.y / bee.y );\n"
"            res.z =( aye.z / bee.z );\n"
"            res.w =( aye.w / bee.w );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_DIV_FV3_F32(\n"
"            FV3 fv3\n"
"        ,   F32 f32\n"
"        ){          //:@VID_IID[0301]T[07:20:00]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( fv3.x / f32 );\n"
"            res.y =( fv3.y / f32 );\n"
"            res.z =( fv3.z / f32 );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_DIV_F32_FV3(\n"
"            F32 f32\n"
"        ,   FV3 fv3\n"
"        ){          //:@VID_IID[0301]T[07:20:23]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( f32 / fv3.x );\n"
"            res.y =( f32 / fv3.y );\n"
"            res.z =( f32 / fv3.z );\n"
"            return( res );\n"
"        }\n"
"    //:=================================:DIVIDE_FUNCTIONS://\n"
"    //:ADDITION_FUNCTIONS:===============================://  \n"
"        F32 AAC2020_FRAGCOM_ADD_F32_F32( F32 a , F32 b ){\n"
"                                return(      a +     b );}\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://  \n"
"        FV2\n"
"        AAC2020_FRAGCOM_ADD_FV2_FV2(\n"
"            FV2 aye\n"
"        ,   FV2 bee\n"
"        ){          //:@VID_IID[0301]T[07:20:42]:::::::::://\n"
"            FV2 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x + bee.x );\n"
"            res.y =( aye.y + bee.y );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_ADD_FV3_FV3(\n"
"            FV3 aye\n"
"        ,   FV3 bee\n"
"        ){          //:@VID_IID[0301]T[07:21:00]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x + bee.x );\n"
"            res.y =( aye.y + bee.y );\n"
"            res.z =( aye.z + bee.z );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV4\n"
"        AAC2020_FRAGCOM_ADD_FV4_FV4(\n"
"            FV4 aye\n"
"        ,   FV4 bee\n"
"        ){          //:@VID_IID[0301]T[07:21:13]:::::::::://\n"
"            FV4 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x + bee.x );\n"
"            res.y =( aye.y + bee.y );\n"
"            res.z =( aye.z + bee.z );\n"
"            res.w =( aye.w + bee.w );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_ADD_FV3_F32(\n"
"            FV3 fv3\n"
"        ,   F32 f32\n"
"        ){          //:@VID_IID[0301]T[07:21:30]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( fv3.x + f32 );\n"
"            res.y =( fv3.y + f32 );\n"
"            res.z =( fv3.z + f32 );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_ADD_F32_FV3(\n"
"            F32 f32\n"
"        ,   FV3 fv3\n"
"        ){          //:@VID_IID[0301]T[07:21:42]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( f32 + fv3.x );\n"
"            res.y =( f32 + fv3.y );\n"
"            res.z =( f32 + fv3.z );\n"
"            return( res );\n"
"        }\n"
"    //:===============================:ADDITION_FUNCTIONS://    \n"
"    //:SUBTRACT_FUNCTIONS:===============================://\n"
"        F32 AAC2020_FRAGCOM_SUB_F32_F32( F32 a , F32 b ){\n"
"                                return(      a -     b );}\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - :// \n"
"        FV2\n"
"        AAC2020_FRAGCOM_SUB_FV2_FV2(\n"
"            FV2 aye\n"
"        ,   FV2 bee\n"
"        ){          //:@VID_IID[0301]T[07:22:00]:::::::::://\n"
"            FV2 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x - bee.x );\n"
"            res.y =( aye.y - bee.y );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_SUB_FV3_FV3(\n"
"            FV3 aye\n"
"        ,   FV3 bee\n"
"        ){          //:@VID_IID[0301]T[07:22:12]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x - bee.x );\n"
"            res.y =( aye.y - bee.y );\n"
"            res.z =( aye.z - bee.z );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV4\n"
"        AAC2020_FRAGCOM_SUB_FV4_FV4(\n"
"            FV4 aye\n"
"        ,   FV4 bee\n"
"        ){          //:@VID_IID[0301]T[07:23:23]:::::::::://\n"
"            FV4 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( aye.x - bee.x );\n"
"            res.y =( aye.y - bee.y );\n"
"            res.z =( aye.z - bee.z );\n"
"            res.w =( aye.w - bee.w );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_SUB_FV3_F32(\n"
"            FV3 fv3\n"
"        ,   F32 f32\n"
"        ){          //:@VID_IID[0301]T[07:22:42]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( fv3.x - f32 );\n"
"            res.y =( fv3.y - f32 );\n"
"            res.z =( fv3.z - f32 );\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_SUB_F32_FV3(\n"
"            F32 f32\n"
"        ,   FV3 fv3\n"
"        ){          //:@VID_IID[0301]T[07:23:00]:::::::::://\n"
"            FV3 res;//:@_NO_ZERO_INIT_@::::::::::::::::::://\n"
"            res.x =( f32 - fv3.x );\n"
"            res.y =( f32 - fv3.y );\n"
"            res.z =( f32 - fv3.z );\n"
"            return( res );\n"
"        }\n"
"    //:===============================:SUBTRACT_FUNCTIONS://\n"
"    //:TRIG_FUNCTIONS_COS_SIN_ETC:=======================://\n"
"        F32\n"
"        AAC2020_FRAGCOM_SIN_F32(\n"
"        F32                 f32\n"
"        ){\n"
"            return( sin( f32 ) );\n"
"        }\n"
"        F32\n"
"        AAC2020_FRAGCOM_COS_F32(\n"
"        F32                 f32\n"
"        ){\n"
"            return( cos( f32 ) );\n"
"        }\n"
"    //:=======================:TRIG_FUNCTIONS_COS_SIN_ETC://\n"
"    //:MAX_MIN_ABS:======================================://\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        F32\n"
"        AAC2020_FRAGCOM_ABS_F32(\n"
"            F32 f32\n"
"        )\n"
"        {\n"
"            #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                return( abs( f32 ) );\n"
"            #else\n"
"                //:C99 Code Here\n"
"                F32 f32_out;\n"
"                if( f32 >= 0 ){\n"
"                    f32_out =( 0 + f32 );\n"
"                }else{\n"
"                    f32_out =( 0 - f32 );\n"
"                };;\n"
"                return( f32_out );\n"
"            #endif\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        F32\n"
"        AAC2020_FRAGCOM_MAX_F32(\n"
"            F32 aye\n"
"        ,   F32 bee\n"
"        )\n"
"        {\n"
"            F32 f32=( 0 );\n"
"            if( aye > bee ){ f32=( aye ); };\n"
"            if( bee > aye ){ f32=( bee ); };\n"
"            return( f32 );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        I32\n"
"        AAC2020_FRAGCOM_MAX_I32(\n"
"            I32 aye\n"
"        ,   I32 bee\n"
"        )\n"
"        {\n"
"            I32 i32=( 0 );\n"
"            if( aye > bee ){ i32=( aye ); };\n"
"            if( bee > aye ){ i32=( bee ); };\n"
"            return( i32 );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        F32\n"
"        AAC2020_FRAGCOM_MIN_F32(\n"
"            F32 aye\n"
"        ,   F32 bee\n"
"        )\n"
"        {\n"
"            F32 f32=( 0 );\n"
"            if( aye < bee ){ f32=( aye ); };\n"
"            if( bee < aye ){ f32=( bee ); };\n"
"            return( f32 );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        I32\n"
"        AAC2020_FRAGCOM_MIN_I32(\n"
"            I32 aye\n"
"        ,   I32 bee\n"
"        )\n"
"        {\n"
"            I32 i32=( 0 );\n"
"            if( aye < bee ){ i32=( aye ); };\n"
"            if( bee < aye ){ i32=( bee ); };\n"
"            return( i32 );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"    //:======================================:MAX_MIN_ABS://\n"
"    //:Floor_Round_Ceil:---------------------------------://\n"
"        I32                                           //:://\n"
"        AAC2020_FRAGCOM_FLO_F32(                      //:://\n"
"            F32 f32                                   //:://\n"
"        )                                             //:://\n"
"        {                                             //:://\n"
"            return( MAK_I32( FLO_NAT( f32 ) ) );      //:://\n"
"        }                                             //:://\n"
"        I32                                           //:://\n"
"        AAC2020_FRAGCOM_ROU_F32(                      //:://\n"
"            F32 f32                                   //:://\n"
"        )                                             //:://\n"
"        {                                             //:://\n"
"            return( MAK_I32( ROU_NAT( f32 ) ) );      //:://\n"
"        }                                             //:://\n"
"        I32                                           //:://\n"
"        AAC2020_FRAGCOM_CEL_F32(                      //:://\n"
"            F32 f32                                   //:://\n"
"        )                                             //:://\n"
"        {                                             //:://\n"
"            return( MAK_I32( CEL_NAT( f32 ) ) );      //:://\n"
"        }                                             //:://\n"
"    //:---------------------------------:Floor_Round_Ceil://\n"
"    //:Ceil_Or_Floor:------------------------------------://\n"
"    /** TRASHED. SEE[ DOC/TRASH/006._ ] **************** **/\n"
"        //: DO_NOT_USE_THIS_FUNCTION.                    ://\n"
"        //: You are doing something very wrong in your   ://\n"
"        //: code if you need branching like this.        ://\n"
"        #define AAC2020_FRAGCOM_COF_F32 0000\n"
"    //:------------------------------------:Ceil_Or_Floor://\n"
"    //|==================================================|//\n"
"    //|MATRIX_OPERATIONS:|||||||||||||||||||||||||||||||||//\n"
"    //+MATRIX_OPERATIONS:-------------------------------|+//\n"
"    //:MUL_SCA_MAT:--------------------------------------://\n"
"        FM2\n"
"        AAC2020_FRAGCOM_MUL_F32_FM2(\n"
"            F32 sca //:SCA:Scalar\n"
"        ,   FM2 mat //:MAT:Matrix\n"
"        ){              //:@VID_IID[0301]T[07:14:23]:::::://\n"
"            FM2     res;//:@_NO_ZERO_INIT_@::::::::::::::://\n"
"            #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                    res=( sca * mat );\n"
"            #else\n"
"                    res.col[0][0]=( mat.col[0][0] * sca );\n"
"                    res.col[0][1]=( mat.col[0][1] * sca );\n"
"                    res.col[1][0]=( mat.col[1][0] * sca );\n"
"                    res.col[1][1]=( mat.col[1][1] * sca );\n"
"            #endif\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FM3\n"
"        AAC2020_FRAGCOM_MUL_F32_FM3(\n"
"            F32 sca //:SCA:Scalar\n"
"        ,   FM3 mat //:MAT:Matrix\n"
"        ){               //:@VID_IID[0301]T[07:14:42]::::::::://\n"
"            FM3     res; //:@_NO_ZERO_INIT_@:::::::::::::::::://\n"
"            #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                    res=( sca * mat );\n"
"            #else\n"
"                    res.col[0][0]=( mat.col[0][0] * sca );\n"
"                    res.col[0][1]=( mat.col[0][1] * sca );\n"
"                    res.col[0][2]=( mat.col[0][2] * sca );\n"
"                    res.col[1][0]=( mat.col[1][0] * sca );\n"
"                    res.col[1][1]=( mat.col[1][1] * sca );\n"
"                    res.col[1][2]=( mat.col[1][2] * sca );\n"
"                    res.col[2][0]=( mat.col[2][0] * sca );\n"
"                    res.col[2][1]=( mat.col[2][1] * sca );\n"
"                    res.col[2][2]=( mat.col[2][2] * sca );\n"
"            #endif\n"
"            return( res );\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"        FM4\n"
"        AAC2020_FRAGCOM_MUL_F32_FM4(\n"
"            F32 sca //:SCA:Scalar\n"
"        ,   FM4 mat //:MAT:Matrix\n"
"        ){              //:@VID_IID[0301]T[07:15:10]:::::://\n"
"            FM4     res;//:@_NO_ZERO_INIT_@::::::::::::::://\n"
"            #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                    res=( sca * mat );\n"
"            #else\n"
"                #if !defined( AAC2020_MACRO_THIS_IS_C99 )\n"
"                    #error JOHN_MARK_IS_KANJI_CODER_2021\n"
"                #endif\n"
"                if( sca          > 0 ){ /**NOOP**/  };\n"
"                if( mat.col[0][0]> 0 ){ /**NOOP**/  };\n"
"                res.col[0][0]=( 0 );\n"
"                ERR( E_S( [NOT_IMPLEMENT:2022_01_26] ) );\n"
"            #endif\n"
"            return( res );\n"
"        }\n"
"    //:--------------------------------------:MUL_SCA_MAT://\n"
"    //:MUL_MAT_SCA:--------------------------------------://\n"
"    #define RET return  //:12345678901:------------------://\n"
"        //:---------------:123_123_123:------------------://\n"
"        FM2 AAC2020_FRAGCOM_MUL_FM2_F32( FM2 m , F32 s ){\n"
"        RET(AAC2020_FRAGCOM_MUL_F32_FM2(     s ,     m ));}\n"
"        FM3 AAC2020_FRAGCOM_MUL_FM3_F32( FM3 m , F32 s ){\n"
"        RET(AAC2020_FRAGCOM_MUL_F32_FM3(     s ,     m ));}\n"
"        FM4 AAC2020_FRAGCOM_MUL_FM4_F32( FM4 m , F32 s ){\n"
"        RET(AAC2020_FRAGCOM_MUL_F32_FM4(     s ,     m ));}\n"
"        //:---------------:123_123_123:------------------://\n"
"    #undef  RET         //:12345678901:------------------://\n"
"    //:--------------------------------------:MUL_MAT_SCA://\n"
"    //:MUL_VEC_MAT:--------------------------------------://\n"
"        FV2  \n"
"        AAC2020_FRAGCOM_MUL_FV2_FM2(  \n"
"            FV2 vec   //:--------------------------------://\n"
"        ,   FM2 mat   //:              +---+---+         ://\n"
"        ){            //:              | a | c |         ://\n"
"                      //:              +---+---+<<[2x2]  ://\n"
"                      //:              | b | d |         ://\n"
"                      //:    [  1x2  ] +---+---+         ://\n"
"                      //:    +---+---+ +---+---+         ://\n"
"                      //: vec| x | y | | e | f |<<[1x2]  ://\n"
"                      //:    +---+---+ +---+---+         ://\n"
"                      //:--------------------------------://\n"
"            FV2 res;  //:@VID_IID[0301]T[07:15:35]:::::::://\n"
"                      //:@_NO_ZERO_INIT_@::::::::::::::::://\n"
"            #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                    res=( vec * mat );\n"
"            #else\n"
"            //:     res.e  ://\n"
"            /**/    res.x=(( vec.x * mat.col[0][0] )\n"
"            /**/          +( vec.y * mat.col[0][1] ));\n"
"            //:     res.f  ://           \n"
"            /**/    res.y=(( vec.x * mat.col[1][0] )\n"
"            /**/          +( vec.y * mat.col[1][1] ));\n"
"            #endif\n"
"            return( res );\n"
"        }\n"
"    //:--------------------------------------:MUL_VEC_MAT://\n"
"    //:MUL_MAT_VEC:--------------------------------------://\n"
"        FM4\n"
"        AAC2020_FRAGCOM_MUL_FM2_FV2( //:[ 1_X_2 ]        ://\n"
"            FM2 mat   //:               +---+---+        ://\n"
"        ,   FV2 vec   //:               | x | y |        ://\n"
"        ){  //:                         +---+---+        ://\n"
"            //:               +---+---+ +---+---+        ://\n"
"            //:               | 1 | 2 | | a | c |        ://\n"
"            //:               +---+---+ +---+---+        ://\n"
"            //:               | 3 | 4 | | b | d |        ://\n"
"            //:               +---+---+ +---+---+        ://\n"
"            //:               [ 2_X_2 ]                  ://\n"
"            //:                                          ://\n"
"            //:                 INVALID_OPERATION        ://\n"
"            //:                        |                 ://\n"
"            //:                     +--+--+              ://\n"
"            //:                     |     |              ://\n"
"            //:               [ 2_X_2 ]*[ 1_X_2 ]        ://\n"
"            #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                FM4     bogusvar  ;\n"
"                return( bogusvar );\n"
"            #else\n"
"                if( mat.col[0][0] > 0 ){ /** NOOP **/ };\n"
"                if( vec.x         > 0 ){ /** NOOP **/ };\n"
"                ERR(E_S([INVALID_OPERATION:MUL_FM2_FV2]));        \n"
"                FM4     bogusvar;\n"
"                        bogusvar.col[0][0]=(0);\n"
"                return( bogusvar );\n"
"            #endif\n"
"        }\n"
"    //:MUL_MAT_VEC:--------------------------------------://\n"
"    //+-------------------------------|:MATRIX_OPERATIONS+//\n"
"    //|||||||||||||||||||||||||||||||||:MATRIX_OPERATIONS|//\n"
"    //|==================================================|//\n"
"    //:VECTOR_OPERATIONS:================================://\n"
"        FV3\n"
"        AAC2020_FRAGCOM_SWI_ZYX_FV3(\n"
"            FV3 vec\n"
"        ){              //:@VID_IID[0301]T[07:13:42]:::::://\n"
"            FV3     res;//:@_NO_ZERO_INIT_@::::::::::::::://\n"
"                    res.x=( vec.z );\n"
"                    res.y=( vec.y );\n"
"                    res.z=( vec.x );\n"
"            return( res );\n"
"        } \n"
"    //:VECTOR_OPERATIONS:================================://\n"
"        /** TRASHED: AAC2020_FRAGCOM_rv0_CTO_rv1         **/\n"
"        /** TRASHED: AAC2020_FRAGCOM_big_MAP_lit_ONE_AXE **/\n"
"        /** SEE[ DOC/TRASH/007._ ]                       **/\n"
"        /** VID_IID[ 0145 ]T[ 03:07:44 ]                 **/\n"
"                                                   //: m ://\n"
"        IV2                                        //: m ://\n"
"        AAC2020_FRAGCOM_big_MAP_lit(               //: m ://\n"
"            I32 big_s_x  //:BIG:source(value)x     //: m ://\n"
"        ,   I32 big_s_y  //:BIG:source(value)y     //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 big_sx0  //:rec_src: BOUND_MIN     //: m ://\n"
"        ,   I32 big_sy0  //:rec_src: BOUND_MIN     //: m ://\n"
"        ,   I32 big_sx1  //:rec_src: BOUND_MAX     //: m ://\n"
"        ,   I32 big_sy1  //:rec_src: BOUND_MAX     //: m ://\n"
"                                                   //: m ://\n"
"        ,   I32 lit_dx0  //:rec_dst: BOUND_MIN     //: m ://\n"
"        ,   I32 lit_dy0  //:rec_dst: BOUND_MIN     //: m ://\n"
"        ,   I32 lit_dx1  //:rec_dst: BOUND_MAX     //: m ://\n"
"        ,   I32 lit_dy1  //:rec_dst: BOUND_MAX     //: m ://\n"
"        )                                          //: m ://\n"
"        {\n"
"            /** FUNCTION_SUMMARY[ big_MAP_lit ] ******** **/\n"
"            /** @VID_IID[ 0142 ]TIME[ 01:34:32 ] ******* **/\n"
"            /** Map a value on one range to a value on   **/\n"
"            /** another range. Written assuming the      **/\n"
"            /** destination range is same size or smaller**/\n"
"            /** than the input range. Have no clue how   **/\n"
"            /** this will work if that logic is flipped. **/\n"
"            /** **************************************** **/\n"
"            //:output_xy_coord_var:----------------------://\n"
"                IV2 dst;\n"
"            //:----------------------:output_xy_coord_var://\n"
"            //:INTEGER_DOWNSCALE_FORMULA:----------------://\n"
"            #define NOT_CTF /** NOT_Convert_To_Float **/\n"
"            #define NO_CAST /** No casting logic needed **/\n"
"                #define S_I big_s_x\n"
"                #define S_0 big_sx0\n"
"                #define S_1 big_sx1\n"
"                #define D_0 lit_dx0\n"
"                #define D_1 lit_dx1\n"
"                #define D_P dst.x\n"
"                D_P =NO_CAST(\n"
"                    (  \n"
"                        NOT_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            NOT_CTF( (S_1 - S_0) +1 )  \n"
"                        /   NOT_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +NOT_CTF( D_0 ) //:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"                #define S_I big_s_y\n"
"                #define S_0 big_sy0\n"
"                #define S_1 big_sy1\n"
"                #define D_0 lit_dy0\n"
"                #define D_1 lit_dy1\n"
"                #define D_P dst.y\n"
"                D_P =NO_CAST(\n"
"                    (  \n"
"                        NOT_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            NOT_CTF( (S_1 - S_0) +1 )  \n"
"                        /   NOT_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +NOT_CTF( D_0 ) //:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"            #undef  NOT_CTF\n"
"            #undef  NO_CAST\n"
"            //:----------------:INTEGER_DOWNSCALE_FORMULA://        \n"
"            return( dst );\n"
"        }\n"
"        IV2                                         \n"
"        AAC2020_FRAGCOM_fic_MAP_cuv(       \n"
"            IV2 fic      //:fic:Fragment_Integer_Coord       \n"
"        ,   REC p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]\n"
"        ,   REC p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]\n"
"        )                                           \n"
"        {\n"
"            /** **************************************** ***\n"
"                @VID_IID[ 0151 ]TIME[ 04:51:23 ]\n"
"                Designed to scan over the on-screen\n"
"                viewport (p5d_vp0) and map to the\n"
"                offscreen data (p5d_vp1).\n"
"                p5d_vp0 == ON SCREEN SUB AREA OF CLIENT\n"
"                p5d_vp1 == OFF SCREEN DATA TO SAMPLE\n"
"                fic: Fragment_Integer_Coordinate  \n"
"                cuv: Canvas_User_View             \n"
"            *** **************************************** **/\n"
"            //:output_xy_coord_var:----------------------://\n"
"                IV2 dst;\n"
"            //:----------------------:output_xy_coord_var://\n"
"            //:INTEGER_DOWNSCALE_FORMULA:----------------://\n"
"            #define NOT_CTF /** NOT_Convert_To_Float **/\n"
"            #define YES_CTF MAK_F32\n"
"                #define S_I     fic.x   //: big_s_x\n"
"                #define S_0 p5d_vp0.x_0 //: big_sx0\n"
"                #define S_1 p5d_vp0.x_1 //: big_sx1\n"
"                #define D_0 p5d_vp1.x_0 //: lit_dx0\n"
"                #define D_1 p5d_vp1.x_1 //: lit_dx1\n"
"                #define D_P dst.x\n"
"                D_P =MAK_I32(\n"
"                    (  \n"
"                        YES_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            YES_CTF( (S_1 - S_0) +1 )  \n"
"                        /   YES_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +YES_CTF( D_0 )//:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"                #define S_I     fic.y   //: big_s_y\n"
"                #define S_0 p5d_vp0.y_0 //: big_sy0\n"
"                #define S_1 p5d_vp0.y_1 //: big_sy1\n"
"                #define D_0 p5d_vp1.y_0 //: lit_dy0\n"
"                #define D_1 p5d_vp1.y_1 //: lit_dy1\n"
"                #define D_P dst.y\n"
"                D_P =MAK_I32(\n"
"                    (  \n"
"                        YES_CTF(S_I - S_0)\n"
"                        / \n"
"                        (   \n"
"                            YES_CTF( (S_1 - S_0) +1 )  \n"
"                        /   YES_CTF( (D_1 - D_0) +1 )  \n"
"                        )\n"
"                    )\n"
"                    +YES_CTF( D_0 )//:Add_New_Origin\n"
"                );;\n"
"                #undef  S_I \n"
"                #undef  S_0 \n"
"                #undef  S_1 \n"
"                #undef  D_0 \n"
"                #undef  D_1 \n"
"                #undef  D_P \n"
"            #undef  NOT_CTF\n"
"            #undef  YES_CTF\n"
"            //:----------------:INTEGER_DOWNSCALE_FORMULA://        \n"
"            return( dst );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://  \n"
"        /** TRASHED:AAC2020_FRAGCOM_rec_src_MAP_rec_dst  **/\n"
"        /** SEE[ DOC/TRASH/005._ ]                       **/\n"
"        /** VID_IID[ 0145 ]TIME[ 02:43:23 ]              **/\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://  \n"
"        U32                                       //[ TF ]//\n"
"        AAC2020_FRAGCOM_TexelFetch_U32(           //[ TF ]//\n"
"            SAM u32_sam //:<-[C99/C11]AND[GLSL]:////[ TF ]//\n"
"        ,   IV2 glo                               //[ TF ]//\n"
"        ,   I32 levodet_ALWAYS_ZERO               //[ TF ]//\n"
"        )                                         //[ TF ]//\n"
"        {                                         //[ TF ]//\n"
"            U32 u32_var; /** Output/Return **/    //[ TF ]//\n"
"                                                  //[ TF ]//\n"
"            //:TEXEL_FETCH_RETURNS_XYZW_U08:-------------://     \n"
"            /** GET: [ x,y,z,w ] / [r,g,b,a]  **/ //[ TF ]//\n"
"            /**      texel As a uvec 4 type.  **/ //[ TF ]//\n"
"                UV4 uv4=(                         //[ TF ]//\n"
"                    T_F(                          //[ TF ]//\n"
"                        u32_sam                   //[ TF ]//\n"
"                    ,   glo                       //[ TF ]//\n"
"                    ,   levodet_ALWAYS_ZERO       //[ TF ]//\n"
"                    ));;                          //[ TF ]//\n"
"                                                  //[ TF ]//\n"
"            //:-------------:TEXEL_FETCH_RETURNS_XYZW_U08://\n"
"            //:BIT_PACK_YOUR_PIXEL:----------------------://\n"
"            #define CPU_PIX AAC2020_PIXNAME_paint5d_cpu_pix\n"
"            /** **************************************TF *** \n"
"                @VID_IID[ 0177 ]TIME[ 01:05:33 ]  //[ TF ]//\n"
"                #_EXT_COM_2021_03_13_313PM_#      //[ TF ]//\n"
"            *** **************************************TF **/ \n"
"                                                  //[ TF ]//\n"
"                u32_var=( U32_000                 //[ TF ]//\n"
"                | ( uv4.x << 24 ) //: R ://       //[ TF ]//\n"
"                | ( uv4.y << 16 ) //: G ://       //[ TF ]//\n"
"                | ( uv4.z <<  8 ) //: B ://       //[ TF ]//\n"
"                | ( uv4.w <<  0 ) //: A ://       //[ TF ]//\n"
"                );;  /**@PAIR_CODE_2021_01_14@ **///[ TF ]//\n"
"                                                  //[ TF ]//\n"
"            #undef  CPU_PIX                       //[ TF ]//\n"
"            //:----------------------:BIT_PACK_YOUR_PIXEL://\n"
"            return( u32_var );                    //[ TF ]//\n"
"        }                                         //[ TF ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                       //[ TF ]//\n"
"        AAC2020_FRAGCOM_TexelFetch_U32XY(         //[ TF ]//\n"
"            SAM u32_sam //:<-[C99/C11]AND[GLSL]:////[ TF ]//\n"
"        ,   I32 g_x                               //[ TF ]//\n"
"        ,   I32 g_y                               //[ TF ]//\n"
"        ,   I32 levodet_ALWAYS_ZERO               //[ TF ]//\n"
"        )                                         //[ TF ]//\n"
"        {                                         //[ TF ]//\n"
"            /** #_EXT_COM_2020_03_13_315PM_# **/  //[ TF ]//\n"
"            return(                               //[ TF ]//\n"
"            AAC2020_FRAGCOM_TexelFetch_U32(       //[ TF ]//\n"
"                u32_sam                           //[ TF ]//\n"
"            ,   MAK_IV2( g_x , g_y )              //[ TF ]//\n"
"            ,   levodet_ALWAYS_ZERO               //[ TF ]//\n"
"            ));;                                  //[ TF ]//\n"
"        }                                         //[ TF ]//\n"
"                                                  //[ TF ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"        //:@VID_IID[ 0183 ]TIME[ 02:48:00 ]:- - - - - - -://\n"
"        F32\n"
"        FRAGCOM_GET_res_wid( void )\n"
"        {\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                return( iResolution.x );\n"
"            #else\n"
"                return( AAC2020_CPUNIFO_iResolution_wid );\n"
"            #endif\n"
"        }\n"
"        F32\n"
"        FRAGCOM_GET_res_hig( void )\n"
"        {\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                return( iResolution.y );\n"
"            #else\n"
"                return( AAC2020_CPUNIFO_iResolution_hig );\n"
"            #endif\n"
"        }\n"
"        //:- - - - - - -:@VID_IID[ 0183 ]TIME[ 02:48:00 ]://\n"
"        //:@VID_IID[ 0271 ]TIME[ 07:07:42 ]:- - - - - - -://\n"
"        F32\n"
"        AAC2020_FRAGCOM_GET_iTime( void )\n"
"        {\n"
"            #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                return( iTime );\n"
"            #else\n"
"                return( AAC2020_POLYOGL_GET_iTime() );\n"
"            #endif\n"
"        }\n"
"        //:- - - - - - -:@VID_IID[ 0271 ]TIME[ 07:07:42 ]://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"        IV2\n"
"        FRAGCOM_GET_mou_glo( void )\n"
"        {\n"
"            IV2 mou_glo;\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL //:#####://\n"
"            //:[GPU_SIDE]################################://\n"
"            /** @VID_IID[ 0250 ]TIME[ 01:57:42 ][TOP_LEF]**/\n"
"            /** Mouse Origin Adjusted To Top_Left ****** **/\n"
"            /** @VID_IID[ 0252 ]TIME[ 02:54:23 ][UN_FLIP]**/\n"
"                mou_glo.x = MAK_I32( iMouse.x );\n"
"                mou_glo.y = MAK_I32( iMouse.y );\n"
"            //- mou_glo.y = MAK_I32(       NO_FUCKIN_FLIP-//\n"
"            //-    ( iResolution.y - 1.0 ) NO_FUCKIN_FLIP-//\n"
"            //-     -                      NO_FUCKIN_FLIP-//\n"
"            //-    (      iMouse.y       ) NO_FUCKIN_FLIP-//\n"
"            //- );;                        NO_FUCKIN_FLIP-//\n"
"            #else\n"
"            //:[CPU_SIDE]################################://\n"
"                                   mou_glo.x =(\n"
"                AAC2020_POLYOGL_Get_iMouse_X());;\n"
"                                   mou_glo.y =(\n"
"                AAC2020_POLYOGL_Get_iMouse_Y());;\n"
"            #endif //:###################################://\n"
"            //:##########################################://\n"
"            return( mou_glo );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        I32\n"
"        AAC2020_FRAGCOM_MOD_I32(\n"
"            I32 inn_i32\n"
"        ,   I32 divisor\n"
"        )\n"
"        {\n"
"            I32 mod_i32; //:<--[ output_variable ]\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL //:#####://\n"
"                F32 inn_f32=( MAK_F32( inn_i32 ) );\n"
"                F32 div_f32=( MAK_F32( divisor ) );\n"
"                F32 mod_f32 =( mod( inn_f32 , div_f32 ) );\n"
"                mod_i32 =( MAK_I32( mod_f32 ) );\n"
"            #else //:####################################://\n"
"                mod_i32 =( inn_i32 % divisor );\n"
"                ERR( E_S([ONLY_RUN_AS_GLSL_2021_04_08] ) );\n"
"            #endif //:###################################://\n"
"            return( mod_i32 );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -:// \n"
"    //:FRAGCOM_FRA_FILE_MACROS:==========================://\n"
"    /**@VID_IID[ 0093 ]T[00:31:40]MAKE_FOR_MAKE**/ //: - ://\n"
"    /**@VID_IID[ 0293 ]T[00:25:10]MACRO_GUTTING**/ //: - ://\n"
"                                                   //: - ://\n"
"        #undef      ERR                            //: - ://\n"
"        #undef  TYP_F_C                            //: - ://\n"
"        #undef  INN_F_C                            //: - ://\n"
"                                                   //: - ://\n"
"        /**SEE[ AAC2020/LIB/MAC/FRA/TOP._ ]** **/  //: - ://\n"
"        /**SEE[ AAC2020/LIB/MAC/FRA/BOT._ ]** **/  //: - ://\n"
"                                                   //: - ://\n"
"    //:==========================:FRAGCOM_FRA_FILE_MACROS://\n"
"    //:===========:COM_001____AAC2020_FRAGCOM_DEFAULT_001://  \n"
"    //[=====================:PASTE_INTO_FILE[ COM_001._ ]]//\n"
"    //[======================:AAC2020_FRAGCOM_DEFAULT_001]//\n"
"    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//\n"
"    //://////////////////////////FILESEC[ FRAGCOM.FRA._ ]://\n"
