"    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//\n"
"    //[AAC2020_PAINT5D_DEFAULT_001:======================]//\n"
"    //[PASTE_INTO_FILE[ P5D_001._ ]:=====================]//\n"
"    //:P5D_001____AAC2020_PAINT5D_DEFAULT_001:===========://\n"
"    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//\n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //| # |//\n"
"        /** ******************************** ***   //| # |//\n"
"        @VID_IID[ 0112 ]TIME[ 00:56:50 ]           //| # |//\n"
"        Get rid of quote marks in the source       //| # |//\n"
"        So we can wrap entire thing into a         //| # |//\n"
"        very large multi-line string.              //| # |//\n"
"        *** ******************************** **/   //| # |//\n"
"                                                   //| # |//\n"
"        #define            E_S_private( e_m ) #e_m //| # |//\n"
"        #define E_S( e_m ) E_S_private( e_m )      //| # |//\n"
"                                                   //| # |//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As GLSL Code. **/         //| # |//\n"
"                                                   //| # |//\n"
"        #define F32        float    //:  01  ://   //| # |//\n"
"        #define U32         uint    //:  02  ://   //| # |//\n"
"        #define I32          int    //:  03  ://   //| # |//\n"
"        #define IV2        ivec2    //:  04  ://   //| # |//\n"
"        #define UV4        uvec4    //:  05  ://   //| # |//\n"
"        #define FV2         vec2    //:  06  ://\n"
"        #define T_F   texelFetch    //:  07  ://   //| # |//\n"
"        #define TAU      taudepo    //:  08  ://   //| # |//\n"
"        #define P5D      paint5d    //:  09  ://   //| # |//\n"
"        #define SAM   usampler2D    //:  10  ://   //| # |//\n"
"        #define UFF    uint(0xFF)   //:  11  ://   //| # |//\n"
"        #define U00    uint( 0  )   //:  12  ://   //| # |//\n"
"        #define I00     int( 0  )   //:  13  ://   //| # |//\n"
"        #define U03    uint( 3  )   //:  14  ://   //| # |//\n"
"        #define B_3    uint( 3  )   //:  15  ://   //| # |//\n"
"        #define B11    uint( 3  )   //:  16  ://   //| # |//\n"
"        #define H55    uint(0x55)   //:  17  ://   //| # |//\n"
"        #define V_A                 //:  18  ://   //| # |//\n"
"        #define FV4         vec4    //:  19  ://   //| # |//\n"
"        #define ASS  /**NOTHING**/  //:  20  ://   //| # |//\n"
"        #define ERR  /**NOTHING**/  //:  21  ://   //| # |//\n"
"        #define LOG  /**NOTHING**/  //:  22  ://   //| # |//\n"
"        #define LOF  /**NOTHING**/  //:  23  ://   //| # |//\n"
"        #define LOI  /**NOTHING**/  //:  24  ://   //| # |//\n"
"        #define TRU  trunc          //:  25  ://   //| # |//\n"
"        #define REC  struct AAC2020_FRAGCOM_REC\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As C99/C11 Code. **/      //| # |//\n"
"                                                   //| # |//\n"
"        #define F32      float      //:  01  ://   //| # |//\n"
"        #define U32   uint32_t      //:  02  ://   //| # |//\n"
"        #define I32    int32_t      //:  03  ://   //| # |//\n"
"        #define IV2   struct AAC2020_POLYOGL_IV2   //| # |//\n"
"        #define UV4   struct AAC2020_POLYOGL_UV4   //| # |//\n"
"        #define FV2   struct AAC2020_POLYOGL_FV2\n"
"        #define T_F   AAC2020_POLYOGL_tex_fet      //| # |//\n"
"        #define TAU   ( 0 )         //:  08  ://   //| # |//\n"
"        #define P5D   ( 1 )         //:  09  ://   //| # |//\n"
"        #define SAM    int          //:  10  ://   //| # |//\n"
"        #define UFF    0xFF         //:  11  ://   //| # |//\n"
"        #define U00    0x00         //:  12  ://   //| # |//\n"
"        #define I00   ( 0 )         //:  13  ://   //| # |//\n"
"        #define U03   ( 3 )         //:  14  ://   //| # |//\n"
"        #define B_3   ( 3 )         //:  15  ://   //| # |//\n"
"        #define B11   ( 3 )         //:  16  ://   //| # |//\n"
"        #define H55    0x55         //:  17  ://   //| # |//\n"
"        #define V_A   void          //:  18  ://   //| # |//\n"
"        #define FV4   struct AAC2020_POLYOGL_FV4   //| # |//\n"
"        #define ASS   assert        //:  20  ://   //| # |//\n"
"        #define ERR   aac2020_p5d1ogl_Halt         //| # |//\n"
"        #define LOG   aac2020_p5d1ogl_Info_any     //| - |//\n"
"        #define LOF   aac2020_p5d1ogl_Info_f32     //| - |//\n"
"        #define LOI   aac2020_p5d1ogl_Info_i32     //| - |//\n"
"        #define TRU   AAC2020_POLYOGL_Trunc        //| # |//\n"
"        #define REC   struct AAC2020_POLYOGL_REC\n"
"    #endif                                         //| # |//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        #define MAK_FV4      vec4                  //| 1 |//\n"
"        #define MAK_IV2     ivec2                  //| 2 |//\n"
"        #define MAK_U32      uint                  //| 3 |//\n"
"        #define MAK_I32       int                  //| 4 |//\n"
"        #define MAK_F32     float                  //| 5 |//\n"
"        #define BIN_011 uint( 3 )                  //| 6 |//\n"
"        #define CUVIPIX struct AAC2020_P5D1OGL_CUVIPIX   ///\n"
"        #define TYP_F_C /** nothing **/            //| 8 |//\n"
"        #define INN_F_C /** nothing **/            //| 9 |//\n"
"                                                   //| # |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        #define MAK_FV4 AAC2020_POLYOGL_MAK_FV4    //| 1 |//\n"
"        #define MAK_IV2 AAC2020_POLYOGL_MAK_IV2    //| 2 |//\n"
"        #define MAK_U32 AAC2020_POLYOGL_MAK_U32    //| 3 |//\n"
"        #define MAK_I32 AAC2020_POLYOGL_MAK_I32    //| 4 |//\n"
"        #define MAK_F32 AAC2020_POLYOGL_MAK_F32    //| 5 |//\n"
"        #define BIN_011 ((U32)3 )                  //| 6 |//\n"
"        #define CUVIPIX struct AAC2020_P5D1OGL_CUVIPIX   ///\n"
"        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //| 8 |//\n"
"        #define INN_F_C F_C                        //| 9 |//\n"
"                                                   //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //:main_shim_macros:---------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        #define RET_MAIN void /** <-- GLSL**/      //| # |//\n"
"        #define FUN_MAIN main /** <-- GLSL**/      //| # |//\n"
"                                                   //| # |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        #define RET_MAIN FV4 /** <-- [C99/C11]**/  //| # |//\n"
"        #define FUN_MAIN AAC2020_P5D1OGL_Main      //| # |//\n"
"                                                   //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:---------------------------------:main_shim_macros://\n"
"    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//\n"
"    //:C99_AND_GLSL_STRUCTS:-----------------------------://\n"
"    /** *********************************** ***    //| S |//\n"
"    @VID_IID[ 0097 ]TIME[ 08:00:00 ]               //| S |//\n"
"    These structs are declared exactly the same    //| S |//\n"
"    for the [CPU / HOST] C99 code as they are      //| S |//\n"
"    for the [ GPU / DEVICE ] GLSL code.            //| S |//\n"
"    *** *********************************** **/    //| S |//\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"                                                   //| S |//\n"
"        struct AAC2020_P5D1OGL_CUVIPIX{            //| S |//\n"
"                                                   //| S |//\n"
"            I32 cuv_i_x ; //:canvas_user_view:X :////| S |//\n"
"            I32 cuv_i_y ; //:canvas_user_view:Y :////| S |//\n"
"                          //:i_x == integer x   :////| S |//\n"
"                          //:i_y == integer y   :////| S |//\n"
"        };                                         //| S |//\n"
"                                                   //| S |//\n"
"    //:-----------------------------:C99_AND_GLSL_STRUCTS://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_TexelFetch_U32(            //[ x ]//\n"
"            SAM u32_sam //:<--[C99/C11]AND[GLSL]:////[ x ]//\n"
"        ,   IV2 glo                                //[ x ]//\n"
"        ,   I32 levodet_ALWAYS_ZERO                //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"            return(                                //[ x ]//\n"
"            AAC2020_FRAGCOM_TexelFetch_U32(        //[ x ]//\n"
"            /**/    u32_sam       , glo            //[ x ]//\n"
"            ,       levodet_ALWAYS_ZERO            //[ x ]//\n"
"            ));;                                   //[ x ]//\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_TexelFetch_U32XY(          //[ x ]//\n"
"            SAM u32_sam //:<--[C99/C11]AND[GLSL]:////[ x ]//\n"
"        ,   I32 g_x                                //[ x ]//\n"
"        ,   I32 g_y                                //[ x ]//\n"
"        ,   I32 levodet_ALWAYS_ZERO                //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"            return(                                //[ x ]//\n"
"            AAC2020_FRAGCOM_TexelFetch_U32XY(      //[ x ]//\n"
"            /**/    u32_sam , g_x , g_y            //[ x ]//\n"
"            ,       levodet_ALWAYS_ZERO            //[ x ]//\n"
"            ));;                                   //[ x ]//\n"
"        }                                          //[ x ]//\n"
"        //:NEW_FEATURE_TAUDEPO_ACCESS:-------------------://\n"
"        //:DATE[ 2021_02_10 ]VID_IID[ 0131 ]T[ 04:35:23 ]://\n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"    /** @VID_IID[ 0177 ]TIME[ 02:47:00 ]         ******* **/\n"
"    /** Fetching Data From Texture Memory Is Now ******* **/\n"
"    /** all in[ TAUFRAG.FRA._                    ******* **/\n"
"    //- REMOVED: aac2020_p5d1ogl_taudepo_pix_dex - - - - -//\n"
"    //+ ....USE: aac2020_taufrag_pix_dex         + + + + +//\n"
"    //- REMOVED: AAC2020_P5D1OGL_TAUDEPO_Get_U32 - - - - -//\n"
"    //+ ....USE:         aac2020_taufrag_Get_U32 + + + + +//\n"
"    //- AAC2020_P5D1OGL_TAUDEPO_Get_REC          - - - - -//\n"
"    //+ ....USE:         aac2020_taufrag_Get_REC + + + + +//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"        //:DATE[ 2021_02_10 ]VID_IID[ 0131 ]T[ 04:35:23 ]://\n"
"        //:-------------------:NEW_FEATURE_TAUDEPO_ACCESS://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_BitPack_Get(               //[ x ]//\n"
"            IV2     glo                            //[ x ]//\n"
"        ,   I32 aus_dex                            //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"        ASS( B_3 == BIN_011 );                     //[ x ]//\n"
"                                                   //[ x ]//\n"
"            U32 u32_var ;                          //[ x ]//\n"
"            U32 til_val ;                          //[ x ]//\n"
"                                                   //[ x ]//\n"
"            u32_var =(                             //[ x ]//\n"
"                AAC2020_P5D1OGL_TexelFetch_U32(    //[ x ]//          \n"
"                    P5D //:texture_to_sample    :////[ x ]//\n"
"                ,   glo //:integer_texel_coord  :////[ x ]//\n"
"                ,   I00 //:level_of_detail_zero :////[ x ]//\n"
"                ));;                               //[ x ]//\n"
"                                                   //[ x ]//\n"
"            til_val =(                             //[ x ]//\n"
"                ( u32_var >> (aus_dex*2) )         //[ x ]//\n"
"                &                                  //[ x ]//\n"
"                BIN_011                            //[ x ]//\n"
"            );;                                    //[ x ]//\n"
"                                                   //[ x ]//\n"
"            return( til_val );                     //[ x ]//\n"
"        }                                          //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        I32                                        //[ - ]//\n"
"        AAC2020_P5D1OGL_til_exp_CTO_til_peb(       //[ - ]//\n"
"            I32         til_exp                    //[ - ]//\n"
"        )                                          //[ - ]//\n"
"        {                                          //[ - ]//\n"
"                                                   //[ - ]//\n"
"        #define T_E til_exp                        //[ - ]//\n"
"        #define T_P til_peb                        //[ - ]//\n"
"                                                   //[ - ]//\n"
"            ASS( til_exp >= 0 && til_exp <=(8-1) );//[ - ]//\n"
"                                                   //[ - ]//\n"
"                        I32 T_P ;                  //[ - ]//\n"
"            if( 0 == T_E ){ T_P = (  1 ); };       //[ 1 ]//\n"
"            if( 1 == T_E ){ T_P = (  2 ); };       //[ 2 ]//\n"
"            if( 2 == T_E ){ T_P = (  4 ); };       //[ 3 ]//\n"
"            if( 3 == T_E ){ T_P = (  8 ); };       //[ 4 ]//\n"
"            if( 4 == T_E ){ T_P = ( 16 ); };       //[ 5 ]//\n"
"            if( 5 == T_E ){ T_P = ( 32 ); };       //[ 6 ]//\n"
"            if( 6 == T_E ){ T_P = ( 64 ); };       //[ 7 ]//\n"
"            if( 7 == T_E ){ T_P = (128 ); };       //[ 8 ]//\n"
"                                                   //[ - ]//\n"
"            return( til_peb );                     //[ - ]//\n"
"                                                   //[ - ]//\n"
"        #undef  T_E                                //[ - ]//\n"
"        #undef  T_P                                //[ - ]//\n"
"                                                   //[ - ]//\n"
"                                                   //[ - ]//\n"
"        }                                          //[ - ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        I32                                        //[ - ]//\n"
"        AAC2020_P5D1OGL_til_exp_CTO_max_cor(       //[ - ]//\n"
"            I32         til_exp                    //[ - ]//\n"
"        )                                          //[ - ]//\n"
"        {                                          //[ - ]//\n"
"        #define T_E til_exp                        //[ - ]//\n"
"        #define M_C max_cor                        //[ - ]//\n"
"                                                   //[ - ]//\n"
"            I32 max_cor;                           //[ - ]//\n"
"            if( 0 == T_E ){ M_C = ( 128 - 1 ); };  //[ 1 ]//\n"
"            if( 1 == T_E ){ M_C = (  64 - 1 ); };  //[ 2 ]//\n"
"            if( 2 == T_E ){ M_C = (  32 - 1 ); };  //[ 3 ]//\n"
"            if( 3 == T_E ){ M_C = (  16 - 1 ); };  //[ 4 ]//\n"
"            if( 4 == T_E ){ M_C = (   8 - 1 ); };  //[ 5 ]//\n"
"            if( 5 == T_E ){ M_C = (   4 - 1 ); };  //[ 6 ]//\n"
"            if( 6 == T_E ){ M_C = (   2 - 1 ); };  //[ 7 ]//\n"
"            if( 7 == T_E ){ M_C = (   1 - 1 ); };  //[ 8 ]//\n"
"                                                   //[ - ]//\n"
"                                                   //[ - ]//\n"
"            return( max_cor );                     //[ - ]//\n"
"                                                   //[ - ]//\n"
"        #undef  T_E                                //[ - ]//\n"
"        #undef  M_C                                //[ - ]//\n"
"        }                                          //[ - ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        I32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_til_exp_CTO_diagpix(       //[ x ]//\n"
"            I32         til_exp                    //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"        #define T til_exp                          //[ x ]//\n"
"        #define D diagpix                          //[ x ]//\n"
"                                                   //[ x ]//\n"
"            I32 diagpix =( 9999 );                 //[ x ]//\n"
"                                                   //[ x ]//\n"
"            //:@VID_IID[ 0085 ]TIME[ 01:53:00 ] :////[ x ]//\n"
"            //:TODO: Make into lookup table:    :////[ x ]//\n"
"            //:BUT MUST GET WORKING IN OPENGL   :////[ x ]//\n"
"            //:BEFORE YOU DO SUCH REFACTOR!     :////[ x ]//\n"
"            if( 0 == T ){ D = 0   ; }else          //[ x ]//\n"
"            if( 1 == T ){ D = 128 ; }else          //[ x ]//     \n"
"            if( 2 == T ){ D = 192 ; }else          //[ x ]//\n"
"            if( 3 == T ){ D = 224 ; }else          //[ x ]//\n"
"            if( 4 == T ){ D = 240 ; }else          //[ x ]//\n"
"            if( 5 == T ){ D = 248 ; }else          //[ x ]//\n"
"            if( 6 == T ){ D = 252 ; }else          //[ x ]//\n"
"            if( 7 == T ){ D = 254 ; }else{         //[ x ]//\n"
"                                                   //[ x ]//\n"
"                /// if out of range, ///           //[ x ]//\n"
"                /// set to invalid   ///           //[ x ]//\n"
"                /// config pixel.    ///           //[ x ]//\n"
"                D = 9001 ;                         //[ x ]//\n"
"                                                   //[ x ]//\n"
"            };;                                    //[ x ]//\n"
"                                                   //[ x ]//\n"
"            return( diagpix );                     //[ x ]//\n"
"                                                   //[ x ]//\n"
"        #undef  T                                  //[ x ]//\n"
"        #undef  D                                  //[ x ]//\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        IV2                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_painpix_CTO_glocpix(       //[ x ]//\n"
"            I32 til_qua                            //[ x ]//\n"
"        ,   I32 til_exp                            //[ x ]//\n"
"        ,   I32 til_lay                            //[ x ]//\n"
"        ,   I32 loc_t_x                            //[ x ]//\n"
"        ,   I32 loc_t_y                            //[ x ]//\n"
"        ){                                         //[ x ]//\n"
"        //:declare__variables: . . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            IV2 glo; /** glo_t_x & glo_t_y **/     //[ x ]//\n"
"            IV2 tem; /** tempi_x & tempi_y **/     //[ x ]//\n"
"            IV2 qua; /** o_x_qua & o_y_qua **/     //[ x ]//\n"
"            IV2 lay; /** o_x_lay & o_y_lay **/     //[ x ]//\n"
"                                                   //[ x ]//\n"
"            I32 dia; /** diagpix **/               //[ x ]//\n"
"            I32 m_c; /** max_cor **/               //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . . :declare__variables://\n"
"        //:CALCULATE::painpix_CTO_glocpix: . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            m_c =(                                 //[ x ]//\n"
"            AAC2020_P5D1OGL_til_exp_CTO_max_cor(   //[ x ]//\n"
"                            til_exp ));;           //[ x ]//\n"
"            dia =(                                 //[ x ]//\n"
"            AAC2020_P5D1OGL_til_exp_CTO_diagpix(   //[ x ]//\n"
"                            til_exp ));;           //[ x ]//\n"
"                                                   //[ x ]//\n"
"            tem.x =  til_qua       % ( 2 ) ;       //[ x ]//\n"
"            tem.y = (til_qua-tem.x)/ ( 2 ) ;       //[ x ]//\n"
"                                                   //[ x ]//\n"
"            qua.x = ( tem.x * 256 );               //[ x ]//\n"
"            qua.y = ( tem.y * 256 );               //[ x ]//\n"
"                                                   //[ x ]//\n"
"            tem.x =  til_lay          % (  2  ) ;  //[ x ]//\n"
"            tem.y = (til_lay - tem.x) / (  2  ) ;  //[ x ]//\n"
"                                                   //[ x ]//\n"
"            lay.x = ( tem.x * ( m_c + 1 ) ) ;      //[ x ]//\n"
"            lay.y = ( tem.y * ( m_c + 1 ) ) ;      //[ x ]//\n"
"                                                   //[ x ]//\n"
"            glo.x=( qua.x +dia+ lay.x + loc_t_x ); //[ x ]//\n"
"            glo.y=( qua.y +dia+ lay.y + loc_t_y ); //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . :CALCULATE::painpix_CTO_glocpix://\n"
"        //:return_from_function: . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            /** glo == glo_t_x & glo_t_y **/       //[ x ]//\n"
"            return( glo );                         //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . :return_from_function://\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_Get(                       //[ x ]//\n"
"            I32  til_qua                           //[ x ]//\n"
"        ,   I32  til_exp                           //[ x ]//\n"
"        ,   I32  til_lay                           //[ x ]//\n"
"        ,   I32  loc_t_x                           //[ x ]//\n"
"        ,   I32  loc_t_y                           //[ x ]//\n"
"        ,   I32  aus_dex                           //[ x ]//\n"
"                                                   //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"        //:declare__variables: . . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            U32 til_val =( U00 );                  //[ x ]//\n"
"                                                   //[ x ]//\n"
"            /** glo == glo_t_x & glo_t_y  **/      //[ x ]//\n"
"            IV2 glo    ;                           //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . . :declare__variables://\n"
"        //:get_pixel_and_extract_tile_value: . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            glo=(                                  //[ x ]//\n"
"            AAC2020_P5D1OGL_painpix_CTO_glocpix(   //[ x ]//\n"
"                til_qua                            //[ x ]//\n"
"            ,   til_exp                            //[ x ]//\n"
"            ,   til_lay                            //[ x ]//\n"
"            ,   loc_t_x                            //[ x ]//  \n"
"            ,   loc_t_y                            //[ x ]//\n"
"            ));;                                   //[ x ]//\n"
"                                                   //[ x ]//\n"
"            til_val=(                              //[ x ]//\n"
"            AAC2020_P5D1OGL_BitPack_Get(           //[ x ]//\n"
"                glo                                //[ x ]//\n"
"            ,   aus_dex                            //[ x ]//\n"
"            ));;                                   //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . :get_pixel_and_extract_tile_value://\n"
"        //:return_from_function: . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            return( til_val );                     //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . :return_from_function://\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //[ x ]//\n"
"        CUVIPIX                                    //[ x ]//\n"
"        AAC2020_P5D1OGL_painpix_CTO_cuvipix(       //[ x ]//\n"
"            I32 til_qua /** Tile Quadrant( t_q )**///[ x ]//\n"
"        ,   I32 til_exp /** Tile Exponent( t_e )**///[ x ]//\n"
"        ,   I32 til_lay /** Tile Layer   ( t_l )**///[ x ]//\n"
"        ,   I32 loc_t_x /** Local Tile X ( t_x )**///[ x ]//\n"
"        ,   I32 loc_t_y /** Local Tile Y ( t_y )**///[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"            //:check_inputs:-----------------------------://\n"
"            #define T_Q til_qua                    //[ x ]//\n"
"            #define T_E til_exp                    //[ x ]//\n"
"            #define T_L til_lay                    //[ x ]//\n"
"            #define T_X loc_t_x                    //[ x ]//\n"
"            #define T_Y loc_t_y                    //[ x ]//\n"
"                                                   //[ x ]//\n"
"                ASS( T_Q >= 0 && T_Q <= (  4-1) ); //[ x ]//\n"
"                ASS( T_E >= 0 && T_E <= (  8-1) ); //[ x ]//\n"
"                ASS( T_L >= 0 && T_L <= (  3-1) ); //[ x ]//\n"
"                ASS( T_X >= 0 && T_X <= (128-1) ); //[ x ]//\n"
"                ASS( T_Y >= 0 && T_Y <= (128-1) ); //[ x ]//\n"
"                                                   //[ x ]//\n"
"            #undef  T_Q                            //[ x ]//\n"
"            #undef  T_E                            //[ x ]//\n"
"            #undef  T_L                            //[ x ]//\n"
"            #undef  T_X                            //[ x ]//\n"
"            #undef  T_Y                            //[ x ]//\n"
"            //:-----------------------------:check_inputs://\n"
"            //:declare_vars:-----------------------------://\n"
"                                                   //[ x ]//\n"
"                CUVIPIX cuvipix;                   //[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 qua_c_x; /** til_qua as cell**///[ x ]//\n"
"                I32 qua_c_y; /** [X|Y]coordinate**///[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 til_peb; /** Size_In_Pebbles**///[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 tor_i_x; /** TIle_ORigin:i_x**///[ x ]//\n"
"                I32 tor_i_y; /** TIle_ORigin:i_y**///[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 pox_qua; /** Pixel_Offset   **///[ x ]//\n"
"                I32 poy_qua; /** QUAdrant [X,Y] **///[ x ]//\n"
"                                                   //[ x ]//\n"
"            //:-----------------------------:declare_vars://\n"
"            //:##########################################://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"                                                   //:###://\n"
"                /** ************************* ***  //:###://\n"
"                @VID_IID[ 0097 ]TIME[ 08:15:42 ]   //:###://\n"
"                til_lay does not change the        //:###://\n"
"                canvas_user_view coordinate        //:###://\n"
"                (cuvipix) because the layers are   //:###://\n"
"                LAYERED directly on top of each    //:###://\n"
"                other at the same exact 2D         //:###://\n"
"                coordinate.                        //:###://\n"
"                *** ************************* **/  //:###://\n"
"                                                   //:###://\n"
"                if( til_lay ){ /** NOOP **/ };     //:###://\n"
"                                                   //:###://\n"
"            #endif //:###################################://\n"
"            /** @VID_IID[ 0097 ]TIME[ 08:08:42 ]  ****** **/\n"
"            /** Convert tile quadrant index into         **/\n"
"            /** it's XY cell location equivalent.        **/\n"
"            /** AKA: INDEX TO XY CONVERSION.      ****** **/\n"
"            qua_c_x =  til_qua           % 2 ;     //:***://\n"
"            qua_c_y = (til_qua - qua_c_x)/ 2 ;     //:***://\n"
"            ASS( qua_c_x >= 0 && qua_c_x <= 1 );   //:***://\n"
"            ASS( qua_c_x >= 0 && qua_c_x <= 1 );   //:***://\n"
"                                                   //:***://\n"
"            /** **************************************** **/\n"
"            /** @VID_IID[ 0097 ]TIME[ 08:27:42 ]         **/\n"
"            /** Get the span of the current tile         **/\n"
"            /** in focus in terms of the smallest        **/\n"
"            /** tile size. ***************************** **/\n"
"            /** @VID_IID[ 0103 ]TIME[ 04:05:20 ]    .....**/\n"
"            /** Fixed the logic for getting til_peb .....**/\n"
"            til_peb =( AAC2020_P5D1OGL_til_exp_CTO_til_peb(\n"
"                                       til_exp )); //:***://\n"
"                                                   //:***://\n"
"                                                   //:***://\n"
"            //:##########################################://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"                                                   //:###://\n"
"                //:  @VID_IID[ 0098 ]TIME[ 03:52:30 ] :::://\n"
"                //:  This error check is pointless ::::::://\n"
"                I32 max_cor =( til_peb - 1 );      //:###://\n"
"                                                   //:###://\n"
"                if( til_peb > (max_cor+1) ){       //:###://\n"
"                                                   //:###://\n"
"                    ERR(E_S(til_peb_IS_OOB_2021)); //:###://\n"
"                };;                                //:###://\n"
"                                                   //:###://\n"
"            #endif //:###################################://\n"
"            /** **************************************** ***\n"
"            @VID_IID[ 0097 ]TIME[ 08:38:23 ] Get the top ***\n"
"            left origin of the current tile in focus.    ***\n"
"                                                         ***\n"
"            tor_i_x:TileORigin:int_x  [tor==Tile_ORigin] ***    \n"
"            tor_i_y:TileORigin:int_y                     ***\n"
"                                                         ***\n"
"            @VID_IID[ 0103 ]TIME[ 03:20:00 ]             ***\n"
"            [ tor_i_x ]AND[ tor_i_y ]RE_EXPLAINED_AGAIN  ***\n"
"                                                         ***\n"
"            *** **************************************** **/\n"
"            //:------------------------------------------://\n"
"            tor_i_x =( til_peb * loc_t_x );        //:---://\n"
"            tor_i_y =( til_peb * loc_t_y );        //:---://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"            if(  1                                 //:###://\n"
"            &&( tor_i_x >= 0 && tor_i_x <=(256-1) )//:###://\n"
"            &&( tor_i_y >= 0 && tor_i_y <=(256-1) )//:###://\n"
"            ){                                     //:###://\n"
"                /** DO NOTHING **/                 //:###://\n"
"            }else{                                 //:###://\n"
"                                                   //:###://\n"
"                ERR(E_S( tor_out_of_range_2021 )); //:###://\n"
"                                                   //:###://\n"
"            };;                                    //:###://\n"
"            #endif //:###################################://\n"
"            ASS( tor_i_x >= 0 && tor_i_x<=(256-1));//:---://\n"
"            ASS( tor_i_y >= 0 && tor_i_y<=(256-1));//:---://\n"
"            //:------------------------------------------://\n"
"                                                   //:---://\n"
"            /** pox : pixel [offset/origin] X **/  //:---://\n"
"            /** poy : pixel [offset/origin] Y **/  //:---://\n"
"            pox_qua = ( qua_c_x * 128 );           //:---://\n"
"            poy_qua = ( qua_c_y * 128 );           //:---://\n"
"            //:##########################################://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"                                                   //:###://\n"
"                if( 1                              //:###://\n"
"                && ( pox_qua >= 0 && pox_qua <=(128 - 0)  )\n"
"                && ( poy_qua >= 0 && poy_qua <=(128 - 0)  )\n"
"                ){                                 //:###://\n"
"                    /** OKAY. Do nothing. **/      //:###://\n"
"                }else{                             //:###://\n"
"                                                   //:###://\n"
"                    ERR(E_S( OOB_POXY_2021 ));     //:###://\n"
"                                                   //:###://\n"
"                };;                                //:###://\n"
"                                                   //:###://\n"
"            #endif //:###################################://\n"
"            ASS(pox_qua >= 0 && pox_qua<=(128 -0));//:---://\n"
"            ASS(poy_qua >= 0 && poy_qua<=(128 -0));//:---://\n"
"            //://////////////////////////////////////////://\n"
"                                                   //:---://\n"
"            cuvipix.cuv_i_x=( pox_qua + tor_i_x ); //:---://\n"
"            cuvipix.cuv_i_y=( poy_qua + tor_i_y ); //:---://\n"
"            ASS( cuvipix.cuv_i_x >= 0 );           //:---://\n"
"            ASS( cuvipix.cuv_i_y >= 0 );           //:---://\n"
"            ASS( cuvipix.cuv_i_x <=( 256 - 1 ) );  //:---://\n"
"            ASS( cuvipix.cuv_i_y <=( 256 - 1 ) );  //:---://\n"
"                                                   //:---://\n"
"            return( cuvipix );                     //:---://\n"
"        }                                          //:---://\n"
"                                                   //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //:---://\n"
"        I32                                        //:---://\n"
"        AAC2020_P5D1OGL_til_exp_CTO_squ_ash(       //:---://\n"
"        I32             til_exp                    //:---://\n"
"        )                                          //:---://\n"
"        {                                          //:---://\n"
"            /** *************************** ***    //:---://\n"
"            til_exp: Tile Exponent                 //:---://\n"
"            squ_ash: Literally[  SQUASH ]          //:---://\n"
"                     for[ squash amount ]          //:---://\n"
"                CTO: ConvertTO                     //:---://\n"
"            *** *************************** **/    //:---://\n"
"            //:input_checks:-----------------------------://\n"
"                                                     //:-://\n"
"                ASS(til_exp >= 0 && til_exp<=(8-1)); //:-://\n"
"                                                     //:-://\n"
"            //:-----------------------------:input_checks://\n"
"            //:declare_var:------------------------------://\n"
"                                                   //:---://\n"
"                I32 squ_ash=( 0 - 66077 );         //:---://\n"
"                                                   //:---://\n"
"            //:------------------------------:declare_var://\n"
"            #if( AAC2020_CRASH_ON_VITAL_TODO >= 1 ) //:##://\n"
"                                                    //:##://\n"
"                #error OPTIMIZE_WITH_A_LOOKUP_TABLE //:##://\n"
"                                                    //:##://\n"
"            #endif //:###################################://\n"
"                                                   //:---://\n"
"            /** TODO: Re-write as lookup table **/ //:---://\n"
"            /** once we have final PAINT5D     **/ //:---://\n"
"            /** GLSL shader working.           **/ //:---://\n"
"            if( 0 == til_exp ){ squ_ash =   1; };  //:---://\n"
"            if( 1 == til_exp ){ squ_ash =   2; };  //:---://\n"
"            if( 2 == til_exp ){ squ_ash =   4; };  //:---://\n"
"            if( 3 == til_exp ){ squ_ash =   8; };  //:---://\n"
"            if( 4 == til_exp ){ squ_ash =  16; };  //:---://\n"
"            if( 5 == til_exp ){ squ_ash =  32; };  //:---://\n"
"            if( 6 == til_exp ){ squ_ash =  64; };  //:---://\n"
"            if( 7 == til_exp ){ squ_ash = 128; };  //:---://\n"
"                                                   //:---://\n"
"            return( squ_ash );                     //:---://\n"
"        }                                          //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"    //:C99C99C99C99C99C99C99C99::C99C99C99C99C99C99C99C99://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"    #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL          //: # ://\n"
"    #define P5D_TOR struct aac2020_p5d1ogl_P5D_TOR //: 1 ://\n"
"    #define U08 uint8_t /** GCC: <stdint.h> **/    //: 2 ://\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"                                                   //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //:---://\n"
"        /** P5D_TOR: Paint5D_TileORigin                  **/\n"
"        /**          The origin pixel in terms of the    **/\n"
"        /**          [ data view ]aka the texture        **/\n"
"        /**          memory storing the tile values.     **/\n"
"        struct aac2020_p5d1ogl_P5D_TOR{            //:---://\n"
"                                                   //:---://\n"
"            I32 loc_t_x ; //:LocalTileCoordinate:X //:---://\n"
"            I32 loc_t_y ; //:LocalTileCoordinate:Y //:---://\n"
"                                                   //:---://\n"
"        };                                         //:---://\n"
"                                                   //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //:---://\n"
"        P5D_TOR                                    //:---://\n"
"        OPEN_GL_til_exp_AND_lay_dex_CTO_p5d_tor(   //:---://\n"
"            I32 til_exp                            //:---://\n"
"        ,   I32 lay_dex                            //:---://\n"
"        )                                          //:---://\n"
"        {                                          //:---://\n"
"        //:declare_variables:----------------------------://\n"
"                                                   //:---://\n"
"            P5D_TOR p5d_tor;                       //:---://\n"
"            I32     diagpix;                       //:---://\n"
"            I32     max_cor;                       //:---://\n"
"                                                   //:---://\n"
"        //:----------------------------:declare_variables://\n"
"        //:CORE_LOGIC_OF_FUNCTION:=======================://\n"
"        #define TOR_I_X p5d_tor.loc_t_x            //:---://\n"
"        #define TOR_I_Y p5d_tor.loc_t_y            //:---://\n"
"                                                   //:---://\n"
"            diagpix=(                              //:---://\n"
"            AAC2020_P5D1OGL_til_exp_CTO_diagpix(   //:---://\n"
"                            til_exp ));;           //:---://\n"
"                                                   //:---://\n"
"                                                   //:---://\n"
"            max_cor=(                              //:---://\n"
"            AAC2020_P5D1OGL_til_exp_CTO_max_cor(   //:---://\n"
"                            til_exp ));            //:---://\n"
"                                                   //:---://\n"
"            if( 0 == lay_dex ){                    //:---://\n"
"                TOR_I_X=( diagpix + 0 );           //:---://\n"
"                TOR_I_Y=( diagpix + 0 );           //:---://\n"
"            }else                                  //:---://\n"
"            if( 1 == lay_dex ){                    //:---://\n"
"                TOR_I_X=( diagpix + max_cor + 1 ); //:---://\n"
"                TOR_I_Y=( diagpix +           0 ); //:---://\n"
"            }else                                  //:---://\n"
"            if( 2 == lay_dex ){                    //:---://\n"
"                TOR_I_X=( diagpix +           0 ); //:---://\n"
"                TOR_I_Y=( diagpix + max_cor + 1 ); //:---://\n"
"            }else{                                 //:---://\n"
"                                                   //:---://\n"
"                ERR(E_S( BAD_lay_dex_YEAR_2021 )); //:---://\n"
"                                                   //:---://\n"
"            };;                                    //:---://\n"
"                                                   //:---://\n"
"            #undef  TOR_I_X                        //:---://\n"
"            #undef  TOR_I_Y                        //:---://\n"
"            //:===================:CORE_LOGIC_OF_FUNCTION://\n"
"            //:coarse_range_check:-----------------------://\n"
"                                                   //:---://\n"
"            assert( p5d_tor.loc_t_x >= 0 );        //:---://\n"
"            assert( p5d_tor.loc_t_y >= 0 );        //:---://\n"
"            assert( p5d_tor.loc_t_x <=( 512 -1 ) );//:---://\n"
"            assert( p5d_tor.loc_t_y <=( 512 -1 ) );//:---://\n"
"                                                   //:---://\n"
"            //:-----------------------:coarse_range_check://\n"
"            //:Error_If_On_Config_Pixel:-----------------://\n"
"            if(                                    //:---://\n"
"                (                                  //:---://\n"
"                    (256-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (256-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"                ||                                 //:---://\n"
"                (                                  //:---://\n"
"                    (512-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (256-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"                ||                                 //:---://\n"
"                (                                  //:---://\n"
"                    (256-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (512-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"                ||                                 //:---://\n"
"                (                                  //:---://\n"
"                    (512-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (512-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"            ){                                     //:---://\n"
"                /** *********************** ***    //:---://\n"
"                Configuration pixel is NEVER       //:---://\n"
"                valid data storage location.       //:---://\n"
"                @VID_IID[ 0112 ]T[ 02:30:42 ]      //:---://\n"
"                *** *********************** **/    //:---://\n"
"                ERR(E_S( ONN_CFG_PIX_2021 ));      //:---://\n"
"            };;                                    //:---://\n"
"            //:-----------------:Error_If_On_Config_Pixel://\n"
"                                                   //:---://\n"
"            return( p5d_tor );                     //:---://\n"
"        }                                          //:---://\n"
"                                                   //:---://\n"
"        /** ******************************************** **/\n"
"        /** @VID_IID[ 0105 ]TIME[ 04:41:40 ]         *** **/\n"
"        /** This code only exists to test the        *** **/\n"
"        /** getter function                          *** **/\n"
"        /** AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get  *** **/\n"
"        /**                                          *** **/\n"
"        /** We cannot[ PUT ]pixels within GLSL       *** **/\n"
"        /** shader code. Hence the gaurd used to     *** **/\n"
"        /** omit this code when compiled as GLSL     *** **/\n"
"        /** fragment shader.                         *** **/\n"
"        /** @VID_IID[ 0105 ]TIME[ 04:43:42]EXPLAINED *** **/\n"
"        /** ******************************************** **/\n"
"        void                                             ///\n"
"        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Put(         ///\n"
"                                                         ///\n"
"            //|LOCATION_OF_THE_DATA|||||||||||||||||||||||//\n"
"            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///\n"
"        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///\n"
"                                                         ///\n"
"            //|VALUES_OF_THE_DATA|||||||||||||||||||||||||//\n"
"        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///\n"
"        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///\n"
"        ,   U32 cuvbits_cuv_b16  //:STORES_8_TILE_VALUES ///\n"
"                                                         ///\n"
"        )                                                ///\n"
"        {                                                ///\n"
"        #define I_X cuv_i_x_000_255  //:------------: 01 ://\n"
"        #define I_Y cuv_i_y_000_255  //:------------: 02 ://\n"
"        #define LAY lay_dex_000_002  //:------------: 03 ://\n"
"        #define AUS aus_dex_000_015  //:------------: 04 ://\n"
"        #define B16 cuvbits_cuv_b16  //:------------: 05 ://\n"
"        //:declare_variables:----------------------------://\n"
"                                                   //:---://\n"
"            /** **************************************** ***\n"
"            Which SubTile Graphic Are You Drawing On?    ///\n"
"            There are four of them. This is the          ///\n"
"            origin pixel of the quadrant targeted.       ///\n"
"            *** **************************************** **/\n"
"                                                   //:---://\n"
"            I32 til_qua_q_x; //:QUADRANT                 ://\n"
"            I32 til_qua_q_y; //:                         ://\n"
"                             //:                         ://\n"
"            I32 til_qua_o_x; //:ORIGIN                   ://\n"
"            I32 til_qua_o_y; //:                         ://\n"
"                             //:                         ://\n"
"            I32     til_qua; //:1D_INDEX_VERSION         ://\n"
"                             //:@VID_IID[0105]T[6:51:10] ://\n"
"                             //:                         ://\n"
"            I32     peb_t_x; //:PEBBLE_TILE_X            ://\n"
"            I32     peb_t_y; //:PEBBLE_TILE_Y            ://\n"
"                             //:                         ://\n"
"            I32     loc_t_x; //:LOCAL_TILE[ X | Y ]COORD ://\n"
"            I32     loc_t_y; //:@VID_IID[0105]T[6:38:00] ://\n"
"                                                          //\n"
"            I32         t_e; //:til_exp( TileSizeExponent://\n"
"                                                          //\n"
"            I32     max_cor; //:maximum_local_tile_coord ://\n"
"                                                          //\n"
"            I32     til_peb; //:TILe_(size_in)_PEBbles   ://\n"
"                             //:@VID_IID[0105]T[7:26:00] ://\n"
"                                                          //\n"
"            //:UNSIGNED!!!!                               //\n"
"            U32     til_val; //:two_bit_tile_value_to_set://\n"
"            //:UNSIGNED!!!!                               //\n"
"                                                          //\n"
"        //- P5D_TOR p5d_tor;    Paint5D_TileORigin       -//\n"
"                             //:Origin_On_The_Texture    ://\n"
"                             //:Memory_Storing_Data      ://\n"
"                                                          //\n"
"        //:----------------------------:declare_variables://\n"
"                                                          //\n"
"            /** @VID_IID[ 0105 ]TIME[ 03:40:00 ] ******* **/\n"
"            /** cuvbits_cuv_b16 specifies               ]**/\n"
"            /** all the different tile values           ]**/\n"
"            /** at a canvas_user_view location          ]**/\n"
"            /** and layer specified by[ lay_dex_000_002 ]**/\n"
"            /** **************************************** **/    \n"
"                                                          //\n"
"            til_qua_q_x=( I_X / 128 );                    //\n"
"            til_qua_q_y=( I_Y / 128 );                    //\n"
"            ASS( til_qua_q_x >= 0 && til_qua_q_x <= 1 );  //\n"
"            ASS( til_qua_q_y >= 0 && til_qua_q_y <= 1 );  //\n"
"                                                          //\n"
"            til_qua_o_x=( til_qua_q_x * 128 );            //\n"
"            til_qua_o_y=( til_qua_q_y * 128 );            //\n"
"            ASS( til_qua_o_x >= 0 && til_qua_o_x <= 128 );//\n"
"            ASS( til_qua_o_y >= 0 && til_qua_o_y <= 128 );//\n"
"                                                          //\n"
"            peb_t_x=( cuv_i_x_000_255 -( til_qua_o_x ) ); //\n"
"            peb_t_y=( cuv_i_y_000_255 -( til_qua_o_y ) ); //\n"
"                                                          //\n"
"            /** xy to index formula for 2x2 cell grid **/ //\n"
"            til_qua =(   til_qua_q_x +                    //\n"
"                       ( til_qua_q_y  *  2 ) );;          //\n"
"            assert( til_qua >= 0 && til_qua <=(4-1) );    //\n"
"                                                          //\n"
"            //:set_all_8_tiles:--------------------------://\n"
"            #define TIL_EXP t_e                           //\n"
"            for( t_e = 0 ; t_e <=(8-1) ; t_e ++ ){        //\n"
"                                                          //\n"
"                //|  Get Origin Of Block Of Memory ..... |//\n"
"                //|  For the Current Tile Value    ..... |//\n"
"                //|  That Is Being Laid            ..... |//\n"
"                //-  p5d_tor=(                           -//\n"
"                //-  til_exp_AND_lay_dex_CTO_p5d_tor(    -//\n"
"                //-  /**/    TIL_EXP                     -//\n"
"                //-  ,       lay_dex_000_002             -//\n"
"                //-  ));;                                -//\n"
"                                                          //\n"
"                /** Convert[ I_X , I_Y ] coords into   ..**/\n"
"                /** Local To Data Parition Coordinates ..**/\n"
"                                                          //\n"
"                til_peb=(                                 //\n"
"                    AAC2020_P5D1OGL_til_exp_CTO_til_peb(  //\n"
"                                    TIL_EXP ));           //\n"
"                ASS( til_peb >= 0 && til_peb <= 128 );    //\n"
"                                                          //\n"
"                     loc_t_x=( peb_t_x / til_peb );       //\n"
"                     loc_t_y=( peb_t_y / til_peb );       //\n"
"                ASS( loc_t_x >= 0 && loc_t_x <=(128-1));  //\n"
"                ASS( loc_t_y >= 0 && loc_t_y <=(128-1));  //\n"
"                                                          //\n"
"                //:local_tile_exact_bounds_check:--------://\n"
"                                                          //\n"
"                    max_cor=(                             //\n"
"                    AAC2020_P5D1OGL_til_exp_CTO_max_cor(  //\n"
"                                    TIL_EXP ));;          //\n"
"                                                          //\n"
"                    if( loc_t_x > max_cor                 //\n"
"                    ||  loc_t_y > max_cor                 //\n"
"                    ){                                    //\n"
"                        ERR(E_S( LOC_TXY_OOB_2021 ));     //\n"
"                    };;                                   //\n"
"                                                          //\n"
"                //:--------:local_tile_exact_bounds_check://\n"
"                                                          //\n"
"                til_val =(                                //\n"
"                    ( cuvbits_cuv_b16 >> (t_e*2) )        //\n"
"                    &( BIN_011 ) //:<--2BitMask           //\n"
"                );;                                       //\n"
"                assert( til_val <= 3 );                   //\n"
"                                                          //\n"
"                /** All Values Are U08 Here           **/ //\n"
"                /** But that's okay because were are  **/ //\n"
"                /** NOT compiling as OPENGL code here **/ //\n"
"                AAC2020_PAINT5D_Put(                      //\n"
"                    (U08)til_qua //:[til_qua | t_q      ]://\n"
"                ,   (U08)TIL_EXP //:[til_exp | t_e      ]://\n"
"                ,   (U08)LAY     //:[til_lay | t_l | lay]://\n"
"                ,   (U08)loc_t_x //:[loc_t_x | t_x      ]://\n"
"                ,   (U08)loc_t_y //:[loc_t_y | t_y      ]://\n"
"                ,   (U08)AUS     //:[aus_dex | a_d      ]://\n"
"                ,   (U08)til_val //:[til_val | t_v      ]://\n"
"                );;                                       //\n"
"            };;                                           //\n"
"            #undef  TIL_EXP                               //\n"
"            //:--------------------------:set_all_8_tiles://\n"
"                                                          //\n"
"        #undef  I_X  //:----------------------------: 01 ://\n"
"        #undef  I_Y  //:----------------------------: 02 ://\n"
"        #undef  LAY  //:----------------------------: 03 ://\n"
"        #undef  AUS  //:----------------------------: 04 ://\n"
"        #undef  B16  //:----------------------------: 05 ://\n"
"        } //:{ AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Put }:://                                              //\n"
"    //:C99C99C99C99C99C99C99C99::C99C99C99C99C99C99C99C99://\n"
"        void\n"
"        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Put(\n"
"            //|LOCATION_OF_THE_DATA|||||||||||||||||||||||//\n"
"            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///\n"
"        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///\n"
"                                                         ///\n"
"            //|VALUES_OF_THE_DATA|||||||||||||||||||||||||//\n"
"        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///\n"
"        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///\n"
"        ,   I32 til_exp_000_007  //:AKA[ til_exp ]       ///\n"
"        ,   U32 til_val_000_003  //:STORES_1_TILE_VALUE  ///\n"
"        )\n"
"        {\n"
"        #define I_X cuv_i_x_000_255  //:------------: 01 ://\n"
"        #define I_Y cuv_i_y_000_255  //:------------: 02 ://\n"
"        #define LAY lay_dex_000_002  //:------------: 03 ://\n"
"        #define AUS aus_dex_000_015  //:------------: 04 ://\n"
"        #define T_E til_exp_000_007  //:------------: 05 ://\n"
"        #define T_V til_val_000_003  //:------------: 06 ://\n"
"        //-     B16 cuvbits_cuv_b16  //:------------: ## -//\n"
"        //:new_input_checks_2021_04_14:------------------://\n"
"        #define E aac2020_p5d1ogl_Halt\n"
"            /**@VID_IID[0258]TIME[00:25:50]************* **/\n"
"            if( I_X <0||I_X >255 ){E(E_S([I_X:20210414]));};\n"
"            if( I_Y <0||I_Y >255 ){E(E_S([I_Y:20210414]));};\n"
"            if( LAY <0||LAY >  2 ){E(E_S([LAY:20210414]));};\n"
"            if( AUS <0||AUS > 15 ){E(E_S([AUS:20210414]));};\n"
"            if( T_E <0||T_E >  7 ){E(E_S([T_E:20210414]));};\n"
"            if(         T_V >  3 ){E(E_S([T_V:20210414]));};\n"
"        #undef  E\n"
"        //:------------------:new_input_checks_2021_04_14://\n"
"        //:declare_variables:----------------------------://\n"
"                                                   //:---://\n"
"            /** **************************************** ***\n"
"            Which SubTile Graphic Are You Drawing On?    ///\n"
"            There are four of them. This is the          ///\n"
"            origin pixel of the quadrant targeted.       ///\n"
"            *** **************************************** **/\n"
"                                                   //:---://\n"
"            I32 til_qua_q_x; //:QUADRANT                 ://\n"
"            I32 til_qua_q_y; //:                         ://\n"
"                             //:                         ://\n"
"            I32 til_qua_o_x; //:ORIGIN                   ://\n"
"            I32 til_qua_o_y; //:                         ://\n"
"                             //:                         ://\n"
"            I32     til_qua; //:1D_INDEX_VERSION         ://\n"
"                             //:@VID_IID[0105]T[6:51:10] ://\n"
"                             //:                         ://\n"
"            I32     peb_t_x; //:PEBBLE_TILE_X            ://\n"
"            I32     peb_t_y; //:PEBBLE_TILE_Y            ://\n"
"                             //:                         ://\n"
"            I32     loc_t_x; //:LOCAL_TILE[ X | Y ]COORD ://\n"
"            I32     loc_t_y; //:@VID_IID[0105]T[6:38:00] ://\n"
"                                                          //\n"
"            //-         t_e; //:til_exp( TileSizeExponent-//\n"
"                                                          //\n"
"            I32     max_cor; //:maximum_local_tile_coord ://\n"
"                                                          //\n"
"            I32     til_peb; //:TILe_(size_in)_PEBbles   ://\n"
"                             //:@VID_IID[0105]T[7:26:00] ://\n"
"                                                          //\n"
"            //:UNSIGNED!!!!                               //\n"
"            //-     til_val; //:two_bit_tile_value_to_set-//\n"
"            //:UNSIGNED!!!!                               //\n"
"                                                          //\n"
"        //- P5D_TOR p5d_tor;    Paint5D_TileORigin       -//\n"
"                             //:Origin_On_The_Texture    ://\n"
"                             //:Memory_Storing_Data      ://\n"
"                                                          //\n"
"        //:----------------------------:declare_variables://\n"
"                                                          //\n"
"            /** @VID_IID[ 0105 ]TIME[ 03:40:00 ] ******* **/\n"
"            /** cuvbits_cuv_b16 : USAGE_DESCRIBED ****** **/\n"
"            /** @VID_IID[ 0258 ]TIME[ 00:14:23 ] ******* **/\n"
"            /** Why_Are_We_Removing[ cuvbits_cuv_b16 ] * **/\n"
"                                                          //\n"
"            til_qua_q_x=( I_X / 128 );                    //\n"
"            til_qua_q_y=( I_Y / 128 );                    //\n"
"            ASS( til_qua_q_x >= 0 && til_qua_q_x <= 1 );  //\n"
"            ASS( til_qua_q_y >= 0 && til_qua_q_y <= 1 );  //\n"
"                                                          //\n"
"            til_qua_o_x=( til_qua_q_x * 128 );            //\n"
"            til_qua_o_y=( til_qua_q_y * 128 );            //\n"
"            ASS( til_qua_o_x >= 0 && til_qua_o_x <= 128 );//\n"
"            ASS( til_qua_o_y >= 0 && til_qua_o_y <= 128 );//\n"
"                                                          //\n"
"            peb_t_x=( cuv_i_x_000_255 -( til_qua_o_x ) ); //\n"
"            peb_t_y=( cuv_i_y_000_255 -( til_qua_o_y ) ); //\n"
"                                                          //\n"
"            /** xy to index formula for 2x2 cell grid **/ //\n"
"            til_qua =(   til_qua_q_x +                    //\n"
"                       ( til_qua_q_y  *  2 ) );;          //\n"
"            assert( til_qua >= 0 && til_qua <=(4-1) );    //\n"
"                                                          //\n"
"            //:set_all_8_tiles:--------------------------://\n"
"            #define TIL_EXP T_E                           //\n"
"            #define TIL_VAL T_V                           //\n"
"            //- for( t_e = 0 ; t_e <=(8-1) ; t_e ++ )    -//\n"
"            {         \n"
"                                                          //\n"
"                /** Convert[ I_X , I_Y ] coords into   ..**/\n"
"                /** Local To Data Parition Coordinates ..**/\n"
"                                                          //\n"
"                til_peb=(                                 //\n"
"                    AAC2020_P5D1OGL_til_exp_CTO_til_peb(  //\n"
"                                    TIL_EXP ));           //\n"
"                ASS( til_peb >= 0 && til_peb <= 128 );    //\n"
"                                                          //\n"
"                     loc_t_x=( peb_t_x / til_peb );       //\n"
"                     loc_t_y=( peb_t_y / til_peb );       //\n"
"                ASS( loc_t_x >= 0 && loc_t_x <=(128-1));  //\n"
"                ASS( loc_t_y >= 0 && loc_t_y <=(128-1));  //\n"
"                                                          //\n"
"                //:local_tile_exact_bounds_check:--------://\n"
"                                                          //\n"
"                    max_cor=(                             //\n"
"                    AAC2020_P5D1OGL_til_exp_CTO_max_cor(  //\n"
"                                    TIL_EXP ));;          //\n"
"                                                          //\n"
"                    if( loc_t_x > max_cor                 //\n"
"                    ||  loc_t_y > max_cor                 //\n"
"                    ){                                    //\n"
"                        ERR(E_S( LOC_TXY_OOB_2021 ));     //\n"
"                    };;                                   //\n"
"                                                          //\n"
"                //:--------:local_tile_exact_bounds_check://\n"
"                                                          //\n"
"                //+ @VID_IID[ 0258 ]T[00:33:23]WHY_GONE? +//\n"
"                //- til_val =(                           -//\n"
"                //-     ( cuvbits_cuv_b16 >> (t_e*2) )   -//\n"
"                //-     &( BIN_011 ) //:<--2BitMask      -//\n"
"                //- );;                                  -//\n"
"                //- assert( til_val <= 3 );              -//\n"
"                                                          //\n"
"                /** All Values Are U08 Here           **/ //\n"
"                /** But that's okay because were are  **/ //\n"
"                /** NOT compiling as OPENGL code here **/ //\n"
"                AAC2020_PAINT5D_Put(                      //\n"
"                    (U08)til_qua //:[til_qua | t_q      ]://\n"
"                ,   (U08)TIL_EXP //:[til_exp | t_e      ]://\n"
"                ,   (U08)LAY     //:[til_lay | t_l | lay]://\n"
"                ,   (U08)loc_t_x //:[loc_t_x | t_x      ]://\n"
"                ,   (U08)loc_t_y //:[loc_t_y | t_y      ]://\n"
"                ,   (U08)AUS     //:[aus_dex | a_d      ]://\n"
"                ,   (U08)TIL_VAL //:[til_val | t_v      ]://\n"
"                );;                                       //\n"
"            };;                                           //\n"
"            #undef  TIL_EXP                               //\n"
"            #undef  TIL_VAL                               //\n"
"            //:--------------------------:set_all_8_tiles://\n"
"                                                          //\n"
"        #undef  I_X  //:----------------------------: 01 ://\n"
"        #undef  I_Y  //:----------------------------: 02 ://\n"
"        #undef  LAY  //:----------------------------: 03 ://\n"
"        #undef  AUS  //:----------------------------: 04 ://\n"
"        #undef  T_E  //:----------------------------: 05 ://\n"
"        #undef  T_V  //:----------------------------: 06 ://\n"
"        //-     B16  //:----------------------------: ## -//\n"
"        }\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"    #undef  P5D_TOR                               //: 01 ://\n"
"    #undef      U08                               //: 02 ://\n"
"    #endif  //:#AAC2020_MACRO_THIS_IS_OPEN_GL     ::: ## ://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"    //:C99C99C99C99C99C99C99C99::C99C99C99C99C99C99C99C99://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                              \n"
"        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get(          \n"
"            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///\n"
"        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///\n"
"        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///\n"
"        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///\n"
"        ,   I32 til_exp_000_007  //:AKA[ til_exp ]       ///\n"
"        )\n"
"        {               \n"
"        /** ******************************************** ***\n"
"        @VID_IID[ 0257 ]TIME[ 02:03:42 ]\n"
"        LIKE[ AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get ]\n"
"        But has the extra parameter[ til_exp ]and gets just\n"
"        ONE_TILE_VALUE( til_val )instead of a bitpacking\n"
"        of all tile values under the current pixel.\n"
"        Using this to help calculate touching values for\n"
"        auto-tiling calculations.\n"
"        SEE[ toupaca / toupac0 / toupac1 / toupac2 ]\n"
"        We should be able to create this function by\n"
"        [ COPY + PAST ]ing[ cuvipix_CTO_cuvbits_Get ]\n"
"        and removing the tile exponent( t_e / til_exp )loop.\n"
"        SEE[ #_WORKING_OUT_TOUPACK_BIT_FETCHING_# ]\n"
"        *** ******************************************** **/                                            \n"
"        #define C_X cuv_i_x_000_255               //: 01 ://\n"
"        #define C_Y cuv_i_y_000_255               //: 02 ://\n"
"        #define T_L lay_dex_000_002               //: 03 ://\n"
"        #define A_D aus_dex_000_015               //: 04 ://\n"
"        #define ETO_m_c AAC2020_P5D1OGL_til_exp_CTO_max_cor\n"
"        #define ETO_s_a AAC2020_P5D1OGL_til_exp_CTO_squ_ash\n"
"            //:input_checks:- - - - - - - - - - - - - - -://\n"
"                                                     //:i://\n"
"                ASS( cuv_i_x_000_255 >=  (  0  )  ); //:i://\n"
"                ASS( cuv_i_y_000_255 >=  (  0  )  ); //:i://\n"
"                ASS( lay_dex_000_002 >=  (  0  )  ); //:i://\n"
"                ASS( aus_dex_000_015 >=  (  0  )  ); //:i://\n"
"                ASS( til_exp_000_007 >=  (  0  )  ); //:i://\n"
"                                                     //:i://\n"
"                ASS( cuv_i_x_000_255 <=  (256-1)  ); //:i://\n"
"                ASS( cuv_i_y_000_255 <=  (256-1)  ); //:i://\n"
"                ASS( lay_dex_000_002 <=    (3-1)  ); //:i://\n"
"                ASS( aus_dex_000_015 <=   (16-1)  ); //:i://\n"
"                ASS( til_exp_000_007 <=   ( 8-1)  ); //:i://\n"
"                                                     //:i://\n"
"            //:- - - - - - - - - - - - - - -:input_checks://\n"
"            //:var__declare:- - - - - - - - - - - - - - -://\n"
"                                                          //\n"
"                //:UNSIGNED_FOR_BIT_PACKING:-------------://\n"
"                                                          //\n"
"                //+  @VID_IID[0257]T[02:30:50]           +//\n"
"                //+  Version only gets 1 tile value.     +//\n"
"                //+  No bitpacking of tile values.       +//\n"
"                //- /** Canvas_User_View:BITS  **/       -//\n"
"                //- U32 cuvbits =( U00 /** 0x00 **/ );   -//\n"
"                                                          //\n"
"                U32     t_v; /** [ t_v / til_val ] **/    //\n"
"                                                          //\n"
"                //:-------------:UNSIGNED_FOR_BIT_PACKING://\n"
"                //:EVERYTHING_ELSE:----------------------://\n"
"                                                      //////\n"
"                /// glocpix not needed,               //////\n"
"                /// AAC2020_P5D1OGL_Get function      //////\n"
"                ///  handles calculation of that.     //////\n"
"                /// glocpix; /** GLObal Coord PIXels  ...**/\n"
"                             /** Data View Coordinate ...**/\n"
"                                                      //////\n"
"            //  IV2 til_qua; /** Tile Quadrant ..........**/\n"
"                I32 qua_c_x; /** Tile Quadrant: cell x   **/\n"
"                I32 qua_c_y; /** Tile Quadrant: cell y   **/\n"
"                                                      //////\n"
"                I32 nos_t_x; /** NO_Squash(nos)TileX(t_x)**/\n"
"                I32 nos_t_y; /** NO_Squash(nos)TileY(t_y)**/\n"
"                                                      //////\n"
"                I32     t_x; /** Final Local Tile [X|Y]  **/\n"
"                I32     t_y; /** AKA[ loc_t_x | loc_t_y ]**/\n"
"                                                      //////\n"
"                I32     s_a; /** Squash Amount (squ_ash) **/\n"
"                                                      //////\n"
"                I32     t_q; /** TileQuadrant / til_qua  **/\n"
"                //-     t_e;     TileExponent / til_exp  -//\n"
"                I32     m_c; /** MaximumCoord / max_cor  **/\n"
"                                                      //////\n"
"                //:----------------------:EVERYTHING_ELSE://\n"
"                                                      //////\n"
"            //:- - - - - - - - - - - - - - -:var__declare://\n"
"                                                      //////\n"
"            //: til_qua ==( [ cuv_i_x && cuv_i_y ] / 128 )\n"
"            qua_c_x =( C_X / 128 );                   //////\n"
"            qua_c_y =( C_Y / 128 );                   //////\n"
"            ASS( qua_c_x >= 0 && qua_c_x <= 1 );      //////\n"
"            ASS( qua_c_y >= 0 && qua_c_y <= 1 );      //////\n"
"                                                      //////\n"
"            /** @VID_IID[ 0098 ]TIME[ 05:32:00 ] **/  //////\n"
"            /** Fixed xy-to-index math here.     **/  //////\n"
"            t_q = qua_c_x + ( qua_c_y  *  2  );       //////\n"
"            ASS( t_q >= 0 && t_q <= (4-1) );          //////\n"
"                                                      //////\n"
"            /** NOS: NOt_Squashed ............ **/    //////\n"
"            /** nos_t_x : Not squashed loc_t_x **/    //////\n"
"            /** nos_t_y : Not squashed loc_t_y **/    //////\n"
"            nos_t_x = C_X -( qua_c_x * 128 );         //////\n"
"            nos_t_y = C_Y -( qua_c_y * 128 );         //////\n"
"            #define T_E ( til_exp_000_007 )   \n"
"            //- for( t_e = 0 ; t_e <=( 8 - 1 ) ; t_e ++ )-//\n"
"            {   //:<--[ NO_LONGER_A_LOOP ]               ://\n"
"                //:<--[ @VID_IID[ 0257 ]T[ 02:29:32 ]    ://\n"
"                                                         ///\n"
"                /** m_c == max_cor  **/                  ///\n"
"                /** Max Coord Index **/                  ///\n"
"                m_c = ETO_m_c(  T_E  );                  ///\n"
"                s_a = ETO_s_a(  T_E  );                  ///\n"
"                                                         ///\n"
"                t_x = nos_t_x / s_a ;                    ///\n"
"                t_y = nos_t_y / s_a ;                    ///\n"
"                                                         ///\n"
"                /**  t_y === loc_t_y ( PAINT5D.D._ ).....**/\n"
"                /**  t_x === loc_t_x ( #_DIA_DAL_# ).....**/\n"
"                ASS( t_x >= 0 && t_x <= m_c );           ///\n"
"                ASS( t_y >= 0 && t_y <= m_c );           ///\n"
"                                                         ///\n"
"                //:BINARY PACKED TILE VALUES (til_val)   ://\n"
"                //:      BIN[ 00 ] ==> DEC[ 0 ]          ://\n"
"                //:      BIN[ 01 ] ==> DEC[ 1 ]          ://\n"
"                //:      BIN[ 10 ] ==> DEC[ 2 ]          ://\n"
"                //:      BIN[ 11 ] ==> DEC[ 3 ]          ://\n"
"                t_v=(                                    ///\n"
"                    AAC2020_P5D1OGL_Get(                 ///\n"
"                        t_q    //: I32 [ til_qua / t_q ] ://                         \n"
"                    ,   T_E    //: I32 [ til_exp / t_e ] ://                        \n"
"                    ,   T_L    //: I32 [ til_lay / t_l ] ://                        \n"
"                    ,   t_x    //: I32 [ loc_t_x / t_x ] ://                        \n"
"                    ,   t_y    //: I32 [ loc_t_y / t_y ] ://                        \n"
"                    ,   A_D    //: I32 [ aus_dex / a_d ] ://                        \n"
"                    ));;                                 ///\n"
"                                                         ///\n"
"                ASS( t_v <= U03 /** AKA: uint(4-1) **/ );///\n"
"                ASS( t_v == ( BIN_011 & t_v) );          ///\n"
"                //||||||||||||||||||||||||||||||||||||||||//\n"
"                //+ THIS_VERSION_DOESNT_BIT_PACK         +//\n"
"                //+ MULTIPLE TILE_VALUES.                +//\n"
"                //- cuvbits=(                            -//\n"
"                //- cuvbits |                            -//\n"
"                //-     (                                -//\n"
"                //-         /** 2 bits per tile value.**/-//\n"
"                //-         /** Position based on it's**/-//\n"
"                //-         /** tile exponent (t_e)   **/-//\n"
"                //-         t_v <<( t_e * 2 )            -//\n"
"                //-     )                                -//\n"
"                //- );;                                  -//\n"
"                //||||||||||||||||||||||||||||||||||||||||//\n"
"            } //:<--[ NO_LONGER_A_LOOP ]\n"
"            #undef  T_E\n"
"            return( t_v /**RETURN[ til_val ]UNDER PIXEL**/);                           \n"
"        #undef          C_X //:---------------------: 01 ://\n"
"        #undef          C_Y //:---------------------: 02 ://\n"
"        #undef          T_L //:---------------------: 03 ://\n"
"        #undef          A_D //:---------------------: 04 ://\n"
"        #undef      ETO_m_c //:---------------------: 05 ://\n"
"        #undef      ETO_s_a //:---------------------: 06 ://\n"
"        } //:END[ AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get ]     \n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://                                         \n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                              ///\n"
"        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get(         ///\n"
"                                                         ///\n"
"            /** FUNCTION_WRITTEN_ON[ 2021_01_18 ]  **/   ///\n"
"            /**    VID_IID[ 0097 ]                 **/   ///\n"
"            /**    TIME[ 00:00:00 ]TO[ 06:02:20 ]  **/   ///\n"
"                                                         ///\n"
"            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///\n"
"        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///\n"
"        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///\n"
"        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///\n"
"        ){                                               ///\n"
"        #define C_X cuv_i_x_000_255               //: 01 ://\n"
"        #define C_Y cuv_i_y_000_255               //: 02 ://\n"
"        #define T_L lay_dex_000_002               //: 03 ://\n"
"        #define A_D aus_dex_000_015               //: 04 ://\n"
"        #define ETO_m_c AAC2020_P5D1OGL_til_exp_CTO_max_cor\n"
"        #define ETO_s_a AAC2020_P5D1OGL_til_exp_CTO_squ_ash\n"
"            //:input_checks:- - - - - - - - - - - - - - -://\n"
"                                                     //:i://\n"
"                ASS( cuv_i_x_000_255 >=  (  0  )  ); //:i://\n"
"                ASS( cuv_i_y_000_255 >=  (  0  )  ); //:i://\n"
"                ASS( lay_dex_000_002 >=  (  0  )  ); //:i://\n"
"                ASS( aus_dex_000_015 >=  (  0  )  ); //:i://\n"
"                                                     //:i://\n"
"                ASS( cuv_i_x_000_255 <=  (256-1)  ); //:i://\n"
"                ASS( cuv_i_y_000_255 <=  (256-1)  ); //:i://\n"
"                ASS( lay_dex_000_002 <=    (3-1)  ); //:i://\n"
"                ASS( aus_dex_000_015 <=   (16-1)  ); //:i://\n"
"                                                     //:i://\n"
"            //:- - - - - - - - - - - - - - -:input_checks://\n"
"            //:var__declare:- - - - - - - - - - - - - - -://\n"
"                                                          //\n"
"                //:UNSIGNED_FOR_BIT_PACKING:-------------://\n"
"                                                          //\n"
"                /** Canvas_User_View:BITS  **/            //\n"
"                U32 cuvbits =( U00 /** 0x00 **/ );        //\n"
"                                                          //\n"
"                U32     t_v; /** [ t_v / til_val ] **/    //\n"
"                                                          //\n"
"                //:-------------:UNSIGNED_FOR_BIT_PACKING://\n"
"                //:EVERYTHING_ELSE:----------------------://\n"
"                                                      //////\n"
"                /// glocpix not needed,               //////\n"
"                /// AAC2020_P5D1OGL_Get function      //////\n"
"                ///  handles calculation of that.     //////\n"
"                /// glocpix; /** GLObal Coord PIXels  ...**/\n"
"                             /** Data View Coordinate ...**/\n"
"                                                      //////\n"
"            //  IV2 til_qua; /** Tile Quadrant ..........**/\n"
"                I32 qua_c_x; /** Tile Quadrant: cell x   **/\n"
"                I32 qua_c_y; /** Tile Quadrant: cell y   **/\n"
"                                                      //////\n"
"                I32 nos_t_x; /** NO_Squash(nos)TileX(t_x)**/\n"
"                I32 nos_t_y; /** NO_Squash(nos)TileY(t_y)**/\n"
"                                                      //////\n"
"                I32     t_x; /** Final Local Tile [X|Y]  **/\n"
"                I32     t_y; /** AKA[ loc_t_x | loc_t_y ]**/\n"
"                                                      //////\n"
"                I32     s_a; /** Squash Amount (squ_ash) **/\n"
"                                                      //////\n"
"                I32     t_q; /** TileQuadrant / til_qua  **/\n"
"                I32     t_e; /** TileExponent / til_exp  **/\n"
"                I32     m_c; /** MaximumCoord / max_cor  **/\n"
"                                                      //////\n"
"                //:----------------------:EVERYTHING_ELSE://\n"
"                                                      //////\n"
"            //:- - - - - - - - - - - - - - -:var__declare://\n"
"                                                      //////\n"
"            //: til_qua ==( [ cuv_i_x && cuv_i_y ] / 128 )\n"
"            qua_c_x =( C_X / 128 );                   //////\n"
"            qua_c_y =( C_Y / 128 );                   //////\n"
"            ASS( qua_c_x >= 0 && qua_c_x <= 1 );      //////\n"
"            ASS( qua_c_y >= 0 && qua_c_y <= 1 );      //////\n"
"                                                      //////\n"
"            /** @VID_IID[ 0098 ]TIME[ 05:32:00 ] **/  //////\n"
"            /** Fixed xy-to-index math here.     **/  //////\n"
"            t_q = qua_c_x + ( qua_c_y  *  2  );       //////\n"
"            ASS( t_q >= 0 && t_q <= (4-1) );          //////\n"
"                                                      //////\n"
"            /** NOS: NOt_Squashed ............ **/    //////\n"
"            /** nos_t_x : Not squashed loc_t_x **/    //////\n"
"            /** nos_t_y : Not squashed loc_t_y **/    //////\n"
"            nos_t_x = C_X -( qua_c_x * 128 );         //////\n"
"            nos_t_y = C_Y -( qua_c_y * 128 );         //////\n"
"                                                      //////\n"
"            /** t_e     == til_exp            **/     //////\n"
"            /** til_exp == TILe_size_EXPonent **/     //////\n"
"            for( t_e = 0 ; t_e <=( 8 - 1 ) ; t_e ++ ){   ///\n"
"                                                         ///\n"
"                /** m_c == max_cor  **/                  ///\n"
"                /** Max Coord Index **/                  ///\n"
"                m_c = ETO_m_c(  t_e  );                  ///\n"
"                s_a = ETO_s_a(  t_e  );                  ///\n"
"                                                         ///\n"
"                t_x = nos_t_x / s_a ;                    ///\n"
"                t_y = nos_t_y / s_a ;                    ///\n"
"                                                         ///\n"
"                /**  t_y === loc_t_y ( PAINT5D.D._ ).....**/\n"
"                /**  t_x === loc_t_x ( #_DIA_DAL_# ).....**/\n"
"                ASS( t_x >= 0 && t_x <= m_c );           ///\n"
"                ASS( t_y >= 0 && t_y <= m_c );           ///\n"
"                                                         ///\n"
"                //:BINARY PACKED TILE VALUES (til_val)   ://\n"
"                //:      BIN[ 00 ] ==> DEC[ 0 ]          ://\n"
"                //:      BIN[ 01 ] ==> DEC[ 1 ]          ://\n"
"                //:      BIN[ 10 ] ==> DEC[ 2 ]          ://\n"
"                //:      BIN[ 11 ] ==> DEC[ 3 ]          ://\n"
"                t_v=(                                    ///\n"
"                    AAC2020_P5D1OGL_Get(                 ///\n"
"                        t_q    //: I32 [ til_qua / t_q ] ://                         \n"
"                    ,   t_e    //: I32 [ til_exp / t_e ] ://                        \n"
"                    ,   T_L    //: I32 [ til_lay / t_l ] ://                        \n"
"                    ,   t_x    //: I32 [ loc_t_x / t_x ] ://                        \n"
"                    ,   t_y    //: I32 [ loc_t_y / t_y ] ://                        \n"
"                    ,   A_D    //: I32 [ aus_dex / a_d ] ://                        \n"
"                    ));;                                 ///\n"
"                                                         ///\n"
"                ASS( t_v <= U03 /** AKA: uint(4-1) **/ );///\n"
"                ASS( t_v == ( BIN_011 & t_v) );          ///\n"
"                cuvbits=(                                ///\n"
"                cuvbits |                                ///\n"
"                    (                                    ///\n"
"                        /** 2 bits per tile value. **/   ///\n"
"                        /** Position based on it's **/   ///\n"
"                        /** tile exponent (t_e)    **/   ///\n"
"                        t_v <<( t_e * 2 )                ///\n"
"                    )                                    ///\n"
"                );;                                      ///\n"
"            };;                                          ///\n"
"                                                         ///\n"
"            return( cuvbits );                           ///\n"
"                                                         ///\n"
"        #undef          C_X //:---------------------: 01 ://\n"
"        #undef          C_Y //:---------------------: 02 ://\n"
"        #undef          T_L //:---------------------: 03 ://\n"
"        #undef          A_D //:---------------------: 04 ://\n"
"        #undef      ETO_m_c //:---------------------: 05 ://\n"
"        #undef      ETO_s_a //:---------------------: 06 ://\n"
"        }                                                ///\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        F32\n"
"        P5D1OGL_GET_res_wid( void )\n"
"        {\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                return( iResolution.x );\n"
"            #else\n"
"                return( AAC2020_CPUNIFO_iResolution_wid );\n"
"            #endif\n"
"        }\n"
"        F32\n"
"        P5D1OGL_GET_res_hig( void )\n"
"        {\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                return( iResolution.y );\n"
"            #else\n"
"                return( AAC2020_CPUNIFO_iResolution_hig );\n"
"            #endif\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        F32\n"
"        AAC2020_P5D1OGL_CludMap_ZOF_1_D(\n"
"            I32 fraic_1 //:[ fic.x | fic.y ]/(fraic_x|fraic_y)\n"
"        ,   I32 vp0_san //:[ p5d_vp0's [wid|hig] in pixels ]\n"
"        ,   I32 vp1_san //:[ p5d_vp1's [wid|hig] in pixels ]\n"
"        ,   I32 clu_san //:Clustering_Of_vp0_units\n"
"        )\n"
"        {   \n"
"        /** SEE[ README.MD ]DIAGRAM[ #_DIA_TILOPER_# ] **/\n"
"            //:Convert_Inputs_To_Float32:----------------://\n"
"            F32 f32_fraic_1 = MAK_F32( fraic_1 );\n"
"            F32 f32_vp0_san = MAK_F32( vp0_san );\n"
"            F32 f32_vp1_san = MAK_F32( vp1_san );\n"
"            F32 f32_clu_san = MAK_F32( clu_san );\n"
"            //:----------------:Convert_Inputs_To_Float32://\n"
"            /** ******************************************** ***\n"
"            @VID_IID[ 0260 ]TIME[ 03:15:10 ]NORMALIZE_PROBLEM\n"
"            ( SEE[ README.MD ]DIAGRAM[ #_CLUDMAP_1X1_INPUT_# ] )\n"
"            +---+---+\n"
"            |   |   | <-- vp1_san (offscreen)\n"
"            +---+---+\n"
"            +---+---+---+---+             ( f_1 == fraic_1 )\n"
"            |f_1|f_1|f_1|f_1| <-- vp0_san (onscreen)\n"
"            +---+---+---+---+\n"
"            *** ******************************************** **/\n"
"            F32     ppt =( f32_vp0_san / \n"
"                          (f32_vp1_san / f32_clu_san ) );\n"
"            //+ vp1_nom =( 1.0 ); //:vp1_san normalized to 1 +//\n"
"            F32 vp0_nom =( ppt );\n"
"            F32 ti_used =floor( f32_fraic_1 / ppt );\n"
"            F32 fraic_L =( f32_fraic_1 -\n"
"              ( ti_used * ( ppt )));;\n"
"            //:##############################################://\n"
"            #if !defined( AAC2020_MACRO_THIS_IS_OPEN_GL ) //:://\n"
"                if( fraic_L < 0.0 ){ \n"
"                    ERR(E_S([fraic_L:OOBNEG]));\n"
"                };;\n"
"                if( fraic_L > ( vp0_nom - 1.0 ) ){\n"
"                if( vp0_nom > (           1.0 ) ){ //:#VP0_GT1#\n"
"                #define I_x_P  intmax_t /** GCC: <stdint.h> **/\n"
"                #define V_x_P  void\n"
"                #define VCAST V_x_P*)(I_x_P\n"
"                #define DCAST V_x_P*)(double\n"
"                    LOG(E_S([RUNTIME_FUNCTION_CALL_PROBLEM]),0);\n"
"                    if( vp0_nom > 1.0 ){\n"
"                        LOG(E_S([vp0_nom_GT_1]),0);\n"
"                    };;\n"
"                    if( vp0_nom== 1.0 ){\n"
"                        LOG(E_S([vp0_nom_EQ_1]),0);\n"
"                    };;\n"
"                    if( vp0_nom < 1.0 ){\n"
"                        LOG(E_S([vp0_nom_LT_1]),0);\n"
"                    };;\n"
"                    //:--------------------------------------://\n"
"                    //: #VP0_GT1# :                          ://\n"
"                    //: vp0_nom must be greater than 1.0.    ://\n"
"                    //: Less than 1.0 means 1 pixel maps     ://\n"
"                    //: to MORE THAN ONE TILE.               ://\n"
"                    //: Exactly 1.0 means that the only      ://\n"
"                    //: possible internal tile coordinate    ://\n"
"                    //: we could have is [ 0.0 ]             ://\n"
"                    //: ( 0.0 == dead_center                 ://\n"
"                    //:--------------------------------------://\n"
"                    LOG(E_S([0_0:fraic_1]:%d), (VCAST)fraic_1 );\n"
"                    LOG(E_S([0_0:vp0_san]:%d), (VCAST)vp0_san );\n"
"                    LOG(E_S([0_0:vp1_san]:%d), (VCAST)vp1_san );\n"
"                    LOG(E_S([0_0:clu_san]:%d), (VCAST)clu_san );\n"
"                    LOF(E_S([0_0:fraic_L]:%f),        fraic_L );\n"
"                    LOF(E_S([0_0:vp0_nom]:%f),        vp0_nom );\n"
"                    LOF(E_S([PIX_PER_TIL]:%f),            ppt );\n"
"                    //:@_WHATS_MY_UTC_DEX_@://\n"
"                    LOI(E_S([aac2020_p5d1ogl_utc_t_i]:%d)\n"
"                    ,        aac2020_p5d1ogl_utc_t_i    );;\n"
"                    ERR(E_S([0_0:fraic_L:OOBPOS]));\n"
"                #undef I_x_P\n"
"                #undef V_x_P\n"
"                #undef VCAST\n"
"                #undef DCAST\n"
"                };;};;\n"
"            /** ******************************************** ***\n"
"            +---+\n"
"            |   | <-- vp1_nom (offscreen)\n"
"            +---+\n"
"                           ( f_L == fraic_L         )\n"
"            +---+---+      ( f_L == fraic_1 , LOCAL )\n"
"            |f_L|f_L|  <-- vp0_nom (onscreen)\n"
"            +---+---+ \n"
"            *** ******************************************** **/\n"
"                /** C99 Hackish debugging vars **/\n"
"                AAC2020_P5D1OGL_DEBUVAR_vp0_nom =( vp0_nom );\n"
"                AAC2020_P5D1OGL_DEBUVAR_fraic_L =( fraic_L );\n"
"            #endif //:#######################################://\n"
"            //:##############################################://\n"
"            F32 tilop_1;\n"
"            tilop_1=(\n"
"                ( vp0_nom > 1.0 ) \n"
"                ?\n"
"                /** README_MD[ #_DIA_TILOPER_CALC_TABLE_# ] **/\n"
"                (   ((fraic_L/(vp0_nom - 1.0))*2.0)   - 1.0)\n"
"                :\n"
"                0.0\n"
"            );;\n"
"            return( tilop_1 );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        F32\n"
"        AAC2020_P5D1OGL_CludMap_RNG_1_D(\n"
"            I32 fraic_1 //:[ fic.x | fic.y ]/(fraic_x|fraic_y)\n"
"            //:ON_SCREEN_VIEWPORT_PIXEL_SELECTION_RECT:(1D)\n"
"        ,   I32 vp0_b_0 //:AKA[ vp0_min ]( x_0 | y_0 )\n"
"        ,   I32 vp0_b_1 //:AKA[ vp0_max ]( x_1 | y_1 )\n"
"            //:OFFSCREEN_TILE_DATA_SELECTION_RECT:(1D)\n"
"        ,   I32 vp1_b_0 //:AKA[ vp1_min ]( x_0 | y_0 ) \n"
"        ,   I32 vp1_b_1 //:AKA[ vp1_max ]( x_1 | y_1 ) \n"
"        ,   I32 clu_san //:Clustering_Of_vp0_units\n"
"        )\n"
"        {\n"
"        //:FIRST__DRAFT_IN_THE_TRASH[ DOC/000/TRASH/011._ ]\n"
"        //:SECOND_DRAFT_IN_THE_TRASH[ DOC/000/TRASH/012._ ]\n"
"        //:THIRD__DRAFT_NOTES[ #_RNG_1_D_VERSION_003_#    ]\n"
"            F32 tilop_1 =( 0.0 ); /** tiloper , 1D **/\n"
"            if( fraic_1 > 0 ){ /** NOOP **/ };\n"
"            if( vp0_b_0 > 0 ){ /** NOOP **/ };\n"
"            if( vp0_b_1 > 0 ){ /** NOOP **/ };\n"
"            if( vp1_b_0 > 0 ){ /** NOOP **/ };\n"
"            if( vp1_b_1 > 0 ){ /** NOOP **/ };\n"
"            if( clu_san > 0 ){ /** NOOP **/ };\n"
"            //:SEE[ #_DIA_2021_04_21_AYE_# ]\n"
"            F32 vp1_san=(  \n"
"                MAK_F32(vp1_b_1)-MAK_F32(vp1_b_0)+1.0 );;\n"
"            F32 vp0_san=(  \n"
"                MAK_F32(vp0_b_1)-MAK_F32(vp0_b_0)+1.0 );;\n"
"            F32 f32_clu=(\n"
"                MAK_F32( clu_san ) );\n"
"            if( (vp1_san / f32_clu) > vp0_san ){\n"
"                //:More tiles than pixels, so just always\n"
"                //:Assume we are in the dead center of \n"
"                //:whatever tile is associated with that\n"
"                //:pixel.\n"
"                tilop_1 = ( 0.0 );\n"
"            }else{\n"
"            #define pig      fraic_1\n"
"            #define COC_SAN  coc_CTO_pic\n"
"            #define PIC_SAN  coc_CTO_pic\n"
"                #if defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"                    #define F_L_O_O_R AAC2020_FRAGCOM_FLO_F32\n"
"                #else\n"
"                    #define F_L_O_O_R AAC2020_POLYOGL_FLO_F32\n"
"                #endif\n"
"                //:declare_vars:-------------------------://\n"
"                    //: cug : ClUster_Global_Coordinate :://\n"
"                    //: coc : Cluster_lOcal__Coordinate :://\n"
"                F32     bas_cug ;//:BASe_cug(low[ cug ]vp1)\n"
"                F32     bas_coc ;//:BASe_coc(low[ coc ]vp1)\n"
"                F32     off_coc ;//:OFFset_coc\n"
"                F32     tar_coc ;//:TARget_coc\n"
"                ///     f32_clu ;  :Float32_CLUster_span:://\n"
"                F32 coc_CTO_pic ;//:AKA[sub_clu -PER- PIXEL]\n"
"                F32         pil ;//:Pixel_Index____Local\n"
"                F32         pic ;//:Pixel_Internal_Coord\n"
"                ///         n_0 ;//:@Numer_Min ( n_0 / u_d )\n"
"                ///         n_1 ;//:@Numer_Max ( n_1 / u_d )\n"
"                F32         u_d ;//:UN_Common_Denominator\n"
"                F32         c_d ;//:Common____Denominator\n"
"                F32         sap ;//:cluster_SpAn_Percentage\n"
"                //:-------------------------:declare_vars://\n"
"                //: num_coc : NUMberof: Cluster_lOcal_Coords\n"
"                //: num_pic : NUMberof: PIxel___local_Coords\n"
"                //:     coc * coc_pic ==     pic  \n"
"                //: num_coc * coc_pic == num_pic\n"
"                //: COC_SAN =MAK_F32( vp0_san / vp1_san );\n"
"                coc_CTO_pic =MAK_F32( vp0_san / vp1_san );\n"
"                    //: pil =MAK_F32(fraic_1 - vp0_b_0 );\n"
"                        pil =MAK_F32(    pig - vp0_b_0 );\n"
"                    //: pic =( pil % COC_SAN );\n"
"                        pic =(\n"
"                            pil\n"
"                        -   \n"
"                           (F_L_O_O_R( pil / COC_SAN )\n"
"                                          *( COC_SAN ))\n"
"                        );;\n"
"                bas_cug =MAK_F32( vp1_b_0 );\n"
"            //: bas_coc == bas_cug % f32_clu ____________://\n"
"                bas_coc =( \n"
"                        bas_cug\n"
"                        -\n"
"                        (F_L_O_O_R( bas_cug /  f32_clu )     \n"
"                                            *( f32_clu ))\n"
"                        );;\n"
"                off_coc=( \n"
"                    F_L_O_O_R( pil / coc_CTO_pic ) ); \n"
"            //: tar_coc ==(bas_coc+off_coc)%(clu_san) ___://\n"
"                tar_coc=(\n"
"                               (bas_coc+off_coc)-\n"
"                   (F_L_O_O_R( (bas_coc+off_coc)/f32_clu )\n"
"                                                *f32_clu )\n"
"                );;\n"
"                //:SEE_HASHTAG_DOCS[ #_DIA_C_D_AND_SAP_# ]\n"
"                u_d =MAK_F32( clu_san );\n"
"                c_d =( u_d *( PIC_SAN - 1 ) );\n"
"                sap =( pic / c_d );\n"
"                tilop_1 =( ( sap * 2.0 ) - 1.0 );\n"
"                //:if_c99:#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#://\n"
"                #if !defined(AAC2020_MACRO_THIS_IS_OPEN_GL)\n"
"                    if( pic < 0 ){\n"
"                        ERR(E_S([PIC_TOO_LOW_2021]));\n"
"                    }else\n"
"                    if( pic > ( COC_SAN     - 1 ) ){\n"
"                        ERR(E_S([PIC_OOB_POS_2021]));\n"
"                    }else\n"
"                    if( pic > ( coc_CTO_pic - 1 ) ){\n"
"                        ERR(E_S([PIC_OOB_WTF_2021]));\n"
"                    };;\n"
"                    ASS( pic >=0 && pic <=(coc_CTO_pic -1));\n"
"                    ASS( pic >=0 && pic <=(COC_SAN     -1));\n"
"                    //:SEE_HASHTAG_DOCS[#_CALC_N0_AND_N1_#]\n"
"                    //:@VID_IID[0269]T[04:12:32]EXPLAINED\n"
"                    F32 n_0 =( tar_coc + 0 ); //:@numer_min\n"
"                    F32 n_1 =( tar_coc + 1 ); //:@numer_max\n"
"                    F32 sap_min=( n_0 / u_d );\n"
"                    F32 sap_max=( n_1 / u_d );\n"
"                    if( n_0 < 0 || n_1 < 1 || u_d < 1 ){\n"
"                        ERR(E_S([BAD_FRACTIONAL_THINGS]));\n"
"                    };;\n"
"                    if( sap_max < sap_min ){\n"
"                        ERR(E_S([OUT_OF_ORDER_BOUNDS]));\n"
"                    };;\n"
"                    if( sap < sap_min || sap > sap_max ){\n"
"                        ERR(E_S([OOB_SAP_2021]));\n"
"                    };;\n"
"                #endif //:-------------------------------://\n"
"                //:#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#:if_c99://\n"
"            //:IF_C99:###################################://\n"
"            #if !defined( AAC2020_MACRO_THIS_IS_OPEN_GL )\n"
"            if( 3 == clu_san ){ //:DOC_H[#_DIA_KEY_001_#]://\n"
"            if( 5 == vp1_b_0 ){ //:DOC_H[#_DIA_KEY_001_#]://\n"
"            if( 6 == vp1_b_1 ){ //:DOC_H[#_DIA_KEY_001_#]://\n"
"            if( 7 == vp0_b_0 ){ //:DOC_H[#_DIA_KEY_001_#]://\n"
"            if(10 == vp0_b_1 ){ //:DOC_H[#_DIA_KEY_001_#]://\n"
"            #define ACT_TILOP_1 tilop_1\n"
"                F32 itest_delta;\n"
"                F32 EXP_tilop_1;\n"
"                //:--------------------------------------://\n"
"                //:Test cases below based on diagrams:   ://\n"
"                //:#_RNG_1_D_DIAGRAMS_DATE_2021_04_22_#  ://\n"
"                //:@VID_IID[0269]TIME[06:25:50]EXPLAINING://\n"
"                //:--------------------------------------://\n"
"                if( 7 == fraic_1 ){\n"
"                    //:#_ANS_KEY_001_#\n"
"                    EXP_tilop_1 =( +0.3333 );\n"
"                };;\n"
"                if( 8 == fraic_1 ){\n"
"                     //:#_ANS_KEY_001_#\n"
"                    EXP_tilop_1 =( +1.0000 );\n"
"                };;\n"
"                if( 9 == fraic_1 ){\n"
"                     //:#_ANS_KEY_001_#\n"
"                    EXP_tilop_1 =( -1.0000 );\n"
"                };;\n"
"                if(10 == fraic_1 ){\n"
"                     //:#_ANS_KEY_001_#\n"
"                    EXP_tilop_1 =( -0.3333 );\n"
"                };;\n"
"                itest_delta=( AAC2020_POLYOGL_ABS_F32(\n"
"                         EXP_tilop_1 - ACT_TILOP_1   ));;\n"
"                if( itest_delta > 0.0001 ){ //:----------://\n"
"                    ERR(E_S([FAILED_INTERNAL_TEST_2021]));\n"
"                };; //:----------------------------------://\n"
"            #undef  ACT_TILOP_1\n"
"            };;};;};;};;};;\n"
"            #endif //:-----------------------------------://\n"
"            //:###################################:IF_C99://\n"
"            #undef  pig       //:<--lowercase_macro : 01 ://\n"
"            #undef  COC_SAN   //:-------------------: 02 ://\n"
"            #undef  PIC_SAN   //:-------------------: 03 ://\n"
"            #undef  F_L_O_O_R //:-------------------: 04 ://\n"
"            };;\n"
"            return(  \n"
"                tilop_1 /** Tile_Internal_LOcal_PERcent **/ \n"
"            );;\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        FV2\n"
"        AAC2020_P5D1OGL_CludMap_fic_vp0_vp1_clu(\n"
"            IV2 fic      //:fic:Fragment_Integer_Coord       \n"
"        ,   REC p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]\n"
"        ,   REC p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]\n"
"        ,   I32 clu_san  //:Clustering_Span_Size   \n"
"        )\n"
"        {\n"
"        /** ******************************************** ***\n"
"        FUNC_NOTES[ #_CLUDMAP_FIC_VP0_VP1_CLU_EXPLAINED_# ]\n"
"        *** ******************************************** **/\n"
"            FV2 tiloper ;\n"
"                tiloper.x =( 0.0 );\n"
"                tiloper.y =( 0.0 );\n"
"            if( fic.x       > 0 ){ /** NOOP **/ };          \n"
"            if( p5d_vp0.x_0 > 0 ){ /** NOOP **/ };\n"
"            if( p5d_vp1.x_0 > 0 ){ /** NOOP **/ };  \n"
"            if( clu_san     > 0 ){ /** NOOP **/ };\n"
"            return( tiloper );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://   \n"
"        FV2\n"
"        AAC2020_P5D1OGL_fic_MAP_tiloper(\n"
"            IV2 fic      //:fic:Fragment_Integer_Coord       \n"
"        ,   REC p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]\n"
"        ,   REC p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]\n"
"        ,   I32 til_exp  //:TILesize_EXPonent\n"
"        )\n"
"        {\n"
"        /** ******************************************** ***\n"
"        FUNC_NOTES[ #_P5D_FIC_MAP_TILOPER_EXPLAINED_# ]\n"
"        *** ******************************************** **/\n"
"        //:LOCAL_HARDCODED_LOOKUP_TABLE:=================://\n"
"        I32 LUT_til_exp_CTO_til_peb[ 8 ]= ARR_I32( 8 )\n"
"        ARR_BEG\n"
"        /**/   1  //: til_exp == 0 ://\n"
"        ,      2  //: til_exp == 1 ://\n"
"        ,      4  //: til_exp == 2 ://\n"
"        ,      8  //: til_exp == 3 ://\n"
"        ,     16  //: til_exp == 4 ://\n"
"        ,     32  //: til_exp == 5 ://\n"
"        ,     64  //: til_exp == 6 ://\n"
"        ,    128  //: til_exp == 7 ://\n"
"        ARR_END;\n"
"        //:=================:LOCAL_HARDCODED_LOOKUP_TABLE://\n"
"        //:<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< TODO:FIGURE_OUT_THIS_MAPPING_LOGIC\n"
"            I32 til_peb =(LUT_til_exp_CTO_til_peb[\n"
"                              til_exp ]);;\n"
"            FV2 tiloper ;\n"
"            tiloper=(\n"
"            AAC2020_P5D1OGL_CludMap_fic_vp0_vp1_clu(\n"
"                fic      //:fic:Fragment_Integer_Coord       \n"
"            ,   p5d_vp0  //:BOUNDS_OF_INPUT[ fic ]\n"
"            ,   p5d_vp1  //:BOUNDS_OF_FETCH[ cuv ]\n"
"            ,   til_peb  //:destination_unit_grouping_size\n"
"            ));;         //:[ til_peb == clu == ClusterSize ]\n"
"            if( fic.x       > 0 ){ /** NOOP **/ };\n"
"            if( p5d_vp0.x_0 > 0 ){ /** NOOP **/ };\n"
"            if( p5d_vp1.x_0 > 0 ){ /** NOOP **/ };\n"
"            if( til_exp     > 0 ){ /** NOOP **/ };\n"
"            if( til_peb     > 0 ){ /** NOOP **/ };\n"
"            return( tiloper );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://   \n"
"        RET_MAIN\n"
"        FUN_MAIN( \n"
"                       TYP_F_C          INN_F_C\n"
"        //[ GLSL:|     NOTHING     |    NOTHING   - - - -]//\n"
"        //[  C99:|  struct FV4     |    F_C       - - - -]//\n"
"        ){\n"
"            //: U08 arr[ 3 ]=        { 1 , 2 , 3 }; //:C99\n"
"            //: U08 arr[ 3 ]=U08[ 3 ]( 1 , 2 , 3 ); //:OGL\n"
"    ////    //:UNDEF_OR_DEF_U32_COLORS:------------------://\n"
"    ////    #if( AAC2020_MACRO_THIS_IS_OPEN_GL >= 1 )  \n"
"    ////    \n"
"    ////        #define U32_000 ( uint(  0))//:[ U_000 ]://\n"
"    ////        #define U32_001 ( uint(  1))//:[ U_001 ]://\n"
"    ////        #define U32_008 ( uint(  8))//:[ U_008 ]://\n"
"    ////        #define U32_016 ( uint( 16))//:[ U_016 ]://\n"
"    ////        #define U32_032 ( uint( 32))//:[ U_032 ]://\n"
"    ////        #define U32_048 ( uint( 48))//:[ U_048 ]://\n"
"    ////        #define U32_064 ( uint( 64))//:[ U_064 ]://\n"
"    ////        #define U32_096 ( uint( 96))//:[ U_096 ]://\n"
"    ////        #define U32_128 ( uint(128))//:[ U_128 ]://\n"
"    ////    #else         \n"
"    ////        #define U32_000 ((U32)(  0))//:[ U_000 ]://\n"
"    ////        #define U32_001 ((U32)(  1))//:[ U_001 ]://\n"
"    ////        #define U32_008 ((U32)(  8))//:[ U_008 ]://\n"
"    ////        #define U32_016 ((U32)( 16))//:[ U_016 ]://\n"
"    ////        #define U32_032 ((U32)( 32))//:[ U_032 ]://\n"
"    ////        #define U32_048 ((U32)( 48))//:[ U_048 ]://\n"
"    ////        #define U32_064 ((U32)( 64))//:[ U_064 ]://\n"
"    ////        #define U32_096 ((U32)( 96))//:[ U_096 ]://\n"
"    ////        #define U32_128 ((U32)(128))//:[ U_128 ]://\n"
"    ////    #endif\n"
"    ////    //:------------------:UNDEF_OR_DEF_U32_COLORS://\n"
"            //:DECLARE_VARIABLES:------------------------://\n"
"                /** @VID_IID[ 0093 ]TIME[ 00:21:10 ] **/\n"
"                #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                    FV4 FragColor; /** <-- C99 Code  **/\n"
"                //: R_Y AAC2020_POLYOGL_R_Y_Get()\n"
"                    #define R_Y 512.0\n"
"                #else\n"
"                    #define R_Y iResolution.y\n"
"                    /** HELLO_WORLD **/\n"
"                #endif\n"
"                I32 cuv_i_x; //:Canvas_User_View:Integer_X\n"
"                I32 cuv_i_y; //:Canvas_User_View:Integer_Y\n"
"            //:------------------------:DECLARE_VARIABLES://\n"
"            //:GET_VARS_STORED_IN_TEXTURE:---------------://\n"
"                REC p5d_vp0 =(  /**AKA[ P5D_REC_VP0 ] **/\n"
"                    AAC2020_TAUFRAG_Get_REC_p5d_vp0() );;\n"
"                REC p5d_vp1 =(  /**AKA[ P5D_REC_VP1 ] **/\n"
"                    AAC2020_TAUFRAG_Get_REC_p5d_vp1() );;\n"
"                I32 aus_dex =(      /**AKA[ P5D_A_D ] **/\n"
"                    AAC2020_TAUFRAG_Get_I32_p5d_a_d() );;\n"
"                REC p5d_ur1 =(  /**AKA[ P5D_REC_ur1 ] **/\n"
"                    AAC2020_TAUFRAG_Get_REC_p5d_ur1() );;\n"
"            //:---------------:GET_VARS_STORED_IN_TEXTURE://    \n"
"            //:GET:canvas_user_view:---------------------://\n"
"            IV2 fic; /** fic:Frag_INTEGER_coordinate **/\n"
"            fic.x =( MAK_I32( F_C.x - 0.5 ) );\n"
"            fic.y =( MAK_I32( \n"
"                (\n"
"                    (P5D1OGL_GET_res_hig()   - 1.0 )\n"
"                   -(                F_C.y         ) \n"
"                )-0.5 \n"
"            ));;\n"
"            //: I32 cuv_i_x = fic.x;\n"
"            //: I32 cuv_i_y = fic.y;\n"
"            //: if( cuv_i_x == 0 ){ /** NOOP **/ };\n"
"            //: if( cuv_i_y == 0 ){ /** NOPP **/ };\n"
"            //:---------------------:GET:canvas_user_view://\n"
"    ////    UV4 uv4_p5d=(\n"
"    ////        T_F( P5D , MAK_IV2(cuv_i_x,cuv_i_y),0 ));;\n"
"            UV4 uv4_pix;\n"
"            if( (1==1)\n"
"            &&  fic.x >= p5d_vp0.x_0\n"
"            &&  fic.x <= p5d_vp0.x_1\n"
"            &&  fic.y >= p5d_vp0.y_0\n"
"            &&  fic.y <= p5d_vp0.y_1\n"
"            ){  //:IN_BOUNDS:\n"
"                /** BETS ARE OFF WHEN MAPPING FROM **/\n"
"                /** small range to larger range.   **/\n"
"                IV2 cuv;\n"
"                cuv=(AAC2020_FRAGCOM_fic_MAP_cuv(\n"
"                    fic , p5d_vp0 , p5d_vp1\n"
"                ));;\n"
"                /** [ cuv_i_x , cuv_i_y ] should always **/\n"
"                /** be within bounds for this code.     **/\n"
"                cuv_i_x=( cuv.x );\n"
"                cuv_i_y=( cuv.y );\n"
"                ASS( cuv_i_x >= (    0) );\n"
"                ASS( cuv_i_y >= (    0) );\n"
"                ASS( cuv_i_x <= (256-1) );\n"
"                ASS( cuv_i_y <= (256-1) );\n"
"                //:TOUCHING_VALUES_FOR_EACH_LAYER:-------://\n"
"                //:GET_LAYER_DATA:-----------------------://\n"
"                /** Value of all tiles over the pixel    **/\n"
"                /** being rendered.@IID[0256]T[01:20:23] **/\n"
"                    U32 u32_l_0=(\n"
"                    AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( \n"
"                        cuv_i_x  //:AKA[ cuvipix.i_x ]   ///\n"
"                    ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///\n"
"                    ,         0  //:AKA[ lay_dex ]       ///\n"
"                    ,   aus_dex  //:AKA[ aus_dex ]       ///   \n"
"                    ));;////////////////////////////////////\n"
"                    U32 u32_l_1=(\n"
"                    AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( \n"
"                        cuv_i_x  //:AKA[ cuvipix.i_x ]   ///\n"
"                    ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///\n"
"                    ,         1  //:AKA[ lay_dex ]       ///\n"
"                    ,   aus_dex  //:AKA[ aus_dex ]       ///   \n"
"                    ));;////////////////////////////////////\n"
"                    U32 u32_l_2=(\n"
"                    AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( \n"
"                        cuv_i_x  //:AKA[ cuvipix.i_x ]   ///\n"
"                    ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///\n"
"                    ,         2  //:AKA[ lay_dex ]       ///\n"
"                    ,   aus_dex  //:AKA[ aus_dex ]       ///   \n"
"                    ));;////////////////////////////////////\n"
"                //:-----------------------:GET_LAYER_DATA://\n"
"                //:TOUCHING_VALUES_FOR_EACH_LAYER:-------://\n"
"            //:IDONT_KNOW_WHAT_TO_CALL_THIS_SECTION:---------://\n"
"                /** **************************************** **/\n"
"                /** @VID_IID[ 0256 ]TIME[ 03:48:50 ] ** **** **/\n"
"                /** Lookup table to convert a tile size **** **/\n"
"                /** exponent into the relative size of  **** **/\n"
"                /** the tile measuered in[ pebbles ]    **** **/\n"
"                /** **************************************** **/\n"
"                I32 LUT_til_exp_CTO_til_peb[ 8 ]= ARR_I32( 8 )\n"
"                ARR_BEG\n"
"                /**/   1  //: til_exp == 0 ://\n"
"                ,      2  //: til_exp == 1 ://\n"
"                ,      4  //: til_exp == 2 ://\n"
"                ,      8  //: til_exp == 3 ://\n"
"                ,     16  //: til_exp == 4 ://\n"
"                ,     32  //: til_exp == 5 ://\n"
"                ,     64  //: til_exp == 6 ://\n"
"                ,    128  //: til_exp == 7 ://\n"
"                ARR_END;\n"
"                //:@VID_IID[ 0256 ]TIME[ 03:52:32 ]::::::::::://\n"
"                //:Touching Values For Auto Tiling Require ::://\n"
"                //:that we query what tiles are around     ::://\n"
"                //:the current tile being rendered.        ::://\n"
"                //:                                        ::://\n"
"                /// MOV_TOP;  //:FIND:Tile_Neighbor_ABOVE  ::://\n"
"                /// MOV_LEF;  //:FIND:Tile_Neighbor_LEFT   ::://\n"
"                /// MOV_RIG;  //:FIND:Tile_Neighbor_RIGHT  ::://\n"
"                /// MOV_BOT;  //:FIND:Tile_Neighbor_BELOW  ::://\n"
"                /** @VID_IID[ 0257 ]TIME[ 00:20:32 ] ******* **/\n"
"                /** Size Of A Tile Measured In Pebbles.      **/\n"
"                /** Written this way because it can be       **/\n"
"                /** read as a conversion factor.             **/\n"
"                /** (READ_AS: til ==> peb)                   **/\n"
"                /**            til___til peb_____peb         **/\n"
"                /**            --------- -----------         **/\n"
"                /** Example: ( til * til_peb ==> peb )       **/\n"
"                /**            --------- -----------         **/\n"
"                /**            til___til peb_____peb         **/\n"
"                I32 til_peb;                        /** **** **/\n"
"                /** **************************************** **/\n"
"                U32     cen ; //:<--[ My_House_Is_CENTER_Tile ]\n"
"                U32     ntv ; //:<--[ Neightbor_Tile_Value    ]\n"
"                U32     bit ; //:<--[ tou_bit :Touching_Bit   ]\n"
"                U32     tou ; //:<--[ tou_val :Touching_Value ]\n"
"                FV2 tiloper ; //:<--[ tilop_x , tilop_y       ]\n"
"                for( I32 til_lay = ( 0 ) //:[ wrong:lay_dex ]\n"
"                ;        til_lay <=(3-1) //:[ wrong:lay_dex ] \n"
"                ;        til_lay++       //:[ wrong:lay_dex ]\n"
"                ){\n"
"                for( I32 til_exp = ( 0 )\n"
"                ;        til_exp <=(8-1)\n"
"                ;        til_exp++\n"
"                ){\n"
"                //|LOOP_SECTION:TOUCHING_VALUES:||||||||||||||//\n"
"                    tou=( U32_000 /** @_ERASE_PER_ITER_@ **/ );\n"
"                    til_peb=LUT_til_exp_CTO_til_peb[\n"
"                                til_exp            ];;\n"
"                    //:WHERE_IS_MY_HOUSE:====================://\n"
"                        cen=(\n"
"                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( \n"
"                            cuv_i_x  //:<--[ canvas_user_view ]\n"
"                        ,   cuv_i_y  //:<--[ canvas_user_view ]\n"
"                        ,   til_lay  //:AKA[ til_lay / t_l ]       \n"
"                        ,   aus_dex  //:AKA[ aus_dex / a_d ]\n"
"                        ,   til_exp  //:AKA[ til_exp / t_e ]\n"
"                        ));; \n"
"                    //:====================:WHERE_IS_MY_HOUSE://\n"
"                    //:CANVAS_USER_VIEW_MAX_VALUE:===========://\n"
"                        #define  CUV_MAX ( 256 - 1 )\n"
"                    //:===========:CANVAS_USER_VIEW_MAX_VALUE://\n"
"                    //:NEIGHBOR_SHIFT_AMOUNTS:===============://\n"
"                        //:     123_123_123\n"
"                        //:     1234567_123\n"
"                        #define TOUSHIF_X_0 ( 3 ) //:LEF://\n"
"                        #define TOUSHIF_X_1 ( 2 ) //:RIG://\n"
"                        #define TOUSHIF_Y_0 ( 1 ) //:TOP://\n"
"                        #define TOUSHIF_Y_1 ( 0 ) //:BOT://\n"
"                    //:===============:NEIGHBOR_SHIFT_AMOUNTS://\n"
"                    //:NEIGHBOR_TOP:=========================://\n"
"                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://\n"
"                    #define MOV_TOP   (     til_peb )\n"
"                    #define U32_TOP   (         ntv )\n"
"                    #define TOUSHIF   ( TOUSHIF_Y_0 )\n"
"                        U32_TOP =(\n"
"                        ( ((cuv_i_y)-(MOV_TOP)) < 0 ) \n"
"                        ? \n"
"                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO\n"
"                        :\n"
"                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( \n"
"                          ((cuv_i_x)*(   1   )) //:<---[ STAY ]\n"
"                        , ((cuv_i_y)-(MOV_TOP)) //:<---[ MOVE ]\n"
"                        ,   til_lay  //:AKA[ til_lay / t_l ]    \n"
"                        ,   aus_dex  //:AKA[ aus_dex / a_d ]\n"
"                        ,   til_exp  //:AKA[ til_exp / t_e ]\n"
"                        ));; \n"
"                        bit =( ntv == cen ? U32_001 : U32_000 );\n"
"                        tou =( tou | ( bit << TOUSHIF ) );\n"
"                    #undef  MOV_TOP\n"
"                    #undef  U32_TOP\n"
"                    #undef  TOUSHIF\n"
"                    //:=========================:NEIGHBOR_TOP://\n"
"                    //:NEIGHBOR_LEF:=========================://\n"
"                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://\n"
"                    #define MOV_LEF   (     til_peb )\n"
"                    #define U32_LEF   (         ntv )\n"
"                    #define TOUSHIF   ( TOUSHIF_X_0 )\n"
"                        U32_LEF =(\n"
"                        ( ((cuv_i_x)-(MOV_LEF)) < 0 ) \n"
"                        ? \n"
"                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO\n"
"                        :\n"
"                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( \n"
"                          ((cuv_i_x)-(MOV_LEF)) //:<---[ MOVE ]\n"
"                        , ((cuv_i_y)*(   1   )) //:<---[ STAY ]\n"
"                        ,   til_lay  //:AKA[ til_lay / t_l ]        \n"
"                        ,   aus_dex  //:AKA[ aus_dex / a_d ]\n"
"                        ,   til_exp  //:AKA[ til_exp / t_e ]\n"
"                        ));; \n"
"                        bit =( ntv == cen ? U32_001 : U32_000 );\n"
"                        tou =( tou | ( bit << TOUSHIF ) );\n"
"                    #undef  MOV_LEF\n"
"                    #undef  U32_LEF\n"
"                    #undef  TOUSHIF\n"
"                    //:=========================:NEIGHBOR_LEF://\n"
"                    //:NEIGHBOR_RIG:=========================://\n"
"                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://\n"
"                    #define MOV_RIG   (     til_peb )\n"
"                    #define U32_RIG   (         ntv )\n"
"                    #define TOUSHIF   ( TOUSHIF_X_1 )\n"
"                        U32_RIG =(\n"
"                        ( ((cuv_i_x)+(MOV_RIG)) > CUV_MAX ) \n"
"                        ? \n"
"                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO\n"
"                        :\n"
"                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( \n"
"                          ((cuv_i_x)+(MOV_RIG)) //:<---[ MOVE ]\n"
"                        , ((cuv_i_y)*(   1   )) //:<---[ STAY ]\n"
"                        ,   til_lay  //:AKA[ til_lay / t_l ]        \n"
"                        ,   aus_dex  //:AKA[ aus_dex / a_d ]\n"
"                        ,   til_exp  //:AKA[ til_exp / t_e ]\n"
"                        ));; \n"
"                        bit =( ntv == cen ? U32_001 : U32_000 );\n"
"                        tou =( tou | ( bit << TOUSHIF ) );\n"
"                    #undef  MOV_RIG\n"
"                    #undef  U32_RIG\n"
"                    #undef  TOUSHIF\n"
"                    //:=========================:NEIGHBOR_RIG://\n"
"                    //:NEIGHBOR_BOT:=========================://\n"
"                    //:SEE[ README.MD ]SEARCH[ WANG_STYLE ]::://\n"
"                    #define MOV_BOT   (     til_peb )\n"
"                    #define U32_BOT   (         ntv )\n"
"                    #define TOUSHIF   ( TOUSHIF_Y_1 )\n"
"                        U32_BOT =(\n"
"                        ( ((cuv_i_y)+(MOV_BOT)) > CUV_MAX ) \n"
"                        ? \n"
"                        U32_000 //:OUT_OF_BOUNDS_USE_ZERO\n"
"                        :\n"
"                        AAC2020_P5D1OGL_cuvipix_CTO_til_val_Get( \n"
"                          ((cuv_i_x)*(   1   )) //:<---[ STAY ]\n"
"                        , ((cuv_i_y)+(MOV_BOT)) //:<---[ MOVE ]\n"
"                        ,   til_lay  //:AKA[ til_lay / t_l ]        \n"
"                        ,   aus_dex  //:AKA[ aus_dex / a_d ]\n"
"                        ,   til_exp  //:AKA[ til_exp / t_e ]\n"
"                        ));; \n"
"                        bit =( ntv == cen ? U32_001 : U32_000 );\n"
"                        tou =( tou | ( bit << TOUSHIF ) );\n"
"                    #undef  MOV_BOT\n"
"                    #undef  U32_BOT\n"
"                    #undef  TOUSHIF\n"
"                    //:=========================:NEIGHBOR_BOT://\n"
"                    //:NEIGHBOR_SHIFT_AMOUNTS:===============://\n"
"                        //:     123_123_123\n"
"                        //:     1234567_123\n"
"                        #undef  TOUSHIF_X_0  //:---------: 3 ://\n"
"                        #undef  TOUSHIF_X_1  //:---------: 2 ://\n"
"                        #undef  TOUSHIF_Y_0  //:---------: 1 ://\n"
"                        #undef  TOUSHIF_Y_1  //:---------: 0 ://\n"
"                    //:===============:NEIGHBOR_SHIFT_AMOUNTS://\n"
"                    //:CANVAS_USER_VIEW_MAX_VALUE:===========://\n"
"                        #undef  CUV_MAX\n"
"                    //:===========:CANVAS_USER_VIEW_MAX_VALUE://\n"
"                //||||||||||||||:LOOP_SECTION:TOUCHING_VALUES|//\n"
"                //|LOOP_SECTION:TILE_LOCAL_COORDS:||||||||||||//\n"
"                    if( tiloper.x > 0 ){ /** NOOP **/ };\n"
"                    //:BASED_ON[ AAC2020_FRAGCOM_fic_MAP_cuv ]\n"
"                    tiloper=(AAC2020_P5D1OGL_fic_MAP_tiloper(\n"
"                    fic , p5d_vp0 , p5d_vp1 , til_exp\n"
"                    ));;\n"
"                //||||||||||||:LOOP_SECTION:TILE_LOCAL_COORDS|//\n"
"                };;};; //:<--[ NEXT[ til_lay , til_exp ] ]\n"
"            //:---------:IDONT_KNOW_WHAT_TO_CALL_THIS_SECTION://\n"
"                //:CORE_RENDERING_ALGORITHM:-------------://\n"
"        ////    U32 c_b ; /** c_b : cuvbits         **/\n"
"        ////    U32 t_v ; /** t_v : til_val         **/\n"
"        ////    U32 tou ; /** tou : tou_val         **/\n"
"        ////    U32 r_c ; /** r_c : RENCORE.corepix **/\n"
"        ////    \n"
"        ////    /** all pixels for a given layer **/\n"
"        ////    U32 laypixa[ 8 ]= ARR_U32( 8 )\n"
"        ////    ARR_BEG\n"
"        ////    \n"
"        ////    /**/U32_000 //: 01 :// \n"
"        ////    ,   U32_000 //: 02 :// \n"
"        ////    ,   U32_000 //: 03 :// \n"
"        ////    ,   U32_000 //: 04 :// \n"
"        ////    ,   U32_000 //: 05 :// \n"
"        ////    ,   U32_000 //: 06 :// \n"
"        ////    ,   U32_000 //: 07 :// \n"
"        ////    ,   U32_000 //: 08 :// \n"
"        ////\n"
"        ////    ARR_END;\n"
"        ////\n"
"        ////    for( I32 t_l = 0 ; t_l <=(3-1) ; t_l ++ ){\n"
"        ////\n"
"        ////        U32 c_b=(\n"
"        ////        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( \n"
"        ////            cuv_i_x  //:AKA[ cuvipix.i_x ]   ///\n"
"        ////        ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///\n"
"        ////        ,       t_l  //:AKA[ til_lay / t_l ] ///\n"
"        ////        ,   aus_dex  //:AKA[ aus_dex ]       ///   \n"
"        ////        ));;////////////////////////////////////\n"
"        ////    \n"
"        ////        for(I32 t_e = 0 ; t_e <=(8-1) ; t_e ++ ){\n"
"        ////\n"
"        ////            /**[c_b]packed little-endian. So **/\n"
"        ////            /** larger tile values are in    **/\n"
"        ////            /** more significant bit slots.  **/   \n"
"        ////            t_v =( ( c_b >> (t_e*2) ) & B11 );;\n"
"        ////\n"
"        ////            tou =( U32_000 /** TODO:CALC **/ );\n"
"        ////            p_x =( 0.0     /** TODO:CALC **/ );\n"
"        ////            p_y =( 0.0     /** TODO:CALC **/ );\n"
"        ////\n"
"        ////            tilpixu=(\n"
"        ////   AAC2020_PAINT5D_RENCORE_tilodat_CTO_tilpixu(\n"
"        ////                aus_dex //:AKA[ aus_dex / a_d ]\n"
"        ////            ,   t_l     //:AKA[ til_lay / t_l ] \n"
"        ////            ,   t_e     //:AKA[ til_exp / t_e ] \n"
"        ////            ,   t_v     //:AKA[ til_val / t_v ] \n"
"        ////            ,   tou     //:AKA[ tou_val / tou ]\n"
"        ////            ,   p_x     //:AKA[ tilop_x / p_x ]\n"
"        ////            ,   p_y     //:AKA[ tilop_y / p_y ] \n"
"        ////            ));;\n"
"        ////\n"
"        ////             \n"
"        ////            tilpixa[ t_e ]=( tilpixu );\n"
"        ////\n"
"        ////        };;\n"
"        ////\n"
"        ////        laypixu=(\n"
"        ////    AAC2020_PAINT5D_RENCORE_tilpixa_CTO_laypixu(\n"
"        ////                            tilpixa ) );;\n"
"        ////\n"
"        ////        laypixa[ t_l ]=( laypixu );\n"
"        ////\n"
"        ////    };;\n"
"        ////\n"
"        ////    plypix3=(\n"
"        ////    AAC2020_PAINT5D_RENCORE_laypixa_CTO_plypix3(\n"
"        ////                    laypixa ));;\n"
"        ////\n"
"        ////    u32_pix=( plypix3 );\n"
"                U32 u32_pix=(\n"
"                    AAC2020_PAINT5D_RENCORE(\n"
"                    /**/    fic.x  //:<--FragIntCoord:X\n"
"                    ,       fic.y  //:<--FragIntCoord:Y\n"
"                    ,     cuv_i_x  //:<--CanvasUserView\n"
"                    ,     cuv_i_y  //:<--CanvasUserView\n"
"                    ,     aus_dex  //:<--Auset_Index\n"
"                    ,     u32_l_0  //:<--Layers\n"
"                    ,     u32_l_1  //:<--Layers\n"
"                    ,     u32_l_2  //:<--Layers\n"
"                    ));;\n"
"                //:-------------:CORE_RENDERING_ALGORITHM://\n"
"                //:INSIDE_VIEWPORT_BOUNDS ==> UNPACK_PIXEL:\n"
"                uv4_pix.x = ( u32_pix >> 24 ) & UFF ;\n"
"                uv4_pix.y = ( u32_pix >> 16 ) & UFF ;\n"
"                uv4_pix.z = ( u32_pix >>  8 ) & UFF ;\n"
"                uv4_pix.w = ( u32_pix >>  0 ) & UFF ;\n"
"            }else{\n"
"                //:OUT_OF_BOUNDS ==> YELLOW\n"
"                uv4_pix.x =MAK_U32( 128 ); //:RED\n"
"                uv4_pix.y =MAK_U32( 128 ); //:GREEN\n"
"                uv4_pix.z =MAK_U32(   0 ); //:BLUE\n"
"                uv4_pix.w =MAK_U32( 255 ); //:ALPHA\n"
"            };;\n"
"            /** @VID_IID[ 0116 ]TIME[ 01:33:00 ] ******* **/\n"
"            /** MAKE SURE[ P ]key for[ pattern ]uploads  **/\n"
"            /** to GPU and we can SEE IT. Do this        **/\n"
"            /** BEFORE making more elaborate shader code.**/\n"
"            /** *******************************************/\n"
"            FragColor = MAK_FV4(\n"
"                MAK_F32( uv4_pix.x ) / 255.0\n"
"            ,   MAK_F32( uv4_pix.y ) / 255.0\n"
"            ,   MAK_F32( uv4_pix.z ) / 255.0\n"
"            ,   1.0 //:Alpha\n"
"            );;\n"
"            //:DRAW_USER_INTERFACE_OVER_WHATEVER:============://\n"
"            I32 p5d_vu1=( AAC2020_TAUFRAG_Get_I32_p5d_vu1( ));;\n"
"            if( p5d_vu1 >= 1 /** UI #1 Is Visible **/ ){\n"
"                if( (1==1)\n"
"                &&  fic.x >= p5d_ur1.x_0  //: INSIDE_UI_RECT?://\n"
"                &&  fic.x <= p5d_ur1.x_1  //: INSIDE_UI_RECT?://\n"
"                &&  fic.y >= p5d_ur1.y_0  //: INSIDE_UI_RECT?://\n"
"                &&  fic.y <= p5d_ur1.y_1  //: INSIDE_UI_RECT?://\n"
"                ){\n"
"                    /** TODO: Make UI Transparent if needed **/\n"
"                    IV2 fic_glo =( fic );\n"
"                    /** TODO: Get mouse position somehow. **/\n"
"                    IV2 mou_glo;\n"
"                        mou_glo=( FRAGCOM_GET_mou_glo() );\n"
"                    //|GET_Frag_And_Mouse_Local:-------------|//\n"
"                    //+@VID_IID[ 0250 ]T[ 02:04:50 ]DONT_DO! +//\n"
"                    //+BECAUSE[ p5d_ur1 ]IS_IN_GLOBAL_COORDS +//\n"
"                    //- IV2 fic_loc=(                        -//\n"
"                    //-     AAC2020_UISHARE_glo_CTO_loc(     -//\n"
"                    //-         p5d_ur1,fic_glo ));;         -//\n"
"                    //- IV2 mou_loc=(                        -//\n"
"                    //-     AAC2020_UISHARE_glo_CTO_loc(     -//\n"
"                    //-         p5d_ur1,mou_glo ));;         -//\n"
"                    //-                                      -//\n"
"                    //|-------------:GET_Frag_And_Mouse_Local|//\n"
"                    FV4 ur1_pix=( /** UI_Rect_1:Pixel_RGBA **/\n"
"                        AAC2020_UIFRAGS_PAINT5D_Main( \n"
"                            fic_glo //:<--[ FIC___GLOBAL ]\n"
"                        ,   mou_glo //:<--[ mouse_GLOBAL ]\n"
"                        ,         1 //:<--[ p5d_ur1      ]\n"
"                        ));;\n"
"                    FragColor =( ur1_pix );\n"
"                };;\n"
"            };;\n"
"            //:============:DRAW_USER_INTERFACE_OVER_WHATEVER://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                /** ************************** ***\n"
"                If [C99/C11] code, return the  \n"
"                fragment color here.  \n"
"                @VID_IID[ 0093 ]TIME[ 00:51:30 ]\n"
"                *** ************************** **/\n"
"                return( FragColor ); /**<-- C99**/\n"
"            #endif\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //[ x ]//\n"
"        #undef  E_S_private                        //[ x ]//\n"
"        #undef  E_S                                //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"                                                   //[ x ]//\n"
"        #undef  F32      //:  01  ://              //[ x ]//\n"
"        #undef  U32      //:  02  ://              //[ x ]//\n"
"        #undef  I32      //:  03  ://              //[ x ]//\n"
"        #undef  IV2      //:  04  ://              //[ x ]//\n"
"        #undef  UV4      //:  05  ://              //[ x ]//\n"
"        #undef  FV2      //:  06  ://              //[ x ]//\n"
"        #undef  T_F      //:  07  ://              //[ x ]//\n"
"        #undef  TAU      //:  08  ://              //[ x ]//\n"
"        #undef  P5D      //:  09  ://              //[ x ]//\n"
"        #undef  SAM      //:  10  ://              //[ x ]//\n"
"        #undef  UFF      //:  11  ://              //[ x ]//\n"
"        #undef  U00      //:  12  ://              //[ x ]//\n"
"        #undef  I00      //:  13  ://              //[ x ]//\n"
"        #undef  U03      //:  14  ://              //[ x ]//\n"
"        #undef  B_3      //:  15  ://              //[ x ]//\n"
"        #undef  B11      //:  16  ://              //[ x ]//\n"
"        #undef  H55      //:  17  ://              //[ x ]//\n"
"        #undef  V_A      //:  18  ://              //[ x ]//\n"
"        #undef  FV4      //:  19  ://              //[ x ]//\n"
"        #undef  ASS      //:  20  ://              //[ x ]//\n"
"        #undef  ERR      //:  21  ://              //[ x ]//\n"
"        #undef  LOG      //:  22  ://              //[ x ]//\n"
"        #undef  LOF      //:  23  ://              //[ x ]//\n"
"        #undef  LOI      //:  24  ://              //[ x ]//\n"
"        #undef  TRU      //:  25  ://              //[ x ]//\n"
"        #undef  REC      //:  26  ://              //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/\n"
"    /** Decided on [MAK] for [MAKE] as our constructor   **/\n"
"    /** postfix ........................................ **/\n"
"                                                   //[ x ]//\n"
"        #undef  MAK_FV4                            //[ 1 ]//\n"
"        #undef  MAK_IV2                            //[ 2 ]//\n"
"        #undef  MAK_I32                            //[ 3 ]//\n"
"        #undef  MAK_F32                            //[ 4 ]//\n"
"        #undef  BIN_011                            //[ 5 ]//\n"
"        #undef  CUVIPIX                            //[ 6 ]//\n"
"        #undef  TYP_F_C                            //[ 7 ]//\n"
"        #undef  INN_F_C                            //[ 8 ]//\n"
"                                                   //[ x ]//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //:main_shim_macros:---------------------------------://\n"
"                                                   //[ x ]//\n"
"        #undef  RET_MAIN                           //[ x ]//\n"
"        #undef  FUN_MAIN                           //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:---------------------------------:main_shim_macros://\n"
"    //:===========:P5D_001____AAC2020_PAINT5D_DEFAULT_001://  \n"
"    //[=====================:PASTE_INTO_FILE[ P5D_001._ ]]//\n"
"    //[======================:AAC2020_PAINT5D_DEFAULT_001]//\n"
"    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//\n"
