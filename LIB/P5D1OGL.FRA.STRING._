"    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//\n"
"    //[AAC2020_PAINT5D_DEFAULT_001:======================]//\n"
"    //[PASTE_INTO_FILE[ P5D_001._ ]:=====================]//\n"
"    //:P5D_001____AAC2020_PAINT5D_DEFAULT_001:===========://\n"
"    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//\n"
"    //:glsl_file_scope_stuff:----------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        //:#_KEEP_USAMPLER_HIGH_#          ://     //| # |//\n"
"        //:#_SAM_PRECISION_BEFORE_SAM_VAR_#://     //| # |//\n"
"        precision highp usampler2D;                //| # |//\n"
"                                                   //| # |//\n"
"        //|(( UNI ))____________________________|////| # |//\n"
"        //[:::::::SHADERTOY_COMPATIBILITY:::::::]////| # |//\n"
"        #define fragCoord gl_FragCoord             //| # |//\n"
"        #define       F_C gl_FragCoord             //| # |//\n"
"        uniform vec3 iResolution;                  //| # |//\n"
"        uniform usampler2D taudepo;                //| # |//\n"
"        uniform usampler2D paint5d;                //| # |//\n"
"                                                   //| # |//\n"
"        //|(( INN ))____________________________|////| # |//\n"
"        //:     fag_tec:FrAGshaderTExtureCoord  :////| # |//\n"
"        in vec2 fag_tec;                           //| # |//\n"
"                                                   //| # |//\n"
"        //|(( OUT ))____________________________|////| # |//\n"
"        out vec4 FragColor;                        //| # |//\n"
"                                                   //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:----------------------------:glsl_file_scope_stuff://\n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //| # |//\n"
"        /** ******************************** ***   //| # |//\n"
"        @VID_IID[ 0112 ]TIME[ 00:56:50 ]           //| # |//\n"
"        Get rid of quote marks in the source       //| # |//\n"
"        So we can wrap entire thing into a         //| # |//\n"
"        very large multi-line string.              //| # |//\n"
"        *** ******************************** **/   //| # |//\n"
"                                                   //| # |//\n"
"        #define            E_S_private( e_m ) #e_m //| # |//\n"
"        #define E_S( e_m ) E_S_private( e_m )      //| # |//\n"
"                                                   //| # |//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As GLSL Code. **/         //| # |//\n"
"                                                   //| # |//\n"
"        #define F32        float    //:  01  ://   //| # |//\n"
"        #define U32         uint    //:  02  ://   //| # |//\n"
"        #define I32          int    //:  03  ://   //| # |//\n"
"        #define IV2        ivec2    //:  04  ://   //| # |//\n"
"        #define UV4        uvec4    //:  05  ://   //| # |//\n"
"        #define T_F   texelFetch    //:  06  ://   //| # |//\n"
"        #define TAU      taudepo    //:  07  ://   //| # |//\n"
"        #define P5D      paint5d    //:  08  ://   //| # |//\n"
"        #define SAM   usampler2D    //:  09  ://   //| # |//\n"
"        #define UFF    uint(0xFF)   //:  10  ://   //| # |//\n"
"        #define U00    uint( 0  )   //:  11  ://   //| # |//\n"
"        #define I00     int( 0  )   //:  12  ://   //| # |//\n"
"        #define U03    uint( 3  )   //:  13  ://   //| # |//\n"
"        #define B_3    uint( 3  )   //:  14  ://   //| # |//\n"
"        #define B11    uint( 3  )   //:  15  ://   //| # |//\n"
"        #define H55    uint(0x55)   //:  16  ://   //| # |//\n"
"        #define V_A                 //:  17  ://   //| # |//\n"
"        #define FV4         vec4    //:  18  ://   //| # |//\n"
"        #define ASS  /**NOTHING**/  //:  19  ://   //| # |//\n"
"        #define ERR  /**NOTHING**/  //:  20  ://   //| # |//\n"
"        #define TRU  trunc          //:  21  ://   //| # |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        /** When Running As C99/C11 Code. **/      //| # |//\n"
"                                                   //| # |//\n"
"        #define F32      float      //:  01  ://   //| # |//\n"
"        #define U32   uint32_t      //:  02  ://   //| # |//\n"
"        #define I32    int32_t      //:  03  ://   //| # |//\n"
"        #define IV2   struct AAC2020_POLYOGL_IV2   //| # |//\n"
"        #define UV4   struct AAC2020_POLYOGL_UV4   //| # |//\n"
"        #define T_F   AAC2020_POLYOGL_tex_fet      //| # |//\n"
"        #define TAU   ( 0 )         //:  07  ://   //| # |//\n"
"        #define P5D   ( 1 )         //:  08  ://   //| # |//\n"
"        #define SAM    int          //:  09  ://   //| # |//\n"
"        #define UFF    0xFF         //:  10  ://   //| # |//\n"
"        #define U00    0x00         //:  11  ://   //| # |//\n"
"        #define I00   ( 0 )         //:  12  ://   //| # |//\n"
"        #define U03   ( 3 )         //:  13  ://   //| # |//\n"
"        #define B_3   ( 3 )         //:  14  ://   //| # |//\n"
"        #define B11   ( 3 )         //:  15  ://   //| # |//\n"
"        #define H55    0x55         //:  16  ://   //| # |//\n"
"        #define V_A   void          //:  17  ://   //| # |//\n"
"        #define FV4   struct AAC2020_POLYOGL_FV4   //| # |//\n"
"        #define ASS   assert        //:  19  ://   //| # |//\n"
"        #define ERR   aac2020_p5d1ogl_Halt         //| # |//\n"
"        #define TRU   AAC2020_POLYOGL_Trunc        //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        #define MAK_FV4      vec4                  //| 1 |//\n"
"        #define MAK_IV2     ivec2                  //| 2 |//\n"
"        #define MAK_U32      uint                  //| 3 |//\n"
"        #define MAK_I32       int                  //| 4 |//\n"
"        #define MAK_F32     float                  //| 5 |//\n"
"        #define BIN_011 uint( 3 )                  //| 6 |//\n"
"        #define CUVIPIX struct AAC2020_P5D1OGL_CUVIPIX   ///\n"
"        #define TYP_F_C /** nothing **/            //| 8 |//\n"
"        #define INN_F_C /** nothing **/            //| 9 |//\n"
"                                                   //| # |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        #define MAK_FV4 AAC2020_POLYOGL_MAK_FV4    //| 1 |//\n"
"        #define MAK_IV2 AAC2020_POLYOGL_MAK_IV2    //| 2 |//\n"
"        #define MAK_U32 AAC2020_POLYOGL_MAK_U32    //| 3 |//\n"
"        #define MAK_I32 AAC2020_POLYOGL_MAK_I32    //| 4 |//\n"
"        #define MAK_F32 AAC2020_POLYOGL_MAK_F32    //| 5 |//\n"
"        #define BIN_011 ((U32)3 )                  //| 6 |//\n"
"        #define CUVIPIX struct AAC2020_P5D1OGL_CUVIPIX   ///\n"
"        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //| 8 |//\n"
"        #define INN_F_C F_C                        //| 9 |//\n"
"                                                   //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //:main_shim_macros:---------------------------------://\n"
"    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //| # |//\n"
"                                                   //| # |//\n"
"        #define RET_MAIN void /** <-- GLSL**/      //| # |//\n"
"        #define FUN_MAIN main /** <-- GLSL**/      //| # |//\n"
"                                                   //| # |//\n"
"    #else                                          //| # |//\n"
"                                                   //| # |//\n"
"        #define RET_MAIN FV4 /** <-- [C99/C11]**/  //| # |//\n"
"        #define FUN_MAIN AAC2020_P5D1OGL_Main      //| # |//\n"
"                                                   //| # |//\n"
"    #endif                                         //| # |//\n"
"    //:---------------------------------:main_shim_macros://\n"
"    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//\n"
"    //:C99_AND_GLSL_STRUCTS:-----------------------------://\n"
"    /** *********************************** ***    //| S |//\n"
"    @VID_IID[ 0097 ]TIME[ 08:00:00 ]               //| S |//\n"
"    These structs are declared exactly the same    //| S |//\n"
"    for the [CPU / HOST] C99 code as they are      //| S |//\n"
"    for the [ GPU / DEVICE ] GLSL code.            //| S |//\n"
"    *** *********************************** **/    //| S |//\n"
"    //: - - - - - - - - - - - -- - - - - - - - - - - - - ://\n"
"                                                   //| S |//\n"
"        struct AAC2020_P5D1OGL_CUVIPIX{            //| S |//\n"
"                                                   //| S |//\n"
"            I32 cuv_i_x ; //:canvas_user_view:X :////| S |//\n"
"            I32 cuv_i_y ; //:canvas_user_view:Y :////| S |//\n"
"                          //:i_x == integer x   :////| S |//\n"
"                          //:i_y == integer y   :////| S |//\n"
"        };                                         //| S |//\n"
"                                                   //| S |//\n"
"    //:-----------------------------:C99_AND_GLSL_STRUCTS://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_TexelFetch_U32(            //[ x ]//\n"
"            SAM u32_sam //:<--[C99/C11]AND[GLSL]:////[ x ]//\n"
"        ,   IV2 glo                                //[ x ]//\n"
"        ,   I32 levodet_ALWAYS_ZERO                //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"            U32 u32_var; /** Output/Return **/     //[ x ]//\n"
"                                                   //[ x ]//\n"
"            //:TEXEL_FETCH_RETURNS_XYZW_U08:-------------://     \n"
"            /** GET: [ x,y,z,w ] / [r,g,b,a]  **/  //[ x ]//\n"
"            /**      texel As a uvec 4 type.  **/  //[ x ]//\n"
"                UV4 uv4=(                          //[ x ]//\n"
"                    T_F(                           //[ x ]//\n"
"                        u32_sam                    //[ x ]//\n"
"                    ,   glo                        //[ x ]//\n"
"                    ,   levodet_ALWAYS_ZERO        //[ x ]//\n"
"                    ));;                           //[ x ]//\n"
"                                                   //[ x ]//\n"
"            //:-------------:TEXEL_FETCH_RETURNS_XYZW_U08://\n"
"            //:BIT_PACK_YOUR_PIXEL:----------------------://\n"
"            #define CPU_PIX AAC2020_PIXNAME_paint5d_cpu_pix\n"
"            /** **************************************** ***\n"
"                @VID_IID[ 0086 ]TIME[ 01:29:10 ]   //[ x ]//\n"
"                Bit shifting code copied directly  //[ x ]//\n"
"                from                               //[ x ]//\n"
"                aac2020_paint5d_UTC_BitPack_Get 's //[ x ]//\n"
"                bitshift code because we are       //[ x ]//\n"
"                really good at fucking up          //[ x ]//\n"
"                trivial bit shifting code.         //[ x ]//\n"
"                                                   //[ x ]//\n"
"                @VID_IID[ 0092 ]TIME[ 00:32:23 ]   //[ x ]//\n"
"                Code relocated to here because we  //[ x ]//\n"
"                mistakenly thought native GLSL     //[ x ]//\n"
"                texelFetch returned a unit32 but   //[ x ]//\n"
"                actually                           //[ x ]//\n"
"                returns a [ uvec4 / UV4 ]          //[ x ]//\n"
"            *** **************************************** **/\n"
"                                                   //[ x ]//\n"
"                u32_var=( U00 /** 0x00 **/         //[ x ]//\n"
"                | ( uv4.x << 24 ) //: R ://        //[ x ]//\n"
"                | ( uv4.y << 16 ) //: G ://        //[ x ]//\n"
"                | ( uv4.z <<  8 ) //: B ://        //[ x ]//\n"
"                | ( uv4.w <<  0 ) //: A ://        //[ x ]//\n"
"                );;  /** @PAIR_CODE_2021_01_14@ **///[ x ]//\n"
"                                                   //[ x ]//\n"
"            #undef  CPU_PIX                        //[ x ]//\n"
"            //:----------------------:BIT_PACK_YOUR_PIXEL://\n"
"            return( u32_var );                     //[ x ]//\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        //:NEW_FEATURE_TAUDEPO_ACCESS:-------------------://\n"
"        //:DATE[ 2021_02_10 ]VID_IID[ 0131 ]T[ 04:35:23 ]://\n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"        I32\n"
"        aac2020_p5d1ogl_taudepo_pix_dex(   //:<<<<<<<<<<<<<<<<<<<<<<<<<<<< TODO: UNIT TEST THIS FUNCTION          \n"
"            I32 dex_tau //:EX: AAC2020_TAUDEPO.TAU_015                         \n"
"        ,   I32 dex_sub //:EX: AAC2020_TAUDEPO.PAINT5D                                                  \n"
"        ,   I32 dex_var //:EX: AAC2020_TAUDEPO.P5D_VP0  \n"
"        )\n"
"        {\n"
"            I32 pix_dex; //:<--[ output/return ]variable\n"
"            I32 t_x ; //: dex_tau's xy location \n"
"            I32 t_y ; //: dex_tau's xy location \n"
"            I32 s_x ; //: dex_sub's xy location \n"
"            I32 s_y ; //: dex_sub's xy location \n"
"            I32 v_x ; //: dex_var's xy location \n"
"            I32 v_y ; //: dex_var's xy location \n"
"            I32 p_x ; //: pixel_x: (GLOBAL, on 512x512)\n"
"            I32 p_y ; //: pixel_y: (GLOBAL, on 512x512)\n"
"            //:INDEX_TO_XY_GLSL:-------------------------://  \n"
"            //:                                          ://\n"
"            //:SEE[ #DIA_TAU_CEL# ]IN[ LIB/TAUDEPO.D._ ] ://\n"
"            #define D dex_tau          //:DEX_TAU_000_015://\n"
"            t_y  =MAK_I32( TRU( MAK_F32(D) / MAK_F32( 4 )));   \n"
"            t_x  =(           (         D  -   (t_y * 4 )));                                   \n"
"            #undef  D                  //:DEX_TAU_000_015:// \n"
"            //:                                          ://\n"
"            //:SEE[ #DIA_SUB_CEL# ]IN[ LIB/TAUDEPO.D._ ] ://\n"
"            #define D dex_sub          //:DEX_SUB_000_015://\n"
"            s_y  =MAK_I32( TRU( MAK_F32(D) / MAK_F32( 4 )));   \n"
"            s_x  =(           (         D  -   (s_y * 4 )));                                   \n"
"            #undef  D                  //:DEX_SUB_000_015://\n"
"            //:                                          ://\n"
"            //:SEE[ #DIA_VAR_CEL# ]IN[ LIB/TAUDEPO.D._ ] ://\n"
"            #define D dex_var          //:DEX_VAR_000_255://\n"
"            v_y  =MAK_I32( TRU( MAK_F32(D) / MAK_F32(16 )));   \n"
"            v_x  =(           (         D  -   (v_y *16 )));                                   \n"
"            #undef  D                  //:DEX_VAR_000_255://\n"
"            //:                                          ://\n"
"            //:-------------------------:INDEX_TO_XY_GLSL://\n"
"            //:global_pixel_xy_on_512x512:---------------://\n"
"                                                      //:://\n"
"            p_x =( 0                                  //:://\n"
"            +  (t_x * (512 / 4) ) //: 128x128_tau_cells  ://\n"
"            +  (s_x * (128 / 4) ) //: 032x032_sub_cells  ://\n"
"            +  (v_x * (    2  ) ) //: 002x002 pix_per_var://\n"
"            );;                   //:(002x002:4pixper_var://\n"
"                                                      //:://\n"
"            p_y =( 0                                  //:://\n"
"            +  (t_y * (512 / 4) ) //: 128x128_tau_cells  ://\n"
"            +  (s_y * (128 / 4) ) //: 032x032_sub_cells  ://\n"
"            +  (v_y * (    2  ) ) //: 002x002 pix_per_var://\n"
"            );;                   //:(002x002:4pixper_var://\n"
"            //:                     :                    ://\n"
"            //:---------------:global_pixel_xy_on_512x512://\n"
"            //:XY_TO_INDEX_FORMULA_FOR_TOP_LEFT_PIXEL    ://\n"
"            //:OF_OUR_2X2_CLUSTER_OF_PIXELS_REPRESENTING ://\n"
"            //:A_SINGLE_VARIABLE.                        ://\n"
"                    pix_dex = p_x + ( 512 * p_y);\n"
"            return( pix_dex );\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                          \n"
"        AAC2020_P5D1OGL_TAUDEPO_Get_U32(                 \n"
"            I32 dex_tau //:EX: AAC2020_TAUDEPO.TAU_015                         \n"
"        ,   I32 dex_sub //:EX: AAC2020_TAUDEPO.PAINT5D                                                  \n"
"        ,   I32 dex_var //:EX: AAC2020_TAUDEPO.P5D_VP0  \n"
"        )\n"
"        {\n"
"            ASS( dex_tau <= ( 16-1) );\n"
"            ASS( dex_sub <= ( 16-1) );\n"
"            ASS( dex_var <= (256-1) );\n"
"            I32 pix_dex; //:GLOBAL_PIXEL_LOCATION: AS_INDEX\n"
"            IV2     glo; //:GLOBAL_PIXEL_LOCATION: AS____XY\n"
"            pix_dex=(\n"
"                aac2020_p5d1ogl_taudepo_pix_dex(\n"
"                    dex_tau //: EX: AAC2020_TAUDEPO.TAU_015\n"
"                ,   dex_sub //: EX: AAC2020_TAUDEPO.PAINT5D        \n"
"                ,   dex_var //: EX: AAC2020_TAUDEPO.P5D_VP0    \n"
"                ));;\n"
"            //:INDEX_TO_XY_GLSL:-------------------------://                          \n"
"            #define D pix_dex  //:GLOBAL:DEX             ://\n"
"            #define G glo      //:GLOBAL:XY              ://\n"
"            G.y  =MAK_I32( TRU( MAK_F32(D) / MAK_F32(512)));   \n"
"            G.x  =(           (         D  -   (G.y *512)));                                   \n"
"            #undef  D                 //:----------------://             \n"
"            #undef  G                 //:----------------://\n"
"            //:-------------------------:INDEX_TO_XY_GLSL://\n"
"            U32 u32_var ;                            \n"
"            u32_var =(                               \n"
"                AAC2020_P5D1OGL_TexelFetch_U32(           \n"
"                    TAU //:texture_to_sample    ://  \n"
"                ,   glo //:integer_texel_coord  ://  \n"
"                ,   I00 //:level_of_detail_zero ://  \n"
"                ));;                                 \n"
"            /** Return Value Encoded In Taudepo Memory ..**/\n"
"            /** TAU: Texture_As_Uniform .............. ..**/\n"
"            return( u32_var );                       \n"
"        }         \n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"    ////////////////////////////////////////////////////////\n"
"        //:DATE[ 2021_02_10 ]VID_IID[ 0131 ]T[ 04:35:23 ]://\n"
"        //:-------------------:NEW_FEATURE_TAUDEPO_ACCESS://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_BitPack_Get(               //[ x ]//\n"
"            IV2     glo                            //[ x ]//\n"
"        ,   I32 aus_dex                            //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"        ASS( B_3 == BIN_011 );                     //[ x ]//\n"
"                                                   //[ x ]//\n"
"            U32 u32_var ;                          //[ x ]//\n"
"            U32 til_val ;                          //[ x ]//\n"
"                                                   //[ x ]//\n"
"            u32_var =(                             //[ x ]//\n"
"                AAC2020_P5D1OGL_TexelFetch_U32(    //[ x ]//          \n"
"                    P5D //:texture_to_sample    :////[ x ]//\n"
"                ,   glo //:integer_texel_coord  :////[ x ]//\n"
"                ,   I00 //:level_of_detail_zero :////[ x ]//\n"
"                ));;                               //[ x ]//\n"
"                                                   //[ x ]//\n"
"            til_val =(                             //[ x ]//\n"
"                ( u32_var >> (aus_dex*2) )         //[ x ]//\n"
"                &                                  //[ x ]//\n"
"                BIN_011                            //[ x ]//\n"
"            );;                                    //[ x ]//\n"
"                                                   //[ x ]//\n"
"            return( til_val );                     //[ x ]//\n"
"        }                                          //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        I32                                        //[ - ]//\n"
"        AAC2020_P5D1OGL_til_exp_CTO_til_peb(       //[ - ]//\n"
"            I32         til_exp                    //[ - ]//\n"
"        )                                          //[ - ]//\n"
"        {                                          //[ - ]//\n"
"                                                   //[ - ]//\n"
"        #define T_E til_exp                        //[ - ]//\n"
"        #define T_P til_peb                        //[ - ]//\n"
"                                                   //[ - ]//\n"
"            ASS( til_exp >= 0 && til_exp <=(8-1) );//[ - ]//\n"
"                                                   //[ - ]//\n"
"                        I32 T_P ;                  //[ - ]//\n"
"            if( 0 == T_E ){ T_P = (  1 ); };       //[ 1 ]//\n"
"            if( 1 == T_E ){ T_P = (  2 ); };       //[ 2 ]//\n"
"            if( 2 == T_E ){ T_P = (  4 ); };       //[ 3 ]//\n"
"            if( 3 == T_E ){ T_P = (  8 ); };       //[ 4 ]//\n"
"            if( 4 == T_E ){ T_P = ( 16 ); };       //[ 5 ]//\n"
"            if( 5 == T_E ){ T_P = ( 32 ); };       //[ 6 ]//\n"
"            if( 6 == T_E ){ T_P = ( 64 ); };       //[ 7 ]//\n"
"            if( 7 == T_E ){ T_P = (128 ); };       //[ 8 ]//\n"
"                                                   //[ - ]//\n"
"            return( til_peb );                     //[ - ]//\n"
"                                                   //[ - ]//\n"
"        #undef  T_E                                //[ - ]//\n"
"        #undef  T_P                                //[ - ]//\n"
"                                                   //[ - ]//\n"
"                                                   //[ - ]//\n"
"        }                                          //[ - ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        I32                                        //[ - ]//\n"
"        AAC2020_P5D1OGL_til_exp_CTO_max_cor(       //[ - ]//\n"
"            I32         til_exp                    //[ - ]//\n"
"        )                                          //[ - ]//\n"
"        {                                          //[ - ]//\n"
"        #define T_E til_exp                        //[ - ]//\n"
"        #define M_C max_cor                        //[ - ]//\n"
"                                                   //[ - ]//\n"
"            I32 max_cor;                           //[ - ]//\n"
"            if( 0 == T_E ){ M_C = ( 128 - 1 ); };  //[ 1 ]//\n"
"            if( 1 == T_E ){ M_C = (  64 - 1 ); };  //[ 2 ]//\n"
"            if( 2 == T_E ){ M_C = (  32 - 1 ); };  //[ 3 ]//\n"
"            if( 3 == T_E ){ M_C = (  16 - 1 ); };  //[ 4 ]//\n"
"            if( 4 == T_E ){ M_C = (   8 - 1 ); };  //[ 5 ]//\n"
"            if( 5 == T_E ){ M_C = (   4 - 1 ); };  //[ 6 ]//\n"
"            if( 6 == T_E ){ M_C = (   2 - 1 ); };  //[ 7 ]//\n"
"            if( 7 == T_E ){ M_C = (   1 - 1 ); };  //[ 8 ]//\n"
"                                                   //[ - ]//\n"
"                                                   //[ - ]//\n"
"            return( max_cor );                     //[ - ]//\n"
"                                                   //[ - ]//\n"
"        #undef  T_E                                //[ - ]//\n"
"        #undef  M_C                                //[ - ]//\n"
"        }                                          //[ - ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        I32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_til_exp_CTO_diagpix(       //[ x ]//\n"
"            I32         til_exp                    //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"        #define T til_exp                          //[ x ]//\n"
"        #define D diagpix                          //[ x ]//\n"
"                                                   //[ x ]//\n"
"            I32 diagpix =( 9999 );                 //[ x ]//\n"
"                                                   //[ x ]//\n"
"            //:@VID_IID[ 0085 ]TIME[ 01:53:00 ] :////[ x ]//\n"
"            //:TODO: Make into lookup table:    :////[ x ]//\n"
"            //:BUT MUST GET WORKING IN OPENGL   :////[ x ]//\n"
"            //:BEFORE YOU DO SUCH REFACTOR!     :////[ x ]//\n"
"            if( 0 == T ){ D = 0   ; }else          //[ x ]//\n"
"            if( 1 == T ){ D = 128 ; }else          //[ x ]//     \n"
"            if( 2 == T ){ D = 192 ; }else          //[ x ]//\n"
"            if( 3 == T ){ D = 224 ; }else          //[ x ]//\n"
"            if( 4 == T ){ D = 240 ; }else          //[ x ]//\n"
"            if( 5 == T ){ D = 248 ; }else          //[ x ]//\n"
"            if( 6 == T ){ D = 252 ; }else          //[ x ]//\n"
"            if( 7 == T ){ D = 254 ; }else{         //[ x ]//\n"
"                                                   //[ x ]//\n"
"                /// if out of range, ///           //[ x ]//\n"
"                /// set to invalid   ///           //[ x ]//\n"
"                /// config pixel.    ///           //[ x ]//\n"
"                D = 9001 ;                         //[ x ]//\n"
"                                                   //[ x ]//\n"
"            };;                                    //[ x ]//\n"
"                                                   //[ x ]//\n"
"            return( diagpix );                     //[ x ]//\n"
"                                                   //[ x ]//\n"
"        #undef  T                                  //[ x ]//\n"
"        #undef  D                                  //[ x ]//\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        IV2                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_painpix_CTO_glocpix(       //[ x ]//\n"
"            I32 til_qua                            //[ x ]//\n"
"        ,   I32 til_exp                            //[ x ]//\n"
"        ,   I32 til_lay                            //[ x ]//\n"
"        ,   I32 loc_t_x                            //[ x ]//\n"
"        ,   I32 loc_t_y                            //[ x ]//\n"
"        ){                                         //[ x ]//\n"
"        //:declare__variables: . . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            IV2 glo; /** glo_t_x & glo_t_y **/     //[ x ]//\n"
"            IV2 tem; /** tempi_x & tempi_y **/     //[ x ]//\n"
"            IV2 qua; /** o_x_qua & o_y_qua **/     //[ x ]//\n"
"            IV2 lay; /** o_x_lay & o_y_lay **/     //[ x ]//\n"
"                                                   //[ x ]//\n"
"            I32 dia; /** diagpix **/               //[ x ]//\n"
"            I32 m_c; /** max_cor **/               //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . . :declare__variables://\n"
"        //:CALCULATE::painpix_CTO_glocpix: . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            m_c =(                                 //[ x ]//\n"
"            AAC2020_P5D1OGL_til_exp_CTO_max_cor(   //[ x ]//\n"
"                            til_exp ));;           //[ x ]//\n"
"            dia =(                                 //[ x ]//\n"
"            AAC2020_P5D1OGL_til_exp_CTO_diagpix(   //[ x ]//\n"
"                            til_exp ));;           //[ x ]//\n"
"                                                   //[ x ]//\n"
"            tem.x =  til_qua       % ( 2 ) ;       //[ x ]//\n"
"            tem.y = (til_qua-tem.x)/ ( 2 ) ;       //[ x ]//\n"
"                                                   //[ x ]//\n"
"            qua.x = ( tem.x * 256 );               //[ x ]//\n"
"            qua.y = ( tem.y * 256 );               //[ x ]//\n"
"                                                   //[ x ]//\n"
"            tem.x =  til_lay          % (  2  ) ;  //[ x ]//\n"
"            tem.y = (til_lay - tem.x) / (  2  ) ;  //[ x ]//\n"
"                                                   //[ x ]//\n"
"            lay.x = ( tem.x * ( m_c + 1 ) ) ;      //[ x ]//\n"
"            lay.y = ( tem.y * ( m_c + 1 ) ) ;      //[ x ]//\n"
"                                                   //[ x ]//\n"
"            glo.x=( qua.x +dia+ lay.x + loc_t_x ); //[ x ]//\n"
"            glo.y=( qua.y +dia+ lay.y + loc_t_y ); //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . :CALCULATE::painpix_CTO_glocpix://\n"
"        //:return_from_function: . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            /** glo == glo_t_x & glo_t_y **/       //[ x ]//\n"
"            return( glo );                         //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . :return_from_function://\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                        //[ x ]//\n"
"        AAC2020_P5D1OGL_Get(                       //[ x ]//\n"
"            I32  til_qua                           //[ x ]//\n"
"        ,   I32  til_exp                           //[ x ]//\n"
"        ,   I32  til_lay                           //[ x ]//\n"
"        ,   I32  loc_t_x                           //[ x ]//\n"
"        ,   I32  loc_t_y                           //[ x ]//\n"
"        ,   I32  aus_dex                           //[ x ]//\n"
"                                                   //[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"        //:declare__variables: . . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            U32 til_val =( U00 );                  //[ x ]//\n"
"                                                   //[ x ]//\n"
"            /** glo == glo_t_x & glo_t_y  **/      //[ x ]//\n"
"            IV2 glo    ;                           //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . . :declare__variables://\n"
"        //:get_pixel_and_extract_tile_value: . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            glo=(                                  //[ x ]//\n"
"            AAC2020_P5D1OGL_painpix_CTO_glocpix(   //[ x ]//\n"
"                til_qua                            //[ x ]//\n"
"            ,   til_exp                            //[ x ]//\n"
"            ,   til_lay                            //[ x ]//\n"
"            ,   loc_t_x                            //[ x ]//  \n"
"            ,   loc_t_y                            //[ x ]//\n"
"            ));;                                   //[ x ]//\n"
"                                                   //[ x ]//\n"
"            til_val=(                              //[ x ]//\n"
"            AAC2020_P5D1OGL_BitPack_Get(           //[ x ]//\n"
"                glo                                //[ x ]//\n"
"            ,   aus_dex                            //[ x ]//\n"
"            ));;                                   //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . :get_pixel_and_extract_tile_value://\n"
"        //:return_from_function: . . . . . . . . . . . . ://\n"
"                                                   //[ x ]//\n"
"            return( til_val );                     //[ x ]//\n"
"                                                   //[ x ]//\n"
"        //: . . . . . . . . . . . . :return_from_function://\n"
"        }                                          //[ x ]//\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //[ x ]//\n"
"        CUVIPIX                                    //[ x ]//\n"
"        AAC2020_P5D1OGL_painpix_CTO_cuvipix(       //[ x ]//\n"
"            I32 til_qua /** Tile Quadrant( t_q )**///[ x ]//\n"
"        ,   I32 til_exp /** Tile Exponent( t_e )**///[ x ]//\n"
"        ,   I32 til_lay /** Tile Layer   ( t_l )**///[ x ]//\n"
"        ,   I32 loc_t_x /** Local Tile X ( t_x )**///[ x ]//\n"
"        ,   I32 loc_t_y /** Local Tile Y ( t_y )**///[ x ]//\n"
"        )                                          //[ x ]//\n"
"        {                                          //[ x ]//\n"
"            //:check_inputs:-----------------------------://\n"
"            #define T_Q til_qua                    //[ x ]//\n"
"            #define T_E til_exp                    //[ x ]//\n"
"            #define T_L til_lay                    //[ x ]//\n"
"            #define T_X loc_t_x                    //[ x ]//\n"
"            #define T_Y loc_t_y                    //[ x ]//\n"
"                                                   //[ x ]//\n"
"                ASS( T_Q >= 0 && T_Q <= (  4-1) ); //[ x ]//\n"
"                ASS( T_E >= 0 && T_E <= (  8-1) ); //[ x ]//\n"
"                ASS( T_L >= 0 && T_L <= (  3-1) ); //[ x ]//\n"
"                ASS( T_X >= 0 && T_X <= (128-1) ); //[ x ]//\n"
"                ASS( T_Y >= 0 && T_Y <= (128-1) ); //[ x ]//\n"
"                                                   //[ x ]//\n"
"            #undef  T_Q                            //[ x ]//\n"
"            #undef  T_E                            //[ x ]//\n"
"            #undef  T_L                            //[ x ]//\n"
"            #undef  T_X                            //[ x ]//\n"
"            #undef  T_Y                            //[ x ]//\n"
"            //:-----------------------------:check_inputs://\n"
"            //:declare_vars:-----------------------------://\n"
"                                                   //[ x ]//\n"
"                CUVIPIX cuvipix;                   //[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 qua_c_x; /** til_qua as cell**///[ x ]//\n"
"                I32 qua_c_y; /** [X|Y]coordinate**///[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 til_peb; /** Size_In_Pebbles**///[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 tor_i_x; /** TIle_ORigin:i_x**///[ x ]//\n"
"                I32 tor_i_y; /** TIle_ORigin:i_y**///[ x ]//\n"
"                                                   //[ x ]//\n"
"                I32 pox_qua; /** Pixel_Offset   **///[ x ]//\n"
"                I32 poy_qua; /** QUAdrant [X,Y] **///[ x ]//\n"
"                                                   //[ x ]//\n"
"            //:-----------------------------:declare_vars://\n"
"            //:##########################################://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"                                                   //:###://\n"
"                /** ************************* ***  //:###://\n"
"                @VID_IID[ 0097 ]TIME[ 08:15:42 ]   //:###://\n"
"                til_lay does not change the        //:###://\n"
"                canvas_user_view coordinate        //:###://\n"
"                (cuvipix) because the layers are   //:###://\n"
"                LAYERED directly on top of each    //:###://\n"
"                other at the same exact 2D         //:###://\n"
"                coordinate.                        //:###://\n"
"                *** ************************* **/  //:###://\n"
"                                                   //:###://\n"
"                if( til_lay ){ /** NOOP **/ };     //:###://\n"
"                                                   //:###://\n"
"            #endif //:###################################://\n"
"            /** @VID_IID[ 0097 ]TIME[ 08:08:42 ]  ****** **/\n"
"            /** Convert tile quadrant index into         **/\n"
"            /** it's XY cell location equivalent.        **/\n"
"            /** AKA: INDEX TO XY CONVERSION.      ****** **/\n"
"            qua_c_x =  til_qua           % 2 ;     //:***://\n"
"            qua_c_y = (til_qua - qua_c_x)/ 2 ;     //:***://\n"
"            ASS( qua_c_x >= 0 && qua_c_x <= 1 );   //:***://\n"
"            ASS( qua_c_x >= 0 && qua_c_x <= 1 );   //:***://\n"
"                                                   //:***://\n"
"            /** **************************************** **/\n"
"            /** @VID_IID[ 0097 ]TIME[ 08:27:42 ]         **/\n"
"            /** Get the span of the current tile         **/\n"
"            /** in focus in terms of the smallest        **/\n"
"            /** tile size. ***************************** **/\n"
"            /** @VID_IID[ 0103 ]TIME[ 04:05:20 ]    .....**/\n"
"            /** Fixed the logic for getting til_peb .....**/\n"
"            til_peb =( AAC2020_P5D1OGL_til_exp_CTO_til_peb(\n"
"                                       til_exp )); //:***://\n"
"                                                   //:***://\n"
"                                                   //:***://\n"
"            //:##########################################://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"                                                   //:###://\n"
"                //:  @VID_IID[ 0098 ]TIME[ 03:52:30 ] :::://\n"
"                //:  This error check is pointless ::::::://\n"
"                I32 max_cor =( til_peb - 1 );      //:###://\n"
"                                                   //:###://\n"
"                if( til_peb > (max_cor+1) ){       //:###://\n"
"                                                   //:###://\n"
"                    ERR(E_S(til_peb_IS_OOB_2021)); //:###://\n"
"                };;                                //:###://\n"
"                                                   //:###://\n"
"            #endif //:###################################://\n"
"            /** **************************************** ***\n"
"            @VID_IID[ 0097 ]TIME[ 08:38:23 ] Get the top ***\n"
"            left origin of the current tile in focus.    ***\n"
"                                                         ***\n"
"            tor_i_x:TileORigin:int_x  [tor==Tile_ORigin] ***    \n"
"            tor_i_y:TileORigin:int_y                     ***\n"
"                                                         ***\n"
"            @VID_IID[ 0103 ]TIME[ 03:20:00 ]             ***\n"
"            [ tor_i_x ]AND[ tor_i_y ]RE_EXPLAINED_AGAIN  ***\n"
"                                                         ***\n"
"            *** **************************************** **/\n"
"            //:------------------------------------------://\n"
"            tor_i_x =( til_peb * loc_t_x );        //:---://\n"
"            tor_i_y =( til_peb * loc_t_y );        //:---://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"            if(  1                                 //:###://\n"
"            &&( tor_i_x >= 0 && tor_i_x <=(256-1) )//:###://\n"
"            &&( tor_i_y >= 0 && tor_i_y <=(256-1) )//:###://\n"
"            ){                                     //:###://\n"
"                /** DO NOTHING **/                 //:###://\n"
"            }else{                                 //:###://\n"
"                                                   //:###://\n"
"                ERR(E_S( tor_out_of_range_2021 )); //:###://\n"
"                                                   //:###://\n"
"            };;                                    //:###://\n"
"            #endif //:###################################://\n"
"            ASS( tor_i_x >= 0 && tor_i_x<=(256-1));//:---://\n"
"            ASS( tor_i_y >= 0 && tor_i_y<=(256-1));//:---://\n"
"            //:------------------------------------------://\n"
"                                                   //:---://\n"
"            /** pox : pixel [offset/origin] X **/  //:---://\n"
"            /** poy : pixel [offset/origin] Y **/  //:---://\n"
"            pox_qua = ( qua_c_x * 128 );           //:---://\n"
"            poy_qua = ( qua_c_y * 128 );           //:---://\n"
"            //:##########################################://\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL  //:###://\n"
"                                                   //:###://\n"
"                if( 1                              //:###://\n"
"                && ( pox_qua >= 0 && pox_qua <=(128 - 0)  )\n"
"                && ( poy_qua >= 0 && poy_qua <=(128 - 0)  )\n"
"                ){                                 //:###://\n"
"                    /** OKAY. Do nothing. **/      //:###://\n"
"                }else{                             //:###://\n"
"                                                   //:###://\n"
"                    ERR(E_S( OOB_POXY_2021 ));     //:###://\n"
"                                                   //:###://\n"
"                };;                                //:###://\n"
"                                                   //:###://\n"
"            #endif //:###################################://\n"
"            ASS(pox_qua >= 0 && pox_qua<=(128 -0));//:---://\n"
"            ASS(poy_qua >= 0 && poy_qua<=(128 -0));//:---://\n"
"            //://////////////////////////////////////////://\n"
"                                                   //:---://\n"
"            cuvipix.cuv_i_x=( pox_qua + tor_i_x ); //:---://\n"
"            cuvipix.cuv_i_y=( poy_qua + tor_i_y ); //:---://\n"
"            ASS( cuvipix.cuv_i_x >= 0 );           //:---://\n"
"            ASS( cuvipix.cuv_i_y >= 0 );           //:---://\n"
"            ASS( cuvipix.cuv_i_x <=( 256 - 1 ) );  //:---://\n"
"            ASS( cuvipix.cuv_i_y <=( 256 - 1 ) );  //:---://\n"
"                                                   //:---://\n"
"            return( cuvipix );                     //:---://\n"
"        }                                          //:---://\n"
"                                                   //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //:---://\n"
"        I32                                        //:---://\n"
"        AAC2020_P5D1OGL_til_exp_CTO_squ_ash(       //:---://\n"
"        I32             til_exp                    //:---://\n"
"        )                                          //:---://\n"
"        {                                          //:---://\n"
"            /** *************************** ***    //:---://\n"
"            til_exp: Tile Exponent                 //:---://\n"
"            squ_ash: Literally[  SQUASH ]          //:---://\n"
"                     for[ squash amount ]          //:---://\n"
"                CTO: ConvertTO                     //:---://\n"
"            *** *************************** **/    //:---://\n"
"            //:input_checks:-----------------------------://\n"
"                                                     //:-://\n"
"                ASS(til_exp >= 0 && til_exp<=(8-1)); //:-://\n"
"                                                     //:-://\n"
"            //:-----------------------------:input_checks://\n"
"            //:declare_var:------------------------------://\n"
"                                                   //:---://\n"
"                I32 squ_ash=( 0 - 66077 );         //:---://\n"
"                                                   //:---://\n"
"            //:------------------------------:declare_var://\n"
"            #if( AAC2020_CRASH_ON_VITAL_TODO >= 1 ) //:##://\n"
"                                                    //:##://\n"
"                #error OPTIMIZE_WITH_A_LOOKUP_TABLE //:##://\n"
"                                                    //:##://\n"
"            #endif //:###################################://\n"
"                                                   //:---://\n"
"            /** TODO: Re-write as lookup table **/ //:---://\n"
"            /** once we have final PAINT5D     **/ //:---://\n"
"            /** GLSL shader working.           **/ //:---://\n"
"            if( 0 == til_exp ){ squ_ash =   1; };  //:---://\n"
"            if( 1 == til_exp ){ squ_ash =   2; };  //:---://\n"
"            if( 2 == til_exp ){ squ_ash =   4; };  //:---://\n"
"            if( 3 == til_exp ){ squ_ash =   8; };  //:---://\n"
"            if( 4 == til_exp ){ squ_ash =  16; };  //:---://\n"
"            if( 5 == til_exp ){ squ_ash =  32; };  //:---://\n"
"            if( 6 == til_exp ){ squ_ash =  64; };  //:---://\n"
"            if( 7 == til_exp ){ squ_ash = 128; };  //:---://\n"
"                                                   //:---://\n"
"            return( squ_ash );                     //:---://\n"
"        }                                          //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"    #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL          //: # ://\n"
"    #define P5D_TOR struct aac2020_p5d1ogl_P5D_TOR //: 1 ://\n"
"    #define U08 uint8_t /** GCC: <stdint.h> **/    //: 2 ://\n"
"                                                   //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //:---://\n"
"        /** P5D_TOR: Paint5D_TileORigin                  **/\n"
"        /**          The origin pixel in terms of the    **/\n"
"        /**          [ data view ]aka the texture        **/\n"
"        /**          memory storing the tile values.     **/\n"
"        struct aac2020_p5d1ogl_P5D_TOR{            //:---://\n"
"                                                   //:---://\n"
"            I32 loc_t_x ; //:LocalTileCoordinate:X //:---://\n"
"            I32 loc_t_y ; //:LocalTileCoordinate:Y //:---://\n"
"                                                   //:---://\n"
"        };                                         //:---://\n"
"                                                   //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"                                                   //:---://\n"
"        P5D_TOR                                    //:---://\n"
"        OPEN_GL_til_exp_AND_lay_dex_CTO_p5d_tor(   //:---://\n"
"            I32 til_exp                            //:---://\n"
"        ,   I32 lay_dex                            //:---://\n"
"        )                                          //:---://\n"
"        {                                          //:---://\n"
"        //:declare_variables:----------------------------://\n"
"                                                   //:---://\n"
"            P5D_TOR p5d_tor;                       //:---://\n"
"            I32     diagpix;                       //:---://\n"
"            I32     max_cor;                       //:---://\n"
"                                                   //:---://\n"
"        //:----------------------------:declare_variables://\n"
"        //:CORE_LOGIC_OF_FUNCTION:=======================://\n"
"        #define TOR_I_X p5d_tor.loc_t_x            //:---://\n"
"        #define TOR_I_Y p5d_tor.loc_t_y            //:---://\n"
"                                                   //:---://\n"
"            diagpix=(                              //:---://\n"
"            AAC2020_P5D1OGL_til_exp_CTO_diagpix(   //:---://\n"
"                            til_exp ));;           //:---://\n"
"                                                   //:---://\n"
"                                                   //:---://\n"
"            max_cor=(                              //:---://\n"
"            AAC2020_P5D1OGL_til_exp_CTO_max_cor(   //:---://\n"
"                            til_exp ));            //:---://\n"
"                                                   //:---://\n"
"            if( 0 == lay_dex ){                    //:---://\n"
"                TOR_I_X=( diagpix + 0 );           //:---://\n"
"                TOR_I_Y=( diagpix + 0 );           //:---://\n"
"            }else                                  //:---://\n"
"            if( 1 == lay_dex ){                    //:---://\n"
"                TOR_I_X=( diagpix + max_cor + 1 ); //:---://\n"
"                TOR_I_Y=( diagpix +           0 ); //:---://\n"
"            }else                                  //:---://\n"
"            if( 2 == lay_dex ){                    //:---://\n"
"                TOR_I_X=( diagpix +           0 ); //:---://\n"
"                TOR_I_Y=( diagpix + max_cor + 1 ); //:---://\n"
"            }else{                                 //:---://\n"
"                                                   //:---://\n"
"                ERR(E_S( BAD_lay_dex_YEAR_2021 )); //:---://\n"
"                                                   //:---://\n"
"            };;                                    //:---://\n"
"                                                   //:---://\n"
"            #undef  TOR_I_X                        //:---://\n"
"            #undef  TOR_I_Y                        //:---://\n"
"            //:===================:CORE_LOGIC_OF_FUNCTION://\n"
"            //:coarse_range_check:-----------------------://\n"
"                                                   //:---://\n"
"            assert( p5d_tor.loc_t_x >= 0 );        //:---://\n"
"            assert( p5d_tor.loc_t_y >= 0 );        //:---://\n"
"            assert( p5d_tor.loc_t_x <=( 512 -1 ) );//:---://\n"
"            assert( p5d_tor.loc_t_y <=( 512 -1 ) );//:---://\n"
"                                                   //:---://\n"
"            //:-----------------------:coarse_range_check://\n"
"            //:Error_If_On_Config_Pixel:-----------------://\n"
"            if(                                    //:---://\n"
"                (                                  //:---://\n"
"                    (256-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (256-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"                ||                                 //:---://\n"
"                (                                  //:---://\n"
"                    (512-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (256-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"                ||                                 //:---://\n"
"                (                                  //:---://\n"
"                    (256-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (512-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"                ||                                 //:---://\n"
"                (                                  //:---://\n"
"                    (512-1) == p5d_tor.loc_t_x     //:---://\n"
"                &&  (512-1) == p5d_tor.loc_t_y     //:---://\n"
"                )                                  //:---://\n"
"            ){                                     //:---://\n"
"                /** *********************** ***    //:---://\n"
"                Configuration pixel is NEVER       //:---://\n"
"                valid data storage location.       //:---://\n"
"                @VID_IID[ 0112 ]T[ 02:30:42 ]      //:---://\n"
"                *** *********************** **/    //:---://\n"
"                ERR(E_S( ONN_CFG_PIX_2021 ));      //:---://\n"
"            };;                                    //:---://\n"
"            //:-----------------:Error_If_On_Config_Pixel://\n"
"                                                   //:---://\n"
"            return( p5d_tor );                     //:---://\n"
"        }                                          //:---://\n"
"                                                   //:---://\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        /** ******************************************** **/\n"
"        /** @VID_IID[ 0105 ]TIME[ 04:41:40 ]         *** **/\n"
"        /** This code only exists to test the        *** **/\n"
"        /** getter function                          *** **/\n"
"        /** AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get  *** **/\n"
"        /**                                          *** **/\n"
"        /** We cannot[ PUT ]pixels within GLSL       *** **/\n"
"        /** shader code. Hence the gaurd used to     *** **/\n"
"        /** omit this code when compiled as GLSL     *** **/\n"
"        /** fragment shader.                         *** **/\n"
"        /** @VID_IID[ 0105 ]TIME[ 04:43:42]EXPLAINED *** **/\n"
"        /** ******************************************** **/\n"
"        void                                             ///\n"
"        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Put(         ///\n"
"                                                         ///\n"
"            //|LOCATION_OF_THE_DATA|||||||||||||||||||||||//\n"
"            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///\n"
"        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///\n"
"                                                         ///\n"
"            //|VALUES_OF_THE_DATA|||||||||||||||||||||||||//\n"
"        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///\n"
"        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///\n"
"        ,   U32 cuvbits_cuv_b16  //:STORES_8_TILE_VALUES ///\n"
"                                                         ///\n"
"        )                                                ///\n"
"        {                                                ///\n"
"        #define I_X cuv_i_x_000_255  //:------------: 01 ://\n"
"        #define I_Y cuv_i_y_000_255  //:------------: 02 ://\n"
"        #define LAY lay_dex_000_002  //:------------: 03 ://\n"
"        #define AUS aus_dex_000_015  //:------------: 04 ://\n"
"        #define B16 cuvbits_cuv_b16  //:------------: 05 ://\n"
"        //:declare_variables:----------------------------://\n"
"                                                   //:---://\n"
"            /** **************************************** ***\n"
"            Which SubTile Graphic Are You Drawing On?    ///\n"
"            There are four of them. This is the          ///\n"
"            origin pixel of the quadrant targeted.       ///\n"
"            *** **************************************** **/\n"
"                                                   //:---://\n"
"            I32 til_qua_q_x; //:QUADRANT                 ://\n"
"            I32 til_qua_q_y; //:                         ://\n"
"                             //:                         ://\n"
"            I32 til_qua_o_x; //:ORIGIN                   ://\n"
"            I32 til_qua_o_y; //:                         ://\n"
"                             //:                         ://\n"
"            I32     til_qua; //:1D_INDEX_VERSION         ://\n"
"                             //:@VID_IID[0105]T[6:51:10] ://\n"
"                             //:                         ://\n"
"            I32     peb_t_x; //:PEBBLE_TILE_X            ://\n"
"            I32     peb_t_y; //:PEBBLE_TILE_Y            ://\n"
"                             //:                         ://\n"
"            I32     loc_t_x; //:LOCAL_TILE[ X | Y ]COORD ://\n"
"            I32     loc_t_y; //:@VID_IID[0105]T[6:38:00] ://\n"
"                                                          //\n"
"            I32         t_e; //:til_exp( TileSizeExponent://\n"
"                                                          //\n"
"            I32     max_cor; //:maximum_local_tile_coord ://\n"
"                                                          //\n"
"            I32     til_peb; //:TILe_(size_in)_PEBbles   ://\n"
"                             //:@VID_IID[0105]T[7:26:00] ://\n"
"                                                          //\n"
"            //:UNSIGNED!!!!                               //\n"
"            U32     til_val; //:two_bit_tile_value_to_set://\n"
"            //:UNSIGNED!!!!                               //\n"
"                                                          //\n"
"        //- P5D_TOR p5d_tor;    Paint5D_TileORigin       -//\n"
"                             //:Origin_On_The_Texture    ://\n"
"                             //:Memory_Storing_Data      ://\n"
"                                                          //\n"
"        //:----------------------------:declare_variables://\n"
"                                                          //\n"
"            /** @VID_IID[ 0105 ]TIME[ 03:40:00 ] ******* **/\n"
"            /** cuvbits_cuv_b16 specifies               ]**/\n"
"            /** all the different tile values           ]**/\n"
"            /** at a canvas_user_view location          ]**/\n"
"            /** and layer specified by[ lay_dex_000_002 ]**/\n"
"            /** **************************************** **/    \n"
"                                                          //\n"
"            til_qua_q_x=( I_X / 128 );                    //\n"
"            til_qua_q_y=( I_Y / 128 );                    //\n"
"            ASS( til_qua_q_x >= 0 && til_qua_q_x <= 1 );  //\n"
"            ASS( til_qua_q_y >= 0 && til_qua_q_y <= 1 );  //\n"
"                                                          //\n"
"            til_qua_o_x=( til_qua_q_x * 128 );            //\n"
"            til_qua_o_y=( til_qua_q_y * 128 );            //\n"
"            ASS( til_qua_o_x >= 0 && til_qua_o_x <= 128 );//\n"
"            ASS( til_qua_o_y >= 0 && til_qua_o_y <= 128 );//\n"
"                                                          //\n"
"            peb_t_x=( cuv_i_x_000_255 -( til_qua_o_x ) ); //\n"
"            peb_t_y=( cuv_i_y_000_255 -( til_qua_o_y ) ); //\n"
"                                                          //\n"
"            /** xy to index formula for 2x2 cell grid **/ //\n"
"            til_qua =(   til_qua_q_x +                    //\n"
"                       ( til_qua_q_y  *  2 ) );;          //\n"
"            assert( til_qua >= 0 && til_qua <=(4-1) );    //\n"
"                                                          //\n"
"            //:set_all_8_tiles:--------------------------://\n"
"            #define TIL_EXP t_e                           //\n"
"            for( t_e = 0 ; t_e <=(8-1) ; t_e ++ ){        //\n"
"                                                          //\n"
"                //|  Get Origin Of Block Of Memory ..... |//\n"
"                //|  For the Current Tile Value    ..... |//\n"
"                //|  That Is Being Laid            ..... |//\n"
"                //-  p5d_tor=(                           -//\n"
"                //-  til_exp_AND_lay_dex_CTO_p5d_tor(    -//\n"
"                //-  /**/    TIL_EXP                     -//\n"
"                //-  ,       lay_dex_000_002             -//\n"
"                //-  ));;                                -//\n"
"                                                          //\n"
"                /** Convert[ I_X , I_Y ] coords into   ..**/\n"
"                /** Local To Data Parition Coordinates ..**/\n"
"                                                          //\n"
"                til_peb=(                                 //\n"
"                    AAC2020_P5D1OGL_til_exp_CTO_til_peb(  //\n"
"                                    TIL_EXP ));           //\n"
"                ASS( til_peb >= 0 && til_peb <= 128 );    //\n"
"                                                          //\n"
"                     loc_t_x=( peb_t_x / til_peb );       //\n"
"                     loc_t_y=( peb_t_y / til_peb );       //\n"
"                ASS( loc_t_x >= 0 && loc_t_x <=(128-1));  //\n"
"                ASS( loc_t_y >= 0 && loc_t_y <=(128-1));  //\n"
"                                                          //\n"
"                //:local_tile_exact_bounds_check:--------://\n"
"                                                          //\n"
"                    max_cor=(                             //\n"
"                    AAC2020_P5D1OGL_til_exp_CTO_max_cor(  //\n"
"                                    TIL_EXP ));;          //\n"
"                                                          //\n"
"                    if( loc_t_x > max_cor                 //\n"
"                    ||  loc_t_y > max_cor                 //\n"
"                    ){                                    //\n"
"                        ERR(E_S( LOC_TXY_OOB_2021 ));     //\n"
"                    };;                                   //\n"
"                                                          //\n"
"                //:--------:local_tile_exact_bounds_check://\n"
"                                                          //\n"
"                til_val =(                                //\n"
"                    ( cuvbits_cuv_b16 >> (t_e*2) )        //\n"
"                    &( BIN_011 ) //:<--2BitMask           //\n"
"                );;                                       //\n"
"                assert( til_val <= 3 );                   //\n"
"                                                          //\n"
"                /** All Values Are U08 Here           **/ //\n"
"                /** But that's okay because were are  **/ //\n"
"                /** NOT compiling as OPENGL code here **/ //\n"
"                AAC2020_PAINT5D_Put(                      //\n"
"                    (U08)til_qua //:[til_qua | t_q      ]://\n"
"                ,   (U08)TIL_EXP //:[til_exp | t_e      ]://\n"
"                ,   (U08)LAY     //:[til_lay | t_l | lay]://\n"
"                ,   (U08)loc_t_x //:[loc_t_x | t_x      ]://\n"
"                ,   (U08)loc_t_y //:[loc_t_y | t_y      ]://\n"
"                ,   (U08)AUS     //:[aus_dex | a_d      ]://\n"
"                ,   (U08)til_val //:[til_val | t_v      ]://\n"
"                );;                                       //\n"
"            };;                                           //\n"
"            #undef  TIL_EXP                               //\n"
"            //:--------------------------:set_all_8_tiles://\n"
"                                                          //\n"
"        #undef  I_X  //:----------------------------: 01 ://\n"
"        #undef  I_Y  //:----------------------------: 02 ://\n"
"        #undef  LAY  //:----------------------------: 03 ://\n"
"        #undef  AUS  //:----------------------------: 04 ://\n"
"        #undef  B16  //:----------------------------: 05 ://\n"
"        }                                                 //\n"
"                                                          //\n"
"    #undef  P5D_TOR                               //: 01 ://\n"
"    #undef      U08                               //: 02 ://\n"
"    #endif  //:#AAC2020_MACRO_THIS_IS_OPEN_GL     ::: ## ://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"    //://////////////////////////////////////////////////://\n"
"                                                          //\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        U32                                              ///\n"
"        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get(         ///\n"
"                                                         ///\n"
"            /** FUNCTION_WRITTEN_ON[ 2021_01_18 ]  **/   ///\n"
"            /**    VID_IID[ 0097 ]                 **/   ///\n"
"            /**    TIME[ 00:00:00 ]TO[ 06:02:20 ]  **/   ///\n"
"                                                         ///\n"
"            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///\n"
"        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///\n"
"        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///\n"
"        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///\n"
"        ){                                               ///\n"
"        #define C_X cuv_i_x_000_255               //: 01 ://\n"
"        #define C_Y cuv_i_y_000_255               //: 02 ://\n"
"        #define T_L lay_dex_000_002               //: 03 ://\n"
"        #define A_D aus_dex_000_015               //: 04 ://\n"
"        #define ETO_m_c AAC2020_P5D1OGL_til_exp_CTO_max_cor\n"
"        #define ETO_s_a AAC2020_P5D1OGL_til_exp_CTO_squ_ash\n"
"            //:input_checks:- - - - - - - - - - - - - - -://\n"
"                                                     //:i://\n"
"                ASS( cuv_i_x_000_255 >=  (  0  )  ); //:i://\n"
"                ASS( cuv_i_y_000_255 >=  (  0  )  ); //:i://\n"
"                ASS( lay_dex_000_002 >=  (  0  )  ); //:i://\n"
"                ASS( aus_dex_000_015 >=  (  0  )  ); //:i://\n"
"                                                     //:i://\n"
"                ASS( cuv_i_x_000_255 <=  (256-1)  ); //:i://\n"
"                ASS( cuv_i_y_000_255 <=  (256-1)  ); //:i://\n"
"                ASS( lay_dex_000_002 <=    (3-1)  ); //:i://\n"
"                ASS( aus_dex_000_015 <=   (16-1)  ); //:i://\n"
"                                                     //:i://\n"
"            //:- - - - - - - - - - - - - - -:input_checks://\n"
"            //:var__declare:- - - - - - - - - - - - - - -://\n"
"                                                          //\n"
"                //:UNSIGNED_FOR_BIT_PACKING:-------------://\n"
"                                                          //\n"
"                /** Canvas_User_View:BITS  **/            //\n"
"                U32 cuvbits =( U00 /** 0x00 **/ );        //\n"
"                                                          //\n"
"                U32     t_v; /** [ t_v / til_val ] **/    //\n"
"                                                          //\n"
"                //:-------------:UNSIGNED_FOR_BIT_PACKING://\n"
"                //:EVERYTHING_ELSE:----------------------://\n"
"                                                      //////\n"
"                /// glocpix not needed,               //////\n"
"                /// AAC2020_P5D1OGL_Get function      //////\n"
"                ///  handles calculation of that.     //////\n"
"                /// glocpix; /** GLObal Coord PIXels  ...**/\n"
"                             /** Data View Coordinate ...**/\n"
"                                                      //////\n"
"            //  IV2 til_qua; /** Tile Quadrant ..........**/\n"
"                I32 qua_c_x; /** Tile Quadrant: cell x   **/\n"
"                I32 qua_c_y; /** Tile Quadrant: cell y   **/\n"
"                                                      //////\n"
"                I32 nos_t_x; /** NO_Squash(nos)TileX(t_x)**/\n"
"                I32 nos_t_y; /** NO_Squash(nos)TileY(t_y)**/\n"
"                                                      //////\n"
"                I32     t_x; /** Final Local Tile [X|Y]  **/\n"
"                I32     t_y; /** AKA[ loc_t_x | loc_t_y ]**/\n"
"                                                      //////\n"
"                I32     s_a; /** Squash Amount (squ_ash) **/\n"
"                                                      //////\n"
"                I32     t_q; /** TileQuadrant / til_qua  **/\n"
"                I32     t_e; /** TileExponent / til_exp  **/\n"
"                I32     m_c; /** MaximumCoord / max_cor  **/\n"
"                                                      //////\n"
"                //:----------------------:EVERYTHING_ELSE://\n"
"                                                      //////\n"
"            //:- - - - - - - - - - - - - - -:var__declare://\n"
"                                                      //////\n"
"            //: til_qua ==( [ cuv_i_x && cuv_i_y ] / 128 )\n"
"            qua_c_x =( C_X / 128 );                   //////\n"
"            qua_c_y =( C_Y / 128 );                   //////\n"
"            ASS( qua_c_x >= 0 && qua_c_x <= 1 );      //////\n"
"            ASS( qua_c_y >= 0 && qua_c_y <= 1 );      //////\n"
"                                                      //////\n"
"            /** @VID_IID[ 0098 ]TIME[ 05:32:00 ] **/  //////\n"
"            /** Fixed xy-to-index math here.     **/  //////\n"
"            t_q = qua_c_x + ( qua_c_y  *  2  );       //////\n"
"            ASS( t_q >= 0 && t_q <= (4-1) );          //////\n"
"                                                      //////\n"
"            /** NOS: NOt_Squashed ............ **/    //////\n"
"            /** nos_t_x : Not squashed loc_t_x **/    //////\n"
"            /** nos_t_y : Not squashed loc_t_y **/    //////\n"
"            nos_t_x = C_X -( qua_c_x * 128 );         //////\n"
"            nos_t_y = C_Y -( qua_c_y * 128 );         //////\n"
"                                                      //////\n"
"            /** t_e     == til_exp            **/     //////\n"
"            /** til_exp == TILe_size_EXPonent **/     //////\n"
"            for( t_e = 0 ; t_e <=( 8 - 1 ) ; t_e ++ ){   ///\n"
"                                                         ///\n"
"                /** m_c == max_cor  **/                  ///\n"
"                /** Max Coord Index **/                  ///\n"
"                m_c = ETO_m_c(  t_e  );                  ///\n"
"                s_a = ETO_s_a(  t_e  );                  ///\n"
"                                                         ///\n"
"                t_x = nos_t_x / s_a ;                    ///\n"
"                t_y = nos_t_y / s_a ;                    ///\n"
"                                                         ///\n"
"                /**  t_y === loc_t_y ( PAINT5D.D._ ).....**/\n"
"                /**  t_x === loc_t_x ( #_DIA_DAL_# ).....**/\n"
"                ASS( t_x >= 0 && t_x <= m_c );           ///\n"
"                ASS( t_y >= 0 && t_y <= m_c );           ///\n"
"                                                         ///\n"
"                //:BINARY PACKED TILE VALUES (til_val)   ://\n"
"                //:      BIN[ 00 ] ==> DEC[ 0 ]          ://\n"
"                //:      BIN[ 01 ] ==> DEC[ 1 ]          ://\n"
"                //:      BIN[ 10 ] ==> DEC[ 2 ]          ://\n"
"                //:      BIN[ 11 ] ==> DEC[ 3 ]          ://\n"
"                t_v=(                                    ///\n"
"                    AAC2020_P5D1OGL_Get(                 ///\n"
"                        t_q    //: I32 [ til_qua / t_q ] ://                         \n"
"                    ,   t_e    //: I32 [ til_exp / t_e ] ://                        \n"
"                    ,   T_L    //: I32 [ til_lay / t_l ] ://                        \n"
"                    ,   t_x    //: I32 [ loc_t_x / t_x ] ://                        \n"
"                    ,   t_y    //: I32 [ loc_t_y / t_y ] ://                        \n"
"                    ,   A_D    //: I32 [ aus_dex / a_d ] ://                        \n"
"                    ));;                                 ///\n"
"                                                         ///\n"
"                ASS( t_v <= U03 /** AKA: uint(4-1) **/ );///\n"
"                ASS( t_v == ( BIN_011 & t_v) );          ///\n"
"                cuvbits=(                                ///\n"
"                cuvbits |                                ///\n"
"                    (                                    ///\n"
"                        /** 2 bits per tile value. **/   ///\n"
"                        /** Position based on it's **/   ///\n"
"                        /** tile exponent (t_e)    **/   ///\n"
"                        t_v <<( t_e * 2 )                ///\n"
"                    )                                    ///\n"
"                );;                                      ///\n"
"            };;                                          ///\n"
"                                                         ///\n"
"            return( cuvbits );                           ///\n"
"                                                         ///\n"
"        #undef          C_X //:---------------------: 01 ://\n"
"        #undef          C_Y //:---------------------: 02 ://\n"
"        #undef          T_L //:---------------------: 03 ://\n"
"        #undef          A_D //:---------------------: 04 ://\n"
"        #undef      ETO_m_c //:---------------------: 05 ://\n"
"        #undef      ETO_s_a //:---------------------: 06 ://\n"
"        }                                                ///\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"        F32\n"
"        P5D1OGL_GET_res_wid( void )\n"
"        {\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                return( iResolution.x );\n"
"            #else\n"
"                return( AAC2020_CPUNIFO_iResolution_wid );\n"
"            #endif\n"
"        }\n"
"        F32\n"
"        P5D1OGL_GET_res_hig( void )\n"
"        {\n"
"            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                return( iResolution.y );\n"
"            #else\n"
"                return( AAC2020_CPUNIFO_iResolution_hig );\n"
"            #endif\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://   \n"
"        RET_MAIN\n"
"        FUN_MAIN( \n"
"                       TYP_F_C          INN_F_C\n"
"        //[ GLSL:|     NOTHING     |    NOTHING   - - - -]//\n"
"        //[  C99:|  struct FV4     |    F_C       - - - -]//\n"
"        ){\n"
"            /** @VID_IID[ 0093 ]TIME[ 00:21:10 ] **/\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                FV4 FragColor; /** <-- C99 Code  **/\n"
"            //: R_Y AAC2020_POLYOGL_R_Y_Get()\n"
"                #define R_Y 512.0\n"
"            #else\n"
"                #define R_Y iResolution.y\n"
"                /** HELLO_WORLD **/\n"
"            #endif\n"
"            I32 cuv_i_x =MAK_I32( F_C.x - 0.5 );\n"
"            I32 cuv_i_y =MAK_I32( \n"
"                (\n"
"                    (P5D1OGL_GET_res_hig()   - 1.0 )\n"
"                   -(                F_C.y         ) \n"
"                )-0.5 \n"
"            );;\n"
"            if( cuv_i_x == 0 ){ /** NOOP **/ };\n"
"            if( cuv_i_y == 0 ){ /** NOPP **/ };\n"
"    ////    UV4 uv4_p5d=(\n"
"    ////        T_F( P5D , MAK_IV2(cuv_i_x,cuv_i_y),0 ));;\n"
"            U32 aus_dex_u32;\n"
"            I32 aus_dex; //:<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< GET RID OF DEFINE HARD CODES\n"
"            aus_dex_u32 = AAC2020_P5D1OGL_TAUDEPO_Get_U32(\n"
"                15 //:tau: TAU_015 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< THESE HARD CODED DEFINE VALUES\n"
"            ,    1 //:sub: PAINT5D <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< THESE HARD CODED DEFINE VALUES\n"
"            ,    8 //:var: P5D_A_D <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< THESE HARD CODED DEFINE VALUES\n"
"            );;\n"
"            aus_dex=( MAK_I32( aus_dex_u32 ) );\n"
"            U32 u32_l_0=(\n"
"            AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( \n"
"                cuv_i_x  //:AKA[ cuvipix.i_x ]   ///\n"
"            ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///\n"
"            ,         0  //:AKA[ lay_dex ]       ///\n"
"            ,   aus_dex  //:AKA[ aus_dex ]       ///   \n"
"            ));;////////////////////////////////////\n"
"            U32 u32_l_1=(\n"
"            AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( \n"
"                cuv_i_x  //:AKA[ cuvipix.i_x ]   ///\n"
"            ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///\n"
"            ,         1  //:AKA[ lay_dex ]       ///\n"
"            ,   aus_dex  //:AKA[ aus_dex ]       ///   \n"
"            ));;////////////////////////////////////\n"
"            U32 u32_l_2=(\n"
"            AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( \n"
"                cuv_i_x  //:AKA[ cuvipix.i_x ]   ///\n"
"            ,   cuv_i_y  //:AKA[ cuvipix.i_y ]   ///\n"
"            ,         2  //:AKA[ lay_dex ]       ///\n"
"            ,   aus_dex  //:AKA[ aus_dex ]       ///   \n"
"            ));;////////////////////////////////////\n"
"            /** @VID_IID[ 0118 ]TIME[ 00:18:23 ]    **/\n"
"            /** This operation is nonsense. Just a  **/\n"
"            /** placeholder piece of logic for now. **/\n"
"    ////    U32 u32_pix=( U00  \n"
"    ////    |   ( u32_l_0 << 24 )\n"
"    ////    |   ( u32_l_1 << 16 )\n"
"    ////    |   ( u32_l_2 <<  8 )\n"
"    ////    |   (     UFF <<  0 )\n"
"    ////    );;\n"
"            U32 u32_pix =( U00 |\n"
"                ((( U00 \n"
"                  + ((( u32_l_0 >> 0 ) & B11) * H55)\n"
"                  + ((( u32_l_0 >> 2 ) & B11) * H55)\n"
"                  + ((( u32_l_0 >> 4 ) & B11) * H55)\n"
"                  + ((( u32_l_0 >> 6 ) & B11) * H55)\n"
"                  + ((( u32_l_0 >> 8 ) & B11) * H55)\n"
"                  + ((( u32_l_0 >>10 ) & B11) * H55)\n"
"                  + ((( u32_l_0 >>12 ) & B11) * H55)\n"
"                  + ((( u32_l_0 >>14 ) & B11) * H55)\n"
"                ) / MAK_U32( 8 ) ) \n"
"                << 24 )\n"
"            |\n"
"                ((( U00 \n"
"                  + ((( u32_l_1 >> 0 ) & B11) * H55)\n"
"                  + ((( u32_l_1 >> 2 ) & B11) * H55)\n"
"                  + ((( u32_l_1 >> 4 ) & B11) * H55)\n"
"                  + ((( u32_l_1 >> 6 ) & B11) * H55)\n"
"                  + ((( u32_l_1 >> 8 ) & B11) * H55)\n"
"                  + ((( u32_l_1 >>10 ) & B11) * H55)\n"
"                  + ((( u32_l_1 >>12 ) & B11) * H55)\n"
"                  + ((( u32_l_1 >>14 ) & B11) * H55)\n"
"                ) / MAK_U32( 8 ) )\n"
"                << 16 )\n"
"            |\n"
"                ((( U00 \n"
"                  + ((( u32_l_2 >> 0 ) & B11) * H55)\n"
"                  + ((( u32_l_2 >> 2 ) & B11) * H55)\n"
"                  + ((( u32_l_2 >> 4 ) & B11) * H55)\n"
"                  + ((( u32_l_2 >> 6 ) & B11) * H55)\n"
"                  + ((( u32_l_2 >> 8 ) & B11) * H55)\n"
"                  + ((( u32_l_2 >>10 ) & B11) * H55)\n"
"                  + ((( u32_l_2 >>12 ) & B11) * H55)\n"
"                  + ((( u32_l_2 >>14 ) & B11) * H55)\n"
"                ) / MAK_U32( 8 ) )\n"
"                << 8 )\n"
"            |\n"
"                ( UFF << 0 )\n"
"            );;\n"
"            UV4 uv4_pix;\n"
"            uv4_pix.x = ( u32_pix >> 24 ) & UFF ;\n"
"            uv4_pix.y = ( u32_pix >> 16 ) & UFF ;\n"
"            uv4_pix.z = ( u32_pix >>  8 ) & UFF ;\n"
"            uv4_pix.w = ( u32_pix >>  0 ) & UFF ;\n"
"            /** @VID_IID[ 0116 ]TIME[ 01:33:00 ] ******* **/\n"
"            /** MAKE SURE[ P ]key for[ pattern ]uploads  **/\n"
"            /** to GPU and we can SEE IT. Do this        **/\n"
"            /** BEFORE making more elaborate shader code.**/\n"
"            /** *******************************************/\n"
"            FragColor = MAK_FV4(\n"
"                MAK_F32( uv4_pix.x ) / 255.0\n"
"            ,   MAK_F32( uv4_pix.y ) / 255.0\n"
"            ,   MAK_F32( uv4_pix.z ) / 255.0\n"
"            ,   1.0 //:Alpha\n"
"            );;\n"
"            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL\n"
"                /** ************************** ***\n"
"                If [C99/C11] code, return the  \n"
"                fragment color here.  \n"
"                @VID_IID[ 0093 ]TIME[ 00:51:30 ]\n"
"                *** ************************** **/\n"
"                return( FragColor ); /**<-- C99**/\n"
"            #endif\n"
"        }\n"
"        //:- - - - - - - - - - - -- - - - - - - - - - - -://\n"
"    //:always_exists_error_string_macros:----------------://\n"
"                                                   //[ x ]//\n"
"        #undef  E_S_private                        //[ x ]//\n"
"        #undef  E_S                                //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:----------------:always_exists_error_string_macros://\n"
"    //:type_macros:--------------------------------------://\n"
"                                                   //[ x ]//\n"
"        #undef  F32      //:  01  ://              //[ x ]//\n"
"        #undef  U32      //:  02  ://              //[ x ]//\n"
"        #undef  I32      //:  03  ://              //[ x ]//\n"
"        #undef  IV2      //:  04  ://              //[ x ]//\n"
"        #undef  UV4      //:  05  ://              //[ x ]//\n"
"        #undef  T_F      //:  06  ://              //[ x ]//\n"
"        #undef  TAU      //:  07  ://              //[ x ]//\n"
"        #undef  P5D      //:  08  ://              //[ x ]//\n"
"        #undef  SAM      //:  09  ://              //[ x ]//\n"
"        #undef  UFF      //:  10  ://              //[ x ]//\n"
"        #undef  U00      //:  11  ://              //[ x ]//\n"
"        #undef  I00      //:  12  ://              //[ x ]//\n"
"        #undef  U03      //:  13  ://              //[ x ]//\n"
"        #undef  B_3      //:  14  ://              //[ x ]//\n"
"        #undef  B11      //:  15  ://              //[ x ]//\n"
"        #undef  H55      //:  16  ://              //[ x ]//\n"
"        #undef  V_A      //:  17  ://              //[ x ]//\n"
"        #undef  FV4      //:  18  ://              //[ x ]//\n"
"        #undef  ASS      //:  19  ://              //[ x ]//\n"
"        #undef  ERR      //:  20  ://              //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:--------------------------------------:type_macros://\n"
"    //:seven_letter_macros:------------------------------://\n"
"    /** @VID_IID[ 0093 ]TIME{ 00:31:40 ] *************** **/\n"
"    /** Decided on [MAK] for [MAKE] as our constructor   **/\n"
"    /** postfix ........................................ **/\n"
"                                                   //[ x ]//\n"
"        #undef  MAK_FV4                            //[ 1 ]//\n"
"        #undef  MAK_IV2                            //[ 2 ]//\n"
"        #undef  MAK_I32                            //[ 3 ]//\n"
"        #undef  MAK_F32                            //[ 4 ]//\n"
"        #undef  BIN_011                            //[ 5 ]//\n"
"        #undef  CUVIPIX                            //[ 6 ]//\n"
"        #undef  TYP_F_C                            //[ 7 ]//\n"
"        #undef  INN_F_C                            //[ 8 ]//\n"
"                                                   //[ x ]//\n"
"    //:------------------------------:seven_letter_macros://\n"
"    //:main_shim_macros:---------------------------------://\n"
"                                                   //[ x ]//\n"
"        #undef  RET_MAIN                           //[ x ]//\n"
"        #undef  FUN_MAIN                           //[ x ]//\n"
"                                                   //[ x ]//\n"
"    //:---------------------------------:main_shim_macros://\n"
"    //:===========:P5D_001____AAC2020_PAINT5D_DEFAULT_001://  \n"
"    //[=====================:PASTE_INTO_FILE[ P5D_001._ ]]//\n"
"    //[======================:AAC2020_PAINT5D_DEFAULT_001]//\n"
"    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//\n"
