
    //:TODO: REWORK THIS CODE INTO NEW SHADER

    //[CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE:==============]//
    //[AAC2020_PAINT5D_DEFAULT_001:======================]//
    //[PASTE_INTO_FILE[ P5D_001._ ]:=====================]//
    //:P5D_001____AAC2020_PAINT5D_DEFAULT_001:===========://
    //|SIM:Shim_Ifdef_Macros:|||||||||||||||||||||||||||||//
    //:main_shim_macros:---------------------------------://
    #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL           //:   ://
                                                   //:   ://
        #define TYP_F_C /** nothing **/            //:   ://
        #define INN_F_C /** nothing **/            //:   ://        
                                                   //:   ://
        #define RET_MAIN void /** <-- GLSL**/      //:   ://
        #define FUN_MAIN main /** <-- GLSL**/      //:   ://
                                                   //:   ://
        #define ERR           /** NOTHING **/      //:   ://
                                                   //:   ://
    #else                                          //:   ://
                                                   //:   ://
        #define TYP_F_C struct AAC2020_POLYOGL_FV4 //:   ://
        #define INN_F_C F_C                        //:   ://                
                                                   //:   ://
        #define RET_MAIN FV4 /** <-- [C99/C11]**/  //:   ://
        #define FUN_MAIN AAC2020_GPUVIEW_Main      //:   ://
                                                   //:   ://
        #define ERR   aac2020_gpuview_Halt         //:   ://
                                                   //:   ://
    #endif                                         //:   ://
    //:---------------------------------:main_shim_macros://
    //||||||||||||||||||||||||||||||SIM:Shim_Ifdef_Macros|//

        IV2 //:<-- OUT[ d_x , d_y ]                //: m ://
        GPUVIEW_rec_src_MAP_rec_dst(               //: m ://
            I32 s_x                                //: m ://
        ,   I32 s_y                                //: m ://
                                                   //: m ://
        ,   I32 sx0  //:rec_src: BOUND_LEF         //: m ://
        ,   I32 sy0  //:rec_src: BOUND_RIG         //: m ://
        ,   I32 sx1  //:rec_src: BOUND_TOP         //: m ://
        ,   I32 sy1  //:rec_src: BOUND_BOT         //: m ://
                                                   //: m ://
        ,   I32 dx0  //:rec_dst: BOUND_LEF         //: m ://
        ,   I32 dy0  //:rec_dst: BOUND_RIG         //: m ://
        ,   I32 dx1  //:rec_dst: BOUND_TOP         //: m ://
        ,   I32 dy1  //:rec_dst: BOUND_BOT         //: m ://
        )                                          //: m ://
        {                                          //: m ://
            //:#_FUCK_THIS_REMAPPING_FORMULA_REMOVED_# m ://
                                                   //: m ://
            F32 SX0 = MAK_F32( sx0 );              //: m ://
            F32 SX1 = MAK_F32( sx1 );              //: m ://
            F32 SY0 = MAK_F32( sy0 );              //: m ://
            F32 SY1 = MAK_F32( sy1 );              //: m ://
                                                   //: m ://
            F32 DX0 = MAK_F32( dx0 );              //: m ://
            F32 DX1 = MAK_F32( dx1 );              //: m ://
            F32 DY0 = MAK_F32( dy0 );              //: m ://
            F32 DY1 = MAK_F32( dy1 );              //: m ://
                                                   //: m ://
            F32 S_X = MAK_F32( s_x );              //: m ://
            F32 S_Y = MAK_F32( s_y );              //: m ://
                                                   //: m ://
            I32 d_x ; //:DEST:X                    //: m ://
            I32 d_y ; //:DEST:Y                    //: m ://
                                                   //: m ://
                                                   //: m ://
            //:Use_Percent_Along_Path_Remapping:---------://
                                                   //: m ://
                //: 3 == number of[ iths ]         //: m ://
                //: 0/3  1/3   2/3  3/3            //: m ://
                //: [0][1][2][3]                   //: m ://
                //: |<-- 4 --->|                   //: m ://
                                                   //: m ://
                if( 0.0 == (SX1-SX0) ){            //: m ://
                    //: [0][1]  [2]   [3][4]       //: m ://
                    //:|<------- 5 -------->|      //: m ://
                    d_x = MAK_I32( DX0 + ((DX1-DX0)/2.0 ) );
                    //:Arbitrarily pick center because   ://
                    //:cannot figure out where you are   ://
                    //:relatively when viewport is 1x1   ://
                    //: pixel in size.                   ://
                }else{                             //: m ://
                    d_x=MAK_I32(                   //: m ://
                    DX0 +                          //: m ://
                    (                              //: m ://
                        ( //:Input % along path:   //: m ://
                            (S_X-SX0) / (SX1-SX0)  //: m ://
                        )                          //: m ://
                        *                          //: m ://
                        ( //:Max possible zeroed out   //://
                          //:coord in the destination. //://
                            1.0 * ( DX1 - DX0 )        //://
                        )                              //://
                    ));;                               //://
                                                       //://
                };;                                    //://
                if( 0.0 == (SY1-SY0) ){                //://
                    d_y = MAK_I32( DY0 + ((DY1-DY0)/2.0) );
                }else{                                 //://
                    d_y=MAK_I32(                       //://
                    DY0 +                              //://
                    (                                  //://
                        ( //:Input percent along path:   ://
                            (S_Y-SY0) / (SY1-SY0)      //://
                        )                              //://
                        *                              //://
                        ( //:Max possible zeroed out   //://
                          //:coord in the destination. //://
                            1.0 * ( DY1 - DY0 )        //://
                        )                              //://
                    ));;                               //://
                };;                                    //://
            //:---------:Use_Percent_Along_Path_Remapping://

            IV2     rec_dst;
                    rec_dst.x =( d_x );
                    rec_dst.y =( d_y );
            return( rec_dst );
        }

        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        F32
        GPUVIEW_GET_res_wid( void )
        {
            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL
                return( iResolution.x );
            #else
                return( AAC2020_CPUNIFO_iResolution_wid );
            #endif
        }
        F32
        GPUVIEW_GET_res_hig( void )
        {
            #ifdef AAC2020_MACRO_THIS_IS_OPEN_GL
                return( iResolution.y );
            #else
                return( AAC2020_CPUNIFO_iResolution_hig );
            #endif
        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://   
        RET_MAIN
        FUN_MAIN( 
                       TYP_F_C          INN_F_C
        //[ GLSL:|     NOTHING     |    NOTHING   - - - -]//
        //[  C99:|  struct FV4     |    F_C       - - - -]//
        ){
             
            /** @VID_IID[ 0093 ]TIME[ 00:21:10 ] **/
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL
                FV4 FragColor; /** <-- C99 Code  **/
            //: R_Y AAC2020_POLYOGL_R_Y_Get()
                #define R_Y 512.0
            #else
                #define R_Y iResolution.y
                /** HELLO_WORLD **/
            #endif

            I32 cuv_i_x =MAK_I32( F_C.x - 0.5 );
            I32 cuv_i_y =MAK_I32( 
                (
                    (GPUVIEW_GET_res_hig()   - 1.0 )
                   -(                F_C.y   - 0.5 ) 
                ) 
            );;
            if( cuv_i_x == 0 ){ /** NOOP **/ };
            if( cuv_i_y == 0 ){ /** NOPP **/ };

            //:Texel fetch whatever texture is in focus.
            UV4 uv4_tex;

            if( cuv_i_x > (512-1) || cuv_i_y > (512-1) ){
                /** Out Of Bounds **/

                uv4_tex.x =MAK_U32( 255 ); //:RED
                uv4_tex.y =MAK_U32(   0 ); //:GREEN
                uv4_tex.z =MAK_U32( 128 ); //:BLUE
                uv4_tex.w =MAK_U32( 255 ); //:ALPHA
            }else{
            #define MACRO_PAINT5D_MEMORY ( 1 )
            #define MACRO_UIRECTS_MEMORY ( 2 )

                I32 mem_mac =( 2 );

                I32 tau_c_x =( 0 ) ; /** TAU_CELL_X 01 **/
                I32 tau_c_y =( 0 ) ; /** TAU_CELL_Y 02 **/
                I32 sub_c_x =( 0 ) ; /** SUB_CELL_X 03 **/
                I32 sub_c_y =( 0 ) ; /** SUB_CELL_Y 04 **/

                if( MACRO_PAINT5D_MEMORY == mem_mac ){

                    tau_c_x =( 3 ) ; /** TAU_CELL_X 01 **/
                    tau_c_y =( 3 ) ; /** TAU_CELL_Y 02 **/
                    sub_c_x =( 1 ) ; /** SUB_CELL_X 03 **/
                    sub_c_y =( 0 ) ; /** SUB_CELL_Y 04 **/

                }else
                if( MACRO_UIRECTS_MEMORY == mem_mac ){

                    tau_c_x =( 0 ) ; /** TAU_CELL_X 01 **/
                    tau_c_y =( 0 ) ; /** TAU_CELL_Y 02 **/
                    sub_c_x =( 1 ) ; /** SUB_CELL_X 03 **/
                    sub_c_y =( 0 ) ; /** SUB_CELL_Y 04 **/

                };;

                /** Inside 512x512 user view area. **/

                /** Global coordinate space selection **/
                /** rectangle to zoom into.           **/
                I32 x_0 =( 0
                         +( 128 * tau_c_x )
                         +(  32 * sub_c_x )
                         +(     0         )
                );;
                I32 x_1 =( 0
                         +( 128 * tau_c_x )
                         +(  32 * sub_c_x )
                         +(    31         )
                );;
                             
                I32 y_0 =( 0
                         +( 128 * tau_c_y )
                         +(  32 * sub_c_y )
                         +(     0         )
                );;
                I32 y_1 =( 0
                         +( 128 * tau_c_y )
                         +(  32 * sub_c_y )
                         +(     31        )
                );;

                if( MACRO_PAINT5D_MEMORY == mem_mac  ){
                    /** @_PAIRED_COMMENT_@ ............. **/
                    /** @VID_IID[ 0136 ]TIME[ 00:53:23 ] **/    
                    /** #_PARCOM_2021_GPUVIEW_ASSERTS_#  **/
                    ASS( 416 == x_0 );                /****/
                    ASS( 384 == y_0 );                /****/
                    ASS( 447 == x_1 );                /****/
                    ASS( 415 == y_1 );                /****/
                    ASS( 32  == ( x_1 - x_0 + 1 ) );  /****/
                    ASS( 32  == ( y_1 - y_0 + 1 ) );  /****/
                };;

                IV2 glo; /** glo is for global. **/
        
                #define MAX ( 512 - 1) 
                glo =(
                AAC2020_FRAGCOM_big_MAP_lit(
             //:AAC2020_FRAGCOM_rec_src_MAP_rec_dst 
                        cuv_i_x
                       ,cuv_i_y
                       ,  0,  0,MAX,MAX //:BOUNDS:SRC_PIXEL
                       ,x_0,y_0,x_1,y_1 //:BOUNDS:DST_PIXEL
                     //:LOW_LOW|HIG_HIG://
                ));;
                #undef  MAX

                /// glo.x =( cuv_i_x );  //:<------TEMP
                /// glo.y =( cuv_i_y );  //:<------TEMP

                I32 g_x = glo.x;
                I32 g_y = glo.y;

                uv4_tex=( /** Zoom in on Paint5D Variables **/
                T_F( TAU , MAK_IV2( g_x , g_y ),0 ));;
               
                //: uv4_tex=( /** No Zoom, Full Texture **/
                //: T_F( TAU , MAK_IV2(cuv_i_x,cuv_i_y),0 ));;

            #undef  MACRO_PAINT5D_MEMORY
            #undef  MACRO_UIRECTS_MEMORY
            };;

            #define MACRO_USE_DEBUG_TINTING (  0 ) //:#######://
            #if(    MACRO_USE_DEBUG_TINTING <= 0 ) //:#######://

                /** **************************************** **/
                /** @VID_IID[ 0182 ]TIME[ 06:40:23 ] ******* **/
                /** Show pixels as they actually are EXCEPT  **/
                /** alpha because if alpha is zero for all   **/
                /** we will just see black. ................ **/
                /** **************************************** **/

                FragColor = MAK_FV4(
                
                    MAK_F32( uv4_tex.x ) / 255.0 //:RED   == x
                ,   MAK_F32( uv4_tex.y ) / 255.0 //:GREEN == y
                ,   MAK_F32( uv4_tex.z ) / 255.0 //:BLUE  == z
                ,   MAK_F32(   HEX_0FF ) / 255.0 //:ALPHA == w
                );;

            #endif
            #if(    MACRO_USE_DEBUG_TINTING >= 1 ) //:#######://

                if( ( 1==1 )
                    && uv4_tex.x == MAK_U32(   0 )
                    && uv4_tex.y == MAK_U32(   0 )
                    && uv4_tex.z == MAK_U32(   0 )
                    && uv4_tex.w == MAK_U32(16-1 )
                ){
                #define M 255.0

                    FragColor = MAK_FV4(

                        MAK_F32( uv4_tex.w ) /M * 0.0//:RED
                    ,   MAK_F32( uv4_tex.w ) /M *16.0//:GREEN
                    ,   MAK_F32( uv4_tex.w ) /M * 0.0//:BLUE
                    ,                             1.0 //:ALPHA
                    );;
                #undef  M
                }else
                if( ( 1==1 )
                    && uv4_tex.x == MAK_U32( 0 )
                    && uv4_tex.y == MAK_U32( 0 )
                    && uv4_tex.z == MAK_U32( 0 )
                    && uv4_tex.w != MAK_U32( 0 )
                ){
                #define M 255.0

                    FragColor = MAK_FV4(

                        MAK_F32( uv4_tex.w ) /M * 4.0//:RED
                    ,   MAK_F32( uv4_tex.w ) /M * 8.0//:GREEN
                    ,   MAK_F32( uv4_tex.w ) /M *16.0//:BLUE
                    ,                             1.0 //:ALPHA
                    );;
                #undef  M
                }else{
                    FragColor = MAK_FV4(

                        MAK_F32( uv4_tex.x ) / 255.0 //:RED
                    ,   MAK_F32( uv4_tex.y ) / 255.0 //:GREEN
                    ,   MAK_F32( uv4_tex.z ) / 255.0 //:BLUE
                    ,   MAK_F32( uv4_tex.w ) / 255.0 //:ALPHA
                    );;
                };;

            #endif //:#######################################://
            #undef  MACRO_USE_DEBUG_TINTING //:##############://
            
            #ifndef AAC2020_MACRO_THIS_IS_OPEN_GL
                return( FragColor ); /**<-- C99**/
            #endif

        }
        //:- - - - - - - - - - - -- - - - - - - - - - - -://
        //:main_shim_macros:-----------------------------://
                                                    //:--://
            #undef  TYP_F_C                         //:--://
            #undef  INN_F_C                         //:--://
                                                    //:--://            
            #undef  RET_MAIN                        //:--://
            #undef  FUN_MAIN                        //:--://
                                                    //:--://
            #undef  ERR                             //:--://
        //:-----------------------------:main_shim_macros://
 
    //:===========:P5D_001____AAC2020_PAINT5D_DEFAULT_001://  
    //[=====================:PASTE_INTO_FILE[ P5D_001._ ]]//
    //[======================:AAC2020_PAINT5D_DEFAULT_001]//
    //[==============:CUT_AND_PASTE_THIS_INTO_GLSL_SOURCE]//