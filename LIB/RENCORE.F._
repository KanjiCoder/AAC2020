//:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION:=====================://
    void 
    aac2020_rencore_Halt( const char* msg_err )
    {
        printf("[FATAL_ERROR:aac2020_rencore]:%s\n", msg_err );
        fflush(stdout);
        exit( 189 );
    }
//:=====================:HALT_IS_TYPICALLY_THE_FIRST_FUNCTION://
//:LOG_AFTER_HALT:===========================================://
#define I32 int32_t /** GCC: <stdint.h> **/           //: 01 ://
#define CHR const char                                //: 02 ://
#define ERR aac2020_rencore_Halt                      //: 03 ://

    void
    aac2020_rencore_Info_any(
        CHR*  str_fmt
    ,   void* dat_any   
    )
    { 
        I32 logging_is_on=( 0 - 1234 /**INVALID_VALUE**/ );
        
        #ifdef AAC2020_INCLUDE_SILENCE
        /** Compiled as part of main AAC2020 engine. **/
            
            if( AAC2020_SILENCE.RENCORE <= 0 ){
                logging_is_on=( 1 );
            }else
            if( AAC2020_SILENCE.RENCORE >= 1 ){
                logging_is_on=( 0 );
            }else{
                ERR("[WTF_ARE_YOU_DOING?]");
            };;

            /** @VID_IID[ 0128 ]TIME[ 03:33:33 ]ORIGINAL *** **/
            /** @VID_IID[ 0156 ]TIME[ 02:36:13 ]UPDATED **** **/
            /** Override turns of logging for ALL SYSTEMS.   **/
            if( AAC2020_SILENCE.SILENCE >=( 0+1 ) ){
                logging_is_on=( 0 ); //:EVERYONE_SHUT_UP
            }else
            if( AAC2020_SILENCE.SILENCE <=( 0-1 ) ){
                logging_is_on=( 1 ); //:EVERYBODY_SCREAM
            };;

        #else
        /** Compiled as stand-alone command line utility. **/

            logging_is_on =( 
                AAC2020_RENCORE_STAND_ALONE_ONLY_LOGGING_ON );;

        #endif

        //: 
        if( logging_is_on >= 1 ){
            /** Same Line As Next Printf **/
            printf("[rencore_log]....(   " ); fflush( stdout );
            printf( str_fmt , dat_any      ); fflush( stdout );
            printf(               "   )\n" ); fflush( stdout );
        }else
        if( 0 == logging_is_on ){
            /** do nothing **/
        }else{
            ERR("[YOUR_LOGGING_CONFIG_LOGIC_SUCKS_2021]");
        };;
        
    }

#undef  I32  //:----------------------------------------: 01 ://
#undef  CHR  //:----------------------------------------: 02 ://
#undef  ERR  //:----------------------------------------: 03 ://
//:===========================================:LOG_AFTER_HALT://
//:INFO_PRINT_STRING:========================================://

    /** DELETE ALL OF THIS IF YOU NEVER END UP USING IT **/
    /** when the RENCORE system is finished. ********** **/

//  #define CHR const char
//  #define ERR aac2020_rencore_Halt
//  
//      void
//      aac2020_rencore_Info_str( 
//          CHR* msg_fmt /** Format String **/
//      ,   CHR* msg_inf /** Information String **/
//      )
//      {
//          if( ((CHR*)0) == msg_fmt ){ ERR("[NIL:msg_fmt]"); };
//          if( ((CHR*)0) == msg_inf ){ ERR("[NIL:msg_inf]"); };
//          
//          aac2020_rencore_Info_any(
//                     msg_fmt
//          ,   (void*)msg_inf
//          );;
//      }
//  
//  #undef  CHR
//  #undef  ERR
//:========================================:INFO_PRINT_STRING://
//:INIT_NONE:================================================://
#define U32 uint32_t /** GCC: <stdint.h> **/
        U32 AAC2020_RENCORE_InitNone( U32 u32 ){
            if( u32 ){ }; return( 0x00 );   }
#undef  U32
//:================================================:INIT_NONE://
//:MAIN_SECTION:=============================================://
#define CHR  const char                          //:----: 01 ://
#define U32  uint32_t /** GCC: <stdint.h> **/    //:----: 02 ://
#define I32   int32_t /** GCC: <stdint.h> **/    //:----: 03 ://
#define ERR  aac2020_rencore_Halt                //:----: 04 ://
#define LOG  aac2020_rencore_Info_any            //:----: 05 ://
#define EXT  extern                              //:----: 06 ://
#define FIL  FILE                                //:----: 07 ://

    //:LoadExtensions:---------------------------------------://

        void
        aac2020_rencore_LoadExtensions_ByOrderFound()
        {
            //:   [TODO]   <--- I never go back and look for these
            AAC2020_TODOMAN_Vital("[aac2020_rencore_LoadExtensions_ByOrderFound]");
        }

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

        void
        aac2020_rencore_LoadExtensions_UsingList()
        {
    
            AAC2020_TODOMAN_Vital("[aac2020_rencore_LoadExtensions_UsingList]");

        }

    //:---------------------------------------:LoadExtensions://
    
    void
    aac2020_rencore_ExtensionOrderList_Parse(
        FIL* filhand
    )   
    {
        if( ((FIL*)0) == filhand ){
            ERR("[NULL:filhand]");
        };;

        /** Set to 1 if errors found in EXT_ORD.TXT **/
        aac2020_rencore_ext_err =( 1 );

        

    }

    void
    aac2020_rencore_parfold_relpath_CTO_abspath(
        CHR*    parfold       //:<--INN[ parent_folder    ]
    ,   CHR*    relpath       //:<--INN[ relative_path    ]

    ,   I32    *BYREF_f_found //:<--OUTPUT_PARAM[ f_found ]
    ,   CHR*   *BYREF_abspath //:<--OUTPUT_PARAM[ abspath ]
    ){
        //:error_check_inputs:-------------------------------://

            if( ((CHR* )0) == parfold       ){
                ERR("[NULL:parfold(parent_folder)]");
            };;
            if( ((CHR* )0) == relpath       ){
                ERR("[NULL:relpath(relative_path)]");
            };;
            if( ((I32* )0) == BYREF_f_found ){
                ERR("[REFS_CAN_NEVER_BE_NULL:BYREF_f_found]");
            };;
            if( ((CHR**)0) == BYREF_abspath ){
                ERR("[REFS_CAN_NEVER_BE_NULL:BYREF_abspath]");
            };;

            /** This is to prevent accidential memory **/
            /** overwrites .                          **/

            if( (*BYREF_f_found) != 0 ){
                ERR("[OUT_PARAM_MUST_BE_ZEROED_OUT]");
            };;
            if( (*BYREF_abspath) !=((CHR*)0) ){
                ERR("[OUT_PARAM_MUST_BE_______NULL]");
            };;

        //:-------------------------------:error_check_inputs://
        //:CORE_LOGIC:=======================================://

            AAC2020_TODOMAN_Vital("[TODO_FINSIH_THIS_2021_04_25_339AM]");

        //:=======================================:CORE_LOGIC://
    }
        
    FIL*
    aac2020_rencore_OpenTextFileUsing_abspath(
        CHR* abspath
    )
    {
        if( ((CHR*)0) == abspath ){ 
            ERR("[NULL_ABSPATH]");
        };;

        AAC2020_TODOMAN_Vital("[safjlsjflsjflaklsfjasdl]");

        return( ((FIL*)0) );
    }

    CHR*
    aac2020_rencore_FindParentFolderOf(
        CHR* chifold //:<--[ child_folder ]
    )
    {
        if( ((CHR*)0) == chifold ){
            ERR("[NULL:chifold]");
        };;

        AAC2020_TODOMAN_Vital("[aac2020_rencore_FindParentFolderOf]");

        return( ((CHR*)0) );
    }

    void
    aac2020_rencore_LOAD()
    {

        I32  f_found=(   0   ); //:[ file_found ?          ]
        CHR* abspath=((CHR*)0); //:[ absolute path to file ]
        FIL* filhand=((FIL*)0); //:[ file_handle / fin_han ]

        
        I32 extension_list_was_detected =( 0 );
        I32 problems_with_extension_list=( 0 );

        //:--------------------------------------------------://
        //:Get the parent folder of the project folder.      ://
        //:All extension projects are to be placed next      ://
        //:to the main engine project (AAC2020).             ://
        //:PARENT_FOLDER [-]                                 ://
        //:               |                                  ://
        //:               +---[ AAC2020                 ]    ://
        //:               +---[ AAC2020_EXTCODE_MANDELA ]    ://
        //:               +---[ AAC2020_EXTCODE_SHATTER ]    ://
        //:               +---[ AAC2020_EXT_ORD         ]    ://
        //:--------------------------------------------------://
        CHR* parfold=(
            aac2020_rencore_FindParentFolderOf(
                "AAC2020" //:<--Project_folder
            ));;
            
        //:[ aac2020_rencore_FromParent_FindFile / REL_CTO_FIL ]
        aac2020_rencore_parfold_relpath_CTO_abspath(    
            parfold //:<----------------------:parent_folder
        ,   "./AAC2020_EXT_ORD/EXT_ORD.TXT" //:relpath
        ,   &(f_found)
        ,   &(abspath)
        );;

        if( ((CHR*)0) ==  abspath && (f_found <= 0) ){ //:NONE!

            extension_list_was_detected=( 0 );
        }else
        if( ((CHR*)0) !=  abspath && (f_found >= 1) ){ //:FOUND!
            extension_list_was_detected=( 1 );

            filhand=(
            aac2020_rencore_OpenTextFileUsing_abspath(
                                              abspath ));;
            if( ((FIL*)0)==filhand){
                    problems_with_extension_list=( 1 );
            }else{
                aac2020_rencore_ExtensionOrderList_Parse(
                                                 filhand );;
                if( aac2020_rencore_ext_err > 0 ){
                    problems_with_extension_list=( 1 );
                };;
            };;

        }else{
            /** aac2020_rencore_parfold_relpath_CTO_filhand  **/
            /** returned values that don't agree with        **/
            /** each other.                                  **/
            ERR("[MIS_MATCHING_FLAGS_FROM:REL_CTO_FIL]");
        };;

        if( extension_list_was_detected  <= 0 ){
        if( problems_with_extension_list >= 1 ){
            /**@VID_IID[ 0273 ]TIME[ 02:18:00 ] **/
            ERR("[CANT_HAVE_PROBLEMS_WITH_AN_UNFOUND_LIST]");
        };;};;

        if( problems_with_extension_list >= 1 ){
        /** End up here if:                  **/
        /** 1: Extension list does not exist.**/
        /** 2: Extension list failed to open.**/
        /** 3: Extension list was malformed. **/

            aac2020_rencore_ext_noe =( 0 );
        //: aac2020_rencore_ext_cap     ://
        //: aac2020_rencore_ext_arr     ://

            /** Maybe a popup or something to notify user? **/
            LOG("[EXTENSION_LOADING_ABORTED]",0);

        }else
        if( extension_list_was_detected >= 1 ){
            aac2020_rencore_LoadExtensions_UsingList();
        }else{

            /** ************************************** **/
            /** If no extension list is found, we auto **/
            /** detect extensions and load them by the **/
            /** order in which they are found.         **/
            /** This means a deletion of "EXT_ORD.TXT" **/
            /** could lead to __MORE__ extensions being**/
            /** brought in rather than __LESS__        **/
            /** The idea is that "EXT_ORD.TXT" is an   **/
            /** __OPTIONAL__ build system component.   **/
            /** ************************************** **/

            aac2020_rencore_LoadExtensions_ByOrderFound();
        };;
    }

    I32 
    AAC2020_RENCORE_StandAloneMain(
        I32    arg_cou //:<--[ argument_count ]
    ,   char** arg_arr //:<--[ argument_array ]
    )
    {
    LOG("[RENCORE.F._:main:BEG]",0);
        //:ERROR_CHECK_INPUTS:-------------------------------://

            if( arg_cou > 0 ){
            if( ((char**)0) == arg_arr ){
                ERR("[NULL_ARG_ARR_INPUT:RENCORE]");
            }};;

        //:-------------------------------:ERROR_CHECK_INPUTS://
        //:LazyUnitTest:-------------------------------------://
        if( aac2020_rencore_UTC_ror <= 0 ){
        if( arg_cou                 <= 1 ){

            /** Why are we only running unit tests if  ***** **/
            /** no user supplied arguments (arg_cou<=1) are  **/
            /** supplied? @VID_IID[ 0272 ]TIME[ 03:09:00 ]   **/

            /** Only call unit test if test has not been *** **/
            /** ran before. ror == "ran or running"      *** **/

            EXT U32 AAC2020_RENCORE_UnitTest( U32  );
                    AAC2020_RENCORE_UnitTest( 0x00 );

            printf("[LAZY_UNIT_TEST_HAS_RAN]\n");
            fflush(stdout);

        };;};;
        //:-------------------------------------:LazyUnitTest://
        //:Declare_Vars:-------------------------------------://



        //:-------------------------------------:Declare_Vars://
        //:CORE_LOGIC:=======================================://

            


        //:=======================================:CORE_LOGIC://

    LOG("[RENCORE.F._:main:END]",0);
    return( 0 );
    }

#undef  CHR  //:----------------------------------------: 01 ://
#undef  U32  //:----------------------------------------: 02 ://
#undef  I32  //:----------------------------------------: 03 ://
#undef  ERR  //:----------------------------------------: 04 ://
#undef  LOG  //:----------------------------------------: 05 ://
#undef  EXT  //:----------------------------------------: 06 ://
#undef  FIL  //:----------------------------------------: 07 ://
//:=============================================:MAIN_SECTION://
//:UNIT_TEST_SECTION:========================================://
#define I32  int32_t  /** GCC: <stdint.h>     **/     //: 01 ://
#define U32 uint32_t  /** GCC: <stdint.h>     **/     //: 02 ://
#define U08  uint8_t  /** GCC: <stdint.h>     **/     //: 03 ://
#define ERR aac2020_rencore_Halt                      //: 04 ://
#define E_U extern U32                                //: 05 ://
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    U32
    AAC2020_RENCORE_UnitTest( U32 u32_var )
    {
        if( aac2020_rencore_UTC_ror >= 1 ){
            /** Ignore Call. **/
            printf("[IGNORED:AAC2020_RENCORE_UnitTest]\n");
            fflush(stdout);
        }else{
            aac2020_rencore_UTC_ror =( 1  );

            E_U aac2020_rencore_UnitTest( U32     );
                aac2020_rencore_UnitTest( u32_var );
        };;

        return( 0x00 );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://
    U32
    aac2020_rencore_UnitTest( U32 u32 )
    {
        if( u32 ){ /** Reserved_For_Future_Use **/ };

        AAC2020_TODOMAN_Vital("[RENCORE_TESTS]");

        return( 0x00 );
    }
    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

#undef  I32  //:----------------------------------------: 01 ://
#undef  U32  //:----------------------------------------: 02 ://
#undef  U08  //:----------------------------------------: 03 ://
#undef  ERR  //:----------------------------------------: 04 ://
#undef  E_U  //:----------------------------------------: 05 ://
//:========================================:UNIT_TEST_SECTION://
