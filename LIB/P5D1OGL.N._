//[||||||||||||||||||||||||||||||||||||||||||||||||||||||||||]//
//[       NAD: Notes And Diagrams                            ]//
//[||||||||||||||||||||||||||||||||||||||||||||||||||||||||||]//
#FUNCTION_SIGNATURES############################################
#FUNCTION_PROTOTYPES############################################

        U32                                      
        AAC2020_P5D1OGL_BitPack_Get(             
            IV2     glo                          
        ,   I32 aus_dex                          
        );;           

        void                                              
        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Put( ///////////
                                                         ///
            //|LOCATION_OF_THE_DATA|||||||||||||||||||||||//
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
                                                         ///
            //|VALUES_OF_THE_DATA|||||||||||||||||||||||||//
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///
        ,   U32 cuvbits_cuv_b16  //:STORES_8_TILE_VALUES ///
                                                         ///
        );; ////////////////////////////////////////////////

        U32
        AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get( ///////////
            I32 cuv_i_x_000_255  //:AKA[ cuvipix.i_x ]   ///
        ,   I32 cuv_i_y_000_255  //:AKA[ cuvipix.i_y ]   ///
        ,   I32 lay_dex_000_002  //:AKA[ lay_dex ]       ///
        ,   I32 aus_dex_000_015  //:AKA[ aus_dex ]       ///   
        );; ////////////////////////////////////////////////                       

############################################FUNCTION_PROTOTYPES#
############################################FUNCTION_SIGNATURES#
#GLOCPIX_VS_CUVIPIX#############################################

    GLOCPIX ==[ global_texture_coord_x
              , global_texture_coord_y ]

    CUVIPIX ==[ cuv_i_x (canvas_user_view.i_x )
              , cuv_i_y (canvas_user_view.i_y ) ]

    Both are GLOBAL coordinates. But GLOCPIX is a global
    coord over the DATA VIEW while CUVIPIX is a global
    coord over the USER VIEW.

        DATA_VIEW: The texture packing the tilemap information.
        USER_VIEW: Spatially laid out by how it is actually
                   [rendered/seen] by the [artist/Josh].

        DATA_VIEW == SEE[#PIXEL_DATA_PARTITIONS# in PAINT5D.D._]
        USER_VIEW == SEE[#WHAT_THE_ARTIST_SEES#  in PAINT5D.D._]

#############################################GLOCPIX_VS_CUVIPIX#
#CUVBITS_INTERFACE##############################################

    If we sample a single fragment coordinate, how 
    many bits of data do we need?

        We have 3 layers and we have 2 bit color.
        We also have tile exponents 0 to 7 ( 8 total ).

        48bits == ( 2 bit )*( 3 layers )*( 8 tile sizes )
        16bits == ( 2 bit )      *       ( 8 tile sizes )

    U32 /** cuvbits:CanvasUserViewBITS **/
    AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get(
        cuv_i_x_000_255 /** Canvas_User_View      **/
    ,   cuv_i_y_000_255 /** Canvas_User_View      **/
    ,   lay_dex_000_002 /** Layer Index To Sample **/
    );;
    
##############################################CUVBITS_INTERFACE#
//:CTRL_F_HELP:==============================================://
/** ******************************************************** ***

    WRONG[ sqa_ash  ]CORRECT[ squ_ash ]
    WRONG[ cuvibits ]CORRECT[ cuvbits ]

    WRONG[ til_sip  ]CORRECT[ til_peb ]

    WRONG[ qua_i_x  ]CORRECT[ qua_c_x ]( Cell , not integer )
    WRONG[ qua_i_y  ]CORRECT[ qua_c_y ]( Cell , not integer )

*** ******************************************************** **/
//:==============================================:CTRL_F_HELP://
//:VARIABLE_EXPLANATIONS:====================================://
/** ******************************************************** ***

    cuvbits :

        All tile values for all    
        tile sizes that are on the   
        current pixel. Bitpacked     
        into a 32 bit unsigned int.  

    til_peb :

        Tile Span Measured In Pebbles.
        PEBBLE: The size of the SMALLEST tile.
                (A tile with til_exp == 0 )



*** ******************************************************** **/
//:====================================:VARIABLE_EXPLANATIONS://