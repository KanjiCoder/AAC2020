
//:----------------------------------------------------------://
//:     123_123                                              ://
//:     GINAWIN.F: GraphicsINit_And_WINdow.DATA              ://
//:     1234567                                              ://
//:                                                          ://
//:             I don't want to re-write all code from       ://
//:             scratch so we are taking "GLEB_SWIN" and     ://
//:             editing it.                                  ://
//:                                                          ://
//:     GINAWIN only handles:                                ://
//:                                                          ://
//:             1. Creation of OpenGL Context                ://
//:             2. Creation of a NATVIE Win32 Window         ://
//:                                                          ://
//:             Any other graphics operations belong         ://
//:             in a different file.                         ://
//:----------------------------------------------------------://
//:CONFIGURATION:============================================://

    int AAC2020_GINAWIN_show_okay_message = 1;


    //:DEBUGGING_VERY_SPECIFIC_THINGS:-----------------------://

    //:BUGHUNT_001: The winow only shows up in multi-threaded
    //:             mode. I have used BUGHUNT_001 to check
    //:             the following:
    //:
    //:     1: WINDOW_REGISTRATION
    //:     2: WINDOW_LOOP_CODE
    //:
    #define AAC2020_GINAWIN_BUGHUNT_001 ( 0 )

    //:-----------------------:DEBUGGING_VERY_SPECIFIC_THINGS://

//:============================================:CONFIGURATION://
//:FLAGS:====================================================://

    int aac2020_graquad_inited =( 0 );

//:====================================================:FLAGS://
//:CONCEPTUAL_LIBRARY_MEMBER_VARIABLES:======================://
    
    //: AAC2020_GINAWIN_OnWindowResize_HAS
    //: AAC2020_GINAWIN_OnWindowResize_PFN

    //: AAC2020_GINAWIN_SimpleKeyHandler_HAS
    //: AAC2020_GINAWIN_SimpleKeyHandler_PFN

    //: AAC2020_GINAWIN_ComplexKeyHandler_HAS
    //: AAC2020_GINAWIN_ComplexKeyHandler_PFN

    //: AAC2020_GINAWIN_OnMouseMove_HAS
    //: AAC2020_GINAWIN_OnMouseMove_PFN

    #define U32 uint32_t /** GCC: <stdint.h> **/
    #define U64 uint64_t /** GCC: <stdint.h> **/
    #define HAS   int  
    #define VOD  ((void*)0)

        typedef  
            U32 
            (*AAC2020_GINAWIN_PFN_2020_11_03)
            ( U32 );
        typedef  
            U32
            (*AAC2020_GINAWIN_PFN_2020_11_04_SIMPLEKEY)
            ( signed char );
        typedef  
            U32
            (*AAC2020_GINAWIN_PFN_2020_11_04_COMPLEXKEY)
            ( U64 );
        typedef
            U32
            (*AAC2020_GINAWIN_PFN_2020_11_06_ONMOUSEMOVE)
            ( 
            /**/    U32 low_word_is_x_axis  
            ,       U32 hig_word_is_y_axis  
            ,       U32 low_word_is_x_axis_drag_start  
            ,       U32 hig_word_is_y_axis_drag_end

            );

    #define P_1   AAC2020_GINAWIN_PFN_2020_11_03
    #define P_2   AAC2020_GINAWIN_PFN_2020_11_04_SIMPLEKEY
    #define P_3   AAC2020_GINAWIN_PFN_2020_11_04_COMPLEXKEY
    #define P_4   AAC2020_GINAWIN_PFN_2020_11_06_ONMOUSEMOVE

            HAS  AAC2020_GINAWIN_OnWindowResize_HAS    = 0;
            P_1  AAC2020_GINAWIN_OnWindowResize_PFN    =VOD;
            
            HAS  AAC2020_GINAWIN_SimpleKeyHandler_HAS  = 0;
            P_2  AAC2020_GINAWIN_SimpleKeyHandler_PFN  =VOD;
            
            HAS  AAC2020_GINAWIN_ComplexKeyHandler_HAS = 0;
            P_3  AAC2020_GINAWIN_ComplexKeyHandler_PFN =VOD;

            HAS  AAC2020_GINAWIN_OnMouseMove_HAS       = 0;
            P_4  AAC2020_GINAWIN_OnMouseMove_PFN       =VOD;

    #undef  P_1
    #undef  P_2
    #undef  P_3
    #undef  P_4
            
    #undef  U32
    #undef  U64
    #undef  HAS
    #undef  VOD
             
//:======================:CONCEPTUAL_LIBRARY_MEMBER_VARIABLES://
//:CONSTANTS:================================================://

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

    /** A redundancy. Functions meant to be called only in  **/
    /** single threaded mode will expect this magic number. **/

    /** (734)404-8487... Because why not? **/
    #define AAC2020_GINAWIN_SINGLE_THREADED (  734 )
    #define AAC2020_GINAWIN__MULTI_THREADED (  404 )
    #define AAC2020_GINAWIN__LAST_FOUR_DIGI ( 8487 )

    //: - - - - - - - - - - - - ---- - - - - - - - - - - - - ://

//:================================================:CONSTANTS://
//:FUNCTION_AS_DATA_TREATED_LIKE_MACRO:======================://

    char*
    AAC2020_GINAWIND_MakeIntResourceA( int i ){

        /** THIS FUNCTION TAKEN FROM: V:\VG\03\F.09 **/
        /** Original name: F09_MakeIntResourceA **/

        #define MACRO_16BITS unsigned short
        #define MACRO_64BITS unsigned long long
       
        MACRO_16BITS  wword = (MACRO_16BITS)i    ; //:TRUNCATE
        MACRO_64BITS  qword = (MACRO_64BITS)wword; //:ZERO_EXT 
        char* ret_out=(char*)qword; //://////////////:CAST

        #define T unsigned short     //:TRUNCATE
        #define E unsigned __int64   //:ZERO_EXTEND
        #define C char*              //:CAST

        //: stackoverflow.com/questions/3610565
        char* ret_chk=((C)((E)((T)(i))));

        assert( ret_chk == ret_out );

        return( ret_out );

        #undef  MACRO_16BITS  //////////////////////////////////
        #undef  MACRO_64BITS  //////////////////////////////////
                              //////////////////////////////////
        #undef  C  /////////////////////////////////////////////
        #undef  E  /////////////////////////////////////////////
        #undef  T  /////////////////////////////////////////////
    }//[;]//

//:======================:FUNCTION_AS_DATA_TREATED_LIKE_MACRO://
//:GINAWIN_STRUCTS:==========================================://

    /** You can change the name of a struct just as long as  **/
    /** you have the same underlying data format. Same thing **/
    /** for re-naming the members of the struct as well.     **/
    struct AAC2020_GINAWIN_RECT{
        signed int /** __LONG32 **/ lef  /** left   **/ ;
        signed int /** __LONG32 **/ top  /** top    **/ ;
        signed int /** __LONG32 **/ rig  /** right  **/ ;
        signed int /** __LONG32 **/ bot  /** bottom **/ ;
    };

//:==========================================:GINAWIN_STRUCTS://

//:COPIED_FROM[ VG04 ]:======================================://

    //[  COPIED_FROM:VG04:AND_EDITED:DATE[ 2020_10_24 ]      ]//
    //[  SEE[ VG03.ALL's F09_STRUCT_PIXELFORMATDESCRIPTOR ]  ]//
    //[  docs.microsoft.com/en-us/windows/win32/api/wingdi   ]//
    //[  /ns-wingdi-pixelformatdescriptor                    ]//
    #define B_04 unsigned long  /**DWORD **/  //:////////////://
    #define B_02 unsigned short /** WORD **/  //:////////////://
    #define B_01 unsigned char  /** BYTE **/  //:////////////://
    struct AAC2020_GINAWIN_PIXELFORMATDESCRIPTOR{  
    /**  01  **/    B_02  nSize;             
    /**  02  **/    B_02  nVersion;          
    /**  --  **/                          
    /**  03  **/    B_04  dwFlags;            
    /**  --  **/                          
    /**  04  **/    B_01  iPixelType;        
    /**  05  **/    B_01  cColorBits;        
    /**  06  **/    B_01  cRedBits;          
    /**  07  **/    B_01  cRedShift;         
    /**  08  **/    B_01  cGreenBits;        
    /**  09  **/    B_01  cGreenShift;       
    /**  10  **/    B_01  cBlueBits;         
    /**  11  **/    B_01  cBlueShift;        
    /**  12  **/    B_01  cAlphaBits;        
    /**  13  **/    B_01  cAlphaShift;       
    /**  14  **/    B_01  cAccumBits;        
    /**  15  **/    B_01  cAccumRedBits;     
    /**  16  **/    B_01  cAccumGreenBits;   
    /**  17  **/    B_01  cAccumBlueBits;    
    /**  18  **/    B_01  cAccumAlphaBits;   
    /**  19  **/    B_01  cDepthBits;        
    /**  20  **/    B_01  cStencilBits;      
    /**  21  **/    B_01  cAuxBuffers;       
    /**  22  **/    B_01  iLayerType;        
    /**  23  **/    B_01  bReserved;         
    /**  --  **/                          
    /**  24  **/    B_04  dwLayerMask;        
    /**  25  **/    B_04  dwVisibleMask;      
    /**  26  **/    B_04  dwDamageMask;       
    /**  --  **/
    };//[struct]//
    #undef  B_04 ////////////// /**DWORD **/  //:////////////://
    #undef  B_02 ////////////// /** WORD **/  //:////////////://
    #undef  B_01 ////////////// /** BYTE **/  //:////////////://

    //:winuser.h
    struct AAC2020_GINAWIN_WIN32POINT{
    //:---:123_123_123_123:- - - - - - - - - - - - - - - - - ://
    //:---:123456789012345:- - - - - - - - - - - - - - - - - ://

        long x;         //:TAKEN_FROM:VGK03.ALL:
        long y;         //:F09_STRUCT_POINT && F09_STRUCT_MSG

    }aac2020_ginawin_win32point_instance={ /** PRIVATE **/
        0
    };

    //:winuser.h
    struct AAC2020_GINAWIN_WINMSG{  //:WINDOW's "MSG" type:

        void*                    hwnd    ;  //: HWND    ://
        unsigned   int           message ;  //: UINT    ://
        unsigned __int64         wParam  ;  //: WPARAM  ://

                 __int64         lParam  ;  //: LPARAM  ://
        unsigned    long         time    ;  //: DWORD   ://

        struct                              //: POINT   ://
        AAC2020_GINAWIN_WIN32POINT          //: POINT   ://
                                 pt      ;  //: POINT   ://

        unsigned    long         lPrivate;  //: DWORD   ://

    }aac2020_ginawin_winmsg_instance={ /** PRIVATE **/
        0
    };

//:======================================:COPIED_FROM[ VG04 ]://






//:Typedefs for MY types:
//:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT://
 
//:¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯://
//:                                            ://
//:  Attempt to do the following with          ://
//:  windows's platform types:                 ://
//:                                            ://
//:  1. Reduce mental indirection.             ://
//:  2. Quickly deduce size of types.          ://
//:                                            ://
//:  Microsoft hungarian notation is kind of   ://
//:  like a hungarian notation that could not  ://
//:  decide if it was apps hungarian or        ://
//:  systems hungarian. Usually I am fan of    ://
//:  APPS hungarian ant NOT a fan of           ://
//:  systems hungarian. But because of all     ://
//:  the indirection with microsoft types,     ://
//:  I will add my own SYSTEMS hungarian       ://
//:  notation to the types. The variable       ://
//:  names can use APPS hungarian if I need    ://
//:  it.                                       ://
//:                                            ://
//:-  --  --  --  --  --  --  --  --  --  --  -://
//:typedef unsigned long DWORD;
//:typedef unsigned int UINT;

//:Prefix at beginning of type:
//:----------------------------------://
//:p_: pointer type                  ://
//:v_: pointer to void.              ://
//:f_: pointer to function.          ://
//:c_: pointer to character          ://
//:s_: pointer to struct (or class)  ://
//:u_: pointer to unsigned integer   ://
//:i_: pointer to signed integer.    ://
//:----------------------------------://

//: i##:
//: i08: integer (signed   ) 08 bits.
//: i16: integer (signed   ) 16 bits.
//: i32: integer (signed   ) 32 bits.
//: i64: integer (signed   ) 64 bits.

//: u##:
//: u08: integer (UN-signed) 08 bits.
//: u16: integer (UN-signed) 16 bits.
//: u32: integer (UN-signed) 32 bits.
//: u64: integer (UN-signed) 64 bits.

//: b##:
//: b08: class, struct, any char type: 08 bits.
//: b16: class, struct, any char type: 16 bits.
//: b32: class, struct, any char type: 32 bits.
//: b64: class, struct, any char type: 64 bits.

//: #B:
//: 1B: 1 BYTES
//: 2B: 2 BYTES
//: 4B: 4 BYTES
//: 8B: 8 BYTES

typedef  int32_t              BOOL_i32_4B   ;
typedef  unsigned  long int  DWORD_u32_4B   ;
typedef  uint32_t             UINT_u32_4B   ;
typedef  unsigned   short     WORD_u16_2B   ;
typedef  unsigned   short     ATOM_u16_2B   ;
typedef             char      CHAR_b08_1B   ;
typedef  unsigned __int64   SIZE_T_u64_8B   ;
typedef           __int64  LRESULT_i64_8B   ;
typedef  unsigned __int64   WPARAM_u64_8B   ;
typedef           __int64   LPARAM_i64_8B   ;
//:

//:pointers to character: (c_)
//:--------------------------------------------://
typedef const    char*    c_LPCSTR_b08_1B   ;  
typedef const wchar_t*   c_LPCWSTR_b16_2B   ;
//:--------------------------------------------://

//:pointers to void: (v_)
//:--------------------------------------------://
typedef              void* v_HANDLE   ;
typedef              void* v_HMODULE  ;   
typedef              void* v_HINSTANCE;
typedef struct  HGDIOBJ__* v_HGDIOBJ  ;
typedef struct     HWND__* v_HWND     ;
typedef struct    HICON__* v_HICON    ;
typedef struct    HMENU__* v_HMENU    ;
typedef struct   HBRUSH__* v_HBRUSH   ;
//:Not a mistake. windef.h says:
//:typedef HICON HCURSOR;
typedef struct HICON__* v_HCURSOR;
typedef           void* v_LPVOID;
//:--------------------------------------------://

 
//:UGLY_VARIABLE_NAMES_COULD_USE_NORMILIZATION:--------------://

    //:COPIED_FROM[ wtypes.h ]:------------------------------://
    struct AAC2020_GINAWIN_tagMSG {
        void*                     hwnd;  /** HWND   **/
        unsigned   int         message;  /** UINT   **/
        unsigned __int64        wParam;  /** WPARAM **/
                 __int64        lParam;  /** LPARAM **/
        unsigned  long            time;  /** DWORD  **/

        struct
        AAC2020_GINAWIN_WIN32POINT  pt;  /** POINT  **/
    };
    //:------------------------------:COPIED_FROM[ wtypes.h ]://
    //:ONE_IS_A_POINTER_THE_OTHER_IS_NOT:--------------------://

    typedef struct AAC2020_GINAWIN_tagMSG * 
                                  AAC2020_GINAWIN_LPMSG    ;
    typedef struct AAC2020_GINAWIN_tagMSG           MSG_48B;

    //:--------------------:ONE_IS_A_POINTER_THE_OTHER_IS_NOT://

//:--------------:UGLY_VARIABLE_NAMES_COULD_USE_NORMILIZATION://

typedef 
    struct   _SECURITY_ATTRIBUTES  
    *s_LPSECURITY_ATTRIBUTES;

    //: DATE[ 2020_10_27 ]
    //: typedef  struct tagRECT*  s_RECT;
    //: REFACTOR: s_RECT --> AAC2020_GINAWIN_RECT
    typedef 
        struct AAC2020_GINAWIN_RECT*
        s_RECT /** s_RECT IS A POINTER! **/ ;
    

//: You cannot use void* as a generic function
//: pointer so windows has "FARPROC".
//: We point to intptr_t, a signed integer
//: that is large enough to hold a pointer.
typedef intptr_t (__stdcall *f_FARPROC) ( void );

typedef 
    LRESULT_i64_8B
    (__stdcall *f_WNDPROC)(
        v_HWND
    ,   UINT_u32_4B
    ,   WPARAM_u64_8B
    ,   LPARAM_i64_8B
    );

//: This struct should be a byte-for-byte
//: re-creation of the windows
//: WNDCLASSEXW struct. On my 64bit
//: system, sizeof(WNDCLASSEXW) is
//: 80 bytes.
//: I've decided NOT to support 32bit.
typedef struct aac2020_ginawin_tagWNDCLASSEXW {
        UINT_u32_4B  cbSize       ;
        UINT_u32_4B  style        ;
          f_WNDPROC  lpfnWndProc  ;
                int  cbClsExtra   ;
                int  cbWndExtra   ;
        v_HINSTANCE  hInstance    ;
            v_HICON  hIcon        ;
          v_HCURSOR  hCursor      ;
           v_HBRUSH  hbrBackground;
   c_LPCWSTR_b16_2B  lpszMenuName ;
   c_LPCWSTR_b16_2B  lpszClassName;
            v_HICON  hIconSm      ;
} aac2020_ginawin_WNDCLASSEXW;

//:SIZEOF_WINDOWS_PTR_TYPES:---------------------------------://
//:                                                          ://
//:     Windows Coding Conventions Say,                      ://
//:     The following are always the size of                 ://
//:     a pointer. 32bit on 32 bit windows.                  ://
//:     64bit on 64bit windows.                              ://
//:     DWORD_PTR                                            ://
//:     INT_PTR                                              ://
//:     LONG_PTR                                             ://
//:     ULONG_PTR                                            ://
//:     UINT_PTR                                             ://
//:                                                          ://
//:     So the original hungarian notation was               ://
//:     apps hungarian?                                      ://
//:     BEG:QUOTE:                                           ://
//:     In its original form, Hungarian notation             ://
//:     gives semantic information about a variable          ://
//:     END:QUOTE:                                           ://
//:                                                          ://
//:---------------------------------:SIZEOF_WINDOWS_PTR_TYPES://




//:¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯://
//: Generic function pointer for library:      ://
//:                                            ://
//:     AAC2020_GINAWIN                              ://
//:     (Sub Library Of "GLEB")                ://
//:     (The Window Wrangling Part)            ://
//:                                            ://
//: Used for strict compilation in C99 when    ://
//: casting result of "GetProcAddress"         ://
//: The "C Language" only guarantees           ://
//:                                            ://
//:     DATA pointers                          ://
//:                                            ://
//: can be safely casted back and              ://
//: forth between (void*) without change.      ://
//: This contract is NOT the case for          ://
//:                                            ://
//:     FUNCTION pointers.                     ://
//:                                            ://
typedef                                     //:://
    void                                    //:://
    (*AAC2020_GINAWIN_FUNC)(                      //:://
        void                                //:://
    );                                      //:://
//:____________________________________________://


//:Pointer to: "aac2020_ginawin_GPA"
typedef
    AAC2020_GINAWIN_FUNC
    (*aac2020_ginawin_pfn_GPA)(
    /**/c_LPCSTR_b08_1B  function_name
    ,         v_HMODULE  dll_containing_function
    ); 



//:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT://

//////////////////////////////////////////////////
//| Create a mini library for the function     |//
//| pointers you need to create your window.   |//
//////////////////////////////////////////////////

typedef
    void
    (*A_D_A_N_Z_aac2020_ginawin_function_pointer)(
    /**/void*  ptr_01
    ,   void*  ptr_02
    ); 


















//[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
//[BEG: function_pointer_typedefs_for_dll_funcs]//
//|DT=="DLL_TYPEDEFS"                  |////[DT]//
//|[A][B]                              |////[DT]//
//:[C]-----------------------------------------://


typedef
    int 
    (*aac2020_ginawin_pfn_ChoosePixelFormat)(

        void*                                   hdc
    ,   
        const 
        struct
        AAC2020_GINAWIN_PIXELFORMATDESCRIPTOR 
                                               *ppfd
    );

typedef                                    
    BOOL_i32_4B                            
    (*aac2020_ginawin_pfn_CloseHandle)(          
        v_HANDLE hObject                   
    );                                     

//:TAKEN_FROM[ VG03.ALL ]ON_DATE[ 2020_10_24 ]
//:And_Re_Worded_To_Be_More_verbose
typedef 
    unsigned long 
    (   __stdcall 
        *AAC2020_GINAWIN_LPTHREAD_START_ROUTINE 
    ) (  
        void* lpThreadParameter  
    );

typedef                                   //[DT]//
    v_HANDLE                              //[DT]//
    (*aac2020_ginawin_pfn_CreateThread)(        //[DT]//
                                          //[DT]//
    /**/s_LPSECURITY_ATTRIBUTES           //[DT]//
        lpThreadAttributes                //[DT]//
                                          //[DT]//
    ,   SIZE_T_u64_8B                     //[DT]//
        dwStackSize                       //[DT]//
                                          //[DT]//
    ,   AAC2020_GINAWIN_LPTHREAD_START_ROUTINE             
        lpStartAddress                    //[DT]//
                                          //[DT]//
    ,   v_HINSTANCE                       //[DT]//
        lpParameter                       //[DT]//
                                          //[DT]//
    ,   DWORD_u32_4B                      //[DT]//
        dwCreationFlags                   //[DT]//
                                          //[DT]//
    ,   unsigned long *  /** LPDWORD **/  //[DT]//
        lpThreadId                        //[DT]//
                                          //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    v_HWND                                //[DT]//
    (*aac2020_ginawin_pfn_CreateWindowExW)(     //[DT]//
                                          //[DT]//
    /**/ DWORD_u32_4B dwExStyle   //|01|////[DT]//
    ,c_LPCWSTR_b16_2B lpClassName //|02|////[DT]//
    ,c_LPCWSTR_b16_2B lpWindowName//|03|////[DT]//
    ,    DWORD_u32_4B dwStyle     //|04|////[DT]//
    ,             int X           //|05|////[DT]//
    ,             int Y           //|06|////[DT]//
    ,             int nWidth      //|07|////[DT]//
    ,             int nHeight     //|08|////[DT]//
    ,          v_HWND hWndParent  //|09|////[DT]//
    ,         v_HMENU hMenu       //|10|////[DT]//
    ,     v_HINSTANCE hInstance   //|11|////[DT]//
    ,     v_HINSTANCE lpParam     //|12|////[DT]//
    );                                    //[DT]//
//:[D]-----------------------------------------://
typedef                                   //[DT]//
    LRESULT_i64_8B                        //[DT]//
    (*aac2020_ginawin_pfn_DefWindowProcW)(      //[DT]//
    /**/          v_HWND  hWnd            //[DT]//
    ,        UINT_u32_4B  Msg             //[DT]//
    ,      WPARAM_u64_8B  wParam          //[DT]//
    ,      LPARAM_i64_8B  lParam          //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    LRESULT_i64_8B                        //[DT]//
    (*aac2020_ginawin_pfn_DispatchMessageW)(    //[DT]//
        const MSG_48B *lpMsg              //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    BOOL_i32_4B                           //[DT]//
    (*aac2020_ginawin_pfn_DestroyWindow)(       //[DT]//
        v_HWND hWnd                       //[DT]//
    );                                    //[DT]//
//:[E][F]                                 //[DT]//
//:[G]-----------------------------------------://
typedef
    BOOL_i32_4B
    (*aac2020_ginawin_pfn_GetClientRect)(
    /**/v_HWND                         hWnd
    ,   struct AAC2020_GINAWIN_RECT* lpRect
    );

typedef                                   //[DT]//
    v_HWND                                //[DT]//
    (*aac2020_ginawin_pfn_GetDesktopWindow)(    //[DT]//
        void                              //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    f_FARPROC                             //[DT]//
    (*aac2020_ginawin_pfn_GetProcAddress)(      //[DT]//
    /**/       v_HMODULE  hModule         //[DT]//
    ,    c_LPCSTR_b08_1B  lpProcName      //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    v_HANDLE                              //[DT]//
    (*aac2020_ginawin_pfn_GetProcessHeap)(      //[DT]//
        void                              //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    v_HGDIOBJ                             //[DT]//
    (*aac2020_ginawin_pfn_GetStockObject)(      //[DT]//
        int                               //[DT]//
    );                                    //[DT]//


typedef
    void* /** HDC : Handleto_Device_Context **/
    (*aac2020_ginawin_pfn_GetWindowDC)(
        void*  hWnd /** HWND:Handleto_Window **/
    );

typedef
    void*  /** HMODULE **/
    (*aac2020_ginawin_pfn_GetModuleHandleW)(
        const unsigned short * /** LPCWSTR **/
        lpModuleName
    );





//:[H]-----------------------------------------://
typedef                                   //[DT]//
    v_HINSTANCE                           //[DT]//
    (*aac2020_ginawin_pfn_HeapAlloc)(           //[DT]//
    /**/        v_HANDLE  hHeap           //[DT]//
    ,       DWORD_u32_4B  dwFlags         //[DT]//
    ,      SIZE_T_u64_8B  dwBytes         //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    BOOL_i32_4B                           //[DT]//
    (*aac2020_ginawin_pfn_HeapFree)(            //[DT]//
    /**/        v_HANDLE  hHeap           //[DT]//
    ,       DWORD_u32_4B  dwFlags         //[DT]//
    ,        v_HINSTANCE  lpMem           //[DT]//
    );                                    //[DT]//
//:[I][J][K]                              //[DT]//
//:[L]-----------------------------------------://
typedef                                   //[DT]//
    v_HCURSOR                             //[DT]//
    (*aac2020_ginawin_pfn_LoadCursorA)(         //[DT]//
    /**/     v_HINSTANCE  hInstance       //[DT]//
    ,    c_LPCSTR_b08_1B  lpCursorName    //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    v_HICON                               //[DT]//
    (*aac2020_ginawin_pfn_LoadIconA)(           //[DT]//
    /**/     v_HINSTANCE  hInstance       //[DT]//
    ,    c_LPCSTR_b08_1B  lpIconName      //[DT]//
    );                                    //[DT]//
//:[M]-----------------------------------------://
typedef                                   //[DT]//
    int                                   //[DT]//
    (*aac2020_ginawin_pfn_MessageBoxW)(         //[DT]//
    /**/          v_HWND  hWnd            //[DT]//
    ,   c_LPCWSTR_b16_2B  lpText          //[DT]//
    ,   c_LPCWSTR_b16_2B  lpCaption       //[DT]//
    ,        UINT_u32_4B  uType           //[DT]//
    );                                    //[DT]//
//:[N][O]                                 //[DT]//
//:[P]-----------------------------------------://
typedef                                   //[DT]//
    BOOL_i32_4B                           //[DT]//
    (*aac2020_ginawin_pfn_PeekMessageW)(        //[DT]//
    /**/  
        AAC2020_GINAWIN_LPMSG  
                    lpMsg          
       
    ,        v_HWND  hWnd                 //[DT]//
    ,   UINT_u32_4B  wMsgFilterMin        //[DT]//
    ,   UINT_u32_4B  wMsgFilterMax        //[DT]//
    ,   UINT_u32_4B  wRemoveMsg           //[DT]//
    );                                    //[DT]//
typedef                                   //[DT]//
    void                                  //[DT]//
    (*aac2020_ginawin_pfn_PostQuitMessage)(     //[DT]//
                int  nExitCode            //[DT]//
    );                                    //[DT]//
//:[Q]                                    //[DT]//
//:[R]-----------------------------------------://
typedef                                   //[DT]//
    ATOM_u16_2B                           //[DT]//
    (*aac2020_ginawin_pfn_RegisterClassExW)(    //[DT]//
        const aac2020_ginawin_WNDCLASSEXW *Arg1 //[DT]//
    );                                    //[DT]//
//:[S]-----------------------------------------://
typedef                                   //[DT]//
    v_HWND                                //[DT]//
    (*aac2020_ginawin_pfn_SetFocus)(            //[DT]//
             v_HWND  hWnd                 //[DT]//
    );                                    //[DT]//
typedef
    int /** BOOL **/ 
    (*aac2020_ginawin_pfn_SetPixelFormat)(
        void*                                  hdc
    ,   
        int                                 format
    ,   
        const 
        struct 
        AAC2020_GINAWIN_PIXELFORMATDESCRIPTOR  
                                             *ppfd
    );
typedef                                   //[DT]//
    BOOL_i32_4B                           //[DT]//
    (*aac2020_ginawin_pfn_ShowWindow)(          //[DT]//
    /**/     v_HWND  hWnd                 //[DT]//
    ,           int  nCmdShow             //[DT]//
    );                                    //[DT]//
typedef
    BOOL_i32_4B
    (*aac2020_ginawin_pfn_SwapBuffers)(
        void*    Arg1
    );
   
//:[T]-----------------------------------------://
typedef                                   //[DT]//
    BOOL_i32_4B                           //[DT]//
    (*aac2020_ginawin_pfn_TranslateMessage)(    //[DT]//
        const MSG_48B *lpMsg              //[DT]//
    );                                    //[DT]//
//:[U]-----------------------------------------://
typedef                                   //[DT]//
    BOOL_i32_4B                           //[DT]//
    (*aac2020_ginawin_pfn_UpdateWindow)(        //[DT]//
        v_HWND hWnd                       //[DT]//
    );                                    //[DT]//
//:[V]                                    //[DT]//
//:[W]-----------------------------------------://
typedef                                   //[DT]//
    DWORD_u32_4B                          //[DT]//
    (*aac2020_ginawin_pfn_WaitForSingleObject)( //[DT]//
    /**/    v_HANDLE  hHandle             //[DT]//
    ,   DWORD_u32_4B  dwMilliseconds      //[DT]//
    );                                    //[DT]//
//:[X][Y][Z]                              //[DT]//
//[END: function_pointer_typedefs_for_dll_funcs]//
//[____________________________________________]//

struct aac2020_ginawin_FUNCTION_POINTERS {
  
    struct AAC2020_GINAWIN_LOADED_DLLS {

        v_HINSTANCE gdi32   ; //[07(g|G)]//
        v_HINSTANCE kernel32; //[11(k|K)]//
        v_HINSTANCE user32  ; //[21(u|U)]//
        
    }DLL;

    //:functions from gdi32.dll
    struct aac2020_ginawin_functions_GDI32{

        struct  aac2020_ginawin_data_GDI32{
            struct aac2020_ginawin_brushes_GDI32{

                int BLACK; //:BLACK_BRUSH

            }BRUSH ;
        }DATA ;

        aac2020_ginawin_pfn_ChoosePixelFormat
                      ChoosePixelFormat;

        aac2020_ginawin_pfn_GetStockObject
                      GetStockObject;

        aac2020_ginawin_pfn_SetPixelFormat
                      SetPixelFormat;

        aac2020_ginawin_pfn_SwapBuffers
                      SwapBuffers;

    }GDI32;

    //:Functions from kernel32.dll
    struct aac2020_ginawin_functions_KERNEL32{

        struct  aac2020_ginawin_data_KERNEL32{

            
            DWORD_u32_4B heap_zero_memory;
            DWORD_u32_4B wait_failed;
            DWORD_u32_4B infinite;
            

        }DATA;

        //:[A][B]
        //:[C]---------------------------------://
        aac2020_ginawin_pfn_CreateThread
                      CreateThread   ;

        aac2020_ginawin_pfn_CloseHandle
                      CloseHandle   ;

        //:[D][E][F]---------------------------://
        //:[G]---------------------------------://

        aac2020_ginawin_pfn_GetModuleHandleW
                      GetModuleHandleW;

        aac2020_ginawin_pfn_GetProcessHeap
                      GetProcessHeap ;
       
        //:[H]---------------------------------://
        aac2020_ginawin_pfn_HeapAlloc 
                      HeapAlloc ;

        aac2020_ginawin_pfn_HeapFree  
                      HeapFree ;

        //:[I][J][K][L][M][N][O][P][Q][R][S][T]://
        //:[U][V]------------------------------://
        //:[W]---------------------------------://
        aac2020_ginawin_pfn_WaitForSingleObject
                      WaitForSingleObject   ;
    
    }KERNEL32;

    //:Functions from user32.dll
    struct aac2020_ginawin_functions_USER32{

        struct  aac2020_ginawin_data_USER32{

            int sw_show;

            UINT_u32_4B       wm_quit;
            uintptr_t     pm_noremove;
            uintptr_t       pm_remove;

            //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
            //| MessageBox Values     |//
            //|- - - - - - - - - - - -|//
            //|                       |//
            //|0x00000030L         //||//
                UINT_u32_4B        //||//
                mb_iconexclamation;//||//
            //|                       |//
            //|0x00000000L         //||//
                UINT_u32_4B        //||//
                mb_ok          ;   //||//
            //|_______________________|//

            UINT_u32_4B cs_owndc;

            UINT_u32_4B ws_ex_topmost;

            //: #define U32 GLEB_DWORD_UINT32;
            //:--------------------------+  
            UINT_u32_4B ws_overlappedwindow; // |  
            UINT_u32_4B      ws_tiledwindow; // |  
            //:-------------------:// // |  
            UINT_u32_4B      ws_caption    ; // |  
            UINT_u32_4B      ws_maximizebox; // |  
            UINT_u32_4B      ws_minimizebox; // |  
            UINT_u32_4B      ws_overlapped ; // |  
            UINT_u32_4B      ws_sysmenu    ; // |  
            UINT_u32_4B      ws_thickframe ; // |  
            //:--------------------------+  
            

            //:"ASC" and "UNI" instead of
            //:"ASCII" and "UNICODE" because
            //: afraid of collision with macros.
            struct 
            aac2020_ginawin_data_ASCII_USER32{

                c_LPCSTR_b08_1B idi_application  ;
                c_LPCSTR_b08_1B idc_arrow        ;

            }A; //:ASCII
            struct 
            aac2020_ginawin_data_UNICODE_USER32{
        
                //[NOT_IMPLEMENTED]//
                int unused;

            }W; //:UNICODE/WIDE
        }DATA;

        //:[A][B]
        //:[C]---------------------------------://
        aac2020_ginawin_pfn_CreateWindowExW
                      CreateWindowExW;
        //:[D]---------------------------------://
        aac2020_ginawin_pfn_DefWindowProcW
                      DefWindowProcW;

        aac2020_ginawin_pfn_DestroyWindow
                      DestroyWindow;

        aac2020_ginawin_pfn_DispatchMessageW
                      DispatchMessageW;
        //:[E][F]
        //:[G]---------------------------------://
        aac2020_ginawin_pfn_GetClientRect
                      GetClientRect;

        aac2020_ginawin_pfn_GetDesktopWindow
                      GetDesktopWindow;

        aac2020_ginawin_pfn_GetWindowDC
                      GetWindowDC;
        //:[H][I][J][K]
        //:[L]---------------------------------://
        aac2020_ginawin_pfn_LoadCursorA
                      LoadCursorA;

        aac2020_ginawin_pfn_LoadIconA
                      LoadIconA;
        //:[M]---------------------------------://
        aac2020_ginawin_pfn_MessageBoxW
                      MessageBoxW;

        //:[N][O]
        //:[P]---------------------------------://
        aac2020_ginawin_pfn_PeekMessageW
                      PeekMessageW;

        aac2020_ginawin_pfn_PostQuitMessage
                      PostQuitMessage;
        //:[Q]
        //:[R]---------------------------------://
        aac2020_ginawin_pfn_RegisterClassExW
                      RegisterClassExW;
        //:[S]---------------------------------://
        aac2020_ginawin_pfn_SetFocus
                      SetFocus;

        aac2020_ginawin_pfn_ShowWindow
                      ShowWindow;
        //:[T]---------------------------------://
        aac2020_ginawin_pfn_TranslateMessage
                      TranslateMessage;
        //:[U]---------------------------------://
        aac2020_ginawin_pfn_UpdateWindow
                      UpdateWindow;
        //:[V][W][X][Y][Z]


        

    }USER32;

}aac2020_ginawin_function_pointers;

     
typedef 
//: struct_aac2020_ginawin_FUNCTION_POINTERS (PREVIOUS_NAME)
    struct aac2020_ginawin_FUNCTION_POINTERS
    aac2020_ginawin_FUNCTION_POINTERS_struct;

    //:PREVIOUS_NAME lines up nicely right here in the code.
    //:But we really should prioritize HIGH LEVEL CONSISTENCY
    //:over low level OCD proclivities. DATE[2020_10_27]


//[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP]//



//[GSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGS]//
//! Sample custom data structure for threads GS!//
//! to use. This is passed by void pointer   GS!//
//! so it can be any data type that can be   GS!//
//! passed using a single void pointer       GS!//
//! (LPVOID).                                GS!//
typedef struct aac2020_ginawin_MyData {         //|GS|//
    int val1;                             //|GS|//
    int val2;                             //|GS|//
}  aac2020_ginawin_MYDATA                       //|GS|//
, *aac2020_ginawin_PMYDATA                      //|GS|//
; //[aac2020_ginawin_MyData]//                  //|GS|//
                                          //|GS|//
//!GS.PW.W32.<SomeWindowVariable>            GS!//
struct 
aac2020_ginawin_global_state{                   //|GS|//
                                          //|GS|//
             int         init_called ;    //|GS|//   
             int       init_finished ;    //|GS|//   
    volatile int      window_created ;    //|GS|//

    /** A: AAC2020_GINAWIN__MULTI_THREADED **/
    /** B: AAC2020_GINAWIN_SINGLE_THREADED **/
    int type_of_threading; /** threading_method **/
     
    
    //: WE ARE NOT GOING TO THREAD THE WINDOW. Multithreading
    //: code results in strange and hard to find bugs. 
    //: keep it simple!
    //:
    //: struct //:#notification_flags#
    //: aac2020_ginawin_thread_safe_notify_flags_x64{
    //: 
    //:     #define T64 LONG64 volatile //:64bit int.
    //:     T64  resize_message_count;
    //:     T64  redraw_message_count;
    //:     #undef  T64
    //: 
    //: }THREAD_SAFE_FLAGS;

    //+ Use a mutex instead to signal to other    +//
    //+ threads when certain events have happened.+//
    //- struct                                    -//
    //- aac2020_ginawin_optional_callback_funcs{        -//
    //-                                           -//
    //-     void(  *render_tick_function)(void);  -//
    //-     int     render_tick_function_has;     -//
    //-                                           -//
    //-     void(  *resize_function)(void);       -//
    //-     int     resize_function_has;          -//
    //-                                           -//
    //-                                           -//
    //- }OPTIONAL_CALLBACKS;                      -//
                                          
                                          //|GS|//
    //|"just_closed" because the window      GS|//
    //|thread has not been terminated and    GS|//
    //|no resources have been cleaned        GS|//
    //|up yet.                               GS|//
    volatile int  window_just_closed ;    //|GS|//
                                          //|GS|//
    //!Window Position And Size:             GS!//
    int X  ;                              //|GS|//
    int Y  ;                              //|GS|//
    int WID;                              //|GS|//
    int HIG;                              //|GS|//
                                          //|GS|//
    //!PW:PLATFORM_WINDOW                    GS!//
    struct aac2020_ginawin_PLATFORM_WINDOW{     //|GS|//
                                          //|GS|//
    //!Eventually, windows and linux         GS!//
    //!structs should be wrapped in          GS!//
    //!#ifdef blocks:                        GS!//
    //!(This will probably never happen)     GS!//
    //!(I think I'll keep it simple and)     GS!//
    //!(stick to windows only.         )     GS!//
    //!_                                     GS!//
    //! |                                    GS!//
        struct aac2020_ginawin_PW_WINDOWS{       
                                           
            struct 
            AAC2020_GINAWIN_PIXELFORMATDESCRIPTOR          
                            pixel_format_descriptor;       
                                           
           void*  handle_to_window      ; //:HWND  
           void*  window_device_context ; //:HDC
                                           
    //!This thread only handles window       GS!//
    //!display and window input. We do       GS!//
    //!this so we can keep tutorial code     GS!//
    //!written in a linear way even after    GS!//
    //!the window is created.                GS!//
    //!                                      GS!//
    //!If window was on same thread as       GS!//
    //!tutorial, we would have to juggle     GS!//
    //!calling the window update loop        GS!//
    //!code while at the same time           GS!//
    //!calling tutorial functions.           GS!//
    //!____                                  GS!//
    //!    |                                 GS!//
            v_HANDLE                      //|GS|//
            platform_window_thread;       //|GS|//
                                          //|GS|//
    //!Thread is closed using the HANDLE.    GS!//
    //!So not sure what the point of         GS!//
    //!the thread_id is.                     GS!//
    //!                                      GS!//
    //!StackOverflow:                        GS!//
    //!Under Windows, the thread handle      GS!//
    //!is different from the thread ID,      GS!//
    //!in the same way that a file handle    GS!//
    //!is different from a file name.        GS!//
    //!____                                  GS!//
    //!    |                                 GS!//
            long unsigned int             //|GS|//
            thread_id;                    //|GS|//
                                          //|GS|//
    //!custom data object that can be        GS!//
    //!passed to the thread creation         GS!//
    //!function.                             GS!//
    //!____                                  GS!//
    //!    |                                 GS!//
            aac2020_ginawin_PMYDATA             //|GS|//
            custom_data;                  //|GS|//
                                          //|GS|//
        }W32;                             //|GS|//
        struct aac2020_ginawin_PW_LINUX{        //|GS|//
                                          //|GS|//
            //!It's a nice thought,          GS!//
            //!But I'll probably never       GS!//
            //!make this code flexible       GS!//
            //!enough to also compile        GS!//
            //!on linux.                     GS!//
            int unused;                   //|GS|//
                                          //|GS|//
        }LIN;                             //|GS|//
                                          //|GS|//
    }PW;                                  //|GS|//
                                          //|GS|//
    //| StructAdded[DATE[2019_06_18]]       |GS|//
    //| AAC2020_GINAWIN.GetClient.X(   void );    |GS|//
    //| AAC2020_GINAWIN.GetClient.Y(   void );    |GS|//
    //| AAC2020_GINAWIN.GetClient.WID( void );    |GS|//
    //| AAC2020_GINAWIN.GetClient.HIG( void );    |GS|//
    struct AAC2020_GINAWIN_GetClient{

        int (*  X)( void );
        int (*  Y)( void );
        int (*WID)( void );
        int (*HIG)( void );

    }GetClient;


}AAC2020_GINAWIN={0}; 
             
typedef                                   //|GS|//
    struct aac2020_ginawin_global_state         //|GS|//
    struct_aac2020_ginawin_global_state;        //|GS|//
                                          //|GS|//


