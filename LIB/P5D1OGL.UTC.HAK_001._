//[||||||||||||||||||||||||||||||||||||||||||||||||||||||||||]//
//[                                                          ]//
//[  @VID_IID[ 0103 ]TIME[ 02:07:50 ]                        ]//
//[                                                          ]//
//[  We put this code into it's own include file because it  ]//
//[  was getting way too complex and was hard to follow and  ]//
//[  needed to be isolated in order to properly comprehend   ]//
//[  and edit it.                                            ]//
//[                                                          ]//
//[  Because this is included code. Be VERY CAREFUL if you   ]//
//[  edit this. Do __NOT__ edit this code because of some    ]//
//[  type of trivial asthetic only refactoring.              ]//
//[                                                          ]//
//[  Do not replace all the __BLUE__BOLTS__ in your car      ]//
//[  with __RED__BOLTS__ ... There is no such thing as       ]//
//[  a __TRIVIAL__ refactor.                                 ]//
//[                                                          ]//
//[||||||||||||||||||||||||||||||||||||||||||||||||||||||||||]//

//://////////////////////////////////////////////////////////://
//:                                                          ://
//: BELOW: CUT_AND_PASTED_FROM:                              ://
//:        aac2020_P5D1OGL_utc_PAINT5D_cuvipix_CTO_cuvbits   ://
//:                                                          ://
//://////////////////////////////////////////////////////////://

        //:DECLARE_ALL_VARS_EXCEPT_TABLES:-------------------://

            /** [ITERATOR/LOOP] VARS **/

            I32 t_i     ; //: tes_dex / test index           ://
            I32 mti     ; //: Max___Test___Index             ://
            I32 dex     ; //: Current Index Of Whatever.     ://
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            //| t_e     ; //: til_exp / tile_exponent        |//
            //| lay     ; //: til_lay / tile_layer(enum/dex) |//
            I32 t_q     ; //: til_qua / tile_quadrant        ://
            I32 a_d     ; //: aus_dex / Auset_inDex          ://

            /** Tile Coords. Always [ 0,0 ] for now. ........**/

            I32 t_x     ; //: loc_t_x : local_tile_x  .......://
            I32 t_y     ; //: loc_t_y : local_tile_y  .......://

            /** Test array unpacking calculation vars. ......**/

            I32 bas_tes ; /** BASe_address: TESt #           **/
            I32 bas_tv3 ; /** BASe_address: tile_vals(three) **/
            I32 dexodat ; /** inDEX_Of_DATa( data point )    **/
            U08 put_t_v ; /** PUT_tile_value,TileValueToPut  **/

            /** Canvas_User_View_Pixel (Pixel Location) .....**/

            CUVIPIX cuvipix;

            /** Expected and [ gotten / actual ] outputs. ...**/
            /** cuvbits: Canvas_User_View___BITS ............**/
            /**                                              **/
            /** @VID_IID[ 0098 ]TIME[ 04:05:10 ]             **/
            /** cal_cuvbits: EXPLAINED. .....................**/

            U32 exp_cuvbits   ; /** Expected: cuvbits .......**/
            U32 cal_cuvbits[3]; /** exp_cuvbits:CALCULATED...**/
            U32 got_cuvbits   ; /** Gotten  : cuvbits .......**/

            /** @VID_IID[ 0099 ]TIME[ 02:59:30 ]             **/
            /** Calculate all expected clusters of 16 bits   **/
            /** ahead of time from the test data array.      **/
            U32* arr_cuvbits_003=((U32*)0);
            U32  cur_cuvbits_003=( 0x00  );
            I32  m_i_cuvbits_003=(( TAB_OUT_WID*NUM_TESTS)-1);

        //:-------------------:DECLARE_ALL_VARS_EXCEPT_TABLES://
        //:generated_table_of_expected_outputs:--------------://
        //:calculated_expected_outputs:----------------------://
        /** ************************************************ ***
        @VID_IID[ 0099 ]TIME[ 03:02:02 ]
        Expected output values for every single test. But
        instead of hard coded in the[ tab_utc_out ]table they
        are derived from the input test data table
        [ tab_utc_inn ]
        *** ************************************************ **/

            /** ******************************************** **/
            /** arr_cuvbits_003 ==                  ******** **/
            /** generated_table_of_expected_outputs ******** **/
            /** ******************************************** **/

            assert( sizeof( U32 )                == 4 ); 
            assert( sizeof( arr_cuvbits_003[0] ) == 4 );
            arr_cuvbits_003=calloc( 
                ( TAB_OUT_WID*NUM_TESTS ) //:Num_Elements

                /** @VID_IID[ 0103 ]TIME[ 01:35:30 ] **/
                /** Memory Stomp Found.              **/
                /** We don't know how to calloc.     **/
            ,       sizeof( U32 ) //:<--SizeOfEachElement
            );;

            mti=( NUM_TESTS - 1 );

            for( t_i = 0 ; t_i <= mti ; t_i ++ ){
            for( lay = 0 ; lay <=(3-1); lay ++ ){

                cur_cuvbits_003=( 0x00 );

                /** Tile Eponent Loop. **/
                for( t_e = 0 ; t_e <=(8-1) ; t_e ++ ){

                    cur_cuvbits_003=(
                    cur_cuvbits_003
                        | //:<-- Smash Together With Or ( | )::/
                        (
                            tab_utc_inn[
                                0
                                /** Base_Index_For_Block **/
                                +  ( t_i * TAB_INN_WID )

                                /** ************************ ***
                                @VID_IID[ 0099 ]T[ 03:49:42]
                                Initial Offset For Layer  
                                Column in the data.       
                                *** ************************ **/
                                +  ( lay * 1 )

                                /** Point to next value in ****/
                                /** current column.        ****/
                                +  ( t_e * 3 )
                            ]
                            <<( t_e * 2 )
                        )
                    );;

                };;//:NEXT[ t_e / til_exp ](TileSizeExponent)://

                dex =(  ( t_i * TAB_OUT_WID ) + lay );
                assert( dex >=0 && dex <= m_i_cuvbits_003 );
                arr_cuvbits_003[ dex ]=(  cur_cuvbits_003 );
                
            };;};;

        //:----------------------:calculated_expected_outputs://
        //:--------------:generated_table_of_expected_outputs://
        //:Cross_Check_Expected_Outputs:---------------------://
        /** ************************************************ ***
        @VID_IID[ 0099 ]TIME[ 03:27:30 ]
        Cross check hard coded expected outputs ( tab_utc_out )
        against the generated table of expected outputs
        ( arr_cuvbits_003 )
        *** ************************************************ **/
        #define DEX_MAX (( TAB_OUT_WID * NUM_TESTS ) - 1 )  
        #define BPRINTF aac2020_paint5d_BinaryPrintf
        LOG("[BEG:Cross_Check_Expected_Outputs:BEG]\n",0);

            mti=( NUM_TESTS - 1 );
            for(    t_i = 0  ;  t_i <= mti ; t_i ++ ){
            assert( t_i >= 0 && t_i <= (NUM_TESTS - 1 ) );

                bas_tes = ( t_i * TAB_OUT_WID );
                
                for(    lay = 0 ;  lay <= (3-1) ; lay++ ){
                assert( lay >=0 && lay <= 2 );
                    
                    dex = ( bas_tes + lay );
                    assert( dex <= DEX_MAX );

                    if(     tab_utc_out[ dex ]
                    !=  arr_cuvbits_003[ dex ]
                    ){
                        U32 h_c=(     tab_utc_out[ dex ] );
                        U32 gen=( arr_cuvbits_003[ dex ] );

                        printf("\n\n");

                        printf("[test__index:t_i]:%d\n", t_i );
                        printf("[layer_index:lay]:%d\n", lay );
                        printf("[data__index:dex]:%d\n", dex );

                        printf("\n\n");

                        /** @VID_IID[099]TIME[03:37:00 ]     **/
                        /** Inspect the bits of non-matching **/
                        /** values.                          **/
                        BPRINTF("[hard_coded:h_c]",    h_c);
                        BPRINTF("[_generated:gen]",    gen);

                        printf("\n\n");

                        /** @VID_IID[ 0099 ]TIME[03:23:42 ]  **/
                        ERR("[BAD_GENERATED_EXPECTED_VALUES]");

                        
                    };;

                };;
            };;
    
        LOG("[END:Cross_Check_Expected_Outputs:END]\n",0);
        #undef  DEX_MAX
        #undef  BPRINTF
        //:---------------------:Cross_Check_Expected_Outputs://
        //:SIMPLE_PUT_GET_TEST:------------------------------://
        /** Loop through all tests, but only use     **/
        /** auset zero. Immediately check values     **/
        /** after setting.                           **/
        mti=( NUM_TESTS - 1 );

        //:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT://
        for( t_i = 0 ; t_i <= mti ; t_i ++ ){
        //:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT://

            /** @VID_IID[ 0098 ]TIME[ 04:26:42 ] **/
            cal_cuvbits[ 0 ]=( 0x00 ); //:layer #0 (l_00)
            cal_cuvbits[ 1 ]=( 0x00 ); //:layer #1 (l_01)
            cal_cuvbits[ 2 ]=( 0x00 ); //:layer #2 (l_02)

            for( lay = 0 ; lay <=(3-1); lay ++ ){
            for( t_e = 0 ; t_e <=(8-1); t_e ++ ){

                bas_tes = ( t_i * TAB_INN_WID     );
                bas_tv3 = ( bas_tes + ( t_e * 3 ) );  
                dexodat = ( bas_tv3 +         lay );  
                assert( dexodat <=
                        ((TAB_INN_WID * NUM_TESTS)-1) );;
                put_t_v = tab_utc_inn[ dexodat ];
                assert( put_t_v <= 3 /**BIN_011**/ );
                
                //:calculate:cal_cuvbits:--------------------://

                    assert( lay >= 0 && lay <= (3-1) );

                    cal_cuvbits[ lay ] =(
                    cal_cuvbits[ lay ]
                       |
                    (
                        put_t_v <<( t_e * 2 )
                    ));;

                //:--------------------:calculate:cal_cuvbits://
                
                for( t_q = 0 ; t_q <=( 4-1) ; t_q ++ ){
                for( a_d = 0 ; a_d <=(16-1) ; a_d ++ ){

                    /** ****************************************  
                    @VID_IID[ 0097 ]TIME[ 07:36:50 ]          
                    [0,0] is the ONLY local coordinate    
                    that is valid for ALL possible values of      
                    [ til_exp / t_e ]( Tile(size)Exponent )  
                    *** ************************************ **/
                    t_x =( 0 );  //: t_x === loc_t_x ....... ://            
                    t_y =( 0 );  //: t_y === loc_t_y ....... ://            
                    /** ************************************ **/

                    AAC2020_PAINT5D_Put(
                    /**/(U08)    t_q      //: til_qua / t_q  ://
                    ,   (U08)    t_e      //: til_exp / t_e  ://
                    ,   (U08)    lay      //: til_lay / t_l  ://
                    ,   (U08)    t_x      //: loc_t_x / t_x  ://
                    ,   (U08)    t_y      //: loc_t_y / t_y  ://
                    ,   (U08)    a_d      //: aus_dex / a_d  ://
                    ,   (U08)    put_t_v  //: til_val / t_v  ://
                    );;

                };;};;//:NEXT[ t_q , a_d       ]
            };;};;    //:NEXT[ t_e , lay       ]

            for( lay = 0 ; lay <=( 3-1) ; lay ++ ){
            for( t_e = 0 ; t_e <=( 8-1) ; t_e ++ ){
            for( t_q = 0 ; t_q <=( 4-1) ; t_q ++ ){
            for( a_d = 0 ; a_d <=(16-1) ; a_d ++ ){

                /** **************************************** **/
                /** @VID_IID[ 0099 ]TIME[ 04:16:30 ]         **/
                /** This assignment was in wrong location.   **/
                //:Get expected output:                      ///
                exp_cuvbits =(                               ///
                    tab_utc_out[ (t_i * TAB_OUT_WID) + lay ] ///
                );;                                          ///
                /** **************************************** **/

                /** @VID_IID[ 0098 ]TIME[ 04:44:00 ] ........**/
                /** As long as all test code in this      ...**/
                /** function uses a [t_x,t_y]==[0,0]      ...**/
                /** the tile exponent (t_e) value should  ...**/
                /** NOT affect the results of the tests.  ...**/
                t_x=( 0 );
                t_y=( 0 );

                /** @VID_IID[0098]TIME[ 04:49:40 ] ......... **/
                /** #_WHY_t_e_DOESNT_CHANGE_TEST_OUTPUTS_#.. **/
                cuvipix=(
                AAC2020_P5D1OGL_painpix_CTO_cuvipix(
                /**/(I32)    t_q     //: [ til_qua | t_q ]   ://
                ,   (I32)    t_e     //: [ til_exp | t_e ]   ://
                ,   (I32)    lay     //: [ til_lay | t_l ]   ://
                ,   (I32)    t_x     //: [ loc_t_x | t_x ]   ://
                ,   (I32)    t_y     //: [ loc_t_y | t_y ]   ://
                ));;

                got_cuvbits=(
                AAC2020_P5D1OGL_cuvipix_CTO_cuvbits_Get(
                /**/cuvipix.cuv_i_x  //: I32 cuv_i_x_000_255 ://
                ,   cuvipix.cuv_i_y  //: I32 cuv_i_y_000_255 ://
                ,   (I32)lay         //: I32 lay_dex_000_002 ://
                ,   (I32)a_d         //: I32 aus_dex_000_015 ://
                ));;

                /** @VID_IID[ 0099 ]TIME[ 04:03:30 ] ........**/
                /** Re-calculate index accessor for  ........**/
                /** arr_cuvbits_003                  ........**/
                dex=(
                    0
                    +  ( t_i * TAB_OUT_WID )
                    +  ( lay )
                );;

                if( 0
                /** @VID_IID[ 0098 ]TIME[ 04:13:30 ] **/
                /** Compare exp_cuvbits against both **/
                /** of these things................. **/
                || (got_cuvbits          != exp_cuvbits) 
                || (cal_cuvbits[lay]     != exp_cuvbits)
                || (arr_cuvbits_003[dex] != exp_cuvbits)
                ){

                    /** ************************************ **/
                    /** @VID_IID[ 0099 ]TIME[ 03:58:50 ] ....**/
                    /** If you get this error message,   ....**/
                    /** the mistake is in your test      ....**/
                    /** runner code, and possibly NOT    ....**/
                    /** the function being tested.       ....**/
                    /** Fix your test runner code first. ....**/
                    /** ************************************ **/
                    if( arr_cuvbits_003[dex] //:All_Generated
                    !=      cal_cuvbits[lay] //:3___Generated
                    ){
                    #define BPRINTF aac2020_paint5d_BinaryPrintf

                        printf("\n\n");

                        printf( "[dex]:%d\n", dex );
                        printf( "[lay]:%d\n", lay );

                        printf("\n\n");

                        BPRINTF("[gen]",arr_cuvbits_003[dex]);
                        BPRINTF("[3_X]",    cal_cuvbits[lay]);

                        printf("\n\n");

                        ERR("[CAL_CUVBITS_IS_WRONG_002]");

                    #undef  BPRINTF
                    };;

                    /** @VID_IID[ 0098 ]TIME[ 05:42:10 ] ... **/
                    /** TCM_BW: TEST_CODE_MIGHT_BE_WRONG     **/
                    /** Because the our calculated expected  **/
                    /** value does not match our hard coded  **/
                    /** expected value. .................... **/
                    if(cal_cuvbits[lay] != exp_cuvbits){
                        printf("\n\n");
                        printf("[************************]\n");
                        printf("[TCM_BW::::::::2021_01_19]\n");
                        printf("[TEST_CODE_PROBABLY_WRONG]\n");
                        printf("[************************]\n");
                        printf("\n\n");
                    };;
    
                    /** Clarify what "lay" is in terms of    **/
                    /** our expected output key.             **/
                    /** @_A_CLUSTER_OF_THREE__IN__P5D_TEST_@ **/
                    printf("[COMPARE_YOUR_BITS_YOU_FOOL!]\n");
                    printf("[EXPECTED_OUTPUT_CLUSTER_DEX]:%d\n"
                            ,lay );;

                    printf("\n");

                    printf("[t_i]:%d\n", t_i );
                    printf("[t_e]:%d\n", t_e );
                    printf("[lay]:%d\n", lay );

                    aac2020_paint5d_BinaryPrintf(
                    "[got_cuvbits]",got_cuvbits  );;

                    aac2020_paint5d_BinaryPrintf(
                    "[exp_cuvbits]",exp_cuvbits  );;

                    /** Generated Expecteds: 3 AT A TIME **/
                    aac2020_paint5d_BinaryPrintf(
                    "[cal_cuvbits[lay]]",cal_cuvbits[lay]  );;

                    /** Generated Expecteds: ALL AT ONCE **/
                    aac2020_paint5d_BinaryPrintf(
                    "[gen_cuvbits[dex]]",arr_cuvbits_003[dex]);;


                    ERR("[V_002_CUVBITS_DONT_MATCH_YEAR_2021]");

                };;

            };;};;};;};; //:NEXT[ lay , t_q , a_d ]

        //:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT://
        };; //:NEXT[ t_i ]
        //:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT://

        //:------------------------------:SIMPLE_PUT_GET_TEST://

        /** ********************************* **/
        /** @VID_IID[ 0103 ]TIME[ 01:47:23 ]  **/
        /** Free allocated memory so you can  **/
        /** re-alloc it for the LITTLE ENDIAN **/
        /** version of all of the test code.  **/
                                          /** **/
            free( arr_cuvbits_003 );      /** **/
                                          /** **/
        /** ********************************* **/

//://////////////////////////////////////////////////////////://
//:                                                          ://
//: ABOVE: CUT_AND_PASTED_FROM:                              ://
//:        aac2020_P5D1OGL_utc_PAINT5D_cuvipix_CTO_cuvbits   ://
//:                                                          ://
//://////////////////////////////////////////////////////////://